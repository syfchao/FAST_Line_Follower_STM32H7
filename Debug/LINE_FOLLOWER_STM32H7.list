
LINE_FOLLOWER_STM32H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000190d4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000838  08019378  08019378  00029378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019bb0  08019bb0  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  08019bb0  08019bb0  00029bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019bb8  08019bb8  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019bb8  08019bb8  00029bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019bbc  08019bbc  00029bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  24000000  08019bc0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00023a74  240001f4  08019db4  000301f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24023c68  08019db4  00033c68  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004475e  00000000  00000000  00030222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006999  00000000  00000000  00074980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ed0  00000000  00000000  0007b320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c58  00000000  00000000  0007d1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f149  00000000  00000000  0007ee48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c5ae  00000000  00000000  000bdf91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017cb8b  00000000  00000000  000ea53f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002670ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000096b8  00000000  00000000  00267120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f4 	.word	0x240001f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801935c 	.word	0x0801935c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f8 	.word	0x240001f8
 80002dc:	0801935c 	.word	0x0801935c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a6 	b.w	8000a6c <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468c      	mov	ip, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f040 8083 	bne.w	80008be <__udivmoddi4+0x116>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d947      	bls.n	800084e <__udivmoddi4+0xa6>
 80007be:	fab2 f282 	clz	r2, r2
 80007c2:	b142      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	f1c2 0020 	rsb	r0, r2, #32
 80007c8:	fa24 f000 	lsr.w	r0, r4, r0
 80007cc:	4091      	lsls	r1, r2
 80007ce:	4097      	lsls	r7, r2
 80007d0:	ea40 0c01 	orr.w	ip, r0, r1
 80007d4:	4094      	lsls	r4, r2
 80007d6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007da:	0c23      	lsrs	r3, r4, #16
 80007dc:	fbbc f6f8 	udiv	r6, ip, r8
 80007e0:	fa1f fe87 	uxth.w	lr, r7
 80007e4:	fb08 c116 	mls	r1, r8, r6, ip
 80007e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ec:	fb06 f10e 	mul.w	r1, r6, lr
 80007f0:	4299      	cmp	r1, r3
 80007f2:	d909      	bls.n	8000808 <__udivmoddi4+0x60>
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fa:	f080 8119 	bcs.w	8000a30 <__udivmoddi4+0x288>
 80007fe:	4299      	cmp	r1, r3
 8000800:	f240 8116 	bls.w	8000a30 <__udivmoddi4+0x288>
 8000804:	3e02      	subs	r6, #2
 8000806:	443b      	add	r3, r7
 8000808:	1a5b      	subs	r3, r3, r1
 800080a:	b2a4      	uxth	r4, r4
 800080c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000810:	fb08 3310 	mls	r3, r8, r0, r3
 8000814:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000818:	fb00 fe0e 	mul.w	lr, r0, lr
 800081c:	45a6      	cmp	lr, r4
 800081e:	d909      	bls.n	8000834 <__udivmoddi4+0x8c>
 8000820:	193c      	adds	r4, r7, r4
 8000822:	f100 33ff 	add.w	r3, r0, #4294967295
 8000826:	f080 8105 	bcs.w	8000a34 <__udivmoddi4+0x28c>
 800082a:	45a6      	cmp	lr, r4
 800082c:	f240 8102 	bls.w	8000a34 <__udivmoddi4+0x28c>
 8000830:	3802      	subs	r0, #2
 8000832:	443c      	add	r4, r7
 8000834:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000838:	eba4 040e 	sub.w	r4, r4, lr
 800083c:	2600      	movs	r6, #0
 800083e:	b11d      	cbz	r5, 8000848 <__udivmoddi4+0xa0>
 8000840:	40d4      	lsrs	r4, r2
 8000842:	2300      	movs	r3, #0
 8000844:	e9c5 4300 	strd	r4, r3, [r5]
 8000848:	4631      	mov	r1, r6
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	b902      	cbnz	r2, 8000852 <__udivmoddi4+0xaa>
 8000850:	deff      	udf	#255	; 0xff
 8000852:	fab2 f282 	clz	r2, r2
 8000856:	2a00      	cmp	r2, #0
 8000858:	d150      	bne.n	80008fc <__udivmoddi4+0x154>
 800085a:	1bcb      	subs	r3, r1, r7
 800085c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000860:	fa1f f887 	uxth.w	r8, r7
 8000864:	2601      	movs	r6, #1
 8000866:	fbb3 fcfe 	udiv	ip, r3, lr
 800086a:	0c21      	lsrs	r1, r4, #16
 800086c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000870:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000874:	fb08 f30c 	mul.w	r3, r8, ip
 8000878:	428b      	cmp	r3, r1
 800087a:	d907      	bls.n	800088c <__udivmoddi4+0xe4>
 800087c:	1879      	adds	r1, r7, r1
 800087e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000882:	d202      	bcs.n	800088a <__udivmoddi4+0xe2>
 8000884:	428b      	cmp	r3, r1
 8000886:	f200 80e9 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 800088a:	4684      	mov	ip, r0
 800088c:	1ac9      	subs	r1, r1, r3
 800088e:	b2a3      	uxth	r3, r4
 8000890:	fbb1 f0fe 	udiv	r0, r1, lr
 8000894:	fb0e 1110 	mls	r1, lr, r0, r1
 8000898:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800089c:	fb08 f800 	mul.w	r8, r8, r0
 80008a0:	45a0      	cmp	r8, r4
 80008a2:	d907      	bls.n	80008b4 <__udivmoddi4+0x10c>
 80008a4:	193c      	adds	r4, r7, r4
 80008a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80008aa:	d202      	bcs.n	80008b2 <__udivmoddi4+0x10a>
 80008ac:	45a0      	cmp	r8, r4
 80008ae:	f200 80d9 	bhi.w	8000a64 <__udivmoddi4+0x2bc>
 80008b2:	4618      	mov	r0, r3
 80008b4:	eba4 0408 	sub.w	r4, r4, r8
 80008b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008bc:	e7bf      	b.n	800083e <__udivmoddi4+0x96>
 80008be:	428b      	cmp	r3, r1
 80008c0:	d909      	bls.n	80008d6 <__udivmoddi4+0x12e>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	f000 80b1 	beq.w	8000a2a <__udivmoddi4+0x282>
 80008c8:	2600      	movs	r6, #0
 80008ca:	e9c5 0100 	strd	r0, r1, [r5]
 80008ce:	4630      	mov	r0, r6
 80008d0:	4631      	mov	r1, r6
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	fab3 f683 	clz	r6, r3
 80008da:	2e00      	cmp	r6, #0
 80008dc:	d14a      	bne.n	8000974 <__udivmoddi4+0x1cc>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d302      	bcc.n	80008e8 <__udivmoddi4+0x140>
 80008e2:	4282      	cmp	r2, r0
 80008e4:	f200 80b8 	bhi.w	8000a58 <__udivmoddi4+0x2b0>
 80008e8:	1a84      	subs	r4, r0, r2
 80008ea:	eb61 0103 	sbc.w	r1, r1, r3
 80008ee:	2001      	movs	r0, #1
 80008f0:	468c      	mov	ip, r1
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d0a8      	beq.n	8000848 <__udivmoddi4+0xa0>
 80008f6:	e9c5 4c00 	strd	r4, ip, [r5]
 80008fa:	e7a5      	b.n	8000848 <__udivmoddi4+0xa0>
 80008fc:	f1c2 0320 	rsb	r3, r2, #32
 8000900:	fa20 f603 	lsr.w	r6, r0, r3
 8000904:	4097      	lsls	r7, r2
 8000906:	fa01 f002 	lsl.w	r0, r1, r2
 800090a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800090e:	40d9      	lsrs	r1, r3
 8000910:	4330      	orrs	r0, r6
 8000912:	0c03      	lsrs	r3, r0, #16
 8000914:	fbb1 f6fe 	udiv	r6, r1, lr
 8000918:	fa1f f887 	uxth.w	r8, r7
 800091c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000920:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000924:	fb06 f108 	mul.w	r1, r6, r8
 8000928:	4299      	cmp	r1, r3
 800092a:	fa04 f402 	lsl.w	r4, r4, r2
 800092e:	d909      	bls.n	8000944 <__udivmoddi4+0x19c>
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	f106 3cff 	add.w	ip, r6, #4294967295
 8000936:	f080 808d 	bcs.w	8000a54 <__udivmoddi4+0x2ac>
 800093a:	4299      	cmp	r1, r3
 800093c:	f240 808a 	bls.w	8000a54 <__udivmoddi4+0x2ac>
 8000940:	3e02      	subs	r6, #2
 8000942:	443b      	add	r3, r7
 8000944:	1a5b      	subs	r3, r3, r1
 8000946:	b281      	uxth	r1, r0
 8000948:	fbb3 f0fe 	udiv	r0, r3, lr
 800094c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000950:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000954:	fb00 f308 	mul.w	r3, r0, r8
 8000958:	428b      	cmp	r3, r1
 800095a:	d907      	bls.n	800096c <__udivmoddi4+0x1c4>
 800095c:	1879      	adds	r1, r7, r1
 800095e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000962:	d273      	bcs.n	8000a4c <__udivmoddi4+0x2a4>
 8000964:	428b      	cmp	r3, r1
 8000966:	d971      	bls.n	8000a4c <__udivmoddi4+0x2a4>
 8000968:	3802      	subs	r0, #2
 800096a:	4439      	add	r1, r7
 800096c:	1acb      	subs	r3, r1, r3
 800096e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000972:	e778      	b.n	8000866 <__udivmoddi4+0xbe>
 8000974:	f1c6 0c20 	rsb	ip, r6, #32
 8000978:	fa03 f406 	lsl.w	r4, r3, r6
 800097c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000980:	431c      	orrs	r4, r3
 8000982:	fa20 f70c 	lsr.w	r7, r0, ip
 8000986:	fa01 f306 	lsl.w	r3, r1, r6
 800098a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800098e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000992:	431f      	orrs	r7, r3
 8000994:	0c3b      	lsrs	r3, r7, #16
 8000996:	fbb1 f9fe 	udiv	r9, r1, lr
 800099a:	fa1f f884 	uxth.w	r8, r4
 800099e:	fb0e 1119 	mls	r1, lr, r9, r1
 80009a2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009a6:	fb09 fa08 	mul.w	sl, r9, r8
 80009aa:	458a      	cmp	sl, r1
 80009ac:	fa02 f206 	lsl.w	r2, r2, r6
 80009b0:	fa00 f306 	lsl.w	r3, r0, r6
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x220>
 80009b6:	1861      	adds	r1, r4, r1
 80009b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80009bc:	d248      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 80009be:	458a      	cmp	sl, r1
 80009c0:	d946      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 80009c2:	f1a9 0902 	sub.w	r9, r9, #2
 80009c6:	4421      	add	r1, r4
 80009c8:	eba1 010a 	sub.w	r1, r1, sl
 80009cc:	b2bf      	uxth	r7, r7
 80009ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80009d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80009d6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80009da:	fb00 f808 	mul.w	r8, r0, r8
 80009de:	45b8      	cmp	r8, r7
 80009e0:	d907      	bls.n	80009f2 <__udivmoddi4+0x24a>
 80009e2:	19e7      	adds	r7, r4, r7
 80009e4:	f100 31ff 	add.w	r1, r0, #4294967295
 80009e8:	d22e      	bcs.n	8000a48 <__udivmoddi4+0x2a0>
 80009ea:	45b8      	cmp	r8, r7
 80009ec:	d92c      	bls.n	8000a48 <__udivmoddi4+0x2a0>
 80009ee:	3802      	subs	r0, #2
 80009f0:	4427      	add	r7, r4
 80009f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009f6:	eba7 0708 	sub.w	r7, r7, r8
 80009fa:	fba0 8902 	umull	r8, r9, r0, r2
 80009fe:	454f      	cmp	r7, r9
 8000a00:	46c6      	mov	lr, r8
 8000a02:	4649      	mov	r1, r9
 8000a04:	d31a      	bcc.n	8000a3c <__udivmoddi4+0x294>
 8000a06:	d017      	beq.n	8000a38 <__udivmoddi4+0x290>
 8000a08:	b15d      	cbz	r5, 8000a22 <__udivmoddi4+0x27a>
 8000a0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a16:	40f2      	lsrs	r2, r6
 8000a18:	ea4c 0202 	orr.w	r2, ip, r2
 8000a1c:	40f7      	lsrs	r7, r6
 8000a1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a22:	2600      	movs	r6, #0
 8000a24:	4631      	mov	r1, r6
 8000a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2a:	462e      	mov	r6, r5
 8000a2c:	4628      	mov	r0, r5
 8000a2e:	e70b      	b.n	8000848 <__udivmoddi4+0xa0>
 8000a30:	4606      	mov	r6, r0
 8000a32:	e6e9      	b.n	8000808 <__udivmoddi4+0x60>
 8000a34:	4618      	mov	r0, r3
 8000a36:	e6fd      	b.n	8000834 <__udivmoddi4+0x8c>
 8000a38:	4543      	cmp	r3, r8
 8000a3a:	d2e5      	bcs.n	8000a08 <__udivmoddi4+0x260>
 8000a3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a40:	eb69 0104 	sbc.w	r1, r9, r4
 8000a44:	3801      	subs	r0, #1
 8000a46:	e7df      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a48:	4608      	mov	r0, r1
 8000a4a:	e7d2      	b.n	80009f2 <__udivmoddi4+0x24a>
 8000a4c:	4660      	mov	r0, ip
 8000a4e:	e78d      	b.n	800096c <__udivmoddi4+0x1c4>
 8000a50:	4681      	mov	r9, r0
 8000a52:	e7b9      	b.n	80009c8 <__udivmoddi4+0x220>
 8000a54:	4666      	mov	r6, ip
 8000a56:	e775      	b.n	8000944 <__udivmoddi4+0x19c>
 8000a58:	4630      	mov	r0, r6
 8000a5a:	e74a      	b.n	80008f2 <__udivmoddi4+0x14a>
 8000a5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a60:	4439      	add	r1, r7
 8000a62:	e713      	b.n	800088c <__udivmoddi4+0xe4>
 8000a64:	3802      	subs	r0, #2
 8000a66:	443c      	add	r4, r7
 8000a68:	e724      	b.n	80008b4 <__udivmoddi4+0x10c>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_idiv0>:
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <HAL_TIM_PeriodElapsedCallback>:
 *  HAL_TIM_Base_Start_IT(&htim4);
 *  If you want other remeber to change some variables in function below
 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]

if(htim->Instance == TIM5)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0c      	ldr	r2, [pc, #48]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d111      	bne.n	8000aa6 <HAL_TIM_PeriodElapsedCallback+0x36>
{

	if(t5>=50) //inkrement co 10ms 14i29min
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2b31      	cmp	r3, #49	; 0x31
 8000a88:	d904      	bls.n	8000a94 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		t5=0;
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
		PC_BLE_TRANSMIT();	//Komunikacja pod komendy at aktywna gdy zdefiniuje SEND_DATA_TO_PC tak naprawde
 8000a90:	f000 f988 	bl	8000da4 <PC_BLE_TRANSMIT>
	}

  	DOPAMIECI();
 8000a94:	f000 f906 	bl	8000ca4 <DOPAMIECI>
	DOPAMIECI2();
 8000a98:	f000 f8a8 	bl	8000bec <DOPAMIECI2>

	t5++;
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000aa4:	6013      	str	r3, [r2, #0]

}

}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40000c00 	.word	0x40000c00
 8000ab4:	24000230 	.word	0x24000230

08000ab8 <BLE_INIT>:

void BLE_INIT()
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	 HAL_TIM_Base_Start_IT(&htim5);
 8000abc:	4807      	ldr	r0, [pc, #28]	; (8000adc <BLE_INIT+0x24>)
 8000abe:	f00e f901 	bl	800ecc4 <HAL_TIM_Base_Start_IT>

	  HAL_UART_Receive_IT(&huart2,&Received,1);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	4906      	ldr	r1, [pc, #24]	; (8000ae0 <BLE_INIT+0x28>)
 8000ac6:	4807      	ldr	r0, [pc, #28]	; (8000ae4 <BLE_INIT+0x2c>)
 8000ac8:	f00f fbb8 	bl	801023c <HAL_UART_Receive_IT>
	  HAL_UART_Receive_IT(&huart5,&Received,1);
 8000acc:	2201      	movs	r2, #1
 8000ace:	4904      	ldr	r1, [pc, #16]	; (8000ae0 <BLE_INIT+0x28>)
 8000ad0:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <BLE_INIT+0x30>)
 8000ad2:	f00f fbb3 	bl	801023c <HAL_UART_Receive_IT>
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	24023abc 	.word	0x24023abc
 8000ae0:	2400030c 	.word	0x2400030c
 8000ae4:	24023bc8 	.word	0x24023bc8
 8000ae8:	24023b3c 	.word	0x24023b3c

08000aec <__io_putchar>:


int __io_putchar(int ch)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 1);
 8000af4:	1d39      	adds	r1, r7, #4
 8000af6:	2301      	movs	r3, #1
 8000af8:	2201      	movs	r2, #1
 8000afa:	4804      	ldr	r0, [pc, #16]	; (8000b0c <__io_putchar+0x20>)
 8000afc:	f00f fa84 	bl	8010008 <HAL_UART_Transmit>
	//ITM_SendChar(ch);
			return ch;
 8000b00:	687b      	ldr	r3, [r7, #4]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	24023bc8 	.word	0x24023bc8

08000b10 <HAL_UART_RxCpltCallback>:


/*
 * Initialize the UART1 - 115200 and UART3 115200
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	if(huart->Instance== USART2)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0c      	ldr	r2, [pc, #48]	; (8000b50 <HAL_UART_RxCpltCallback+0x40>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d106      	bne.n	8000b30 <HAL_UART_RxCpltCallback+0x20>
	{

		HAL_UART_Receive_IT(&huart2, &Received, 1); // Ponowne wlaczenie nasluchiwania
 8000b22:	2201      	movs	r2, #1
 8000b24:	490b      	ldr	r1, [pc, #44]	; (8000b54 <HAL_UART_RxCpltCallback+0x44>)
 8000b26:	480c      	ldr	r0, [pc, #48]	; (8000b58 <HAL_UART_RxCpltCallback+0x48>)
 8000b28:	f00f fb88 	bl	801023c <HAL_UART_Receive_IT>
		BUFOR2();
 8000b2c:	f000 f83c 	bl	8000ba8 <BUFOR2>

	}


		if(huart->Instance== UART5)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a09      	ldr	r2, [pc, #36]	; (8000b5c <HAL_UART_RxCpltCallback+0x4c>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d106      	bne.n	8000b48 <HAL_UART_RxCpltCallback+0x38>
	{
		HAL_UART_Receive_IT(&huart5, &Received, 1); // Ponowne wlaczenie nasluchiwania
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	4905      	ldr	r1, [pc, #20]	; (8000b54 <HAL_UART_RxCpltCallback+0x44>)
 8000b3e:	4808      	ldr	r0, [pc, #32]	; (8000b60 <HAL_UART_RxCpltCallback+0x50>)
 8000b40:	f00f fb7c 	bl	801023c <HAL_UART_Receive_IT>
	BUFOR();
 8000b44:	f000 f80e 	bl	8000b64 <BUFOR>
	}
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40004400 	.word	0x40004400
 8000b54:	2400030c 	.word	0x2400030c
 8000b58:	24023bc8 	.word	0x24023bc8
 8000b5c:	40005000 	.word	0x40005000
 8000b60:	24023b3c 	.word	0x24023b3c

08000b64 <BUFOR>:

void BUFOR()

{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	REC_DANE_PC[znacznik]=Received;
 8000b68:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <BUFOR+0x30>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <BUFOR+0x34>)
 8000b6e:	7811      	ldrb	r1, [r2, #0]
 8000b70:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <BUFOR+0x38>)
 8000b72:	54d1      	strb	r1, [r2, r3]
	znacznik++;
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <BUFOR+0x30>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <BUFOR+0x30>)
 8000b7c:	6013      	str	r3, [r2, #0]

	ZapamientanyCzas=HAL_GetTick();
 8000b7e:	f005 f959 	bl	8005e34 <HAL_GetTick>
 8000b82:	4603      	mov	r3, r0
 8000b84:	4a06      	ldr	r2, [pc, #24]	; (8000ba0 <BUFOR+0x3c>)
 8000b86:	6013      	str	r3, [r2, #0]
	znacznik2=1;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <BUFOR+0x40>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	601a      	str	r2, [r3, #0]
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	24000210 	.word	0x24000210
 8000b98:	2400030c 	.word	0x2400030c
 8000b9c:	2400043c 	.word	0x2400043c
 8000ba0:	24000220 	.word	0x24000220
 8000ba4:	24000214 	.word	0x24000214

08000ba8 <BUFOR2>:
void BUFOR2()
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	REC_D_BLE[znacznik3]=Received;
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <BUFOR2+0x30>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <BUFOR2+0x34>)
 8000bb2:	7811      	ldrb	r1, [r2, #0]
 8000bb4:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <BUFOR2+0x38>)
 8000bb6:	54d1      	strb	r1, [r2, r3]
	znacznik3++;
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <BUFOR2+0x30>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	4a06      	ldr	r2, [pc, #24]	; (8000bd8 <BUFOR2+0x30>)
 8000bc0:	6013      	str	r3, [r2, #0]
	ZapamientanyCzas3=HAL_GetTick();
 8000bc2:	f005 f937 	bl	8005e34 <HAL_GetTick>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	4a06      	ldr	r2, [pc, #24]	; (8000be4 <BUFOR2+0x3c>)
 8000bca:	6013      	str	r3, [r2, #0]
	znacznik4=1;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <BUFOR2+0x40>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	601a      	str	r2, [r3, #0]
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	24000224 	.word	0x24000224
 8000bdc:	2400030c 	.word	0x2400030c
 8000be0:	24000310 	.word	0x24000310
 8000be4:	2400022c 	.word	0x2400022c
 8000be8:	24000228 	.word	0x24000228

08000bec <DOPAMIECI2>:


void DOPAMIECI2()
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
	if(znacznik4==1)
 8000bf2:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <DOPAMIECI2+0x98>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d140      	bne.n	8000c7c <DOPAMIECI2+0x90>
	{

		//Copying data to second buffer
Aktualnyczas=HAL_GetTick();
 8000bfa:	f005 f91b 	bl	8005e34 <HAL_GetTick>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	4a21      	ldr	r2, [pc, #132]	; (8000c88 <DOPAMIECI2+0x9c>)
 8000c02:	6013      	str	r3, [r2, #0]

if((Aktualnyczas-ZapamientanyCzas3)>30)
 8000c04:	4b20      	ldr	r3, [pc, #128]	; (8000c88 <DOPAMIECI2+0x9c>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <DOPAMIECI2+0xa0>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	2b1e      	cmp	r3, #30
 8000c10:	d934      	bls.n	8000c7c <DOPAMIECI2+0x90>
{
	znacznik4=0;
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <DOPAMIECI2+0x98>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
	int i=0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	607b      	str	r3, [r7, #4]
	while(i<80)
 8000c1c:	e007      	b.n	8000c2e <DOPAMIECI2+0x42>
	{
		DANE_BLE[i]=0;
 8000c1e:	4a1c      	ldr	r2, [pc, #112]	; (8000c90 <DOPAMIECI2+0xa4>)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4413      	add	r3, r2
 8000c24:	2200      	movs	r2, #0
 8000c26:	701a      	strb	r2, [r3, #0]
		i++;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	607b      	str	r3, [r7, #4]
	while(i<80)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b4f      	cmp	r3, #79	; 0x4f
 8000c32:	ddf4      	ble.n	8000c1e <DOPAMIECI2+0x32>
	}
	i=0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	607b      	str	r3, [r7, #4]

	while(i<znacznik3)
 8000c38:	e00b      	b.n	8000c52 <DOPAMIECI2+0x66>
	{
	DANE_BLE[i]=REC_D_BLE[i];
 8000c3a:	4a16      	ldr	r2, [pc, #88]	; (8000c94 <DOPAMIECI2+0xa8>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4413      	add	r3, r2
 8000c40:	7819      	ldrb	r1, [r3, #0]
 8000c42:	4a13      	ldr	r2, [pc, #76]	; (8000c90 <DOPAMIECI2+0xa4>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4413      	add	r3, r2
 8000c48:	460a      	mov	r2, r1
 8000c4a:	701a      	strb	r2, [r3, #0]
		i++;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	607b      	str	r3, [r7, #4]
	while(i<znacznik3)
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <DOPAMIECI2+0xac>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	dbee      	blt.n	8000c3a <DOPAMIECI2+0x4e>
	}
	size_BLE=i;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <DOPAMIECI2+0xb0>)
 8000c62:	701a      	strb	r2, [r3, #0]
	znacznik3=0;
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <DOPAMIECI2+0xac>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
	Received=0;
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <DOPAMIECI2+0xb4>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	701a      	strb	r2, [r3, #0]

	//@@@@@@@@@@@@@@@@@@@@@@@
	KOMENDY_BLE();
 8000c70:	f000 ffa2 	bl	8001bb8 <KOMENDY_BLE>
	//@@@@@@@@@@@@@@@@@@@@@@@

	ZapamientanyCzas3=Aktualnyczas;
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <DOPAMIECI2+0x9c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <DOPAMIECI2+0xa0>)
 8000c7a:	6013      	str	r3, [r2, #0]
}
	}
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	24000228 	.word	0x24000228
 8000c88:	2400021c 	.word	0x2400021c
 8000c8c:	2400022c 	.word	0x2400022c
 8000c90:	240003a0 	.word	0x240003a0
 8000c94:	24000310 	.word	0x24000310
 8000c98:	24000224 	.word	0x24000224
 8000c9c:	24000218 	.word	0x24000218
 8000ca0:	2400030c 	.word	0x2400030c

08000ca4 <DOPAMIECI>:

void DOPAMIECI()
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
	if(znacznik2==1)
 8000caa:	4b23      	ldr	r3, [pc, #140]	; (8000d38 <DOPAMIECI+0x94>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d13e      	bne.n	8000d30 <DOPAMIECI+0x8c>
	{



//Copying data to second buffer
Aktualnyczas=HAL_GetTick();
 8000cb2:	f005 f8bf 	bl	8005e34 <HAL_GetTick>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	4a20      	ldr	r2, [pc, #128]	; (8000d3c <DOPAMIECI+0x98>)
 8000cba:	6013      	str	r3, [r2, #0]
if((Aktualnyczas-ZapamientanyCzas)>30)
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <DOPAMIECI+0x98>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <DOPAMIECI+0x9c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	2b1e      	cmp	r3, #30
 8000cc8:	d932      	bls.n	8000d30 <DOPAMIECI+0x8c>
{
	znacznik2=0;
 8000cca:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <DOPAMIECI+0x94>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
	int i=0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	607b      	str	r3, [r7, #4]
	while(i<80)
 8000cd4:	e007      	b.n	8000ce6 <DOPAMIECI+0x42>
	{
		DANE_PCE[i]=0;
 8000cd6:	4a1b      	ldr	r2, [pc, #108]	; (8000d44 <DOPAMIECI+0xa0>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4413      	add	r3, r2
 8000cdc:	2200      	movs	r2, #0
 8000cde:	701a      	strb	r2, [r3, #0]
		i++;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	607b      	str	r3, [r7, #4]
	while(i<80)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b4f      	cmp	r3, #79	; 0x4f
 8000cea:	ddf4      	ble.n	8000cd6 <DOPAMIECI+0x32>
	}
	i=0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	607b      	str	r3, [r7, #4]

	while(i<znacznik)
 8000cf0:	e00b      	b.n	8000d0a <DOPAMIECI+0x66>
	{
	DANE_PCE[i]=REC_DANE_PC[i];
 8000cf2:	4a15      	ldr	r2, [pc, #84]	; (8000d48 <DOPAMIECI+0xa4>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	7819      	ldrb	r1, [r3, #0]
 8000cfa:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <DOPAMIECI+0xa0>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4413      	add	r3, r2
 8000d00:	460a      	mov	r2, r1
 8000d02:	701a      	strb	r2, [r3, #0]
		i++;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3301      	adds	r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
	while(i<znacznik)
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <DOPAMIECI+0xa8>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	dbee      	blt.n	8000cf2 <DOPAMIECI+0x4e>
	}
	//DANE_PCE[i]='\r';
	//DANE_PCE[i+1]='\n';
	size_PC=i;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <DOPAMIECI+0xac>)
 8000d1a:	701a      	strb	r2, [r3, #0]
	znacznik=0;
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <DOPAMIECI+0xa8>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
	Received=0;
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <DOPAMIECI+0xb0>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]

	ZapamientanyCzas=Aktualnyczas;
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <DOPAMIECI+0x98>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <DOPAMIECI+0x9c>)
 8000d2e:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	24000214 	.word	0x24000214
 8000d3c:	2400021c 	.word	0x2400021c
 8000d40:	24000220 	.word	0x24000220
 8000d44:	240003c0 	.word	0x240003c0
 8000d48:	2400043c 	.word	0x2400043c
 8000d4c:	24000210 	.word	0x24000210
 8000d50:	24000219 	.word	0x24000219
 8000d54:	2400030c 	.word	0x2400030c

08000d58 <DO_BLE>:


void DO_BLE(char *String)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	for(int i=0; i<40; i++)
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	e007      	b.n	8000d76 <DO_BLE+0x1e>
	{
		ToSendAPP[i]=0;
 8000d66:	4a0d      	ldr	r2, [pc, #52]	; (8000d9c <DO_BLE+0x44>)
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<40; i++)
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	3301      	adds	r3, #1
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	2b27      	cmp	r3, #39	; 0x27
 8000d7a:	ddf4      	ble.n	8000d66 <DO_BLE+0xe>
	}

	int size=sprintf(  (char*)ToSendAPP,(char*)String);
 8000d7c:	6879      	ldr	r1, [r7, #4]
 8000d7e:	4807      	ldr	r0, [pc, #28]	; (8000d9c <DO_BLE+0x44>)
 8000d80:	f013 ff56 	bl	8014c30 <siprintf>
 8000d84:	60b8      	str	r0, [r7, #8]
	HAL_UART_Transmit_IT(&huart2, ToSendAPP, size);
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4903      	ldr	r1, [pc, #12]	; (8000d9c <DO_BLE+0x44>)
 8000d8e:	4804      	ldr	r0, [pc, #16]	; (8000da0 <DO_BLE+0x48>)
 8000d90:	f00f f9d0 	bl	8010134 <HAL_UART_Transmit_IT>
}
 8000d94:	bf00      	nop
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	24000380 	.word	0x24000380
 8000da0:	24023bc8 	.word	0x24023bc8

08000da4 <PC_BLE_TRANSMIT>:
}

#else

void PC_BLE_TRANSMIT()
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <OBLICZ_BLAD>:
int fl_Time_PD_Reset=0;

uint32_t CzasZ_CZ=0;

float OBLICZ_BLAD()
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0

	flaga_ENK=0;
 8000dba:	4b8d      	ldr	r3, [pc, #564]	; (8000ff0 <OBLICZ_BLAD+0x23c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
	int SKRZ=0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	607b      	str	r3, [r7, #4]

	for(int i=2; i<6; i++)
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	e01c      	b.n	8000e04 <OBLICZ_BLAD+0x50>
	{

		if (DANE_Z_CZUJNIKOW[i]>2500)
 8000dca:	4a8a      	ldr	r2, [pc, #552]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dd2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d902      	bls.n	8000de0 <OBLICZ_BLAD+0x2c>
		{
			SKRZ++;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	607b      	str	r3, [r7, #4]
		}
		if(SKRZ==4)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	d10b      	bne.n	8000dfe <OBLICZ_BLAD+0x4a>
		{
			ERR_CZ=0;
 8000de6:	4b84      	ldr	r3, [pc, #528]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000de8:	f04f 0200 	mov.w	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
			SKRZ=0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
			flaga_ENK=1;
 8000df2:	4b7f      	ldr	r3, [pc, #508]	; (8000ff0 <OBLICZ_BLAD+0x23c>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	601a      	str	r2, [r3, #0]
			return ERR_CZ;
 8000df8:	4b7f      	ldr	r3, [pc, #508]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	e175      	b.n	80010ea <OBLICZ_BLAD+0x336>
	for(int i=2; i<6; i++)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	3301      	adds	r3, #1
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	2b05      	cmp	r3, #5
 8000e08:	dddf      	ble.n	8000dca <OBLICZ_BLAD+0x16>
		}
	}

	if(DANE_Z_CZUJNIKOW[3]>czcz4 && DANE_Z_CZUJNIKOW[4]>czcz5)	{		ERR_CZ=0;  	return ERR_CZ; 	}
 8000e0a:	4b7a      	ldr	r3, [pc, #488]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000e0c:	88db      	ldrh	r3, [r3, #6]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	4b7a      	ldr	r3, [pc, #488]	; (8000ffc <OBLICZ_BLAD+0x248>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	dd0d      	ble.n	8000e34 <OBLICZ_BLAD+0x80>
 8000e18:	4b76      	ldr	r3, [pc, #472]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000e1a:	891b      	ldrh	r3, [r3, #8]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b78      	ldr	r3, [pc, #480]	; (8001000 <OBLICZ_BLAD+0x24c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	dd06      	ble.n	8000e34 <OBLICZ_BLAD+0x80>
 8000e26:	4b74      	ldr	r3, [pc, #464]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000e28:	f04f 0200 	mov.w	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	4b72      	ldr	r3, [pc, #456]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	e15a      	b.n	80010ea <OBLICZ_BLAD+0x336>

	if(DANE_Z_CZUJNIKOW[0]>czcz1 && DANE_Z_CZUJNIKOW[1]>czcz2)	{		ERR_CZ=er6;  OST_KIER_BL=1;	return ERR_CZ; 	}
 8000e34:	4b6f      	ldr	r3, [pc, #444]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b72      	ldr	r3, [pc, #456]	; (8001004 <OBLICZ_BLAD+0x250>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	dd10      	ble.n	8000e64 <OBLICZ_BLAD+0xb0>
 8000e42:	4b6c      	ldr	r3, [pc, #432]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000e44:	885b      	ldrh	r3, [r3, #2]
 8000e46:	461a      	mov	r2, r3
 8000e48:	4b6f      	ldr	r3, [pc, #444]	; (8001008 <OBLICZ_BLAD+0x254>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	dd09      	ble.n	8000e64 <OBLICZ_BLAD+0xb0>
 8000e50:	4b6e      	ldr	r3, [pc, #440]	; (800100c <OBLICZ_BLAD+0x258>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a68      	ldr	r2, [pc, #416]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000e56:	6013      	str	r3, [r2, #0]
 8000e58:	4b6d      	ldr	r3, [pc, #436]	; (8001010 <OBLICZ_BLAD+0x25c>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	4b66      	ldr	r3, [pc, #408]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	e142      	b.n	80010ea <OBLICZ_BLAD+0x336>
	if(DANE_Z_CZUJNIKOW[1]>czcz2 && DANE_Z_CZUJNIKOW[2]>czcz3)	{		ERR_CZ=er4;  	return ERR_CZ; 	}
 8000e64:	4b63      	ldr	r3, [pc, #396]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000e66:	885b      	ldrh	r3, [r3, #2]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b67      	ldr	r3, [pc, #412]	; (8001008 <OBLICZ_BLAD+0x254>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	dd0d      	ble.n	8000e8e <OBLICZ_BLAD+0xda>
 8000e72:	4b60      	ldr	r3, [pc, #384]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000e74:	889b      	ldrh	r3, [r3, #4]
 8000e76:	461a      	mov	r2, r3
 8000e78:	4b66      	ldr	r3, [pc, #408]	; (8001014 <OBLICZ_BLAD+0x260>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	dd06      	ble.n	8000e8e <OBLICZ_BLAD+0xda>
 8000e80:	4b65      	ldr	r3, [pc, #404]	; (8001018 <OBLICZ_BLAD+0x264>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a5c      	ldr	r2, [pc, #368]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000e86:	6013      	str	r3, [r2, #0]
 8000e88:	4b5b      	ldr	r3, [pc, #364]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	e12d      	b.n	80010ea <OBLICZ_BLAD+0x336>
	if(DANE_Z_CZUJNIKOW[2]>czcz3 && DANE_Z_CZUJNIKOW[3]>czcz4)	{		ERR_CZ=er2;  	return ERR_CZ; 	}
 8000e8e:	4b59      	ldr	r3, [pc, #356]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000e90:	889b      	ldrh	r3, [r3, #4]
 8000e92:	461a      	mov	r2, r3
 8000e94:	4b5f      	ldr	r3, [pc, #380]	; (8001014 <OBLICZ_BLAD+0x260>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	dd0d      	ble.n	8000eb8 <OBLICZ_BLAD+0x104>
 8000e9c:	4b55      	ldr	r3, [pc, #340]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000e9e:	88db      	ldrh	r3, [r3, #6]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b56      	ldr	r3, [pc, #344]	; (8000ffc <OBLICZ_BLAD+0x248>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	dd06      	ble.n	8000eb8 <OBLICZ_BLAD+0x104>
 8000eaa:	4b5c      	ldr	r3, [pc, #368]	; (800101c <OBLICZ_BLAD+0x268>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a52      	ldr	r2, [pc, #328]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000eb0:	6013      	str	r3, [r2, #0]
 8000eb2:	4b51      	ldr	r3, [pc, #324]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	e118      	b.n	80010ea <OBLICZ_BLAD+0x336>


	if(DANE_Z_CZUJNIKOW[7]>czcz8 && DANE_Z_CZUJNIKOW[6]>czcz7)	{		ERR_CZ=-er6; OST_KIER_BL=-1; 	return ERR_CZ; 	}
 8000eb8:	4b4e      	ldr	r3, [pc, #312]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000eba:	89db      	ldrh	r3, [r3, #14]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b58      	ldr	r3, [pc, #352]	; (8001020 <OBLICZ_BLAD+0x26c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	dd15      	ble.n	8000ef2 <OBLICZ_BLAD+0x13e>
 8000ec6:	4b4b      	ldr	r3, [pc, #300]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000ec8:	899b      	ldrh	r3, [r3, #12]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	4b55      	ldr	r3, [pc, #340]	; (8001024 <OBLICZ_BLAD+0x270>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	dd0e      	ble.n	8000ef2 <OBLICZ_BLAD+0x13e>
 8000ed4:	4b4d      	ldr	r3, [pc, #308]	; (800100c <OBLICZ_BLAD+0x258>)
 8000ed6:	edd3 7a00 	vldr	s15, [r3]
 8000eda:	eef1 7a67 	vneg.f32	s15, s15
 8000ede:	4b46      	ldr	r3, [pc, #280]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000ee0:	edc3 7a00 	vstr	s15, [r3]
 8000ee4:	4b4a      	ldr	r3, [pc, #296]	; (8001010 <OBLICZ_BLAD+0x25c>)
 8000ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	4b42      	ldr	r3, [pc, #264]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	e0fb      	b.n	80010ea <OBLICZ_BLAD+0x336>
	if(DANE_Z_CZUJNIKOW[6]>czcz7 && DANE_Z_CZUJNIKOW[5]>czcz6)	{		ERR_CZ=-er4; 	return ERR_CZ; 	}
 8000ef2:	4b40      	ldr	r3, [pc, #256]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000ef4:	899b      	ldrh	r3, [r3, #12]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4b4a      	ldr	r3, [pc, #296]	; (8001024 <OBLICZ_BLAD+0x270>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	dd11      	ble.n	8000f24 <OBLICZ_BLAD+0x170>
 8000f00:	4b3c      	ldr	r3, [pc, #240]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000f02:	895b      	ldrh	r3, [r3, #10]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b48      	ldr	r3, [pc, #288]	; (8001028 <OBLICZ_BLAD+0x274>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	dd0a      	ble.n	8000f24 <OBLICZ_BLAD+0x170>
 8000f0e:	4b42      	ldr	r3, [pc, #264]	; (8001018 <OBLICZ_BLAD+0x264>)
 8000f10:	edd3 7a00 	vldr	s15, [r3]
 8000f14:	eef1 7a67 	vneg.f32	s15, s15
 8000f18:	4b37      	ldr	r3, [pc, #220]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000f1a:	edc3 7a00 	vstr	s15, [r3]
 8000f1e:	4b36      	ldr	r3, [pc, #216]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	e0e2      	b.n	80010ea <OBLICZ_BLAD+0x336>
	if(DANE_Z_CZUJNIKOW[5]>czcz6 && DANE_Z_CZUJNIKOW[4]>czcz5)	{		ERR_CZ=-er2;  	return ERR_CZ; 	}
 8000f24:	4b33      	ldr	r3, [pc, #204]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000f26:	895b      	ldrh	r3, [r3, #10]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b3f      	ldr	r3, [pc, #252]	; (8001028 <OBLICZ_BLAD+0x274>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	dd11      	ble.n	8000f56 <OBLICZ_BLAD+0x1a2>
 8000f32:	4b30      	ldr	r3, [pc, #192]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000f34:	891b      	ldrh	r3, [r3, #8]
 8000f36:	461a      	mov	r2, r3
 8000f38:	4b31      	ldr	r3, [pc, #196]	; (8001000 <OBLICZ_BLAD+0x24c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	dd0a      	ble.n	8000f56 <OBLICZ_BLAD+0x1a2>
 8000f40:	4b36      	ldr	r3, [pc, #216]	; (800101c <OBLICZ_BLAD+0x268>)
 8000f42:	edd3 7a00 	vldr	s15, [r3]
 8000f46:	eef1 7a67 	vneg.f32	s15, s15
 8000f4a:	4b2b      	ldr	r3, [pc, #172]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000f4c:	edc3 7a00 	vstr	s15, [r3]
 8000f50:	4b29      	ldr	r3, [pc, #164]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	e0c9      	b.n	80010ea <OBLICZ_BLAD+0x336>


	if(DANE_Z_CZUJNIKOW[0]>czcz1)	{		ERR_CZ=er7;   OST_KIER_BL=1; 	 return ERR_CZ; 	}
 8000f56:	4b27      	ldr	r3, [pc, #156]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4b29      	ldr	r3, [pc, #164]	; (8001004 <OBLICZ_BLAD+0x250>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	dd09      	ble.n	8000f78 <OBLICZ_BLAD+0x1c4>
 8000f64:	4b31      	ldr	r3, [pc, #196]	; (800102c <OBLICZ_BLAD+0x278>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a23      	ldr	r2, [pc, #140]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	4b28      	ldr	r3, [pc, #160]	; (8001010 <OBLICZ_BLAD+0x25c>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	e0b8      	b.n	80010ea <OBLICZ_BLAD+0x336>
	if(DANE_Z_CZUJNIKOW[1]>czcz2)	{		ERR_CZ=er5;     return ERR_CZ;		}
 8000f78:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000f7a:	885b      	ldrh	r3, [r3, #2]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b22      	ldr	r3, [pc, #136]	; (8001008 <OBLICZ_BLAD+0x254>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	dd06      	ble.n	8000f94 <OBLICZ_BLAD+0x1e0>
 8000f86:	4b2a      	ldr	r3, [pc, #168]	; (8001030 <OBLICZ_BLAD+0x27c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a1b      	ldr	r2, [pc, #108]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	e0aa      	b.n	80010ea <OBLICZ_BLAD+0x336>
	if(DANE_Z_CZUJNIKOW[2]>czcz3)	{		ERR_CZ=er3;  	return ERR_CZ; 	}
 8000f94:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000f96:	889b      	ldrh	r3, [r3, #4]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <OBLICZ_BLAD+0x260>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	dd06      	ble.n	8000fb0 <OBLICZ_BLAD+0x1fc>
 8000fa2:	4b24      	ldr	r3, [pc, #144]	; (8001034 <OBLICZ_BLAD+0x280>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a14      	ldr	r2, [pc, #80]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000fa8:	6013      	str	r3, [r2, #0]
 8000faa:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	e09c      	b.n	80010ea <OBLICZ_BLAD+0x336>
	if(DANE_Z_CZUJNIKOW[3]>czcz4)	{		ERR_CZ=er1;  	return ERR_CZ; 	}
 8000fb0:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000fb2:	88db      	ldrh	r3, [r3, #6]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <OBLICZ_BLAD+0x248>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	dd06      	ble.n	8000fcc <OBLICZ_BLAD+0x218>
 8000fbe:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <OBLICZ_BLAD+0x284>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	e08e      	b.n	80010ea <OBLICZ_BLAD+0x336>

	if(DANE_Z_CZUJNIKOW[4]>czcz5)	{		ERR_CZ=-er1;  	return ERR_CZ; 	}
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <OBLICZ_BLAD+0x240>)
 8000fce:	891b      	ldrh	r3, [r3, #8]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <OBLICZ_BLAD+0x24c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	dd30      	ble.n	800103c <OBLICZ_BLAD+0x288>
 8000fda:	4b17      	ldr	r3, [pc, #92]	; (8001038 <OBLICZ_BLAD+0x284>)
 8000fdc:	edd3 7a00 	vldr	s15, [r3]
 8000fe0:	eef1 7a67 	vneg.f32	s15, s15
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000fe6:	edc3 7a00 	vstr	s15, [r3]
 8000fea:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <OBLICZ_BLAD+0x244>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	e07c      	b.n	80010ea <OBLICZ_BLAD+0x336>
 8000ff0:	24000250 	.word	0x24000250
 8000ff4:	24000480 	.word	0x24000480
 8000ff8:	24000234 	.word	0x24000234
 8000ffc:	24000460 	.word	0x24000460
 8001000:	240004a4 	.word	0x240004a4
 8001004:	24000490 	.word	0x24000490
 8001008:	240004a0 	.word	0x240004a0
 800100c:	24000498 	.word	0x24000498
 8001010:	24000238 	.word	0x24000238
 8001014:	24000474 	.word	0x24000474
 8001018:	2400045c 	.word	0x2400045c
 800101c:	24000470 	.word	0x24000470
 8001020:	24000464 	.word	0x24000464
 8001024:	2400046c 	.word	0x2400046c
 8001028:	24000494 	.word	0x24000494
 800102c:	240004a8 	.word	0x240004a8
 8001030:	2400049c 	.word	0x2400049c
 8001034:	2400047c 	.word	0x2400047c
 8001038:	24000478 	.word	0x24000478
	if(DANE_Z_CZUJNIKOW[5]>czcz6)	{		ERR_CZ=-er3;  	return ERR_CZ; 	}
 800103c:	4b2f      	ldr	r3, [pc, #188]	; (80010fc <OBLICZ_BLAD+0x348>)
 800103e:	895b      	ldrh	r3, [r3, #10]
 8001040:	461a      	mov	r2, r3
 8001042:	4b2f      	ldr	r3, [pc, #188]	; (8001100 <OBLICZ_BLAD+0x34c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	429a      	cmp	r2, r3
 8001048:	dd0a      	ble.n	8001060 <OBLICZ_BLAD+0x2ac>
 800104a:	4b2e      	ldr	r3, [pc, #184]	; (8001104 <OBLICZ_BLAD+0x350>)
 800104c:	edd3 7a00 	vldr	s15, [r3]
 8001050:	eef1 7a67 	vneg.f32	s15, s15
 8001054:	4b2c      	ldr	r3, [pc, #176]	; (8001108 <OBLICZ_BLAD+0x354>)
 8001056:	edc3 7a00 	vstr	s15, [r3]
 800105a:	4b2b      	ldr	r3, [pc, #172]	; (8001108 <OBLICZ_BLAD+0x354>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	e044      	b.n	80010ea <OBLICZ_BLAD+0x336>
	if(DANE_Z_CZUJNIKOW[6]>czcz7)	{		ERR_CZ=-er5;    return ERR_CZ;	 	}
 8001060:	4b26      	ldr	r3, [pc, #152]	; (80010fc <OBLICZ_BLAD+0x348>)
 8001062:	899b      	ldrh	r3, [r3, #12]
 8001064:	461a      	mov	r2, r3
 8001066:	4b29      	ldr	r3, [pc, #164]	; (800110c <OBLICZ_BLAD+0x358>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	429a      	cmp	r2, r3
 800106c:	dd0a      	ble.n	8001084 <OBLICZ_BLAD+0x2d0>
 800106e:	4b28      	ldr	r3, [pc, #160]	; (8001110 <OBLICZ_BLAD+0x35c>)
 8001070:	edd3 7a00 	vldr	s15, [r3]
 8001074:	eef1 7a67 	vneg.f32	s15, s15
 8001078:	4b23      	ldr	r3, [pc, #140]	; (8001108 <OBLICZ_BLAD+0x354>)
 800107a:	edc3 7a00 	vstr	s15, [r3]
 800107e:	4b22      	ldr	r3, [pc, #136]	; (8001108 <OBLICZ_BLAD+0x354>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	e032      	b.n	80010ea <OBLICZ_BLAD+0x336>
	if(DANE_Z_CZUJNIKOW[7]>czcz8)	{		ERR_CZ=-er7;  OST_KIER_BL=-1;	return ERR_CZ;	}
 8001084:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <OBLICZ_BLAD+0x348>)
 8001086:	89db      	ldrh	r3, [r3, #14]
 8001088:	461a      	mov	r2, r3
 800108a:	4b22      	ldr	r3, [pc, #136]	; (8001114 <OBLICZ_BLAD+0x360>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	429a      	cmp	r2, r3
 8001090:	dd0e      	ble.n	80010b0 <OBLICZ_BLAD+0x2fc>
 8001092:	4b21      	ldr	r3, [pc, #132]	; (8001118 <OBLICZ_BLAD+0x364>)
 8001094:	edd3 7a00 	vldr	s15, [r3]
 8001098:	eef1 7a67 	vneg.f32	s15, s15
 800109c:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <OBLICZ_BLAD+0x354>)
 800109e:	edc3 7a00 	vstr	s15, [r3]
 80010a2:	4b1e      	ldr	r3, [pc, #120]	; (800111c <OBLICZ_BLAD+0x368>)
 80010a4:	f04f 32ff 	mov.w	r2, #4294967295
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <OBLICZ_BLAD+0x354>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	e01c      	b.n	80010ea <OBLICZ_BLAD+0x336>



	if (OST_KIER_BL==-1 )  {  ERR_CZ=-err_max; 	return ERR_CZ; }
 80010b0:	4b1a      	ldr	r3, [pc, #104]	; (800111c <OBLICZ_BLAD+0x368>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b8:	d10a      	bne.n	80010d0 <OBLICZ_BLAD+0x31c>
 80010ba:	4b19      	ldr	r3, [pc, #100]	; (8001120 <OBLICZ_BLAD+0x36c>)
 80010bc:	edd3 7a00 	vldr	s15, [r3]
 80010c0:	eef1 7a67 	vneg.f32	s15, s15
 80010c4:	4b10      	ldr	r3, [pc, #64]	; (8001108 <OBLICZ_BLAD+0x354>)
 80010c6:	edc3 7a00 	vstr	s15, [r3]
 80010ca:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <OBLICZ_BLAD+0x354>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	e00c      	b.n	80010ea <OBLICZ_BLAD+0x336>
	if (OST_KIER_BL==1  )  {  ERR_CZ=err_max;  	return ERR_CZ; }
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <OBLICZ_BLAD+0x368>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d106      	bne.n	80010e6 <OBLICZ_BLAD+0x332>
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <OBLICZ_BLAD+0x36c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <OBLICZ_BLAD+0x354>)
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	4b09      	ldr	r3, [pc, #36]	; (8001108 <OBLICZ_BLAD+0x354>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	e001      	b.n	80010ea <OBLICZ_BLAD+0x336>

	//ERR_CZ=99;
	return 0;
 80010e6:	f04f 0300 	mov.w	r3, #0
 80010ea:	ee07 3a90 	vmov	s15, r3
}
 80010ee:	eeb0 0a67 	vmov.f32	s0, s15
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	24000480 	.word	0x24000480
 8001100:	24000494 	.word	0x24000494
 8001104:	2400047c 	.word	0x2400047c
 8001108:	24000234 	.word	0x24000234
 800110c:	2400046c 	.word	0x2400046c
 8001110:	2400049c 	.word	0x2400049c
 8001114:	24000464 	.word	0x24000464
 8001118:	240004a8 	.word	0x240004a8
 800111c:	24000238 	.word	0x24000238
 8001120:	24000468 	.word	0x24000468

08001124 <CZUJNIKI_INIT>:


void CZUJNIKI_INIT()
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)DANE_Z_CZUJNIKOW,8); //Turn on Sensor Read
 8001128:	2208      	movs	r2, #8
 800112a:	4904      	ldr	r1, [pc, #16]	; (800113c <CZUJNIKI_INIT+0x18>)
 800112c:	4804      	ldr	r0, [pc, #16]	; (8001140 <CZUJNIKI_INIT+0x1c>)
 800112e:	f005 fa39 	bl	80065a4 <HAL_ADC_Start_DMA>
	ReadValue_CZ_EEPROM();
 8001132:	f000 f807 	bl	8001144 <ReadValue_CZ_EEPROM>
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	24000480 	.word	0x24000480
 8001140:	24023848 	.word	0x24023848

08001144 <ReadValue_CZ_EEPROM>:


void ReadValue_CZ_EEPROM()
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0

EEPROM_READ_FLOAT(70, &er1);
 8001148:	4921      	ldr	r1, [pc, #132]	; (80011d0 <ReadValue_CZ_EEPROM+0x8c>)
 800114a:	2046      	movs	r0, #70	; 0x46
 800114c:	f000 f8bd 	bl	80012ca <EEPROM_READ_FLOAT>
EEPROM_READ_FLOAT(75, &er2);
 8001150:	4920      	ldr	r1, [pc, #128]	; (80011d4 <ReadValue_CZ_EEPROM+0x90>)
 8001152:	204b      	movs	r0, #75	; 0x4b
 8001154:	f000 f8b9 	bl	80012ca <EEPROM_READ_FLOAT>
EEPROM_READ_FLOAT(80, &er3);
 8001158:	491f      	ldr	r1, [pc, #124]	; (80011d8 <ReadValue_CZ_EEPROM+0x94>)
 800115a:	2050      	movs	r0, #80	; 0x50
 800115c:	f000 f8b5 	bl	80012ca <EEPROM_READ_FLOAT>
EEPROM_READ_FLOAT(85, &er4);
 8001160:	491e      	ldr	r1, [pc, #120]	; (80011dc <ReadValue_CZ_EEPROM+0x98>)
 8001162:	2055      	movs	r0, #85	; 0x55
 8001164:	f000 f8b1 	bl	80012ca <EEPROM_READ_FLOAT>
EEPROM_READ_FLOAT(90, &er5);
 8001168:	491d      	ldr	r1, [pc, #116]	; (80011e0 <ReadValue_CZ_EEPROM+0x9c>)
 800116a:	205a      	movs	r0, #90	; 0x5a
 800116c:	f000 f8ad 	bl	80012ca <EEPROM_READ_FLOAT>
EEPROM_READ_FLOAT(100, &er6);
 8001170:	491c      	ldr	r1, [pc, #112]	; (80011e4 <ReadValue_CZ_EEPROM+0xa0>)
 8001172:	2064      	movs	r0, #100	; 0x64
 8001174:	f000 f8a9 	bl	80012ca <EEPROM_READ_FLOAT>
EEPROM_READ_FLOAT(105, &er7);
 8001178:	491b      	ldr	r1, [pc, #108]	; (80011e8 <ReadValue_CZ_EEPROM+0xa4>)
 800117a:	2069      	movs	r0, #105	; 0x69
 800117c:	f000 f8a5 	bl	80012ca <EEPROM_READ_FLOAT>
EEPROM_READ_FLOAT(115, &err_max);
 8001180:	491a      	ldr	r1, [pc, #104]	; (80011ec <ReadValue_CZ_EEPROM+0xa8>)
 8001182:	2073      	movs	r0, #115	; 0x73
 8001184:	f000 f8a1 	bl	80012ca <EEPROM_READ_FLOAT>

EEPROM_READ_INT(265, &czcz1);
 8001188:	4919      	ldr	r1, [pc, #100]	; (80011f0 <ReadValue_CZ_EEPROM+0xac>)
 800118a:	f240 1009 	movw	r0, #265	; 0x109
 800118e:	f000 f8d0 	bl	8001332 <EEPROM_READ_INT>
EEPROM_READ_INT(245, &czcz2);
 8001192:	4918      	ldr	r1, [pc, #96]	; (80011f4 <ReadValue_CZ_EEPROM+0xb0>)
 8001194:	20f5      	movs	r0, #245	; 0xf5
 8001196:	f000 f8cc 	bl	8001332 <EEPROM_READ_INT>
EEPROM_READ_INT(210, &czcz3);
 800119a:	4917      	ldr	r1, [pc, #92]	; (80011f8 <ReadValue_CZ_EEPROM+0xb4>)
 800119c:	20d2      	movs	r0, #210	; 0xd2
 800119e:	f000 f8c8 	bl	8001332 <EEPROM_READ_INT>
EEPROM_READ_INT(215, &czcz4);
 80011a2:	4916      	ldr	r1, [pc, #88]	; (80011fc <ReadValue_CZ_EEPROM+0xb8>)
 80011a4:	20d7      	movs	r0, #215	; 0xd7
 80011a6:	f000 f8c4 	bl	8001332 <EEPROM_READ_INT>
EEPROM_READ_INT(220, &czcz5);
 80011aa:	4915      	ldr	r1, [pc, #84]	; (8001200 <ReadValue_CZ_EEPROM+0xbc>)
 80011ac:	20dc      	movs	r0, #220	; 0xdc
 80011ae:	f000 f8c0 	bl	8001332 <EEPROM_READ_INT>
EEPROM_READ_INT(225, &czcz6);
 80011b2:	4914      	ldr	r1, [pc, #80]	; (8001204 <ReadValue_CZ_EEPROM+0xc0>)
 80011b4:	20e1      	movs	r0, #225	; 0xe1
 80011b6:	f000 f8bc 	bl	8001332 <EEPROM_READ_INT>
EEPROM_READ_INT(230, &czcz7);
 80011ba:	4913      	ldr	r1, [pc, #76]	; (8001208 <ReadValue_CZ_EEPROM+0xc4>)
 80011bc:	20e6      	movs	r0, #230	; 0xe6
 80011be:	f000 f8b8 	bl	8001332 <EEPROM_READ_INT>
EEPROM_READ_INT(235, &czcz8);
 80011c2:	4912      	ldr	r1, [pc, #72]	; (800120c <ReadValue_CZ_EEPROM+0xc8>)
 80011c4:	20eb      	movs	r0, #235	; 0xeb
 80011c6:	f000 f8b4 	bl	8001332 <EEPROM_READ_INT>

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	24000478 	.word	0x24000478
 80011d4:	24000470 	.word	0x24000470
 80011d8:	2400047c 	.word	0x2400047c
 80011dc:	2400045c 	.word	0x2400045c
 80011e0:	2400049c 	.word	0x2400049c
 80011e4:	24000498 	.word	0x24000498
 80011e8:	240004a8 	.word	0x240004a8
 80011ec:	24000468 	.word	0x24000468
 80011f0:	24000490 	.word	0x24000490
 80011f4:	240004a0 	.word	0x240004a0
 80011f8:	24000474 	.word	0x24000474
 80011fc:	24000460 	.word	0x24000460
 8001200:	240004a4 	.word	0x240004a4
 8001204:	24000494 	.word	0x24000494
 8001208:	2400046c 	.word	0x2400046c
 800120c:	24000464 	.word	0x24000464

08001210 <EEPROM_WRITE>:
    char in8bit [4];
    float  wartosc;
} u;
*/
int8_t EEPROM_WRITE(uint16_t MemAdr, uint8_t *regData , uint16_t len)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af04      	add	r7, sp, #16
 8001216:	4603      	mov	r3, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	80fb      	strh	r3, [r7, #6]
 800121c:	4613      	mov	r3, r2
 800121e:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Init(&hi2c1);
 8001220:	480b      	ldr	r0, [pc, #44]	; (8001250 <EEPROM_WRITE+0x40>)
 8001222:	f009 f825 	bl	800a270 <HAL_I2C_Init>
	// HAL_I2C_Mem_Write(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout)
	HAL_I2C_Mem_Write(&hi2c1, Sektor1, MemAdr, 1, regData, len, 1);
 8001226:	88fa      	ldrh	r2, [r7, #6]
 8001228:	2301      	movs	r3, #1
 800122a:	9302      	str	r3, [sp, #8]
 800122c:	88bb      	ldrh	r3, [r7, #4]
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2301      	movs	r3, #1
 8001236:	21a0      	movs	r1, #160	; 0xa0
 8001238:	4805      	ldr	r0, [pc, #20]	; (8001250 <EEPROM_WRITE+0x40>)
 800123a:	f009 f8d9 	bl	800a3f0 <HAL_I2C_Mem_Write>
	HAL_I2C_DeInit(&hi2c1);
 800123e:	4804      	ldr	r0, [pc, #16]	; (8001250 <EEPROM_WRITE+0x40>)
 8001240:	f009 f8a6 	bl	800a390 <HAL_I2C_DeInit>
	return 0;
 8001244:	2300      	movs	r3, #0

}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	24023970 	.word	0x24023970

08001254 <EEPROM_READ>:

int8_t EEPROM_READ(uint16_t MemAdr, uint8_t *regData , uint16_t len)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af04      	add	r7, sp, #16
 800125a:	4603      	mov	r3, r0
 800125c:	6039      	str	r1, [r7, #0]
 800125e:	80fb      	strh	r3, [r7, #6]
 8001260:	4613      	mov	r3, r2
 8001262:	80bb      	strh	r3, [r7, #4]

	HAL_I2C_Init(&hi2c1);
 8001264:	480b      	ldr	r0, [pc, #44]	; (8001294 <EEPROM_READ+0x40>)
 8001266:	f009 f803 	bl	800a270 <HAL_I2C_Init>
	HAL_I2C_Mem_Read(&hi2c1, Sektor1, MemAdr, 1, regData, len, 1);
 800126a:	88fa      	ldrh	r2, [r7, #6]
 800126c:	2301      	movs	r3, #1
 800126e:	9302      	str	r3, [sp, #8]
 8001270:	88bb      	ldrh	r3, [r7, #4]
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2301      	movs	r3, #1
 800127a:	21a0      	movs	r1, #160	; 0xa0
 800127c:	4805      	ldr	r0, [pc, #20]	; (8001294 <EEPROM_READ+0x40>)
 800127e:	f009 f9cb 	bl	800a618 <HAL_I2C_Mem_Read>
	HAL_I2C_DeInit(&hi2c1);
 8001282:	4804      	ldr	r0, [pc, #16]	; (8001294 <EEPROM_READ+0x40>)
 8001284:	f009 f884 	bl	800a390 <HAL_I2C_DeInit>
	return 0;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	24023970 	.word	0x24023970

08001298 <EEPROM_WRITE_FLOAT>:

float EEPROM_WRITE_FLOAT(uint16_t MemAdr, float *regData)  //Float value is 32bit so need 4bytes in eeprom memory
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	80fb      	strh	r3, [r7, #6]
	      uint8_t in8bit [4];
	      uint32_t  wartosc;
	      float wartoscfloat;
	  } u;

	  	  u.wartoscfloat=*regData;
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	60fb      	str	r3, [r7, #12]

		  EEPROM_WRITE(MemAdr, (uint8_t*)&u, 4);
 80012aa:	f107 010c 	add.w	r1, r7, #12
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	2204      	movs	r2, #4
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ffac 	bl	8001210 <EEPROM_WRITE>

	return 0;
 80012b8:	f04f 0300 	mov.w	r3, #0
 80012bc:	ee07 3a90 	vmov	s15, r3
}
 80012c0:	eeb0 0a67 	vmov.f32	s0, s15
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <EEPROM_READ_FLOAT>:

float EEPROM_READ_FLOAT(uint16_t MemAdr,float *regData)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b084      	sub	sp, #16
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	6039      	str	r1, [r7, #0]
 80012d4:	80fb      	strh	r3, [r7, #6]
	//Is Need some delay
	HAL_Delay(2);  //@@@@@@@@@@@@@@@@@@@@ HERE IS DELAY!!!!
 80012d6:	2002      	movs	r0, #2
 80012d8:	f004 fdb8 	bl	8005e4c <HAL_Delay>
	  union TO_EEPROM {
	      uint8_t in8bit [4];
	      float warf;
	  } u;

u.warf=0;
 80012dc:	f04f 0300 	mov.w	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]

		  EEPROM_READ(MemAdr, (uint8_t*)&u, 4);
 80012e2:	f107 010c 	add.w	r1, r7, #12
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	2204      	movs	r2, #4
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff ffb2 	bl	8001254 <EEPROM_READ>

	  *regData=u.warf;
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	601a      	str	r2, [r3, #0]

	return 0;
 80012f6:	f04f 0300 	mov.w	r3, #0
 80012fa:	ee07 3a90 	vmov	s15, r3
}
 80012fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <EEPROM_WRITE_INT>:

int EEPROM_WRITE_INT(uint16_t MemAdr, int *regData)  //Float value is 16bit so need 2bytes in eeprom memory
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	80fb      	strh	r3, [r7, #6]
	      uint8_t in8bit [4];
	      uint32_t  wartosc;
	      int warint;
	  } u;

	  	  u.warint=*regData;
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	60fb      	str	r3, [r7, #12]

		  EEPROM_WRITE(MemAdr, (uint8_t*)&u, 4);
 800131a:	f107 010c 	add.w	r1, r7, #12
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	2204      	movs	r2, #4
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff74 	bl	8001210 <EEPROM_WRITE>

	return 0;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <EEPROM_READ_INT>:

int EEPROM_READ_INT(uint16_t MemAdr,int *regData)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b084      	sub	sp, #16
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	6039      	str	r1, [r7, #0]
 800133c:	80fb      	strh	r3, [r7, #6]
	//Is Need some delay
	HAL_Delay(2);
 800133e:	2002      	movs	r0, #2
 8001340:	f004 fd84 	bl	8005e4c <HAL_Delay>
	  union TO_EEPROM {
	      uint8_t in8bit [4];
	      int warint;
	  } u;

u.warint=0;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]

		  EEPROM_READ(MemAdr, (uint8_t*)&u, 4);
 8001348:	f107 010c 	add.w	r1, r7, #12
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	2204      	movs	r2, #4
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff7f 	bl	8001254 <EEPROM_READ>

	  *regData=u.warint;
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	601a      	str	r2, [r3, #0]

	return 0;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_GPIO_EXTI_Callback>:
void WYSLIJMAPE_DO_BLE();
void wyznacz_xiy();
void mierzprzebdr();

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	80fb      	strh	r3, [r7, #6]

if(GPIO_Pin==ENK1_Pin)
 8001372:	88fb      	ldrh	r3, [r7, #6]
 8001374:	2b08      	cmp	r3, #8
 8001376:	d109      	bne.n	800138c <HAL_GPIO_EXTI_Callback+0x24>
{		ENK_PRAWY++;	}
 8001378:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x80>)
 800137a:	edd3 7a00 	vldr	s15, [r3]
 800137e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001382:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x80>)
 8001388:	edc3 7a00 	vstr	s15, [r3]
if(GPIO_Pin==ENK2_Pin)
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	2b10      	cmp	r3, #16
 8001390:	d109      	bne.n	80013a6 <HAL_GPIO_EXTI_Callback+0x3e>
{		ENK_PRAWY++;	}
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x80>)
 8001394:	edd3 7a00 	vldr	s15, [r3]
 8001398:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800139c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x80>)
 80013a2:	edc3 7a00 	vstr	s15, [r3]
if(GPIO_Pin==ENK4_Pin)
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	2b40      	cmp	r3, #64	; 0x40
 80013aa:	d109      	bne.n	80013c0 <HAL_GPIO_EXTI_Callback+0x58>
{			ENK_LEWY++;	}
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <HAL_GPIO_EXTI_Callback+0x84>)
 80013ae:	edd3 7a00 	vldr	s15, [r3]
 80013b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <HAL_GPIO_EXTI_Callback+0x84>)
 80013bc:	edc3 7a00 	vstr	s15, [r3]
if(GPIO_Pin==ENK3_Pin)
 80013c0:	88fb      	ldrh	r3, [r7, #6]
 80013c2:	2b80      	cmp	r3, #128	; 0x80
 80013c4:	d109      	bne.n	80013da <HAL_GPIO_EXTI_Callback+0x72>
{			ENK_LEWY++;	}
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <HAL_GPIO_EXTI_Callback+0x84>)
 80013c8:	edd3 7a00 	vldr	s15, [r3]
 80013cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <HAL_GPIO_EXTI_Callback+0x84>)
 80013d6:	edc3 7a00 	vstr	s15, [r3]

}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	24000244 	.word	0x24000244
 80013ec:	2400023c 	.word	0x2400023c

080013f0 <oblicz_predkosc>:
int mapa_dplik=0;
int zzzap_nrprobki=0;
float Sr_Predkosc=0;

void oblicz_predkosc()
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0

	if(t2>zT_ENK+200)
 80013f6:	4b56      	ldr	r3, [pc, #344]	; (8001550 <oblicz_predkosc+0x160>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	ee07 3a90 	vmov	s15, r3
 80013fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001402:	4b54      	ldr	r3, [pc, #336]	; (8001554 <oblicz_predkosc+0x164>)
 8001404:	edd3 7a00 	vldr	s15, [r3]
 8001408:	eddf 6a53 	vldr	s13, [pc, #332]	; 8001558 <oblicz_predkosc+0x168>
 800140c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001410:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001418:	dc00      	bgt.n	800141c <oblicz_predkosc+0x2c>
		if(nr_probki==4001)
		{
			nr_probki=4000;
		}
	}
}
 800141a:	e08d      	b.n	8001538 <oblicz_predkosc+0x148>
		zT_ENK=t2;
 800141c:	4b4c      	ldr	r3, [pc, #304]	; (8001550 <oblicz_predkosc+0x160>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	ee07 3a90 	vmov	s15, r3
 8001424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001428:	4b4a      	ldr	r3, [pc, #296]	; (8001554 <oblicz_predkosc+0x164>)
 800142a:	edc3 7a00 	vstr	s15, [r3]
		float Droga_impulsu=0.000788; //czyli tyle mam metra na jeden impuls...
 800142e:	4b4b      	ldr	r3, [pc, #300]	; (800155c <oblicz_predkosc+0x16c>)
 8001430:	607b      	str	r3, [r7, #4]
		DROGA_L= ((ENK_LEWY-zENK_LEWY)*Droga_impulsu);
 8001432:	4b4b      	ldr	r3, [pc, #300]	; (8001560 <oblicz_predkosc+0x170>)
 8001434:	ed93 7a00 	vldr	s14, [r3]
 8001438:	4b4a      	ldr	r3, [pc, #296]	; (8001564 <oblicz_predkosc+0x174>)
 800143a:	edd3 7a00 	vldr	s15, [r3]
 800143e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001442:	edd7 7a01 	vldr	s15, [r7, #4]
 8001446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800144a:	4b47      	ldr	r3, [pc, #284]	; (8001568 <oblicz_predkosc+0x178>)
 800144c:	edc3 7a00 	vstr	s15, [r3]
		DROGA_L_W_PROBCE[nr_probki]=DROGA_L;
 8001450:	4b46      	ldr	r3, [pc, #280]	; (800156c <oblicz_predkosc+0x17c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a44      	ldr	r2, [pc, #272]	; (8001568 <oblicz_predkosc+0x178>)
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	4945      	ldr	r1, [pc, #276]	; (8001570 <oblicz_predkosc+0x180>)
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	440b      	add	r3, r1
 800145e:	601a      	str	r2, [r3, #0]
		DROGA_P= ((ENK_PRAWY-zENK_PRAWY)*Droga_impulsu);
 8001460:	4b44      	ldr	r3, [pc, #272]	; (8001574 <oblicz_predkosc+0x184>)
 8001462:	ed93 7a00 	vldr	s14, [r3]
 8001466:	4b44      	ldr	r3, [pc, #272]	; (8001578 <oblicz_predkosc+0x188>)
 8001468:	edd3 7a00 	vldr	s15, [r3]
 800146c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001470:	edd7 7a01 	vldr	s15, [r7, #4]
 8001474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001478:	4b40      	ldr	r3, [pc, #256]	; (800157c <oblicz_predkosc+0x18c>)
 800147a:	edc3 7a00 	vstr	s15, [r3]
		DROGA_P_W_PROBCE[nr_probki]=DROGA_P;
 800147e:	4b3b      	ldr	r3, [pc, #236]	; (800156c <oblicz_predkosc+0x17c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a3e      	ldr	r2, [pc, #248]	; (800157c <oblicz_predkosc+0x18c>)
 8001484:	6812      	ldr	r2, [r2, #0]
 8001486:	493e      	ldr	r1, [pc, #248]	; (8001580 <oblicz_predkosc+0x190>)
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	440b      	add	r3, r1
 800148c:	601a      	str	r2, [r3, #0]
		Predkosc_L=((ENK_LEWY-zENK_LEWY)*Droga_impulsu)/0.02;
 800148e:	4b34      	ldr	r3, [pc, #208]	; (8001560 <oblicz_predkosc+0x170>)
 8001490:	ed93 7a00 	vldr	s14, [r3]
 8001494:	4b33      	ldr	r3, [pc, #204]	; (8001564 <oblicz_predkosc+0x174>)
 8001496:	edd3 7a00 	vldr	s15, [r3]
 800149a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800149e:	edd7 7a01 	vldr	s15, [r7, #4]
 80014a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80014aa:	ed9f 5b27 	vldr	d5, [pc, #156]	; 8001548 <oblicz_predkosc+0x158>
 80014ae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014b2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014b6:	4b33      	ldr	r3, [pc, #204]	; (8001584 <oblicz_predkosc+0x194>)
 80014b8:	edc3 7a00 	vstr	s15, [r3]
		PREDKOSC_L_W_PROBCE[nr_probki]=Predkosc_L;
 80014bc:	4b2b      	ldr	r3, [pc, #172]	; (800156c <oblicz_predkosc+0x17c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a30      	ldr	r2, [pc, #192]	; (8001584 <oblicz_predkosc+0x194>)
 80014c2:	6812      	ldr	r2, [r2, #0]
 80014c4:	4930      	ldr	r1, [pc, #192]	; (8001588 <oblicz_predkosc+0x198>)
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	440b      	add	r3, r1
 80014ca:	601a      	str	r2, [r3, #0]
		zENK_LEWY=ENK_LEWY;
 80014cc:	4b24      	ldr	r3, [pc, #144]	; (8001560 <oblicz_predkosc+0x170>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a24      	ldr	r2, [pc, #144]	; (8001564 <oblicz_predkosc+0x174>)
 80014d2:	6013      	str	r3, [r2, #0]
		Predkosc_P=((ENK_PRAWY-zENK_PRAWY)*Droga_impulsu)/0.02;
 80014d4:	4b27      	ldr	r3, [pc, #156]	; (8001574 <oblicz_predkosc+0x184>)
 80014d6:	ed93 7a00 	vldr	s14, [r3]
 80014da:	4b27      	ldr	r3, [pc, #156]	; (8001578 <oblicz_predkosc+0x188>)
 80014dc:	edd3 7a00 	vldr	s15, [r3]
 80014e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80014e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ec:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80014f0:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8001548 <oblicz_predkosc+0x158>
 80014f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014f8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014fc:	4b23      	ldr	r3, [pc, #140]	; (800158c <oblicz_predkosc+0x19c>)
 80014fe:	edc3 7a00 	vstr	s15, [r3]
		PREDKOSC_P_W_PROBCE[nr_probki]=Predkosc_P;
 8001502:	4b1a      	ldr	r3, [pc, #104]	; (800156c <oblicz_predkosc+0x17c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a21      	ldr	r2, [pc, #132]	; (800158c <oblicz_predkosc+0x19c>)
 8001508:	6812      	ldr	r2, [r2, #0]
 800150a:	4921      	ldr	r1, [pc, #132]	; (8001590 <oblicz_predkosc+0x1a0>)
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	440b      	add	r3, r1
 8001510:	601a      	str	r2, [r3, #0]
		zENK_PRAWY=ENK_PRAWY;
 8001512:	4b18      	ldr	r3, [pc, #96]	; (8001574 <oblicz_predkosc+0x184>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a18      	ldr	r2, [pc, #96]	; (8001578 <oblicz_predkosc+0x188>)
 8001518:	6013      	str	r3, [r2, #0]
		nr_probki++;
 800151a:	4b14      	ldr	r3, [pc, #80]	; (800156c <oblicz_predkosc+0x17c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	3301      	adds	r3, #1
 8001520:	4a12      	ldr	r2, [pc, #72]	; (800156c <oblicz_predkosc+0x17c>)
 8001522:	6013      	str	r3, [r2, #0]
		if(nr_probki==4001)
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <oblicz_predkosc+0x17c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f640 72a1 	movw	r2, #4001	; 0xfa1
 800152c:	4293      	cmp	r3, r2
 800152e:	d103      	bne.n	8001538 <oblicz_predkosc+0x148>
			nr_probki=4000;
 8001530:	4b0e      	ldr	r3, [pc, #56]	; (800156c <oblicz_predkosc+0x17c>)
 8001532:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001536:	601a      	str	r2, [r3, #0]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	f3af 8000 	nop.w
 8001548:	47ae147b 	.word	0x47ae147b
 800154c:	3f947ae1 	.word	0x3f947ae1
 8001550:	240002fc 	.word	0x240002fc
 8001554:	2400024c 	.word	0x2400024c
 8001558:	43480000 	.word	0x43480000
 800155c:	3a4e91c9 	.word	0x3a4e91c9
 8001560:	2400023c 	.word	0x2400023c
 8001564:	24000240 	.word	0x24000240
 8001568:	240004b4 	.word	0x240004b4
 800156c:	24000254 	.word	0x24000254
 8001570:	2400feb8 	.word	0x2400feb8
 8001574:	24000244 	.word	0x24000244
 8001578:	24000248 	.word	0x24000248
 800157c:	24013d38 	.word	0x24013d38
 8001580:	24017bbc 	.word	0x24017bbc
 8001584:	240004ac 	.word	0x240004ac
 8001588:	2401ba3c 	.word	0x2401ba3c
 800158c:	240004b0 	.word	0x240004b0
 8001590:	24004338 	.word	0x24004338

08001594 <mierzprzebdr>:

void mierzprzebdr()
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
	if(zzzap_nrprobki!=nr_probki-1)
 8001598:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <mierzprzebdr+0xbc>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	1e5a      	subs	r2, r3, #1
 800159e:	4b2d      	ldr	r3, [pc, #180]	; (8001654 <mierzprzebdr+0xc0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d04f      	beq.n	8001646 <mierzprzebdr+0xb2>
	{
		zzzap_nrprobki=nr_probki-1;
 80015a6:	4b2a      	ldr	r3, [pc, #168]	; (8001650 <mierzprzebdr+0xbc>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	4a29      	ldr	r2, [pc, #164]	; (8001654 <mierzprzebdr+0xc0>)
 80015ae:	6013      	str	r3, [r2, #0]

	DR_SRODKA[nr_probki-1]=DROGA_L_W_PROBCE[nr_probki-1]+DROGA_P_W_PROBCE[nr_probki-1];
 80015b0:	4b27      	ldr	r3, [pc, #156]	; (8001650 <mierzprzebdr+0xbc>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	4a28      	ldr	r2, [pc, #160]	; (8001658 <mierzprzebdr+0xc4>)
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	ed93 7a00 	vldr	s14, [r3]
 80015c0:	4b23      	ldr	r3, [pc, #140]	; (8001650 <mierzprzebdr+0xbc>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	3b01      	subs	r3, #1
 80015c6:	4a25      	ldr	r2, [pc, #148]	; (800165c <mierzprzebdr+0xc8>)
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	4b1f      	ldr	r3, [pc, #124]	; (8001650 <mierzprzebdr+0xbc>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	3b01      	subs	r3, #1
 80015d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015da:	4a21      	ldr	r2, [pc, #132]	; (8001660 <mierzprzebdr+0xcc>)
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	edc3 7a00 	vstr	s15, [r3]
	if(DR_SRODKA[nr_probki-1]!=0)
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <mierzprzebdr+0xbc>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	4a1d      	ldr	r2, [pc, #116]	; (8001660 <mierzprzebdr+0xcc>)
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	edd3 7a00 	vldr	s15, [r3]
 80015f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fc:	d013      	beq.n	8001626 <mierzprzebdr+0x92>
	{
		DR_SRODKA[nr_probki-1]=DR_SRODKA[nr_probki-1]/2;
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <mierzprzebdr+0xbc>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	3b01      	subs	r3, #1
 8001604:	4a16      	ldr	r2, [pc, #88]	; (8001660 <mierzprzebdr+0xcc>)
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	ed93 7a00 	vldr	s14, [r3]
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <mierzprzebdr+0xbc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	3b01      	subs	r3, #1
 8001614:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001618:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800161c:	4a10      	ldr	r2, [pc, #64]	; (8001660 <mierzprzebdr+0xcc>)
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	edc3 7a00 	vstr	s15, [r3]
	}
	P_DRSR=P_DRSR+DR_SRODKA[nr_probki-1];
 8001626:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <mierzprzebdr+0xbc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	3b01      	subs	r3, #1
 800162c:	4a0c      	ldr	r2, [pc, #48]	; (8001660 <mierzprzebdr+0xcc>)
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	ed93 7a00 	vldr	s14, [r3]
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <mierzprzebdr+0xd0>)
 8001638:	edd3 7a00 	vldr	s15, [r3]
 800163c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <mierzprzebdr+0xd0>)
 8001642:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	24000254 	.word	0x24000254
 8001654:	2400027c 	.word	0x2400027c
 8001658:	2400feb8 	.word	0x2400feb8
 800165c:	24017bbc 	.word	0x24017bbc
 8001660:	2400c038 	.word	0x2400c038
 8001664:	24000258 	.word	0x24000258

08001668 <wykryj_znacznik>:

void wykryj_znacznik()
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	wykr_znacznik=0;
 800166c:	4b4a      	ldr	r3, [pc, #296]	; (8001798 <wykryj_znacznik+0x130>)
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]

	if(flaga_ENK==1 && (ENK_LEWY-ZN_ENKL)!=0 )
 8001672:	4b4a      	ldr	r3, [pc, #296]	; (800179c <wykryj_znacznik+0x134>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d115      	bne.n	80016a6 <wykryj_znacznik+0x3e>
 800167a:	4b49      	ldr	r3, [pc, #292]	; (80017a0 <wykryj_znacznik+0x138>)
 800167c:	ed93 7a00 	vldr	s14, [r3]
 8001680:	4b48      	ldr	r3, [pc, #288]	; (80017a4 <wykryj_znacznik+0x13c>)
 8001682:	edd3 7a00 	vldr	s15, [r3]
 8001686:	ee77 7a67 	vsub.f32	s15, s14, s15
 800168a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800168e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001692:	d008      	beq.n	80016a6 <wykryj_znacznik+0x3e>
	{
		ZN_ENKL=ENK_LEWY;
 8001694:	4b42      	ldr	r3, [pc, #264]	; (80017a0 <wykryj_znacznik+0x138>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a42      	ldr	r2, [pc, #264]	; (80017a4 <wykryj_znacznik+0x13c>)
 800169a:	6013      	str	r3, [r2, #0]
		D_ZENKL++;
 800169c:	4b42      	ldr	r3, [pc, #264]	; (80017a8 <wykryj_znacznik+0x140>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	3301      	adds	r3, #1
 80016a2:	4a41      	ldr	r2, [pc, #260]	; (80017a8 <wykryj_znacznik+0x140>)
 80016a4:	6013      	str	r3, [r2, #0]
	}
	if(flaga_ENK==1 && (ENK_PRAWY-ZN_ENKP)!=0 )
 80016a6:	4b3d      	ldr	r3, [pc, #244]	; (800179c <wykryj_znacznik+0x134>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d115      	bne.n	80016da <wykryj_znacznik+0x72>
 80016ae:	4b3f      	ldr	r3, [pc, #252]	; (80017ac <wykryj_znacznik+0x144>)
 80016b0:	ed93 7a00 	vldr	s14, [r3]
 80016b4:	4b3e      	ldr	r3, [pc, #248]	; (80017b0 <wykryj_znacznik+0x148>)
 80016b6:	edd3 7a00 	vldr	s15, [r3]
 80016ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c6:	d008      	beq.n	80016da <wykryj_znacznik+0x72>
	{
		ZN_ENKP=ENK_PRAWY;
 80016c8:	4b38      	ldr	r3, [pc, #224]	; (80017ac <wykryj_znacznik+0x144>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a38      	ldr	r2, [pc, #224]	; (80017b0 <wykryj_znacznik+0x148>)
 80016ce:	6013      	str	r3, [r2, #0]
		D_ZENKP++;
 80016d0:	4b38      	ldr	r3, [pc, #224]	; (80017b4 <wykryj_znacznik+0x14c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	3301      	adds	r3, #1
 80016d6:	4a37      	ldr	r2, [pc, #220]	; (80017b4 <wykryj_znacznik+0x14c>)
 80016d8:	6013      	str	r3, [r2, #0]
	}
	if(D_ZENKL>=25 && D_ZENKP>=25)
 80016da:	4b33      	ldr	r3, [pc, #204]	; (80017a8 <wykryj_znacznik+0x140>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b18      	cmp	r3, #24
 80016e0:	dd4f      	ble.n	8001782 <wykryj_znacznik+0x11a>
 80016e2:	4b34      	ldr	r3, [pc, #208]	; (80017b4 <wykryj_znacznik+0x14c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b18      	cmp	r3, #24
 80016e8:	dd4b      	ble.n	8001782 <wykryj_znacznik+0x11a>
	{
		//wykytro znacznik

		D_ZENKP=0;
 80016ea:	4b32      	ldr	r3, [pc, #200]	; (80017b4 <wykryj_znacznik+0x14c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
		D_ZENKL=0;
 80016f0:	4b2d      	ldr	r3, [pc, #180]	; (80017a8 <wykryj_znacznik+0x140>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]



		wykryto_znacznik();
 80016f6:	f000 f86d 	bl	80017d4 <wykryto_znacznik>

		if(mapa_dplik==1)
 80016fa:	4b2f      	ldr	r3, [pc, #188]	; (80017b8 <wykryj_znacznik+0x150>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d12b      	bne.n	800175a <wykryj_znacznik+0xf2>
		{
			mapa_dplik=0;
 8001702:	4b2d      	ldr	r3, [pc, #180]	; (80017b8 <wykryj_znacznik+0x150>)
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
			URUCHAMIANIE_ROBOTA=0; //zatrzymanie robota
 8001708:	4b2c      	ldr	r3, [pc, #176]	; (80017bc <wykryj_znacznik+0x154>)
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]

		   __HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_1,1000);
 800170e:	4b2c      	ldr	r3, [pc, #176]	; (80017c0 <wykryj_znacznik+0x158>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001716:	635a      	str	r2, [r3, #52]	; 0x34
		    __HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_2,1000);
 8001718:	4b29      	ldr	r3, [pc, #164]	; (80017c0 <wykryj_znacznik+0x158>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001720:	639a      	str	r2, [r3, #56]	; 0x38

		    __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,1000);
 8001722:	4b28      	ldr	r3, [pc, #160]	; (80017c4 <wykryj_znacznik+0x15c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800172a:	63da      	str	r2, [r3, #60]	; 0x3c
		    __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,1000);
 800172c:	4b25      	ldr	r3, [pc, #148]	; (80017c4 <wykryj_znacznik+0x15c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001734:	641a      	str	r2, [r3, #64]	; 0x40

			  HAL_GPIO_WritePin(LDD1_GPIO_Port, LDD1_Pin,GPIO_PIN_SET);
 8001736:	2201      	movs	r2, #1
 8001738:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800173c:	4822      	ldr	r0, [pc, #136]	; (80017c8 <wykryj_znacznik+0x160>)
 800173e:	f008 fd49 	bl	800a1d4 <HAL_GPIO_WritePin>
			wyznacz_xiy();
 8001742:	f000 f8dd 	bl	8001900 <wyznacz_xiy>
			WYSLIJMAPE_DO_BLE();
 8001746:	f000 f99b 	bl	8001a80 <WYSLIJMAPE_DO_BLE>

			P_DRSR=0;
 800174a:	4b20      	ldr	r3, [pc, #128]	; (80017cc <wykryj_znacznik+0x164>)
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
			nr_probki=0;
 8001752:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <wykryj_znacznik+0x168>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
			return;
 8001758:	e01d      	b.n	8001796 <wykryj_znacznik+0x12e>
		}

		if(mapa_dplik==0)
 800175a:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <wykryj_znacznik+0x150>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10f      	bne.n	8001782 <wykryj_znacznik+0x11a>
		{
			HAL_GPIO_WritePin(LDD1_GPIO_Port, LDD1_Pin,GPIO_PIN_RESET);
 8001762:	2200      	movs	r2, #0
 8001764:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001768:	4817      	ldr	r0, [pc, #92]	; (80017c8 <wykryj_znacznik+0x160>)
 800176a:	f008 fd33 	bl	800a1d4 <HAL_GPIO_WritePin>
			mapa_dplik=1;
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <wykryj_znacznik+0x150>)
 8001770:	2201      	movs	r2, #1
 8001772:	601a      	str	r2, [r3, #0]
			P_DRSR=0;
 8001774:	4b15      	ldr	r3, [pc, #84]	; (80017cc <wykryj_znacznik+0x164>)
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
			nr_probki=0;
 800177c:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <wykryj_znacznik+0x168>)
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]



	}

	if(flaga_ENK==0) //referebce ti file "CZUJNIKI.c"
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <wykryj_znacznik+0x134>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d105      	bne.n	8001796 <wykryj_znacznik+0x12e>
	{
		 D_ZENKL=0;
 800178a:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <wykryj_znacznik+0x140>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
		 D_ZENKP=0;
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <wykryj_znacznik+0x14c>)
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
	}
}
 8001796:	bd80      	pop	{r7, pc}
 8001798:	2400026c 	.word	0x2400026c
 800179c:	24000250 	.word	0x24000250
 80017a0:	2400023c 	.word	0x2400023c
 80017a4:	2400025c 	.word	0x2400025c
 80017a8:	24000264 	.word	0x24000264
 80017ac:	24000244 	.word	0x24000244
 80017b0:	24000260 	.word	0x24000260
 80017b4:	24000268 	.word	0x24000268
 80017b8:	24000278 	.word	0x24000278
 80017bc:	240002e0 	.word	0x240002e0
 80017c0:	24023a7c 	.word	0x24023a7c
 80017c4:	24023a3c 	.word	0x24023a3c
 80017c8:	58020000 	.word	0x58020000
 80017cc:	24000258 	.word	0x24000258
 80017d0:	24000254 	.word	0x24000254

080017d4 <wykryto_znacznik>:




void wykryto_znacznik()
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0

	CZ_OKR=t2-zT_ZNACZNIK;
 80017da:	4b40      	ldr	r3, [pc, #256]	; (80018dc <wykryto_znacznik+0x108>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	4b40      	ldr	r3, [pc, #256]	; (80018e0 <wykryto_znacznik+0x10c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	ee07 3a90 	vmov	s15, r3
 80017e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ec:	4b3d      	ldr	r3, [pc, #244]	; (80018e4 <wykryto_znacznik+0x110>)
 80017ee:	edc3 7a00 	vstr	s15, [r3]
	CZ_OKR=CZ_OKR/10000;
 80017f2:	4b3c      	ldr	r3, [pc, #240]	; (80018e4 <wykryto_znacznik+0x110>)
 80017f4:	ed93 7a00 	vldr	s14, [r3]
 80017f8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80018e8 <wykryto_znacznik+0x114>
 80017fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001800:	4b38      	ldr	r3, [pc, #224]	; (80018e4 <wykryto_znacznik+0x110>)
 8001802:	edc3 7a00 	vstr	s15, [r3]
	zT_ZNACZNIK=t2;
 8001806:	4b35      	ldr	r3, [pc, #212]	; (80018dc <wykryto_znacznik+0x108>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a35      	ldr	r2, [pc, #212]	; (80018e0 <wykryto_znacznik+0x10c>)
 800180c:	6013      	str	r3, [r2, #0]

	for(int i=0; i<nr_probki; i++)
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	e031      	b.n	8001878 <wykryto_znacznik+0xa4>
	{
		PR_Srodka[i]=PREDKOSC_L_W_PROBCE[i]+PREDKOSC_P_W_PROBCE[i];
 8001814:	4a35      	ldr	r2, [pc, #212]	; (80018ec <wykryto_znacznik+0x118>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	ed93 7a00 	vldr	s14, [r3]
 8001820:	4a33      	ldr	r2, [pc, #204]	; (80018f0 <wykryto_znacznik+0x11c>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	edd3 7a00 	vldr	s15, [r3]
 800182c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001830:	4a30      	ldr	r2, [pc, #192]	; (80018f4 <wykryto_znacznik+0x120>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	edc3 7a00 	vstr	s15, [r3]
		if(PR_Srodka[i]!=0)
 800183c:	4a2d      	ldr	r2, [pc, #180]	; (80018f4 <wykryto_znacznik+0x120>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	edd3 7a00 	vldr	s15, [r3]
 8001848:	eef5 7a40 	vcmp.f32	s15, #0.0
 800184c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001850:	d00f      	beq.n	8001872 <wykryto_znacznik+0x9e>
		{
		PR_Srodka[i]=PR_Srodka[i]/2;
 8001852:	4a28      	ldr	r2, [pc, #160]	; (80018f4 <wykryto_znacznik+0x120>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	ed93 7a00 	vldr	s14, [r3]
 800185e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001862:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001866:	4a23      	ldr	r2, [pc, #140]	; (80018f4 <wykryto_znacznik+0x120>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<nr_probki; i++)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3301      	adds	r3, #1
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <wykryto_znacznik+0x124>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	429a      	cmp	r2, r3
 8001880:	dbc8      	blt.n	8001814 <wykryto_znacznik+0x40>
		}
	}


	for (int i=0; i<nr_probki; i++)
 8001882:	2300      	movs	r3, #0
 8001884:	603b      	str	r3, [r7, #0]
 8001886:	e010      	b.n	80018aa <wykryto_znacznik+0xd6>
	{
		Sr_Predkosc=Sr_Predkosc+PR_Srodka[i];
 8001888:	4a1a      	ldr	r2, [pc, #104]	; (80018f4 <wykryto_znacznik+0x120>)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	ed93 7a00 	vldr	s14, [r3]
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <wykryto_znacznik+0x128>)
 8001896:	edd3 7a00 	vldr	s15, [r3]
 800189a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800189e:	4b17      	ldr	r3, [pc, #92]	; (80018fc <wykryto_znacznik+0x128>)
 80018a0:	edc3 7a00 	vstr	s15, [r3]
	for (int i=0; i<nr_probki; i++)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	3301      	adds	r3, #1
 80018a8:	603b      	str	r3, [r7, #0]
 80018aa:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <wykryto_znacznik+0x124>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	dbe9      	blt.n	8001888 <wykryto_znacznik+0xb4>
	}
	Sr_Predkosc=Sr_Predkosc/nr_probki;
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <wykryto_znacznik+0x128>)
 80018b6:	edd3 6a00 	vldr	s13, [r3]
 80018ba:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <wykryto_znacznik+0x124>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	ee07 3a90 	vmov	s15, r3
 80018c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ca:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <wykryto_znacznik+0x128>)
 80018cc:	edc3 7a00 	vstr	s15, [r3]

}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	240002fc 	.word	0x240002fc
 80018e0:	24000270 	.word	0x24000270
 80018e4:	24000274 	.word	0x24000274
 80018e8:	461c4000 	.word	0x461c4000
 80018ec:	2401ba3c 	.word	0x2401ba3c
 80018f0:	24004338 	.word	0x24004338
 80018f4:	24013d3c 	.word	0x24013d3c
 80018f8:	24000254 	.word	0x24000254
 80018fc:	24000280 	.word	0x24000280

08001900 <wyznacz_xiy>:

float X[4000];
float Y[4000];
float T[4000];
void wyznacz_xiy()
{
 8001900:	b580      	push	{r7, lr}
 8001902:	ed2d 8b02 	vpush	{d8}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
	for(int i=0;  i<nr_probki; i++)
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	e099      	b.n	8001a44 <wyznacz_xiy+0x144>
	{
	T[i]=T[i-1]+(1/0.147)*(DROGA_L_W_PROBCE[i]-DROGA_P_W_PROBCE[i]);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	4a54      	ldr	r2, [pc, #336]	; (8001a68 <wyznacz_xiy+0x168>)
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	edd3 7a00 	vldr	s15, [r3]
 800191e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001922:	4a52      	ldr	r2, [pc, #328]	; (8001a6c <wyznacz_xiy+0x16c>)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	ed93 7a00 	vldr	s14, [r3]
 800192e:	4a50      	ldr	r2, [pc, #320]	; (8001a70 <wyznacz_xiy+0x170>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	edd3 7a00 	vldr	s15, [r3]
 800193a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800193e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001942:	ed9f 5b47 	vldr	d5, [pc, #284]	; 8001a60 <wyznacz_xiy+0x160>
 8001946:	ee27 7b05 	vmul.f64	d7, d7, d5
 800194a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800194e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001952:	4a45      	ldr	r2, [pc, #276]	; (8001a68 <wyznacz_xiy+0x168>)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	edc3 7a00 	vstr	s15, [r3]


	X[i]=X[i-1]+(  0.5*cos(T[i-1]) * ( DROGA_L_W_PROBCE[i]+DROGA_P_W_PROBCE[i]) );
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3b01      	subs	r3, #1
 8001962:	4a44      	ldr	r2, [pc, #272]	; (8001a74 <wyznacz_xiy+0x174>)
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	edd3 7a00 	vldr	s15, [r3]
 800196c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	4a3c      	ldr	r2, [pc, #240]	; (8001a68 <wyznacz_xiy+0x168>)
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	edd3 7a00 	vldr	s15, [r3]
 800197e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001982:	eeb0 0b47 	vmov.f64	d0, d7
 8001986:	f016 fec3 	bl	8018710 <cos>
 800198a:	eeb0 7b40 	vmov.f64	d7, d0
 800198e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001992:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001996:	4a35      	ldr	r2, [pc, #212]	; (8001a6c <wyznacz_xiy+0x16c>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	ed93 7a00 	vldr	s14, [r3]
 80019a2:	4a33      	ldr	r2, [pc, #204]	; (8001a70 <wyznacz_xiy+0x170>)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	edd3 7a00 	vldr	s15, [r3]
 80019ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019b6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80019ba:	ee38 7b07 	vadd.f64	d7, d8, d7
 80019be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019c2:	4a2c      	ldr	r2, [pc, #176]	; (8001a74 <wyznacz_xiy+0x174>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	edc3 7a00 	vstr	s15, [r3]

	Y[i]=Y[i-1]+(  0.5*sin(T[i-1]) * ( DROGA_L_W_PROBCE[i]+DROGA_P_W_PROBCE[i]) );
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	4a29      	ldr	r2, [pc, #164]	; (8001a78 <wyznacz_xiy+0x178>)
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	edd3 7a00 	vldr	s15, [r3]
 80019dc:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	4a20      	ldr	r2, [pc, #128]	; (8001a68 <wyznacz_xiy+0x168>)
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	edd3 7a00 	vldr	s15, [r3]
 80019ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019f2:	eeb0 0b47 	vmov.f64	d0, d7
 80019f6:	f016 fed3 	bl	80187a0 <sin>
 80019fa:	eeb0 7b40 	vmov.f64	d7, d0
 80019fe:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001a02:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001a06:	4a19      	ldr	r2, [pc, #100]	; (8001a6c <wyznacz_xiy+0x16c>)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	ed93 7a00 	vldr	s14, [r3]
 8001a12:	4a17      	ldr	r2, [pc, #92]	; (8001a70 <wyznacz_xiy+0x170>)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	edd3 7a00 	vldr	s15, [r3]
 8001a1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a26:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001a2a:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001a2e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a32:	4a11      	ldr	r2, [pc, #68]	; (8001a78 <wyznacz_xiy+0x178>)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0;  i<nr_probki; i++)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3301      	adds	r3, #1
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <wyznacz_xiy+0x17c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	f6ff af60 	blt.w	8001910 <wyznacz_xiy+0x10>
	}

}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	ecbd 8b02 	vpop	{d8}
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	845a8ece 	.word	0x845a8ece
 8001a64:	401b35fc 	.word	0x401b35fc
 8001a68:	240081b8 	.word	0x240081b8
 8001a6c:	2400feb8 	.word	0x2400feb8
 8001a70:	24017bbc 	.word	0x24017bbc
 8001a74:	2401f8bc 	.word	0x2401f8bc
 8001a78:	240004b8 	.word	0x240004b8
 8001a7c:	24000254 	.word	0x24000254

08001a80 <WYSLIJMAPE_DO_BLE>:


void WYSLIJMAPE_DO_BLE()
{
 8001a80:	b590      	push	{r4, r7, lr}
 8001a82:	b093      	sub	sp, #76	; 0x4c
 8001a84:	af06      	add	r7, sp, #24
	char SEND_DATA_IN_FILE[40];

	if(DANE_DO_TEXT)
 8001a86:	4b3f      	ldr	r3, [pc, #252]	; (8001b84 <WYSLIJMAPE_DO_BLE+0x104>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d059      	beq.n	8001b42 <WYSLIJMAPE_DO_BLE+0xc2>
	{
		Z_Czas_Do_Pliku=HAL_GetTick();
 8001a8e:	f004 f9d1 	bl	8005e34 <HAL_GetTick>
 8001a92:	4603      	mov	r3, r0
 8001a94:	4a3c      	ldr	r2, [pc, #240]	; (8001b88 <WYSLIJMAPE_DO_BLE+0x108>)
 8001a96:	6013      	str	r3, [r2, #0]


		sprintf(SEND_DATA_IN_FILE,"X,Y,DR_L,DR_P,PR,P\n\r");
 8001a98:	463b      	mov	r3, r7
 8001a9a:	493c      	ldr	r1, [pc, #240]	; (8001b8c <WYSLIJMAPE_DO_BLE+0x10c>)
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f013 f8c7 	bl	8014c30 <siprintf>
		DO_BLE(SEND_DATA_IN_FILE);
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff f957 	bl	8000d58 <DO_BLE>

		int znr_probki=nr_probki;
 8001aaa:	4b39      	ldr	r3, [pc, #228]	; (8001b90 <WYSLIJMAPE_DO_BLE+0x110>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	62bb      	str	r3, [r7, #40]	; 0x28
		for(int i=0; i<znr_probki; i=i)
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ab4:	e040      	b.n	8001b38 <WYSLIJMAPE_DO_BLE+0xb8>
		{

		if(Z_Czas_Do_Pliku+30 <  HAL_GetTick() )
 8001ab6:	4b34      	ldr	r3, [pc, #208]	; (8001b88 <WYSLIJMAPE_DO_BLE+0x108>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f103 041e 	add.w	r4, r3, #30
 8001abe:	f004 f9b9 	bl	8005e34 <HAL_GetTick>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	429c      	cmp	r4, r3
 8001ac6:	d237      	bcs.n	8001b38 <WYSLIJMAPE_DO_BLE+0xb8>
			{
			Z_Czas_Do_Pliku=HAL_GetTick();
 8001ac8:	f004 f9b4 	bl	8005e34 <HAL_GetTick>
 8001acc:	4603      	mov	r3, r0
 8001ace:	4a2e      	ldr	r2, [pc, #184]	; (8001b88 <WYSLIJMAPE_DO_BLE+0x108>)
 8001ad0:	6013      	str	r3, [r2, #0]
					i++;
 8001ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c


				sprintf(SEND_DATA_IN_FILE,"%f,%f,%f,%f\n\r",X[i],Y[i],DROGA_L_W_PROBCE[i],DROGA_P_W_PROBCE[i] );
 8001ad8:	4a2e      	ldr	r2, [pc, #184]	; (8001b94 <WYSLIJMAPE_DO_BLE+0x114>)
 8001ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	edd3 7a00 	vldr	s15, [r3]
 8001ae4:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8001ae8:	4a2b      	ldr	r2, [pc, #172]	; (8001b98 <WYSLIJMAPE_DO_BLE+0x118>)
 8001aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	edd3 7a00 	vldr	s15, [r3]
 8001af4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001af8:	4a28      	ldr	r2, [pc, #160]	; (8001b9c <WYSLIJMAPE_DO_BLE+0x11c>)
 8001afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	edd3 6a00 	vldr	s13, [r3]
 8001b04:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001b08:	4a25      	ldr	r2, [pc, #148]	; (8001ba0 <WYSLIJMAPE_DO_BLE+0x120>)
 8001b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	edd3 5a00 	vldr	s11, [r3]
 8001b14:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8001b18:	4638      	mov	r0, r7
 8001b1a:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001b1e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001b22:	ed8d 7b00 	vstr	d7, [sp]
 8001b26:	ec53 2b14 	vmov	r2, r3, d4
 8001b2a:	491e      	ldr	r1, [pc, #120]	; (8001ba4 <WYSLIJMAPE_DO_BLE+0x124>)
 8001b2c:	f013 f880 	bl	8014c30 <siprintf>
				DO_BLE(SEND_DATA_IN_FILE);
 8001b30:	463b      	mov	r3, r7
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff f910 	bl	8000d58 <DO_BLE>
		for(int i=0; i<znr_probki; i=i)
 8001b38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	dbba      	blt.n	8001ab6 <WYSLIJMAPE_DO_BLE+0x36>
	else
	{
		sprintf(SEND_DATA_IN_FILE,"T:%f\n\rVs:%f\n\r,D:%f\n\r",CZ_OKR,Sr_Predkosc, P_DRSR);
					DO_BLE(SEND_DATA_IN_FILE);
	}
}
 8001b40:	e01c      	b.n	8001b7c <WYSLIJMAPE_DO_BLE+0xfc>
		sprintf(SEND_DATA_IN_FILE,"T:%f\n\rVs:%f\n\r,D:%f\n\r",CZ_OKR,Sr_Predkosc, P_DRSR);
 8001b42:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <WYSLIJMAPE_DO_BLE+0x128>)
 8001b44:	edd3 7a00 	vldr	s15, [r3]
 8001b48:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001b4c:	4b17      	ldr	r3, [pc, #92]	; (8001bac <WYSLIJMAPE_DO_BLE+0x12c>)
 8001b4e:	edd3 7a00 	vldr	s15, [r3]
 8001b52:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b56:	4b16      	ldr	r3, [pc, #88]	; (8001bb0 <WYSLIJMAPE_DO_BLE+0x130>)
 8001b58:	edd3 6a00 	vldr	s13, [r3]
 8001b5c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001b60:	4638      	mov	r0, r7
 8001b62:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001b66:	ed8d 7b00 	vstr	d7, [sp]
 8001b6a:	ec53 2b15 	vmov	r2, r3, d5
 8001b6e:	4911      	ldr	r1, [pc, #68]	; (8001bb4 <WYSLIJMAPE_DO_BLE+0x134>)
 8001b70:	f013 f85e 	bl	8014c30 <siprintf>
					DO_BLE(SEND_DATA_IN_FILE);
 8001b74:	463b      	mov	r3, r7
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff f8ee 	bl	8000d58 <DO_BLE>
}
 8001b7c:	bf00      	nop
 8001b7e:	3734      	adds	r7, #52	; 0x34
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd90      	pop	{r4, r7, pc}
 8001b84:	24000290 	.word	0x24000290
 8001b88:	24000288 	.word	0x24000288
 8001b8c:	08019378 	.word	0x08019378
 8001b90:	24000254 	.word	0x24000254
 8001b94:	2401f8bc 	.word	0x2401f8bc
 8001b98:	240004b8 	.word	0x240004b8
 8001b9c:	2400feb8 	.word	0x2400feb8
 8001ba0:	24017bbc 	.word	0x24017bbc
 8001ba4:	08019390 	.word	0x08019390
 8001ba8:	24000274 	.word	0x24000274
 8001bac:	24000280 	.word	0x24000280
 8001bb0:	24000258 	.word	0x24000258
 8001bb4:	080193a0 	.word	0x080193a0

08001bb8 <KOMENDY_BLE>:
void PID_DO_BLE();
void DRUKUJCZUJNIKI();


void KOMENDY_BLE()
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
size_BLE--;
 8001bbc:	4ba1      	ldr	r3, [pc, #644]	; (8001e44 <KOMENDY_BLE+0x28c>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	4b9f      	ldr	r3, [pc, #636]	; (8001e44 <KOMENDY_BLE+0x28c>)
 8001bc6:	701a      	strb	r2, [r3, #0]
size_BLE--;
 8001bc8:	4b9e      	ldr	r3, [pc, #632]	; (8001e44 <KOMENDY_BLE+0x28c>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	4b9c      	ldr	r3, [pc, #624]	; (8001e44 <KOMENDY_BLE+0x28c>)
 8001bd2:	701a      	strb	r2, [r3, #0]
c=DANE_BLE[size_BLE];
 8001bd4:	4b9b      	ldr	r3, [pc, #620]	; (8001e44 <KOMENDY_BLE+0x28c>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b9b      	ldr	r3, [pc, #620]	; (8001e48 <KOMENDY_BLE+0x290>)
 8001bdc:	5c9a      	ldrb	r2, [r3, r2]
 8001bde:	4b9b      	ldr	r3, [pc, #620]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001be0:	701a      	strb	r2, [r3, #0]
if(c==226)
 8001be2:	4b9a      	ldr	r3, [pc, #616]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2be2      	cmp	r3, #226	; 0xe2
 8001be8:	d105      	bne.n	8001bf6 <KOMENDY_BLE+0x3e>
{
	size_BLE--;
 8001bea:	4b96      	ldr	r3, [pc, #600]	; (8001e44 <KOMENDY_BLE+0x28c>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4b94      	ldr	r3, [pc, #592]	; (8001e44 <KOMENDY_BLE+0x28c>)
 8001bf4:	701a      	strb	r2, [r3, #0]
}
c=DANE_BLE[size_BLE];
 8001bf6:	4b93      	ldr	r3, [pc, #588]	; (8001e44 <KOMENDY_BLE+0x28c>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4b92      	ldr	r3, [pc, #584]	; (8001e48 <KOMENDY_BLE+0x290>)
 8001bfe:	5c9a      	ldrb	r2, [r3, r2]
 8001c00:	4b92      	ldr	r3, [pc, #584]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001c02:	701a      	strb	r2, [r3, #0]


if(c==147 || c==134)
 8001c04:	4b91      	ldr	r3, [pc, #580]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b93      	cmp	r3, #147	; 0x93
 8001c0a:	d003      	beq.n	8001c14 <KOMENDY_BLE+0x5c>
 8001c0c:	4b8f      	ldr	r3, [pc, #572]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b86      	cmp	r3, #134	; 0x86
 8001c12:	d10b      	bne.n	8001c2c <KOMENDY_BLE+0x74>
{
	drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=1;//SAVE_DATA
 8001c14:	4b8e      	ldr	r3, [pc, #568]	; (8001e50 <KOMENDY_BLE+0x298>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
 8001c1a:	4b8e      	ldr	r3, [pc, #568]	; (8001e54 <KOMENDY_BLE+0x29c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]
 8001c20:	4b8d      	ldr	r3, [pc, #564]	; (8001e58 <KOMENDY_BLE+0x2a0>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	4b8d      	ldr	r3, [pc, #564]	; (8001e5c <KOMENDY_BLE+0x2a4>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	701a      	strb	r2, [r3, #0]
}
if(c==146)
 8001c2c:	4b87      	ldr	r3, [pc, #540]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b92      	cmp	r3, #146	; 0x92
 8001c32:	d10b      	bne.n	8001c4c <KOMENDY_BLE+0x94>
{
	drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;//STOP_DATA
 8001c34:	4b86      	ldr	r3, [pc, #536]	; (8001e50 <KOMENDY_BLE+0x298>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
 8001c3a:	4b86      	ldr	r3, [pc, #536]	; (8001e54 <KOMENDY_BLE+0x29c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
 8001c40:	4b85      	ldr	r3, [pc, #532]	; (8001e58 <KOMENDY_BLE+0x2a0>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	4b85      	ldr	r3, [pc, #532]	; (8001e5c <KOMENDY_BLE+0x2a4>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]


				//Dobrze byłoby to zrobic na switchu tylko to przerzucic...


	if(c=='I'){wynik=222; URUCHAMIANIE_ROBOTA=1; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;} //jedz ( uruchamianie robota)
 8001c4c:	4b7f      	ldr	r3, [pc, #508]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b49      	cmp	r3, #73	; 0x49
 8001c52:	d112      	bne.n	8001c7a <KOMENDY_BLE+0xc2>
 8001c54:	4b82      	ldr	r3, [pc, #520]	; (8001e60 <KOMENDY_BLE+0x2a8>)
 8001c56:	22de      	movs	r2, #222	; 0xde
 8001c58:	701a      	strb	r2, [r3, #0]
 8001c5a:	4b82      	ldr	r3, [pc, #520]	; (8001e64 <KOMENDY_BLE+0x2ac>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	4b7b      	ldr	r3, [pc, #492]	; (8001e50 <KOMENDY_BLE+0x298>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
 8001c66:	4b7b      	ldr	r3, [pc, #492]	; (8001e54 <KOMENDY_BLE+0x29c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
 8001c6c:	4b7a      	ldr	r3, [pc, #488]	; (8001e58 <KOMENDY_BLE+0x2a0>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	4b7a      	ldr	r3, [pc, #488]	; (8001e5c <KOMENDY_BLE+0x2a4>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
 8001c78:	e208      	b.n	800208c <KOMENDY_BLE+0x4d4>

	else if(c=='U'){wynik=223; URUCHAMIANIE_ROBOTA=0;} //stop ( wyłączanie robota )
 8001c7a:	4b74      	ldr	r3, [pc, #464]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b55      	cmp	r3, #85	; 0x55
 8001c80:	d106      	bne.n	8001c90 <KOMENDY_BLE+0xd8>
 8001c82:	4b77      	ldr	r3, [pc, #476]	; (8001e60 <KOMENDY_BLE+0x2a8>)
 8001c84:	22df      	movs	r2, #223	; 0xdf
 8001c86:	701a      	strb	r2, [r3, #0]
 8001c88:	4b76      	ldr	r3, [pc, #472]	; (8001e64 <KOMENDY_BLE+0x2ac>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	e1fd      	b.n	800208c <KOMENDY_BLE+0x4d4>

	//ERKAN "PODST"
	else if(c=='P'){wynik =220; drukowanie=3; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;} //scanowanie pid
 8001c90:	4b6e      	ldr	r3, [pc, #440]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b50      	cmp	r3, #80	; 0x50
 8001c96:	d10f      	bne.n	8001cb8 <KOMENDY_BLE+0x100>
 8001c98:	4b71      	ldr	r3, [pc, #452]	; (8001e60 <KOMENDY_BLE+0x2a8>)
 8001c9a:	22dc      	movs	r2, #220	; 0xdc
 8001c9c:	701a      	strb	r2, [r3, #0]
 8001c9e:	4b6c      	ldr	r3, [pc, #432]	; (8001e50 <KOMENDY_BLE+0x298>)
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	701a      	strb	r2, [r3, #0]
 8001ca4:	4b6b      	ldr	r3, [pc, #428]	; (8001e54 <KOMENDY_BLE+0x29c>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	701a      	strb	r2, [r3, #0]
 8001caa:	4b6b      	ldr	r3, [pc, #428]	; (8001e58 <KOMENDY_BLE+0x2a0>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	4b6a      	ldr	r3, [pc, #424]	; (8001e5c <KOMENDY_BLE+0x2a4>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	701a      	strb	r2, [r3, #0]
 8001cb6:	e1e9      	b.n	800208c <KOMENDY_BLE+0x4d4>
	else if(c=='O'){wynik =221; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;} //wylaczanie scanowania pid
 8001cb8:	4b64      	ldr	r3, [pc, #400]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b4f      	cmp	r3, #79	; 0x4f
 8001cbe:	d10f      	bne.n	8001ce0 <KOMENDY_BLE+0x128>
 8001cc0:	4b67      	ldr	r3, [pc, #412]	; (8001e60 <KOMENDY_BLE+0x2a8>)
 8001cc2:	22dd      	movs	r2, #221	; 0xdd
 8001cc4:	701a      	strb	r2, [r3, #0]
 8001cc6:	4b62      	ldr	r3, [pc, #392]	; (8001e50 <KOMENDY_BLE+0x298>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	701a      	strb	r2, [r3, #0]
 8001ccc:	4b61      	ldr	r3, [pc, #388]	; (8001e54 <KOMENDY_BLE+0x29c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
 8001cd2:	4b61      	ldr	r3, [pc, #388]	; (8001e58 <KOMENDY_BLE+0x2a0>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	4b60      	ldr	r3, [pc, #384]	; (8001e5c <KOMENDY_BLE+0x2a4>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]
 8001cde:	e1d5      	b.n	800208c <KOMENDY_BLE+0x4d4>
	else if(c=='>'){wynik =205; drukowanie=1; k_wys_pom=1; DANE_DO_TEXT=0;}//aktualne dane PID
 8001ce0:	4b5a      	ldr	r3, [pc, #360]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b3e      	cmp	r3, #62	; 0x3e
 8001ce6:	d10c      	bne.n	8001d02 <KOMENDY_BLE+0x14a>
 8001ce8:	4b5d      	ldr	r3, [pc, #372]	; (8001e60 <KOMENDY_BLE+0x2a8>)
 8001cea:	22cd      	movs	r2, #205	; 0xcd
 8001cec:	701a      	strb	r2, [r3, #0]
 8001cee:	4b58      	ldr	r3, [pc, #352]	; (8001e50 <KOMENDY_BLE+0x298>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	701a      	strb	r2, [r3, #0]
 8001cf4:	4b58      	ldr	r3, [pc, #352]	; (8001e58 <KOMENDY_BLE+0x2a0>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	4b58      	ldr	r3, [pc, #352]	; (8001e5c <KOMENDY_BLE+0x2a4>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
 8001d00:	e1c4      	b.n	800208c <KOMENDY_BLE+0x4d4>


	else if(c=='+'){wynik =1;}  //Kp
 8001d02:	4b52      	ldr	r3, [pc, #328]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b2b      	cmp	r3, #43	; 0x2b
 8001d08:	d103      	bne.n	8001d12 <KOMENDY_BLE+0x15a>
 8001d0a:	4b55      	ldr	r3, [pc, #340]	; (8001e60 <KOMENDY_BLE+0x2a8>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	701a      	strb	r2, [r3, #0]
 8001d10:	e1bc      	b.n	800208c <KOMENDY_BLE+0x4d4>

    else if(c=='-'){wynik =2;}  //KD
 8001d12:	4b4e      	ldr	r3, [pc, #312]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b2d      	cmp	r3, #45	; 0x2d
 8001d18:	d103      	bne.n	8001d22 <KOMENDY_BLE+0x16a>
 8001d1a:	4b51      	ldr	r3, [pc, #324]	; (8001e60 <KOMENDY_BLE+0x2a8>)
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	701a      	strb	r2, [r3, #0]
 8001d20:	e1b4      	b.n	800208c <KOMENDY_BLE+0x4d4>
    else if(c==')'){wynik =103;}  //Predkosc silnikow to intiger
 8001d22:	4b4a      	ldr	r3, [pc, #296]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b29      	cmp	r3, #41	; 0x29
 8001d28:	d103      	bne.n	8001d32 <KOMENDY_BLE+0x17a>
 8001d2a:	4b4d      	ldr	r3, [pc, #308]	; (8001e60 <KOMENDY_BLE+0x2a8>)
 8001d2c:	2267      	movs	r2, #103	; 0x67
 8001d2e:	701a      	strb	r2, [r3, #0]
 8001d30:	e1ac      	b.n	800208c <KOMENDY_BLE+0x4d4>
    else if(c=='('){wynik =4;} //Ki
 8001d32:	4b46      	ldr	r3, [pc, #280]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b28      	cmp	r3, #40	; 0x28
 8001d38:	d103      	bne.n	8001d42 <KOMENDY_BLE+0x18a>
 8001d3a:	4b49      	ldr	r3, [pc, #292]	; (8001e60 <KOMENDY_BLE+0x2a8>)
 8001d3c:	2204      	movs	r2, #4
 8001d3e:	701a      	strb	r2, [r3, #0]
 8001d40:	e1a4      	b.n	800208c <KOMENDY_BLE+0x4d4>

	    //@@@
	    //EKRAN "CZUJNIKI"
	      else if(c=='B')  {wynik =206;  czujnikiactiv=1; k_wys_pom=1; drukowanie=0; DANE_DO_TEXT=0;} //Wysylaj aktualne dane z czujnikow
 8001d42:	4b42      	ldr	r3, [pc, #264]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b42      	cmp	r3, #66	; 0x42
 8001d48:	d10f      	bne.n	8001d6a <KOMENDY_BLE+0x1b2>
 8001d4a:	4b45      	ldr	r3, [pc, #276]	; (8001e60 <KOMENDY_BLE+0x2a8>)
 8001d4c:	22ce      	movs	r2, #206	; 0xce
 8001d4e:	701a      	strb	r2, [r3, #0]
 8001d50:	4b40      	ldr	r3, [pc, #256]	; (8001e54 <KOMENDY_BLE+0x29c>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	701a      	strb	r2, [r3, #0]
 8001d56:	4b40      	ldr	r3, [pc, #256]	; (8001e58 <KOMENDY_BLE+0x2a0>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	4b3c      	ldr	r3, [pc, #240]	; (8001e50 <KOMENDY_BLE+0x298>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
 8001d62:	4b3e      	ldr	r3, [pc, #248]	; (8001e5c <KOMENDY_BLE+0x2a4>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
 8001d68:	e190      	b.n	800208c <KOMENDY_BLE+0x4d4>
	      else if(c=='V'){wynik =207;   czujnikiactiv=0; k_wys_pom=1; drukowanie=0; DANE_DO_TEXT=0;} //wyłączam wysylanie danych z czujników
 8001d6a:	4b38      	ldr	r3, [pc, #224]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b56      	cmp	r3, #86	; 0x56
 8001d70:	d10f      	bne.n	8001d92 <KOMENDY_BLE+0x1da>
 8001d72:	4b3b      	ldr	r3, [pc, #236]	; (8001e60 <KOMENDY_BLE+0x2a8>)
 8001d74:	22cf      	movs	r2, #207	; 0xcf
 8001d76:	701a      	strb	r2, [r3, #0]
 8001d78:	4b36      	ldr	r3, [pc, #216]	; (8001e54 <KOMENDY_BLE+0x29c>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	701a      	strb	r2, [r3, #0]
 8001d7e:	4b36      	ldr	r3, [pc, #216]	; (8001e58 <KOMENDY_BLE+0x2a0>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	4b32      	ldr	r3, [pc, #200]	; (8001e50 <KOMENDY_BLE+0x298>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	701a      	strb	r2, [r3, #0]
 8001d8a:	4b34      	ldr	r3, [pc, #208]	; (8001e5c <KOMENDY_BLE+0x2a4>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
 8001d90:	e17c      	b.n	800208c <KOMENDY_BLE+0x4d4>
	      else if(c=='~'){wynik =208;   drukowanie=2; czujnikiactiv=0;  k_wys_pom=1; DANE_DO_TEXT=0;}
 8001d92:	4b2e      	ldr	r3, [pc, #184]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b7e      	cmp	r3, #126	; 0x7e
 8001d98:	d10f      	bne.n	8001dba <KOMENDY_BLE+0x202>
 8001d9a:	4b31      	ldr	r3, [pc, #196]	; (8001e60 <KOMENDY_BLE+0x2a8>)
 8001d9c:	22d0      	movs	r2, #208	; 0xd0
 8001d9e:	701a      	strb	r2, [r3, #0]
 8001da0:	4b2b      	ldr	r3, [pc, #172]	; (8001e50 <KOMENDY_BLE+0x298>)
 8001da2:	2202      	movs	r2, #2
 8001da4:	701a      	strb	r2, [r3, #0]
 8001da6:	4b2b      	ldr	r3, [pc, #172]	; (8001e54 <KOMENDY_BLE+0x29c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	701a      	strb	r2, [r3, #0]
 8001dac:	4b2a      	ldr	r3, [pc, #168]	; (8001e58 <KOMENDY_BLE+0x2a0>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	4b2a      	ldr	r3, [pc, #168]	; (8001e5c <KOMENDY_BLE+0x2a4>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]
 8001db8:	e168      	b.n	800208c <KOMENDY_BLE+0x4d4>
	       											//wyłączam wysylanie danych z czujników i wysylam aktualne wartosci ER
	      else if(c=='*'){wynik=10; czujnikiactiv  =0; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;} //ER1
 8001dba:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b2a      	cmp	r3, #42	; 0x2a
 8001dc0:	d112      	bne.n	8001de8 <KOMENDY_BLE+0x230>
 8001dc2:	4b27      	ldr	r3, [pc, #156]	; (8001e60 <KOMENDY_BLE+0x2a8>)
 8001dc4:	220a      	movs	r2, #10
 8001dc6:	701a      	strb	r2, [r3, #0]
 8001dc8:	4b22      	ldr	r3, [pc, #136]	; (8001e54 <KOMENDY_BLE+0x29c>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	701a      	strb	r2, [r3, #0]
 8001dce:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <KOMENDY_BLE+0x298>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
 8001dd4:	4b1f      	ldr	r3, [pc, #124]	; (8001e54 <KOMENDY_BLE+0x29c>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	701a      	strb	r2, [r3, #0]
 8001dda:	4b1f      	ldr	r3, [pc, #124]	; (8001e58 <KOMENDY_BLE+0x2a0>)
 8001ddc:	2201      	movs	r2, #1
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	4b1e      	ldr	r3, [pc, #120]	; (8001e5c <KOMENDY_BLE+0x2a4>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	701a      	strb	r2, [r3, #0]
 8001de6:	e151      	b.n	800208c <KOMENDY_BLE+0x4d4>
	      else if(c=='&'){wynik=11; czujnikiactiv  =0; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;} //ER2
 8001de8:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b26      	cmp	r3, #38	; 0x26
 8001dee:	d112      	bne.n	8001e16 <KOMENDY_BLE+0x25e>
 8001df0:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <KOMENDY_BLE+0x2a8>)
 8001df2:	220b      	movs	r2, #11
 8001df4:	701a      	strb	r2, [r3, #0]
 8001df6:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <KOMENDY_BLE+0x29c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
 8001dfc:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <KOMENDY_BLE+0x298>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
 8001e02:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <KOMENDY_BLE+0x29c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]
 8001e08:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <KOMENDY_BLE+0x2a0>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <KOMENDY_BLE+0x2a4>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
 8001e14:	e13a      	b.n	800208c <KOMENDY_BLE+0x4d4>
	      else if(c=='^'){wynik=12; czujnikiactiv  =0; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;}
 8001e16:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <KOMENDY_BLE+0x294>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b5e      	cmp	r3, #94	; 0x5e
 8001e1c:	d124      	bne.n	8001e68 <KOMENDY_BLE+0x2b0>
 8001e1e:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <KOMENDY_BLE+0x2a8>)
 8001e20:	220c      	movs	r2, #12
 8001e22:	701a      	strb	r2, [r3, #0]
 8001e24:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <KOMENDY_BLE+0x29c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]
 8001e2a:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <KOMENDY_BLE+0x298>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	701a      	strb	r2, [r3, #0]
 8001e30:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <KOMENDY_BLE+0x29c>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	701a      	strb	r2, [r3, #0]
 8001e36:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <KOMENDY_BLE+0x2a0>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <KOMENDY_BLE+0x2a4>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	701a      	strb	r2, [r3, #0]
 8001e42:	e123      	b.n	800208c <KOMENDY_BLE+0x4d4>
 8001e44:	24000218 	.word	0x24000218
 8001e48:	240003a0 	.word	0x240003a0
 8001e4c:	2400028e 	.word	0x2400028e
 8001e50:	2400028d 	.word	0x2400028d
 8001e54:	2400028f 	.word	0x2400028f
 8001e58:	24000000 	.word	0x24000000
 8001e5c:	24000290 	.word	0x24000290
 8001e60:	2400028c 	.word	0x2400028c
 8001e64:	240002e0 	.word	0x240002e0
	      else if(c=='%'){wynik=13; czujnikiactiv  =0; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;}
 8001e68:	4ba0      	ldr	r3, [pc, #640]	; (80020ec <KOMENDY_BLE+0x534>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b25      	cmp	r3, #37	; 0x25
 8001e6e:	d112      	bne.n	8001e96 <KOMENDY_BLE+0x2de>
 8001e70:	4b9f      	ldr	r3, [pc, #636]	; (80020f0 <KOMENDY_BLE+0x538>)
 8001e72:	220d      	movs	r2, #13
 8001e74:	701a      	strb	r2, [r3, #0]
 8001e76:	4b9f      	ldr	r3, [pc, #636]	; (80020f4 <KOMENDY_BLE+0x53c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
 8001e7c:	4b9e      	ldr	r3, [pc, #632]	; (80020f8 <KOMENDY_BLE+0x540>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	701a      	strb	r2, [r3, #0]
 8001e82:	4b9c      	ldr	r3, [pc, #624]	; (80020f4 <KOMENDY_BLE+0x53c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
 8001e88:	4b9c      	ldr	r3, [pc, #624]	; (80020fc <KOMENDY_BLE+0x544>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	4b9c      	ldr	r3, [pc, #624]	; (8002100 <KOMENDY_BLE+0x548>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]
 8001e94:	e0fa      	b.n	800208c <KOMENDY_BLE+0x4d4>
	      else if(c=='$'){wynik=14; czujnikiactiv  =0; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;}
 8001e96:	4b95      	ldr	r3, [pc, #596]	; (80020ec <KOMENDY_BLE+0x534>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b24      	cmp	r3, #36	; 0x24
 8001e9c:	d112      	bne.n	8001ec4 <KOMENDY_BLE+0x30c>
 8001e9e:	4b94      	ldr	r3, [pc, #592]	; (80020f0 <KOMENDY_BLE+0x538>)
 8001ea0:	220e      	movs	r2, #14
 8001ea2:	701a      	strb	r2, [r3, #0]
 8001ea4:	4b93      	ldr	r3, [pc, #588]	; (80020f4 <KOMENDY_BLE+0x53c>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	701a      	strb	r2, [r3, #0]
 8001eaa:	4b93      	ldr	r3, [pc, #588]	; (80020f8 <KOMENDY_BLE+0x540>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]
 8001eb0:	4b90      	ldr	r3, [pc, #576]	; (80020f4 <KOMENDY_BLE+0x53c>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	701a      	strb	r2, [r3, #0]
 8001eb6:	4b91      	ldr	r3, [pc, #580]	; (80020fc <KOMENDY_BLE+0x544>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	4b90      	ldr	r3, [pc, #576]	; (8002100 <KOMENDY_BLE+0x548>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	701a      	strb	r2, [r3, #0]
 8001ec2:	e0e3      	b.n	800208c <KOMENDY_BLE+0x4d4>
	      else if(c=='#'){wynik=15; czujnikiactiv  =0; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;}
 8001ec4:	4b89      	ldr	r3, [pc, #548]	; (80020ec <KOMENDY_BLE+0x534>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b23      	cmp	r3, #35	; 0x23
 8001eca:	d112      	bne.n	8001ef2 <KOMENDY_BLE+0x33a>
 8001ecc:	4b88      	ldr	r3, [pc, #544]	; (80020f0 <KOMENDY_BLE+0x538>)
 8001ece:	220f      	movs	r2, #15
 8001ed0:	701a      	strb	r2, [r3, #0]
 8001ed2:	4b88      	ldr	r3, [pc, #544]	; (80020f4 <KOMENDY_BLE+0x53c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
 8001ed8:	4b87      	ldr	r3, [pc, #540]	; (80020f8 <KOMENDY_BLE+0x540>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	701a      	strb	r2, [r3, #0]
 8001ede:	4b85      	ldr	r3, [pc, #532]	; (80020f4 <KOMENDY_BLE+0x53c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
 8001ee4:	4b85      	ldr	r3, [pc, #532]	; (80020fc <KOMENDY_BLE+0x544>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	4b85      	ldr	r3, [pc, #532]	; (8002100 <KOMENDY_BLE+0x548>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]
 8001ef0:	e0cc      	b.n	800208c <KOMENDY_BLE+0x4d4>
	      else if(c=='@'){wynik=16; czujnikiactiv  =0; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;} //ER7
 8001ef2:	4b7e      	ldr	r3, [pc, #504]	; (80020ec <KOMENDY_BLE+0x534>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b40      	cmp	r3, #64	; 0x40
 8001ef8:	d112      	bne.n	8001f20 <KOMENDY_BLE+0x368>
 8001efa:	4b7d      	ldr	r3, [pc, #500]	; (80020f0 <KOMENDY_BLE+0x538>)
 8001efc:	2210      	movs	r2, #16
 8001efe:	701a      	strb	r2, [r3, #0]
 8001f00:	4b7c      	ldr	r3, [pc, #496]	; (80020f4 <KOMENDY_BLE+0x53c>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	701a      	strb	r2, [r3, #0]
 8001f06:	4b7c      	ldr	r3, [pc, #496]	; (80020f8 <KOMENDY_BLE+0x540>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
 8001f0c:	4b79      	ldr	r3, [pc, #484]	; (80020f4 <KOMENDY_BLE+0x53c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
 8001f12:	4b7a      	ldr	r3, [pc, #488]	; (80020fc <KOMENDY_BLE+0x544>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	4b79      	ldr	r3, [pc, #484]	; (8002100 <KOMENDY_BLE+0x548>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	701a      	strb	r2, [r3, #0]
 8001f1e:	e0b5      	b.n	800208c <KOMENDY_BLE+0x4d4>
	      else if(c=='!'){wynik=17; czujnikiactiv  =0; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;} //ERMAX
 8001f20:	4b72      	ldr	r3, [pc, #456]	; (80020ec <KOMENDY_BLE+0x534>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b21      	cmp	r3, #33	; 0x21
 8001f26:	d112      	bne.n	8001f4e <KOMENDY_BLE+0x396>
 8001f28:	4b71      	ldr	r3, [pc, #452]	; (80020f0 <KOMENDY_BLE+0x538>)
 8001f2a:	2211      	movs	r2, #17
 8001f2c:	701a      	strb	r2, [r3, #0]
 8001f2e:	4b71      	ldr	r3, [pc, #452]	; (80020f4 <KOMENDY_BLE+0x53c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]
 8001f34:	4b70      	ldr	r3, [pc, #448]	; (80020f8 <KOMENDY_BLE+0x540>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	701a      	strb	r2, [r3, #0]
 8001f3a:	4b6e      	ldr	r3, [pc, #440]	; (80020f4 <KOMENDY_BLE+0x53c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
 8001f40:	4b6e      	ldr	r3, [pc, #440]	; (80020fc <KOMENDY_BLE+0x544>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	4b6e      	ldr	r3, [pc, #440]	; (8002100 <KOMENDY_BLE+0x548>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]
 8001f4c:	e09e      	b.n	800208c <KOMENDY_BLE+0x4d4>

	      else if(c=='H'){wynik=41; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;}  //CZCZ2
 8001f4e:	4b67      	ldr	r3, [pc, #412]	; (80020ec <KOMENDY_BLE+0x534>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b48      	cmp	r3, #72	; 0x48
 8001f54:	d10f      	bne.n	8001f76 <KOMENDY_BLE+0x3be>
 8001f56:	4b66      	ldr	r3, [pc, #408]	; (80020f0 <KOMENDY_BLE+0x538>)
 8001f58:	2229      	movs	r2, #41	; 0x29
 8001f5a:	701a      	strb	r2, [r3, #0]
 8001f5c:	4b66      	ldr	r3, [pc, #408]	; (80020f8 <KOMENDY_BLE+0x540>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]
 8001f62:	4b64      	ldr	r3, [pc, #400]	; (80020f4 <KOMENDY_BLE+0x53c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]
 8001f68:	4b64      	ldr	r3, [pc, #400]	; (80020fc <KOMENDY_BLE+0x544>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	4b64      	ldr	r3, [pc, #400]	; (8002100 <KOMENDY_BLE+0x548>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	701a      	strb	r2, [r3, #0]
 8001f74:	e08a      	b.n	800208c <KOMENDY_BLE+0x4d4>
	      else if(c=='Q'){wynik=42; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;}  //CZCZ3
 8001f76:	4b5d      	ldr	r3, [pc, #372]	; (80020ec <KOMENDY_BLE+0x534>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b51      	cmp	r3, #81	; 0x51
 8001f7c:	d10f      	bne.n	8001f9e <KOMENDY_BLE+0x3e6>
 8001f7e:	4b5c      	ldr	r3, [pc, #368]	; (80020f0 <KOMENDY_BLE+0x538>)
 8001f80:	222a      	movs	r2, #42	; 0x2a
 8001f82:	701a      	strb	r2, [r3, #0]
 8001f84:	4b5c      	ldr	r3, [pc, #368]	; (80020f8 <KOMENDY_BLE+0x540>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	701a      	strb	r2, [r3, #0]
 8001f8a:	4b5a      	ldr	r3, [pc, #360]	; (80020f4 <KOMENDY_BLE+0x53c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
 8001f90:	4b5a      	ldr	r3, [pc, #360]	; (80020fc <KOMENDY_BLE+0x544>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	4b5a      	ldr	r3, [pc, #360]	; (8002100 <KOMENDY_BLE+0x548>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	701a      	strb	r2, [r3, #0]
 8001f9c:	e076      	b.n	800208c <KOMENDY_BLE+0x4d4>
	      else if(c==167){wynik=40; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;} //CZCZ1 //alt+21 nadaje apka  - § <<ten znaczek //bylo "G" nie wiem skad problem
 8001f9e:	4b53      	ldr	r3, [pc, #332]	; (80020ec <KOMENDY_BLE+0x534>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2ba7      	cmp	r3, #167	; 0xa7
 8001fa4:	d10f      	bne.n	8001fc6 <KOMENDY_BLE+0x40e>
 8001fa6:	4b52      	ldr	r3, [pc, #328]	; (80020f0 <KOMENDY_BLE+0x538>)
 8001fa8:	2228      	movs	r2, #40	; 0x28
 8001faa:	701a      	strb	r2, [r3, #0]
 8001fac:	4b52      	ldr	r3, [pc, #328]	; (80020f8 <KOMENDY_BLE+0x540>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
 8001fb2:	4b50      	ldr	r3, [pc, #320]	; (80020f4 <KOMENDY_BLE+0x53c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	701a      	strb	r2, [r3, #0]
 8001fb8:	4b50      	ldr	r3, [pc, #320]	; (80020fc <KOMENDY_BLE+0x544>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	4b50      	ldr	r3, [pc, #320]	; (8002100 <KOMENDY_BLE+0x548>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
 8001fc4:	e062      	b.n	800208c <KOMENDY_BLE+0x4d4>
	      else if(c=='W'){wynik=43; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;}  //CZCZ4
 8001fc6:	4b49      	ldr	r3, [pc, #292]	; (80020ec <KOMENDY_BLE+0x534>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b57      	cmp	r3, #87	; 0x57
 8001fcc:	d10f      	bne.n	8001fee <KOMENDY_BLE+0x436>
 8001fce:	4b48      	ldr	r3, [pc, #288]	; (80020f0 <KOMENDY_BLE+0x538>)
 8001fd0:	222b      	movs	r2, #43	; 0x2b
 8001fd2:	701a      	strb	r2, [r3, #0]
 8001fd4:	4b48      	ldr	r3, [pc, #288]	; (80020f8 <KOMENDY_BLE+0x540>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
 8001fda:	4b46      	ldr	r3, [pc, #280]	; (80020f4 <KOMENDY_BLE+0x53c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	701a      	strb	r2, [r3, #0]
 8001fe0:	4b46      	ldr	r3, [pc, #280]	; (80020fc <KOMENDY_BLE+0x544>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	4b46      	ldr	r3, [pc, #280]	; (8002100 <KOMENDY_BLE+0x548>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]
 8001fec:	e04e      	b.n	800208c <KOMENDY_BLE+0x4d4>
	      else if(c=='?'){wynik=44; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;}  //CZCZ5
 8001fee:	4b3f      	ldr	r3, [pc, #252]	; (80020ec <KOMENDY_BLE+0x534>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b3f      	cmp	r3, #63	; 0x3f
 8001ff4:	d10f      	bne.n	8002016 <KOMENDY_BLE+0x45e>
 8001ff6:	4b3e      	ldr	r3, [pc, #248]	; (80020f0 <KOMENDY_BLE+0x538>)
 8001ff8:	222c      	movs	r2, #44	; 0x2c
 8001ffa:	701a      	strb	r2, [r3, #0]
 8001ffc:	4b3e      	ldr	r3, [pc, #248]	; (80020f8 <KOMENDY_BLE+0x540>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]
 8002002:	4b3c      	ldr	r3, [pc, #240]	; (80020f4 <KOMENDY_BLE+0x53c>)
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]
 8002008:	4b3c      	ldr	r3, [pc, #240]	; (80020fc <KOMENDY_BLE+0x544>)
 800200a:	2201      	movs	r2, #1
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	4b3c      	ldr	r3, [pc, #240]	; (8002100 <KOMENDY_BLE+0x548>)
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
 8002014:	e03a      	b.n	800208c <KOMENDY_BLE+0x4d4>
	      else if(c=='L'){wynik=45; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;}  //CZCZ6
 8002016:	4b35      	ldr	r3, [pc, #212]	; (80020ec <KOMENDY_BLE+0x534>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b4c      	cmp	r3, #76	; 0x4c
 800201c:	d10f      	bne.n	800203e <KOMENDY_BLE+0x486>
 800201e:	4b34      	ldr	r3, [pc, #208]	; (80020f0 <KOMENDY_BLE+0x538>)
 8002020:	222d      	movs	r2, #45	; 0x2d
 8002022:	701a      	strb	r2, [r3, #0]
 8002024:	4b34      	ldr	r3, [pc, #208]	; (80020f8 <KOMENDY_BLE+0x540>)
 8002026:	2200      	movs	r2, #0
 8002028:	701a      	strb	r2, [r3, #0]
 800202a:	4b32      	ldr	r3, [pc, #200]	; (80020f4 <KOMENDY_BLE+0x53c>)
 800202c:	2200      	movs	r2, #0
 800202e:	701a      	strb	r2, [r3, #0]
 8002030:	4b32      	ldr	r3, [pc, #200]	; (80020fc <KOMENDY_BLE+0x544>)
 8002032:	2201      	movs	r2, #1
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	4b32      	ldr	r3, [pc, #200]	; (8002100 <KOMENDY_BLE+0x548>)
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
 800203c:	e026      	b.n	800208c <KOMENDY_BLE+0x4d4>
	      else if(c=='T'){wynik=46; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;}  //CZCZ7
 800203e:	4b2b      	ldr	r3, [pc, #172]	; (80020ec <KOMENDY_BLE+0x534>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b54      	cmp	r3, #84	; 0x54
 8002044:	d10f      	bne.n	8002066 <KOMENDY_BLE+0x4ae>
 8002046:	4b2a      	ldr	r3, [pc, #168]	; (80020f0 <KOMENDY_BLE+0x538>)
 8002048:	222e      	movs	r2, #46	; 0x2e
 800204a:	701a      	strb	r2, [r3, #0]
 800204c:	4b2a      	ldr	r3, [pc, #168]	; (80020f8 <KOMENDY_BLE+0x540>)
 800204e:	2200      	movs	r2, #0
 8002050:	701a      	strb	r2, [r3, #0]
 8002052:	4b28      	ldr	r3, [pc, #160]	; (80020f4 <KOMENDY_BLE+0x53c>)
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
 8002058:	4b28      	ldr	r3, [pc, #160]	; (80020fc <KOMENDY_BLE+0x544>)
 800205a:	2201      	movs	r2, #1
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	4b28      	ldr	r3, [pc, #160]	; (8002100 <KOMENDY_BLE+0x548>)
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
 8002064:	e012      	b.n	800208c <KOMENDY_BLE+0x4d4>
	      else if(c=='Y'){wynik=47; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;}  //CZCZ8
 8002066:	4b21      	ldr	r3, [pc, #132]	; (80020ec <KOMENDY_BLE+0x534>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b59      	cmp	r3, #89	; 0x59
 800206c:	d10e      	bne.n	800208c <KOMENDY_BLE+0x4d4>
 800206e:	4b20      	ldr	r3, [pc, #128]	; (80020f0 <KOMENDY_BLE+0x538>)
 8002070:	222f      	movs	r2, #47	; 0x2f
 8002072:	701a      	strb	r2, [r3, #0]
 8002074:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <KOMENDY_BLE+0x540>)
 8002076:	2200      	movs	r2, #0
 8002078:	701a      	strb	r2, [r3, #0]
 800207a:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <KOMENDY_BLE+0x53c>)
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
 8002080:	4b1e      	ldr	r3, [pc, #120]	; (80020fc <KOMENDY_BLE+0x544>)
 8002082:	2201      	movs	r2, #1
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <KOMENDY_BLE+0x548>)
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]

	    	//@@@

    //EKRAN "ZAAW"
	    if(c=='X'){drukowanie=4; } //drukuj aktualnie zapisane dane :)
 800208c:	4b17      	ldr	r3, [pc, #92]	; (80020ec <KOMENDY_BLE+0x534>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b58      	cmp	r3, #88	; 0x58
 8002092:	d103      	bne.n	800209c <KOMENDY_BLE+0x4e4>
 8002094:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <KOMENDY_BLE+0x540>)
 8002096:	2204      	movs	r2, #4
 8002098:	701a      	strb	r2, [r3, #0]
 800209a:	e0d2      	b.n	8002242 <KOMENDY_BLE+0x68a>

    else if(c=='g'){wynik=30; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;}  //MAX_PID_WARTOSC
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <KOMENDY_BLE+0x534>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b67      	cmp	r3, #103	; 0x67
 80020a2:	d10f      	bne.n	80020c4 <KOMENDY_BLE+0x50c>
 80020a4:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <KOMENDY_BLE+0x538>)
 80020a6:	221e      	movs	r2, #30
 80020a8:	701a      	strb	r2, [r3, #0]
 80020aa:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <KOMENDY_BLE+0x540>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	701a      	strb	r2, [r3, #0]
 80020b0:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <KOMENDY_BLE+0x53c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
 80020b6:	4b11      	ldr	r3, [pc, #68]	; (80020fc <KOMENDY_BLE+0x544>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	4b10      	ldr	r3, [pc, #64]	; (8002100 <KOMENDY_BLE+0x548>)
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]
 80020c2:	e0be      	b.n	8002242 <KOMENDY_BLE+0x68a>
    else if(c=='h'){wynik=131; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;} //pr_tyl
 80020c4:	4b09      	ldr	r3, [pc, #36]	; (80020ec <KOMENDY_BLE+0x534>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b68      	cmp	r3, #104	; 0x68
 80020ca:	d11b      	bne.n	8002104 <KOMENDY_BLE+0x54c>
 80020cc:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <KOMENDY_BLE+0x538>)
 80020ce:	2283      	movs	r2, #131	; 0x83
 80020d0:	701a      	strb	r2, [r3, #0]
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <KOMENDY_BLE+0x540>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <KOMENDY_BLE+0x53c>)
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
 80020de:	4b07      	ldr	r3, [pc, #28]	; (80020fc <KOMENDY_BLE+0x544>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	4b06      	ldr	r3, [pc, #24]	; (8002100 <KOMENDY_BLE+0x548>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
 80020ea:	e0aa      	b.n	8002242 <KOMENDY_BLE+0x68a>
 80020ec:	2400028e 	.word	0x2400028e
 80020f0:	2400028c 	.word	0x2400028c
 80020f4:	2400028f 	.word	0x2400028f
 80020f8:	2400028d 	.word	0x2400028d
 80020fc:	24000000 	.word	0x24000000
 8002100:	24000290 	.word	0x24000290
    else if(c=='q'){wynik=32; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;}  //SUMAMAX
 8002104:	4b54      	ldr	r3, [pc, #336]	; (8002258 <KOMENDY_BLE+0x6a0>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b71      	cmp	r3, #113	; 0x71
 800210a:	d10f      	bne.n	800212c <KOMENDY_BLE+0x574>
 800210c:	4b53      	ldr	r3, [pc, #332]	; (800225c <KOMENDY_BLE+0x6a4>)
 800210e:	2220      	movs	r2, #32
 8002110:	701a      	strb	r2, [r3, #0]
 8002112:	4b53      	ldr	r3, [pc, #332]	; (8002260 <KOMENDY_BLE+0x6a8>)
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]
 8002118:	4b52      	ldr	r3, [pc, #328]	; (8002264 <KOMENDY_BLE+0x6ac>)
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]
 800211e:	4b52      	ldr	r3, [pc, #328]	; (8002268 <KOMENDY_BLE+0x6b0>)
 8002120:	2201      	movs	r2, #1
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	4b51      	ldr	r3, [pc, #324]	; (800226c <KOMENDY_BLE+0x6b4>)
 8002126:	2200      	movs	r2, #0
 8002128:	701a      	strb	r2, [r3, #0]
 800212a:	e08a      	b.n	8002242 <KOMENDY_BLE+0x68a>
    else if(c=='w'){wynik=33; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;}  //Rezerww1
 800212c:	4b4a      	ldr	r3, [pc, #296]	; (8002258 <KOMENDY_BLE+0x6a0>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b77      	cmp	r3, #119	; 0x77
 8002132:	d10f      	bne.n	8002154 <KOMENDY_BLE+0x59c>
 8002134:	4b49      	ldr	r3, [pc, #292]	; (800225c <KOMENDY_BLE+0x6a4>)
 8002136:	2221      	movs	r2, #33	; 0x21
 8002138:	701a      	strb	r2, [r3, #0]
 800213a:	4b49      	ldr	r3, [pc, #292]	; (8002260 <KOMENDY_BLE+0x6a8>)
 800213c:	2200      	movs	r2, #0
 800213e:	701a      	strb	r2, [r3, #0]
 8002140:	4b48      	ldr	r3, [pc, #288]	; (8002264 <KOMENDY_BLE+0x6ac>)
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]
 8002146:	4b48      	ldr	r3, [pc, #288]	; (8002268 <KOMENDY_BLE+0x6b0>)
 8002148:	2201      	movs	r2, #1
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	4b47      	ldr	r3, [pc, #284]	; (800226c <KOMENDY_BLE+0x6b4>)
 800214e:	2200      	movs	r2, #0
 8002150:	701a      	strb	r2, [r3, #0]
 8002152:	e076      	b.n	8002242 <KOMENDY_BLE+0x68a>


    else if(c=='e'){wynik=134; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0; } //test silnika   //zmienna 1
 8002154:	4b40      	ldr	r3, [pc, #256]	; (8002258 <KOMENDY_BLE+0x6a0>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b65      	cmp	r3, #101	; 0x65
 800215a:	d10f      	bne.n	800217c <KOMENDY_BLE+0x5c4>
 800215c:	4b3f      	ldr	r3, [pc, #252]	; (800225c <KOMENDY_BLE+0x6a4>)
 800215e:	2286      	movs	r2, #134	; 0x86
 8002160:	701a      	strb	r2, [r3, #0]
 8002162:	4b3f      	ldr	r3, [pc, #252]	; (8002260 <KOMENDY_BLE+0x6a8>)
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]
 8002168:	4b3e      	ldr	r3, [pc, #248]	; (8002264 <KOMENDY_BLE+0x6ac>)
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]
 800216e:	4b3e      	ldr	r3, [pc, #248]	; (8002268 <KOMENDY_BLE+0x6b0>)
 8002170:	2201      	movs	r2, #1
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	4b3d      	ldr	r3, [pc, #244]	; (800226c <KOMENDY_BLE+0x6b4>)
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
 800217a:	e062      	b.n	8002242 <KOMENDY_BLE+0x68a>
    else if(c=='`'){wynik=135; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;} //test silnika stop //zmienna 2
 800217c:	4b36      	ldr	r3, [pc, #216]	; (8002258 <KOMENDY_BLE+0x6a0>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b60      	cmp	r3, #96	; 0x60
 8002182:	d10f      	bne.n	80021a4 <KOMENDY_BLE+0x5ec>
 8002184:	4b35      	ldr	r3, [pc, #212]	; (800225c <KOMENDY_BLE+0x6a4>)
 8002186:	2287      	movs	r2, #135	; 0x87
 8002188:	701a      	strb	r2, [r3, #0]
 800218a:	4b35      	ldr	r3, [pc, #212]	; (8002260 <KOMENDY_BLE+0x6a8>)
 800218c:	2200      	movs	r2, #0
 800218e:	701a      	strb	r2, [r3, #0]
 8002190:	4b34      	ldr	r3, [pc, #208]	; (8002264 <KOMENDY_BLE+0x6ac>)
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
 8002196:	4b34      	ldr	r3, [pc, #208]	; (8002268 <KOMENDY_BLE+0x6b0>)
 8002198:	2201      	movs	r2, #1
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	4b33      	ldr	r3, [pc, #204]	; (800226c <KOMENDY_BLE+0x6b4>)
 800219e:	2200      	movs	r2, #0
 80021a0:	701a      	strb	r2, [r3, #0]
 80021a2:	e04e      	b.n	8002242 <KOMENDY_BLE+0x68a>

    else if(c=='t'){wynik=36; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;} //zmienna 3
 80021a4:	4b2c      	ldr	r3, [pc, #176]	; (8002258 <KOMENDY_BLE+0x6a0>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b74      	cmp	r3, #116	; 0x74
 80021aa:	d10f      	bne.n	80021cc <KOMENDY_BLE+0x614>
 80021ac:	4b2b      	ldr	r3, [pc, #172]	; (800225c <KOMENDY_BLE+0x6a4>)
 80021ae:	2224      	movs	r2, #36	; 0x24
 80021b0:	701a      	strb	r2, [r3, #0]
 80021b2:	4b2b      	ldr	r3, [pc, #172]	; (8002260 <KOMENDY_BLE+0x6a8>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]
 80021b8:	4b2a      	ldr	r3, [pc, #168]	; (8002264 <KOMENDY_BLE+0x6ac>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	701a      	strb	r2, [r3, #0]
 80021be:	4b2a      	ldr	r3, [pc, #168]	; (8002268 <KOMENDY_BLE+0x6b0>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	4b29      	ldr	r3, [pc, #164]	; (800226c <KOMENDY_BLE+0x6b4>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
 80021ca:	e03a      	b.n	8002242 <KOMENDY_BLE+0x68a>
    else if(c=='y'){wynik=37; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;} //zmienna 4
 80021cc:	4b22      	ldr	r3, [pc, #136]	; (8002258 <KOMENDY_BLE+0x6a0>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b79      	cmp	r3, #121	; 0x79
 80021d2:	d10f      	bne.n	80021f4 <KOMENDY_BLE+0x63c>
 80021d4:	4b21      	ldr	r3, [pc, #132]	; (800225c <KOMENDY_BLE+0x6a4>)
 80021d6:	2225      	movs	r2, #37	; 0x25
 80021d8:	701a      	strb	r2, [r3, #0]
 80021da:	4b21      	ldr	r3, [pc, #132]	; (8002260 <KOMENDY_BLE+0x6a8>)
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]
 80021e0:	4b20      	ldr	r3, [pc, #128]	; (8002264 <KOMENDY_BLE+0x6ac>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]
 80021e6:	4b20      	ldr	r3, [pc, #128]	; (8002268 <KOMENDY_BLE+0x6b0>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	4b1f      	ldr	r3, [pc, #124]	; (800226c <KOMENDY_BLE+0x6b4>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]
 80021f2:	e026      	b.n	8002242 <KOMENDY_BLE+0x68a>
    else if(c=='j'){wynik=38; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;} //zmienna 5
 80021f4:	4b18      	ldr	r3, [pc, #96]	; (8002258 <KOMENDY_BLE+0x6a0>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b6a      	cmp	r3, #106	; 0x6a
 80021fa:	d10f      	bne.n	800221c <KOMENDY_BLE+0x664>
 80021fc:	4b17      	ldr	r3, [pc, #92]	; (800225c <KOMENDY_BLE+0x6a4>)
 80021fe:	2226      	movs	r2, #38	; 0x26
 8002200:	701a      	strb	r2, [r3, #0]
 8002202:	4b17      	ldr	r3, [pc, #92]	; (8002260 <KOMENDY_BLE+0x6a8>)
 8002204:	2200      	movs	r2, #0
 8002206:	701a      	strb	r2, [r3, #0]
 8002208:	4b16      	ldr	r3, [pc, #88]	; (8002264 <KOMENDY_BLE+0x6ac>)
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
 800220e:	4b16      	ldr	r3, [pc, #88]	; (8002268 <KOMENDY_BLE+0x6b0>)
 8002210:	2201      	movs	r2, #1
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	4b15      	ldr	r3, [pc, #84]	; (800226c <KOMENDY_BLE+0x6b4>)
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]
 800221a:	e012      	b.n	8002242 <KOMENDY_BLE+0x68a>
    else if(c=='J'){wynik=39; drukowanie=0; czujnikiactiv=0; k_wys_pom=1; DANE_DO_TEXT=0;} //zmienna 6
 800221c:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <KOMENDY_BLE+0x6a0>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b4a      	cmp	r3, #74	; 0x4a
 8002222:	d10e      	bne.n	8002242 <KOMENDY_BLE+0x68a>
 8002224:	4b0d      	ldr	r3, [pc, #52]	; (800225c <KOMENDY_BLE+0x6a4>)
 8002226:	2227      	movs	r2, #39	; 0x27
 8002228:	701a      	strb	r2, [r3, #0]
 800222a:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <KOMENDY_BLE+0x6a8>)
 800222c:	2200      	movs	r2, #0
 800222e:	701a      	strb	r2, [r3, #0]
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <KOMENDY_BLE+0x6ac>)
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]
 8002236:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <KOMENDY_BLE+0x6b0>)
 8002238:	2201      	movs	r2, #1
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	4b0b      	ldr	r3, [pc, #44]	; (800226c <KOMENDY_BLE+0x6b4>)
 800223e:	2200      	movs	r2, #0
 8002240:	701a      	strb	r2, [r3, #0]




    if(wynik!=0)
 8002242:	4b06      	ldr	r3, [pc, #24]	; (800225c <KOMENDY_BLE+0x6a4>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <KOMENDY_BLE+0x696>
    {
    	PRZYPISYWANIEWARTOSCI ();
 800224a:	f000 ffb5 	bl	80031b8 <PRZYPISYWANIEWARTOSCI>
    }
      wynik=0;
 800224e:	4b03      	ldr	r3, [pc, #12]	; (800225c <KOMENDY_BLE+0x6a4>)
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
 }
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}
 8002258:	2400028e 	.word	0x2400028e
 800225c:	2400028c 	.word	0x2400028c
 8002260:	2400028d 	.word	0x2400028d
 8002264:	2400028f 	.word	0x2400028f
 8002268:	24000000 	.word	0x24000000
 800226c:	24000290 	.word	0x24000290

08002270 <DANE_DO_APLIKACJI_MOBILNEJ>:

void DANE_DO_APLIKACJI_MOBILNEJ()
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
	  DRUKUJCZUJNIKI();
 8002274:	f000 fa3c 	bl	80026f0 <DRUKUJCZUJNIKI>
	  WyslijWartoscERR();
 8002278:	f000 fc28 	bl	8002acc <WyslijWartoscERR>
	  DRUKUJ_PID();
 800227c:	f000 f806 	bl	800228c <DRUKUJ_PID>
	  PID_DO_BLE();
 8002280:	f000 f940 	bl	8002504 <PID_DO_BLE>
	  ZMIENNE_ZAAW_DO_BLE();
 8002284:	f001 f9c0 	bl	8003608 <ZMIENNE_ZAAW_DO_BLE>

}
 8002288:	bf00      	nop
 800228a:	bd80      	pop	{r7, pc}

0800228c <DRUKUJ_PID>:

void DRUKUJ_PID()
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08e      	sub	sp, #56	; 0x38
 8002290:	af00      	add	r7, sp, #0
	if(drukowanie==3)
 8002292:	4b8f      	ldr	r3, [pc, #572]	; (80024d0 <DRUKUJ_PID+0x244>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b03      	cmp	r3, #3
 8002298:	f040 8115 	bne.w	80024c6 <DRUKUJ_PID+0x23a>
	 {

		 char after_con_val[32]={0};
 800229c:	2300      	movs	r3, #0
 800229e:	607b      	str	r3, [r7, #4]
 80022a0:	f107 0308 	add.w	r3, r7, #8
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]
 80022b0:	615a      	str	r2, [r3, #20]
 80022b2:	619a      	str	r2, [r3, #24]

	 // Serial.println("jestem tutaj");

	    drukowanie=3;
 80022b4:	4b86      	ldr	r3, [pc, #536]	; (80024d0 <DRUKUJ_PID+0x244>)
 80022b6:	2203      	movs	r2, #3
 80022b8:	701a      	strb	r2, [r3, #0]
	  if ( k_wys_pom==1 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 80022ba:	4b86      	ldr	r3, [pc, #536]	; (80024d4 <DRUKUJ_PID+0x248>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d12e      	bne.n	8002320 <DRUKUJ_PID+0x94>
 80022c2:	f003 fdb7 	bl	8005e34 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	4b83      	ldr	r3, [pc, #524]	; (80024d8 <DRUKUJ_PID+0x24c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b0e      	cmp	r3, #14
 80022d0:	d926      	bls.n	8002320 <DRUKUJ_PID+0x94>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 80022d2:	f003 fdaf 	bl	8005e34 <HAL_GetTick>
 80022d6:	4603      	mov	r3, r0
 80022d8:	4a7f      	ldr	r2, [pc, #508]	; (80024d8 <DRUKUJ_PID+0x24c>)
 80022da:	6013      	str	r3, [r2, #0]

	   ftoa(PID_value,after_con_val ,2);
 80022dc:	4b7f      	ldr	r3, [pc, #508]	; (80024dc <DRUKUJ_PID+0x250>)
 80022de:	edd3 7a00 	vldr	s15, [r3]
 80022e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022e6:	1d3b      	adds	r3, r7, #4
 80022e8:	2102      	movs	r1, #2
 80022ea:	4618      	mov	r0, r3
 80022ec:	eeb0 0b47 	vmov.f64	d0, d7
 80022f0:	f002 f8ae 	bl	8004450 <ftoa>
	   strcat(after_con_val, "a");
 80022f4:	1d3b      	adds	r3, r7, #4
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fd fff2 	bl	80002e0 <strlen>
 80022fc:	4603      	mov	r3, r0
 80022fe:	461a      	mov	r2, r3
 8002300:	1d3b      	adds	r3, r7, #4
 8002302:	4413      	add	r3, r2
 8002304:	4976      	ldr	r1, [pc, #472]	; (80024e0 <DRUKUJ_PID+0x254>)
 8002306:	461a      	mov	r2, r3
 8002308:	460b      	mov	r3, r1
 800230a:	881b      	ldrh	r3, [r3, #0]
 800230c:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 800230e:	1d3b      	adds	r3, r7, #4
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe fd21 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 8002316:	4b6f      	ldr	r3, [pc, #444]	; (80024d4 <DRUKUJ_PID+0x248>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	3301      	adds	r3, #1
 800231c:	4a6d      	ldr	r2, [pc, #436]	; (80024d4 <DRUKUJ_PID+0x248>)
 800231e:	6013      	str	r3, [r2, #0]
	  }
	  if ( k_wys_pom==2 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8002320:	4b6c      	ldr	r3, [pc, #432]	; (80024d4 <DRUKUJ_PID+0x248>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d129      	bne.n	800237c <DRUKUJ_PID+0xf0>
 8002328:	f003 fd84 	bl	8005e34 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	4b6a      	ldr	r3, [pc, #424]	; (80024d8 <DRUKUJ_PID+0x24c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b0e      	cmp	r3, #14
 8002336:	d921      	bls.n	800237c <DRUKUJ_PID+0xf0>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8002338:	f003 fd7c 	bl	8005e34 <HAL_GetTick>
 800233c:	4603      	mov	r3, r0
 800233e:	4a66      	ldr	r2, [pc, #408]	; (80024d8 <DRUKUJ_PID+0x24c>)
 8002340:	6013      	str	r3, [r2, #0]

	   itoa(Pr_Silnika_Lewego,after_con_val ,10);
 8002342:	4b68      	ldr	r3, [pc, #416]	; (80024e4 <DRUKUJ_PID+0x258>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	1d39      	adds	r1, r7, #4
 8002348:	220a      	movs	r2, #10
 800234a:	4618      	mov	r0, r3
 800234c:	f011 fe1a 	bl	8013f84 <itoa>
	   strcat(after_con_val, "s");
 8002350:	1d3b      	adds	r3, r7, #4
 8002352:	4618      	mov	r0, r3
 8002354:	f7fd ffc4 	bl	80002e0 <strlen>
 8002358:	4603      	mov	r3, r0
 800235a:	461a      	mov	r2, r3
 800235c:	1d3b      	adds	r3, r7, #4
 800235e:	4413      	add	r3, r2
 8002360:	4961      	ldr	r1, [pc, #388]	; (80024e8 <DRUKUJ_PID+0x25c>)
 8002362:	461a      	mov	r2, r3
 8002364:	460b      	mov	r3, r1
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 800236a:	1d3b      	adds	r3, r7, #4
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe fcf3 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 8002372:	4b58      	ldr	r3, [pc, #352]	; (80024d4 <DRUKUJ_PID+0x248>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	3301      	adds	r3, #1
 8002378:	4a56      	ldr	r2, [pc, #344]	; (80024d4 <DRUKUJ_PID+0x248>)
 800237a:	6013      	str	r3, [r2, #0]
	  }
	    if ( k_wys_pom==3 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 800237c:	4b55      	ldr	r3, [pc, #340]	; (80024d4 <DRUKUJ_PID+0x248>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b03      	cmp	r3, #3
 8002382:	d129      	bne.n	80023d8 <DRUKUJ_PID+0x14c>
 8002384:	f003 fd56 	bl	8005e34 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	4b53      	ldr	r3, [pc, #332]	; (80024d8 <DRUKUJ_PID+0x24c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b0e      	cmp	r3, #14
 8002392:	d921      	bls.n	80023d8 <DRUKUJ_PID+0x14c>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8002394:	f003 fd4e 	bl	8005e34 <HAL_GetTick>
 8002398:	4603      	mov	r3, r0
 800239a:	4a4f      	ldr	r2, [pc, #316]	; (80024d8 <DRUKUJ_PID+0x24c>)
 800239c:	6013      	str	r3, [r2, #0]

	   itoa(Pr_Silnika_Prawego,after_con_val ,10);
 800239e:	4b53      	ldr	r3, [pc, #332]	; (80024ec <DRUKUJ_PID+0x260>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	1d39      	adds	r1, r7, #4
 80023a4:	220a      	movs	r2, #10
 80023a6:	4618      	mov	r0, r3
 80023a8:	f011 fdec 	bl	8013f84 <itoa>
	   strcat(after_con_val, "d");
 80023ac:	1d3b      	adds	r3, r7, #4
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fd ff96 	bl	80002e0 <strlen>
 80023b4:	4603      	mov	r3, r0
 80023b6:	461a      	mov	r2, r3
 80023b8:	1d3b      	adds	r3, r7, #4
 80023ba:	4413      	add	r3, r2
 80023bc:	494c      	ldr	r1, [pc, #304]	; (80024f0 <DRUKUJ_PID+0x264>)
 80023be:	461a      	mov	r2, r3
 80023c0:	460b      	mov	r3, r1
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 80023c6:	1d3b      	adds	r3, r7, #4
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe fcc5 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 80023ce:	4b41      	ldr	r3, [pc, #260]	; (80024d4 <DRUKUJ_PID+0x248>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	3301      	adds	r3, #1
 80023d4:	4a3f      	ldr	r2, [pc, #252]	; (80024d4 <DRUKUJ_PID+0x248>)
 80023d6:	6013      	str	r3, [r2, #0]
	   }
	       if ( k_wys_pom==4 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 80023d8:	4b3e      	ldr	r3, [pc, #248]	; (80024d4 <DRUKUJ_PID+0x248>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d141      	bne.n	8002464 <DRUKUJ_PID+0x1d8>
 80023e0:	f003 fd28 	bl	8005e34 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	4b3c      	ldr	r3, [pc, #240]	; (80024d8 <DRUKUJ_PID+0x24c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b0e      	cmp	r3, #14
 80023ee:	d939      	bls.n	8002464 <DRUKUJ_PID+0x1d8>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 80023f0:	f003 fd20 	bl	8005e34 <HAL_GetTick>
 80023f4:	4603      	mov	r3, r0
 80023f6:	4a38      	ldr	r2, [pc, #224]	; (80024d8 <DRUKUJ_PID+0x24c>)
 80023f8:	6013      	str	r3, [r2, #0]

	   char helper[20]={0};
 80023fa:	2300      	movs	r3, #0
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
 80023fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	605a      	str	r2, [r3, #4]
 8002408:	609a      	str	r2, [r3, #8]
 800240a:	60da      	str	r2, [r3, #12]
	   ftoa(ERR_CZ,helper ,2);
 800240c:	4b39      	ldr	r3, [pc, #228]	; (80024f4 <DRUKUJ_PID+0x268>)
 800240e:	edd3 7a00 	vldr	s15, [r3]
 8002412:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800241a:	2102      	movs	r1, #2
 800241c:	4618      	mov	r0, r3
 800241e:	eeb0 0b47 	vmov.f64	d0, d7
 8002422:	f002 f815 	bl	8004450 <ftoa>

	   strcat(after_con_val, "ERROR:");
 8002426:	1d3b      	adds	r3, r7, #4
 8002428:	4618      	mov	r0, r3
 800242a:	f7fd ff59 	bl	80002e0 <strlen>
 800242e:	4603      	mov	r3, r0
 8002430:	461a      	mov	r2, r3
 8002432:	1d3b      	adds	r3, r7, #4
 8002434:	4413      	add	r3, r2
 8002436:	4a30      	ldr	r2, [pc, #192]	; (80024f8 <DRUKUJ_PID+0x26c>)
 8002438:	6810      	ldr	r0, [r2, #0]
 800243a:	6018      	str	r0, [r3, #0]
 800243c:	8891      	ldrh	r1, [r2, #4]
 800243e:	7992      	ldrb	r2, [r2, #6]
 8002440:	8099      	strh	r1, [r3, #4]
 8002442:	719a      	strb	r2, [r3, #6]

	   strcat(after_con_val, helper);
 8002444:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002448:	1d3b      	adds	r3, r7, #4
 800244a:	4611      	mov	r1, r2
 800244c:	4618      	mov	r0, r3
 800244e:	f012 fc0f 	bl	8014c70 <strcat>
	   DO_BLE(after_con_val);
 8002452:	1d3b      	adds	r3, r7, #4
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe fc7f 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 800245a:	4b1e      	ldr	r3, [pc, #120]	; (80024d4 <DRUKUJ_PID+0x248>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	3301      	adds	r3, #1
 8002460:	4a1c      	ldr	r2, [pc, #112]	; (80024d4 <DRUKUJ_PID+0x248>)
 8002462:	6013      	str	r3, [r2, #0]
	   }
	       if ( k_wys_pom==5 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8002464:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <DRUKUJ_PID+0x248>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b05      	cmp	r3, #5
 800246a:	d12c      	bne.n	80024c6 <DRUKUJ_PID+0x23a>
 800246c:	f003 fce2 	bl	8005e34 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <DRUKUJ_PID+0x24c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b0e      	cmp	r3, #14
 800247a:	d924      	bls.n	80024c6 <DRUKUJ_PID+0x23a>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 800247c:	f003 fcda 	bl	8005e34 <HAL_GetTick>
 8002480:	4603      	mov	r3, r0
 8002482:	4a15      	ldr	r2, [pc, #84]	; (80024d8 <DRUKUJ_PID+0x24c>)
 8002484:	6013      	str	r3, [r2, #0]

	   itoa(KI_SUMA,after_con_val ,10);
 8002486:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <DRUKUJ_PID+0x270>)
 8002488:	edd3 7a00 	vldr	s15, [r3]
 800248c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002490:	1d3b      	adds	r3, r7, #4
 8002492:	220a      	movs	r2, #10
 8002494:	4619      	mov	r1, r3
 8002496:	ee17 0a90 	vmov	r0, s15
 800249a:	f011 fd73 	bl	8013f84 <itoa>
	   strcat(after_con_val, "f");
 800249e:	1d3b      	adds	r3, r7, #4
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fd ff1d 	bl	80002e0 <strlen>
 80024a6:	4603      	mov	r3, r0
 80024a8:	461a      	mov	r2, r3
 80024aa:	1d3b      	adds	r3, r7, #4
 80024ac:	4413      	add	r3, r2
 80024ae:	4914      	ldr	r1, [pc, #80]	; (8002500 <DRUKUJ_PID+0x274>)
 80024b0:	461a      	mov	r2, r3
 80024b2:	460b      	mov	r3, r1
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 80024b8:	1d3b      	adds	r3, r7, #4
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe fc4c 	bl	8000d58 <DO_BLE>
	   k_wys_pom=1;
 80024c0:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <DRUKUJ_PID+0x248>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	601a      	str	r2, [r3, #0]
	    }

	  }


}
 80024c6:	bf00      	nop
 80024c8:	3738      	adds	r7, #56	; 0x38
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	2400028d 	.word	0x2400028d
 80024d4:	24000000 	.word	0x24000000
 80024d8:	24000284 	.word	0x24000284
 80024dc:	2400029c 	.word	0x2400029c
 80024e0:	080193b8 	.word	0x080193b8
 80024e4:	240002d0 	.word	0x240002d0
 80024e8:	080193bc 	.word	0x080193bc
 80024ec:	240002cc 	.word	0x240002cc
 80024f0:	080193c0 	.word	0x080193c0
 80024f4:	24000234 	.word	0x24000234
 80024f8:	080193c4 	.word	0x080193c4
 80024fc:	240002a0 	.word	0x240002a0
 8002500:	080193cc 	.word	0x080193cc

08002504 <PID_DO_BLE>:

void PID_DO_BLE()
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af00      	add	r7, sp, #0
	  if(drukowanie==1)
 800250a:	4b6e      	ldr	r3, [pc, #440]	; (80026c4 <PID_DO_BLE+0x1c0>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b01      	cmp	r3, #1
 8002510:	f040 80d3 	bne.w	80026ba <PID_DO_BLE+0x1b6>
	 {
		  char after_con_val[32]={0};
 8002514:	2300      	movs	r3, #0
 8002516:	603b      	str	r3, [r7, #0]
 8002518:	1d3b      	adds	r3, r7, #4
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	605a      	str	r2, [r3, #4]
 8002520:	609a      	str	r2, [r3, #8]
 8002522:	60da      	str	r2, [r3, #12]
 8002524:	611a      	str	r2, [r3, #16]
 8002526:	615a      	str	r2, [r3, #20]
 8002528:	619a      	str	r2, [r3, #24]

	  if (k_wys_pom==1 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 800252a:	4b67      	ldr	r3, [pc, #412]	; (80026c8 <PID_DO_BLE+0x1c4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d12e      	bne.n	8002590 <PID_DO_BLE+0x8c>
 8002532:	f003 fc7f 	bl	8005e34 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	4b64      	ldr	r3, [pc, #400]	; (80026cc <PID_DO_BLE+0x1c8>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b0e      	cmp	r3, #14
 8002540:	d926      	bls.n	8002590 <PID_DO_BLE+0x8c>
		  ZapamientanyCzasK_BLE = HAL_GetTick();
 8002542:	f003 fc77 	bl	8005e34 <HAL_GetTick>
 8002546:	4603      	mov	r3, r0
 8002548:	4a60      	ldr	r2, [pc, #384]	; (80026cc <PID_DO_BLE+0x1c8>)
 800254a:	6013      	str	r3, [r2, #0]

	    ftoa(Kp,after_con_val ,2);
 800254c:	4b60      	ldr	r3, [pc, #384]	; (80026d0 <PID_DO_BLE+0x1cc>)
 800254e:	edd3 7a00 	vldr	s15, [r3]
 8002552:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002556:	463b      	mov	r3, r7
 8002558:	2102      	movs	r1, #2
 800255a:	4618      	mov	r0, r3
 800255c:	eeb0 0b47 	vmov.f64	d0, d7
 8002560:	f001 ff76 	bl	8004450 <ftoa>
		   strcat(after_con_val, "l");
 8002564:	463b      	mov	r3, r7
 8002566:	4618      	mov	r0, r3
 8002568:	f7fd feba 	bl	80002e0 <strlen>
 800256c:	4603      	mov	r3, r0
 800256e:	461a      	mov	r2, r3
 8002570:	463b      	mov	r3, r7
 8002572:	4413      	add	r3, r2
 8002574:	4957      	ldr	r1, [pc, #348]	; (80026d4 <PID_DO_BLE+0x1d0>)
 8002576:	461a      	mov	r2, r3
 8002578:	460b      	mov	r3, r1
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	8013      	strh	r3, [r2, #0]
		  DO_BLE(after_con_val);
 800257e:	463b      	mov	r3, r7
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe fbe9 	bl	8000d58 <DO_BLE>
		k_wys_pom++;
 8002586:	4b50      	ldr	r3, [pc, #320]	; (80026c8 <PID_DO_BLE+0x1c4>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	3301      	adds	r3, #1
 800258c:	4a4e      	ldr	r2, [pc, #312]	; (80026c8 <PID_DO_BLE+0x1c4>)
 800258e:	6013      	str	r3, [r2, #0]
	  }
	  if (k_wys_pom==2 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8002590:	4b4d      	ldr	r3, [pc, #308]	; (80026c8 <PID_DO_BLE+0x1c4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d12e      	bne.n	80025f6 <PID_DO_BLE+0xf2>
 8002598:	f003 fc4c 	bl	8005e34 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	4b4b      	ldr	r3, [pc, #300]	; (80026cc <PID_DO_BLE+0x1c8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b0e      	cmp	r3, #14
 80025a6:	d926      	bls.n	80025f6 <PID_DO_BLE+0xf2>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 80025a8:	f003 fc44 	bl	8005e34 <HAL_GetTick>
 80025ac:	4603      	mov	r3, r0
 80025ae:	4a47      	ldr	r2, [pc, #284]	; (80026cc <PID_DO_BLE+0x1c8>)
 80025b0:	6013      	str	r3, [r2, #0]

	    ftoa(Kd,after_con_val ,2);
 80025b2:	4b49      	ldr	r3, [pc, #292]	; (80026d8 <PID_DO_BLE+0x1d4>)
 80025b4:	edd3 7a00 	vldr	s15, [r3]
 80025b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025bc:	463b      	mov	r3, r7
 80025be:	2102      	movs	r1, #2
 80025c0:	4618      	mov	r0, r3
 80025c2:	eeb0 0b47 	vmov.f64	d0, d7
 80025c6:	f001 ff43 	bl	8004450 <ftoa>
		   strcat(after_con_val, "k");
 80025ca:	463b      	mov	r3, r7
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fd fe87 	bl	80002e0 <strlen>
 80025d2:	4603      	mov	r3, r0
 80025d4:	461a      	mov	r2, r3
 80025d6:	463b      	mov	r3, r7
 80025d8:	4413      	add	r3, r2
 80025da:	4940      	ldr	r1, [pc, #256]	; (80026dc <PID_DO_BLE+0x1d8>)
 80025dc:	461a      	mov	r2, r3
 80025de:	460b      	mov	r3, r1
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	8013      	strh	r3, [r2, #0]
		  DO_BLE(after_con_val);
 80025e4:	463b      	mov	r3, r7
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe fbb6 	bl	8000d58 <DO_BLE>
		k_wys_pom++;
 80025ec:	4b36      	ldr	r3, [pc, #216]	; (80026c8 <PID_DO_BLE+0x1c4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	3301      	adds	r3, #1
 80025f2:	4a35      	ldr	r2, [pc, #212]	; (80026c8 <PID_DO_BLE+0x1c4>)
 80025f4:	6013      	str	r3, [r2, #0]
	  }
	    if (k_wys_pom==3 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 80025f6:	4b34      	ldr	r3, [pc, #208]	; (80026c8 <PID_DO_BLE+0x1c4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d12e      	bne.n	800265c <PID_DO_BLE+0x158>
 80025fe:	f003 fc19 	bl	8005e34 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	4b31      	ldr	r3, [pc, #196]	; (80026cc <PID_DO_BLE+0x1c8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b0e      	cmp	r3, #14
 800260c:	d926      	bls.n	800265c <PID_DO_BLE+0x158>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 800260e:	f003 fc11 	bl	8005e34 <HAL_GetTick>
 8002612:	4603      	mov	r3, r0
 8002614:	4a2d      	ldr	r2, [pc, #180]	; (80026cc <PID_DO_BLE+0x1c8>)
 8002616:	6013      	str	r3, [r2, #0]

	    ftoa(pr_pocz_silnikow,after_con_val ,2);
 8002618:	4b31      	ldr	r3, [pc, #196]	; (80026e0 <PID_DO_BLE+0x1dc>)
 800261a:	edd3 7a00 	vldr	s15, [r3]
 800261e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002622:	463b      	mov	r3, r7
 8002624:	2102      	movs	r1, #2
 8002626:	4618      	mov	r0, r3
 8002628:	eeb0 0b47 	vmov.f64	d0, d7
 800262c:	f001 ff10 	bl	8004450 <ftoa>
			   strcat(after_con_val, "m");
 8002630:	463b      	mov	r3, r7
 8002632:	4618      	mov	r0, r3
 8002634:	f7fd fe54 	bl	80002e0 <strlen>
 8002638:	4603      	mov	r3, r0
 800263a:	461a      	mov	r2, r3
 800263c:	463b      	mov	r3, r7
 800263e:	4413      	add	r3, r2
 8002640:	4928      	ldr	r1, [pc, #160]	; (80026e4 <PID_DO_BLE+0x1e0>)
 8002642:	461a      	mov	r2, r3
 8002644:	460b      	mov	r3, r1
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	8013      	strh	r3, [r2, #0]
			  DO_BLE(after_con_val);
 800264a:	463b      	mov	r3, r7
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe fb83 	bl	8000d58 <DO_BLE>
			k_wys_pom++;
 8002652:	4b1d      	ldr	r3, [pc, #116]	; (80026c8 <PID_DO_BLE+0x1c4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	3301      	adds	r3, #1
 8002658:	4a1b      	ldr	r2, [pc, #108]	; (80026c8 <PID_DO_BLE+0x1c4>)
 800265a:	6013      	str	r3, [r2, #0]
	   }
	       if (k_wys_pom==4 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 800265c:	4b1a      	ldr	r3, [pc, #104]	; (80026c8 <PID_DO_BLE+0x1c4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b04      	cmp	r3, #4
 8002662:	d12a      	bne.n	80026ba <PID_DO_BLE+0x1b6>
 8002664:	f003 fbe6 	bl	8005e34 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	4b18      	ldr	r3, [pc, #96]	; (80026cc <PID_DO_BLE+0x1c8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b0e      	cmp	r3, #14
 8002672:	d922      	bls.n	80026ba <PID_DO_BLE+0x1b6>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8002674:	f003 fbde 	bl	8005e34 <HAL_GetTick>
 8002678:	4603      	mov	r3, r0
 800267a:	4a14      	ldr	r2, [pc, #80]	; (80026cc <PID_DO_BLE+0x1c8>)
 800267c:	6013      	str	r3, [r2, #0]
	 //Serial.println("jestem tutaj");
	    itoa(CzasProbkowania_CZ_Rozniczkujacego,after_con_val ,10);
 800267e:	4b1a      	ldr	r3, [pc, #104]	; (80026e8 <PID_DO_BLE+0x1e4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4639      	mov	r1, r7
 8002684:	220a      	movs	r2, #10
 8002686:	4618      	mov	r0, r3
 8002688:	f011 fc7c 	bl	8013f84 <itoa>
			   strcat(after_con_val, "w");
 800268c:	463b      	mov	r3, r7
 800268e:	4618      	mov	r0, r3
 8002690:	f7fd fe26 	bl	80002e0 <strlen>
 8002694:	4603      	mov	r3, r0
 8002696:	461a      	mov	r2, r3
 8002698:	463b      	mov	r3, r7
 800269a:	4413      	add	r3, r2
 800269c:	4913      	ldr	r1, [pc, #76]	; (80026ec <PID_DO_BLE+0x1e8>)
 800269e:	461a      	mov	r2, r3
 80026a0:	460b      	mov	r3, r1
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	8013      	strh	r3, [r2, #0]
			  DO_BLE(after_con_val);
 80026a6:	463b      	mov	r3, r7
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fe fb55 	bl	8000d58 <DO_BLE>
			k_wys_pom=1;
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <PID_DO_BLE+0x1c4>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	601a      	str	r2, [r3, #0]
	   drukowanie=0; //tylko jeden raz
 80026b4:	4b03      	ldr	r3, [pc, #12]	; (80026c4 <PID_DO_BLE+0x1c0>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	701a      	strb	r2, [r3, #0]
	    }
	  }
}
 80026ba:	bf00      	nop
 80026bc:	3720      	adds	r7, #32
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	2400028d 	.word	0x2400028d
 80026c8:	24000000 	.word	0x24000000
 80026cc:	24000284 	.word	0x24000284
 80026d0:	24000004 	.word	0x24000004
 80026d4:	080193d0 	.word	0x080193d0
 80026d8:	24000294 	.word	0x24000294
 80026dc:	080193d4 	.word	0x080193d4
 80026e0:	24000008 	.word	0x24000008
 80026e4:	080193d8 	.word	0x080193d8
 80026e8:	240002d4 	.word	0x240002d4
 80026ec:	080193dc 	.word	0x080193dc

080026f0 <DRUKUJCZUJNIKI>:
//literka n jest wolna!!

void DRUKUJCZUJNIKI()
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08e      	sub	sp, #56	; 0x38
 80026f4:	af00      	add	r7, sp, #0
  if(czujnikiactiv==1)
 80026f6:	4bb3      	ldr	r3, [pc, #716]	; (80029c4 <DRUKUJCZUJNIKI+0x2d4>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	f040 81d8 	bne.w	8002ab0 <DRUKUJCZUJNIKI+0x3c0>
{
	  char Pom_String[20]={0};
 8002700:	2300      	movs	r3, #0
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
 8002704:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	60da      	str	r2, [r3, #12]
	  char after_con_int[32]={0};
 8002712:	2300      	movs	r3, #0
 8002714:	607b      	str	r3, [r7, #4]
 8002716:	f107 0308 	add.w	r3, r7, #8
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	605a      	str	r2, [r3, #4]
 8002720:	609a      	str	r2, [r3, #8]
 8002722:	60da      	str	r2, [r3, #12]
 8002724:	611a      	str	r2, [r3, #16]
 8002726:	615a      	str	r2, [r3, #20]
 8002728:	619a      	str	r2, [r3, #24]
  drukowanie=0;
 800272a:	4ba7      	ldr	r3, [pc, #668]	; (80029c8 <DRUKUJCZUJNIKI+0x2d8>)
 800272c:	2200      	movs	r2, #0
 800272e:	701a      	strb	r2, [r3, #0]
    if ( HAL_GetTick() - ZapamientanyCzasK_BLE >= 15) {
 8002730:	f003 fb80 	bl	8005e34 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	4ba5      	ldr	r3, [pc, #660]	; (80029cc <DRUKUJCZUJNIKI+0x2dc>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b0e      	cmp	r3, #14
 800273e:	f240 81b7 	bls.w	8002ab0 <DRUKUJCZUJNIKI+0x3c0>
    	ZapamientanyCzasK_BLE = HAL_GetTick();
 8002742:	f003 fb77 	bl	8005e34 <HAL_GetTick>
 8002746:	4603      	mov	r3, r0
 8002748:	4aa0      	ldr	r2, [pc, #640]	; (80029cc <DRUKUJCZUJNIKI+0x2dc>)
 800274a:	6013      	str	r3, [r2, #0]

          if(k_wys_pom==1)  { itoa(DANE_Z_CZUJNIKOW[0],after_con_int,10); strcat(Pom_String, "CZ1:"); strcat(Pom_String,after_con_int );  k_wys_pom++; DO_BLE(Pom_String); return;	}
 800274c:	4ba0      	ldr	r3, [pc, #640]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d128      	bne.n	80027a6 <DRUKUJCZUJNIKI+0xb6>
 8002754:	4b9f      	ldr	r3, [pc, #636]	; (80029d4 <DRUKUJCZUJNIKI+0x2e4>)
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	1d3b      	adds	r3, r7, #4
 800275c:	220a      	movs	r2, #10
 800275e:	4619      	mov	r1, r3
 8002760:	f011 fc10 	bl	8013f84 <itoa>
 8002764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002768:	4618      	mov	r0, r3
 800276a:	f7fd fdb9 	bl	80002e0 <strlen>
 800276e:	4603      	mov	r3, r0
 8002770:	461a      	mov	r2, r3
 8002772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002776:	4413      	add	r3, r2
 8002778:	4a97      	ldr	r2, [pc, #604]	; (80029d8 <DRUKUJCZUJNIKI+0x2e8>)
 800277a:	6810      	ldr	r0, [r2, #0]
 800277c:	6018      	str	r0, [r3, #0]
 800277e:	7912      	ldrb	r2, [r2, #4]
 8002780:	711a      	strb	r2, [r3, #4]
 8002782:	1d3a      	adds	r2, r7, #4
 8002784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002788:	4611      	mov	r1, r2
 800278a:	4618      	mov	r0, r3
 800278c:	f012 fa70 	bl	8014c70 <strcat>
 8002790:	4b8f      	ldr	r3, [pc, #572]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	3301      	adds	r3, #1
 8002796:	4a8e      	ldr	r2, [pc, #568]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe fada 	bl	8000d58 <DO_BLE>
 80027a4:	e184      	b.n	8002ab0 <DRUKUJCZUJNIKI+0x3c0>
          if(k_wys_pom==2)  { itoa(DANE_Z_CZUJNIKOW[1],after_con_int,10); strcat(Pom_String, "CZ2:"); strcat(Pom_String,after_con_int );  k_wys_pom++; DO_BLE(Pom_String); return;  }
 80027a6:	4b8a      	ldr	r3, [pc, #552]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d128      	bne.n	8002800 <DRUKUJCZUJNIKI+0x110>
 80027ae:	4b89      	ldr	r3, [pc, #548]	; (80029d4 <DRUKUJCZUJNIKI+0x2e4>)
 80027b0:	885b      	ldrh	r3, [r3, #2]
 80027b2:	4618      	mov	r0, r3
 80027b4:	1d3b      	adds	r3, r7, #4
 80027b6:	220a      	movs	r2, #10
 80027b8:	4619      	mov	r1, r3
 80027ba:	f011 fbe3 	bl	8013f84 <itoa>
 80027be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fd fd8c 	bl	80002e0 <strlen>
 80027c8:	4603      	mov	r3, r0
 80027ca:	461a      	mov	r2, r3
 80027cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027d0:	4413      	add	r3, r2
 80027d2:	4a82      	ldr	r2, [pc, #520]	; (80029dc <DRUKUJCZUJNIKI+0x2ec>)
 80027d4:	6810      	ldr	r0, [r2, #0]
 80027d6:	6018      	str	r0, [r3, #0]
 80027d8:	7912      	ldrb	r2, [r2, #4]
 80027da:	711a      	strb	r2, [r3, #4]
 80027dc:	1d3a      	adds	r2, r7, #4
 80027de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027e2:	4611      	mov	r1, r2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f012 fa43 	bl	8014c70 <strcat>
 80027ea:	4b79      	ldr	r3, [pc, #484]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	3301      	adds	r3, #1
 80027f0:	4a77      	ldr	r2, [pc, #476]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 80027f2:	6013      	str	r3, [r2, #0]
 80027f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fe faad 	bl	8000d58 <DO_BLE>
 80027fe:	e157      	b.n	8002ab0 <DRUKUJCZUJNIKI+0x3c0>
          if(k_wys_pom==3)  { itoa(DANE_Z_CZUJNIKOW[2],after_con_int,10); strcat(Pom_String, "CZ3:"); strcat(Pom_String,after_con_int );  k_wys_pom++; DO_BLE(Pom_String); return;  }
 8002800:	4b73      	ldr	r3, [pc, #460]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2b03      	cmp	r3, #3
 8002806:	d128      	bne.n	800285a <DRUKUJCZUJNIKI+0x16a>
 8002808:	4b72      	ldr	r3, [pc, #456]	; (80029d4 <DRUKUJCZUJNIKI+0x2e4>)
 800280a:	889b      	ldrh	r3, [r3, #4]
 800280c:	4618      	mov	r0, r3
 800280e:	1d3b      	adds	r3, r7, #4
 8002810:	220a      	movs	r2, #10
 8002812:	4619      	mov	r1, r3
 8002814:	f011 fbb6 	bl	8013f84 <itoa>
 8002818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800281c:	4618      	mov	r0, r3
 800281e:	f7fd fd5f 	bl	80002e0 <strlen>
 8002822:	4603      	mov	r3, r0
 8002824:	461a      	mov	r2, r3
 8002826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800282a:	4413      	add	r3, r2
 800282c:	4a6c      	ldr	r2, [pc, #432]	; (80029e0 <DRUKUJCZUJNIKI+0x2f0>)
 800282e:	6810      	ldr	r0, [r2, #0]
 8002830:	6018      	str	r0, [r3, #0]
 8002832:	7912      	ldrb	r2, [r2, #4]
 8002834:	711a      	strb	r2, [r3, #4]
 8002836:	1d3a      	adds	r2, r7, #4
 8002838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800283c:	4611      	mov	r1, r2
 800283e:	4618      	mov	r0, r3
 8002840:	f012 fa16 	bl	8014c70 <strcat>
 8002844:	4b62      	ldr	r3, [pc, #392]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	3301      	adds	r3, #1
 800284a:	4a61      	ldr	r2, [pc, #388]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe fa80 	bl	8000d58 <DO_BLE>
 8002858:	e12a      	b.n	8002ab0 <DRUKUJCZUJNIKI+0x3c0>
          if(k_wys_pom==4)  { itoa(DANE_Z_CZUJNIKOW[3],after_con_int,10); strcat(Pom_String, "CZ4:"); strcat(Pom_String,after_con_int );  k_wys_pom++; DO_BLE(Pom_String); return;  }
 800285a:	4b5d      	ldr	r3, [pc, #372]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b04      	cmp	r3, #4
 8002860:	d128      	bne.n	80028b4 <DRUKUJCZUJNIKI+0x1c4>
 8002862:	4b5c      	ldr	r3, [pc, #368]	; (80029d4 <DRUKUJCZUJNIKI+0x2e4>)
 8002864:	88db      	ldrh	r3, [r3, #6]
 8002866:	4618      	mov	r0, r3
 8002868:	1d3b      	adds	r3, r7, #4
 800286a:	220a      	movs	r2, #10
 800286c:	4619      	mov	r1, r3
 800286e:	f011 fb89 	bl	8013f84 <itoa>
 8002872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002876:	4618      	mov	r0, r3
 8002878:	f7fd fd32 	bl	80002e0 <strlen>
 800287c:	4603      	mov	r3, r0
 800287e:	461a      	mov	r2, r3
 8002880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002884:	4413      	add	r3, r2
 8002886:	4a57      	ldr	r2, [pc, #348]	; (80029e4 <DRUKUJCZUJNIKI+0x2f4>)
 8002888:	6810      	ldr	r0, [r2, #0]
 800288a:	6018      	str	r0, [r3, #0]
 800288c:	7912      	ldrb	r2, [r2, #4]
 800288e:	711a      	strb	r2, [r3, #4]
 8002890:	1d3a      	adds	r2, r7, #4
 8002892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002896:	4611      	mov	r1, r2
 8002898:	4618      	mov	r0, r3
 800289a:	f012 f9e9 	bl	8014c70 <strcat>
 800289e:	4b4c      	ldr	r3, [pc, #304]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	3301      	adds	r3, #1
 80028a4:	4a4a      	ldr	r2, [pc, #296]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 80028a6:	6013      	str	r3, [r2, #0]
 80028a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fe fa53 	bl	8000d58 <DO_BLE>
 80028b2:	e0fd      	b.n	8002ab0 <DRUKUJCZUJNIKI+0x3c0>
          if(k_wys_pom==5)  { itoa(DANE_Z_CZUJNIKOW[4],after_con_int,10); strcat(Pom_String, "CZ5:"); strcat(Pom_String,after_con_int );  k_wys_pom++; DO_BLE(Pom_String); return;  }
 80028b4:	4b46      	ldr	r3, [pc, #280]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2b05      	cmp	r3, #5
 80028ba:	d128      	bne.n	800290e <DRUKUJCZUJNIKI+0x21e>
 80028bc:	4b45      	ldr	r3, [pc, #276]	; (80029d4 <DRUKUJCZUJNIKI+0x2e4>)
 80028be:	891b      	ldrh	r3, [r3, #8]
 80028c0:	4618      	mov	r0, r3
 80028c2:	1d3b      	adds	r3, r7, #4
 80028c4:	220a      	movs	r2, #10
 80028c6:	4619      	mov	r1, r3
 80028c8:	f011 fb5c 	bl	8013f84 <itoa>
 80028cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fd fd05 	bl	80002e0 <strlen>
 80028d6:	4603      	mov	r3, r0
 80028d8:	461a      	mov	r2, r3
 80028da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028de:	4413      	add	r3, r2
 80028e0:	4a41      	ldr	r2, [pc, #260]	; (80029e8 <DRUKUJCZUJNIKI+0x2f8>)
 80028e2:	6810      	ldr	r0, [r2, #0]
 80028e4:	6018      	str	r0, [r3, #0]
 80028e6:	7912      	ldrb	r2, [r2, #4]
 80028e8:	711a      	strb	r2, [r3, #4]
 80028ea:	1d3a      	adds	r2, r7, #4
 80028ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028f0:	4611      	mov	r1, r2
 80028f2:	4618      	mov	r0, r3
 80028f4:	f012 f9bc 	bl	8014c70 <strcat>
 80028f8:	4b35      	ldr	r3, [pc, #212]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	3301      	adds	r3, #1
 80028fe:	4a34      	ldr	r2, [pc, #208]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002906:	4618      	mov	r0, r3
 8002908:	f7fe fa26 	bl	8000d58 <DO_BLE>
 800290c:	e0d0      	b.n	8002ab0 <DRUKUJCZUJNIKI+0x3c0>
          if(k_wys_pom==6)  { itoa(DANE_Z_CZUJNIKOW[5],after_con_int,10); strcat(Pom_String, "CZ6:"); strcat(Pom_String,after_con_int );  k_wys_pom++; DO_BLE(Pom_String); return;  }
 800290e:	4b30      	ldr	r3, [pc, #192]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b06      	cmp	r3, #6
 8002914:	d128      	bne.n	8002968 <DRUKUJCZUJNIKI+0x278>
 8002916:	4b2f      	ldr	r3, [pc, #188]	; (80029d4 <DRUKUJCZUJNIKI+0x2e4>)
 8002918:	895b      	ldrh	r3, [r3, #10]
 800291a:	4618      	mov	r0, r3
 800291c:	1d3b      	adds	r3, r7, #4
 800291e:	220a      	movs	r2, #10
 8002920:	4619      	mov	r1, r3
 8002922:	f011 fb2f 	bl	8013f84 <itoa>
 8002926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800292a:	4618      	mov	r0, r3
 800292c:	f7fd fcd8 	bl	80002e0 <strlen>
 8002930:	4603      	mov	r3, r0
 8002932:	461a      	mov	r2, r3
 8002934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002938:	4413      	add	r3, r2
 800293a:	4a2c      	ldr	r2, [pc, #176]	; (80029ec <DRUKUJCZUJNIKI+0x2fc>)
 800293c:	6810      	ldr	r0, [r2, #0]
 800293e:	6018      	str	r0, [r3, #0]
 8002940:	7912      	ldrb	r2, [r2, #4]
 8002942:	711a      	strb	r2, [r3, #4]
 8002944:	1d3a      	adds	r2, r7, #4
 8002946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800294a:	4611      	mov	r1, r2
 800294c:	4618      	mov	r0, r3
 800294e:	f012 f98f 	bl	8014c70 <strcat>
 8002952:	4b1f      	ldr	r3, [pc, #124]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	3301      	adds	r3, #1
 8002958:	4a1d      	ldr	r2, [pc, #116]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002960:	4618      	mov	r0, r3
 8002962:	f7fe f9f9 	bl	8000d58 <DO_BLE>
 8002966:	e0a3      	b.n	8002ab0 <DRUKUJCZUJNIKI+0x3c0>
          if(k_wys_pom==7)  { itoa(DANE_Z_CZUJNIKOW[6],after_con_int,10); strcat(Pom_String, "CZ7:"); strcat(Pom_String,after_con_int );  k_wys_pom++; DO_BLE(Pom_String); return;  }
 8002968:	4b19      	ldr	r3, [pc, #100]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b07      	cmp	r3, #7
 800296e:	d141      	bne.n	80029f4 <DRUKUJCZUJNIKI+0x304>
 8002970:	4b18      	ldr	r3, [pc, #96]	; (80029d4 <DRUKUJCZUJNIKI+0x2e4>)
 8002972:	899b      	ldrh	r3, [r3, #12]
 8002974:	4618      	mov	r0, r3
 8002976:	1d3b      	adds	r3, r7, #4
 8002978:	220a      	movs	r2, #10
 800297a:	4619      	mov	r1, r3
 800297c:	f011 fb02 	bl	8013f84 <itoa>
 8002980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002984:	4618      	mov	r0, r3
 8002986:	f7fd fcab 	bl	80002e0 <strlen>
 800298a:	4603      	mov	r3, r0
 800298c:	461a      	mov	r2, r3
 800298e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002992:	4413      	add	r3, r2
 8002994:	4a16      	ldr	r2, [pc, #88]	; (80029f0 <DRUKUJCZUJNIKI+0x300>)
 8002996:	6810      	ldr	r0, [r2, #0]
 8002998:	6018      	str	r0, [r3, #0]
 800299a:	7912      	ldrb	r2, [r2, #4]
 800299c:	711a      	strb	r2, [r3, #4]
 800299e:	1d3a      	adds	r2, r7, #4
 80029a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029a4:	4611      	mov	r1, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f012 f962 	bl	8014c70 <strcat>
 80029ac:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	3301      	adds	r3, #1
 80029b2:	4a07      	ldr	r2, [pc, #28]	; (80029d0 <DRUKUJCZUJNIKI+0x2e0>)
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe f9cc 	bl	8000d58 <DO_BLE>
 80029c0:	e076      	b.n	8002ab0 <DRUKUJCZUJNIKI+0x3c0>
 80029c2:	bf00      	nop
 80029c4:	2400028f 	.word	0x2400028f
 80029c8:	2400028d 	.word	0x2400028d
 80029cc:	24000284 	.word	0x24000284
 80029d0:	24000000 	.word	0x24000000
 80029d4:	24000480 	.word	0x24000480
 80029d8:	080193e0 	.word	0x080193e0
 80029dc:	080193e8 	.word	0x080193e8
 80029e0:	080193f0 	.word	0x080193f0
 80029e4:	080193f8 	.word	0x080193f8
 80029e8:	08019400 	.word	0x08019400
 80029ec:	08019408 	.word	0x08019408
 80029f0:	08019410 	.word	0x08019410
          if(k_wys_pom==8)  { itoa(DANE_Z_CZUJNIKOW[7],after_con_int,10); strcat(Pom_String, "CZ8:"); strcat(Pom_String,after_con_int );  k_wys_pom++; DO_BLE(Pom_String); return;  }
 80029f4:	4b30      	ldr	r3, [pc, #192]	; (8002ab8 <DRUKUJCZUJNIKI+0x3c8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d128      	bne.n	8002a4e <DRUKUJCZUJNIKI+0x35e>
 80029fc:	4b2f      	ldr	r3, [pc, #188]	; (8002abc <DRUKUJCZUJNIKI+0x3cc>)
 80029fe:	89db      	ldrh	r3, [r3, #14]
 8002a00:	4618      	mov	r0, r3
 8002a02:	1d3b      	adds	r3, r7, #4
 8002a04:	220a      	movs	r2, #10
 8002a06:	4619      	mov	r1, r3
 8002a08:	f011 fabc 	bl	8013f84 <itoa>
 8002a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fd fc65 	bl	80002e0 <strlen>
 8002a16:	4603      	mov	r3, r0
 8002a18:	461a      	mov	r2, r3
 8002a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a1e:	4413      	add	r3, r2
 8002a20:	4a27      	ldr	r2, [pc, #156]	; (8002ac0 <DRUKUJCZUJNIKI+0x3d0>)
 8002a22:	6810      	ldr	r0, [r2, #0]
 8002a24:	6018      	str	r0, [r3, #0]
 8002a26:	7912      	ldrb	r2, [r2, #4]
 8002a28:	711a      	strb	r2, [r3, #4]
 8002a2a:	1d3a      	adds	r2, r7, #4
 8002a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a30:	4611      	mov	r1, r2
 8002a32:	4618      	mov	r0, r3
 8002a34:	f012 f91c 	bl	8014c70 <strcat>
 8002a38:	4b1f      	ldr	r3, [pc, #124]	; (8002ab8 <DRUKUJCZUJNIKI+0x3c8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	4a1e      	ldr	r2, [pc, #120]	; (8002ab8 <DRUKUJCZUJNIKI+0x3c8>)
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fe f986 	bl	8000d58 <DO_BLE>
 8002a4c:	e030      	b.n	8002ab0 <DRUKUJCZUJNIKI+0x3c0>
          if(k_wys_pom==9)  { ftoa(ERR_CZ,after_con_int ,2);  strcat(Pom_String, "ERROR:"); strcat(Pom_String,after_con_int );  k_wys_pom=1; DO_BLE(Pom_String); return;  }
 8002a4e:	4b1a      	ldr	r3, [pc, #104]	; (8002ab8 <DRUKUJCZUJNIKI+0x3c8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b09      	cmp	r3, #9
 8002a54:	d12c      	bne.n	8002ab0 <DRUKUJCZUJNIKI+0x3c0>
 8002a56:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <DRUKUJCZUJNIKI+0x3d4>)
 8002a58:	edd3 7a00 	vldr	s15, [r3]
 8002a5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a60:	1d3b      	adds	r3, r7, #4
 8002a62:	2102      	movs	r1, #2
 8002a64:	4618      	mov	r0, r3
 8002a66:	eeb0 0b47 	vmov.f64	d0, d7
 8002a6a:	f001 fcf1 	bl	8004450 <ftoa>
 8002a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fd fc34 	bl	80002e0 <strlen>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a80:	4413      	add	r3, r2
 8002a82:	4a11      	ldr	r2, [pc, #68]	; (8002ac8 <DRUKUJCZUJNIKI+0x3d8>)
 8002a84:	6810      	ldr	r0, [r2, #0]
 8002a86:	6018      	str	r0, [r3, #0]
 8002a88:	8891      	ldrh	r1, [r2, #4]
 8002a8a:	7992      	ldrb	r2, [r2, #6]
 8002a8c:	8099      	strh	r1, [r3, #4]
 8002a8e:	719a      	strb	r2, [r3, #6]
 8002a90:	1d3a      	adds	r2, r7, #4
 8002a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a96:	4611      	mov	r1, r2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f012 f8e9 	bl	8014c70 <strcat>
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <DRUKUJCZUJNIKI+0x3c8>)
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fe f955 	bl	8000d58 <DO_BLE>
 8002aae:	bf00      	nop
          }
    }
}
 8002ab0:	3738      	adds	r7, #56	; 0x38
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	24000000 	.word	0x24000000
 8002abc:	24000480 	.word	0x24000480
 8002ac0:	08019418 	.word	0x08019418
 8002ac4:	24000234 	.word	0x24000234
 8002ac8:	080193c4 	.word	0x080193c4

08002acc <WyslijWartoscERR>:

void WyslijWartoscERR()
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b088      	sub	sp, #32
 8002ad0:	af00      	add	r7, sp, #0
	   if(drukowanie==2) //to cale jest do napisania
 8002ad2:	4bc3      	ldr	r3, [pc, #780]	; (8002de0 <WyslijWartoscERR+0x314>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	f040 8361 	bne.w	800319e <WyslijWartoscERR+0x6d2>
	 {
		  	  char after_con_val[32]={0};
 8002adc:	2300      	movs	r3, #0
 8002ade:	603b      	str	r3, [r7, #0]
 8002ae0:	1d3b      	adds	r3, r7, #4
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	605a      	str	r2, [r3, #4]
 8002ae8:	609a      	str	r2, [r3, #8]
 8002aea:	60da      	str	r2, [r3, #12]
 8002aec:	611a      	str	r2, [r3, #16]
 8002aee:	615a      	str	r2, [r3, #20]
 8002af0:	619a      	str	r2, [r3, #24]


	 //   drukowanie=2;


	  if (k_wys_pom==1 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8002af2:	4bbc      	ldr	r3, [pc, #752]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d12e      	bne.n	8002b58 <WyslijWartoscERR+0x8c>
 8002afa:	f003 f99b 	bl	8005e34 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	4bb9      	ldr	r3, [pc, #740]	; (8002de8 <WyslijWartoscERR+0x31c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b0e      	cmp	r3, #14
 8002b08:	d926      	bls.n	8002b58 <WyslijWartoscERR+0x8c>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8002b0a:	f003 f993 	bl	8005e34 <HAL_GetTick>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	4ab5      	ldr	r2, [pc, #724]	; (8002de8 <WyslijWartoscERR+0x31c>)
 8002b12:	6013      	str	r3, [r2, #0]

	   ftoa(er1,after_con_val ,2);
 8002b14:	4bb5      	ldr	r3, [pc, #724]	; (8002dec <WyslijWartoscERR+0x320>)
 8002b16:	edd3 7a00 	vldr	s15, [r3]
 8002b1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b1e:	463b      	mov	r3, r7
 8002b20:	2102      	movs	r1, #2
 8002b22:	4618      	mov	r0, r3
 8002b24:	eeb0 0b47 	vmov.f64	d0, d7
 8002b28:	f001 fc92 	bl	8004450 <ftoa>
	   strcat(after_con_val, "*");
 8002b2c:	463b      	mov	r3, r7
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fd fbd6 	bl	80002e0 <strlen>
 8002b34:	4603      	mov	r3, r0
 8002b36:	461a      	mov	r2, r3
 8002b38:	463b      	mov	r3, r7
 8002b3a:	4413      	add	r3, r2
 8002b3c:	49ac      	ldr	r1, [pc, #688]	; (8002df0 <WyslijWartoscERR+0x324>)
 8002b3e:	461a      	mov	r2, r3
 8002b40:	460b      	mov	r3, r1
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	8013      	strh	r3, [r2, #0]
	  DO_BLE(after_con_val);
 8002b46:	463b      	mov	r3, r7
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7fe f905 	bl	8000d58 <DO_BLE>
	k_wys_pom++;
 8002b4e:	4ba5      	ldr	r3, [pc, #660]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	3301      	adds	r3, #1
 8002b54:	4aa3      	ldr	r2, [pc, #652]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002b56:	6013      	str	r3, [r2, #0]
	  }
	  if (k_wys_pom==2 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8002b58:	4ba2      	ldr	r3, [pc, #648]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d12e      	bne.n	8002bbe <WyslijWartoscERR+0xf2>
 8002b60:	f003 f968 	bl	8005e34 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	4ba0      	ldr	r3, [pc, #640]	; (8002de8 <WyslijWartoscERR+0x31c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b0e      	cmp	r3, #14
 8002b6e:	d926      	bls.n	8002bbe <WyslijWartoscERR+0xf2>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8002b70:	f003 f960 	bl	8005e34 <HAL_GetTick>
 8002b74:	4603      	mov	r3, r0
 8002b76:	4a9c      	ldr	r2, [pc, #624]	; (8002de8 <WyslijWartoscERR+0x31c>)
 8002b78:	6013      	str	r3, [r2, #0]
	   ftoa(er2,after_con_val ,2);
 8002b7a:	4b9e      	ldr	r3, [pc, #632]	; (8002df4 <WyslijWartoscERR+0x328>)
 8002b7c:	edd3 7a00 	vldr	s15, [r3]
 8002b80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b84:	463b      	mov	r3, r7
 8002b86:	2102      	movs	r1, #2
 8002b88:	4618      	mov	r0, r3
 8002b8a:	eeb0 0b47 	vmov.f64	d0, d7
 8002b8e:	f001 fc5f 	bl	8004450 <ftoa>
	   strcat(after_con_val, "&");
 8002b92:	463b      	mov	r3, r7
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fd fba3 	bl	80002e0 <strlen>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	463b      	mov	r3, r7
 8002ba0:	4413      	add	r3, r2
 8002ba2:	4995      	ldr	r1, [pc, #596]	; (8002df8 <WyslijWartoscERR+0x32c>)
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	881b      	ldrh	r3, [r3, #0]
 8002baa:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 8002bac:	463b      	mov	r3, r7
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fe f8d2 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 8002bb4:	4b8b      	ldr	r3, [pc, #556]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	4a8a      	ldr	r2, [pc, #552]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002bbc:	6013      	str	r3, [r2, #0]
	  }
	    if (k_wys_pom==3 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8002bbe:	4b89      	ldr	r3, [pc, #548]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b03      	cmp	r3, #3
 8002bc4:	d12e      	bne.n	8002c24 <WyslijWartoscERR+0x158>
 8002bc6:	f003 f935 	bl	8005e34 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	4b86      	ldr	r3, [pc, #536]	; (8002de8 <WyslijWartoscERR+0x31c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b0e      	cmp	r3, #14
 8002bd4:	d926      	bls.n	8002c24 <WyslijWartoscERR+0x158>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8002bd6:	f003 f92d 	bl	8005e34 <HAL_GetTick>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	4a82      	ldr	r2, [pc, #520]	; (8002de8 <WyslijWartoscERR+0x31c>)
 8002bde:	6013      	str	r3, [r2, #0]
	   ftoa(er3,after_con_val ,2);
 8002be0:	4b86      	ldr	r3, [pc, #536]	; (8002dfc <WyslijWartoscERR+0x330>)
 8002be2:	edd3 7a00 	vldr	s15, [r3]
 8002be6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bea:	463b      	mov	r3, r7
 8002bec:	2102      	movs	r1, #2
 8002bee:	4618      	mov	r0, r3
 8002bf0:	eeb0 0b47 	vmov.f64	d0, d7
 8002bf4:	f001 fc2c 	bl	8004450 <ftoa>
	   strcat(after_con_val, "^");
 8002bf8:	463b      	mov	r3, r7
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fd fb70 	bl	80002e0 <strlen>
 8002c00:	4603      	mov	r3, r0
 8002c02:	461a      	mov	r2, r3
 8002c04:	463b      	mov	r3, r7
 8002c06:	4413      	add	r3, r2
 8002c08:	497d      	ldr	r1, [pc, #500]	; (8002e00 <WyslijWartoscERR+0x334>)
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	881b      	ldrh	r3, [r3, #0]
 8002c10:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 8002c12:	463b      	mov	r3, r7
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fe f89f 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 8002c1a:	4b72      	ldr	r3, [pc, #456]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	4a70      	ldr	r2, [pc, #448]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002c22:	6013      	str	r3, [r2, #0]
	   }
	       if (k_wys_pom==4 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8002c24:	4b6f      	ldr	r3, [pc, #444]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	d12e      	bne.n	8002c8a <WyslijWartoscERR+0x1be>
 8002c2c:	f003 f902 	bl	8005e34 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	4b6d      	ldr	r3, [pc, #436]	; (8002de8 <WyslijWartoscERR+0x31c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b0e      	cmp	r3, #14
 8002c3a:	d926      	bls.n	8002c8a <WyslijWartoscERR+0x1be>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8002c3c:	f003 f8fa 	bl	8005e34 <HAL_GetTick>
 8002c40:	4603      	mov	r3, r0
 8002c42:	4a69      	ldr	r2, [pc, #420]	; (8002de8 <WyslijWartoscERR+0x31c>)
 8002c44:	6013      	str	r3, [r2, #0]

	   ftoa(er4,after_con_val ,2);
 8002c46:	4b6f      	ldr	r3, [pc, #444]	; (8002e04 <WyslijWartoscERR+0x338>)
 8002c48:	edd3 7a00 	vldr	s15, [r3]
 8002c4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c50:	463b      	mov	r3, r7
 8002c52:	2102      	movs	r1, #2
 8002c54:	4618      	mov	r0, r3
 8002c56:	eeb0 0b47 	vmov.f64	d0, d7
 8002c5a:	f001 fbf9 	bl	8004450 <ftoa>
	   strcat(after_con_val, "_");
 8002c5e:	463b      	mov	r3, r7
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fd fb3d 	bl	80002e0 <strlen>
 8002c66:	4603      	mov	r3, r0
 8002c68:	461a      	mov	r2, r3
 8002c6a:	463b      	mov	r3, r7
 8002c6c:	4413      	add	r3, r2
 8002c6e:	4966      	ldr	r1, [pc, #408]	; (8002e08 <WyslijWartoscERR+0x33c>)
 8002c70:	461a      	mov	r2, r3
 8002c72:	460b      	mov	r3, r1
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 8002c78:	463b      	mov	r3, r7
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fe f86c 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 8002c80:	4b58      	ldr	r3, [pc, #352]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	3301      	adds	r3, #1
 8002c86:	4a57      	ldr	r2, [pc, #348]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002c88:	6013      	str	r3, [r2, #0]
	    }
	          if (k_wys_pom==5 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8002c8a:	4b56      	ldr	r3, [pc, #344]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b05      	cmp	r3, #5
 8002c90:	d12e      	bne.n	8002cf0 <WyslijWartoscERR+0x224>
 8002c92:	f003 f8cf 	bl	8005e34 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	4b53      	ldr	r3, [pc, #332]	; (8002de8 <WyslijWartoscERR+0x31c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b0e      	cmp	r3, #14
 8002ca0:	d926      	bls.n	8002cf0 <WyslijWartoscERR+0x224>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8002ca2:	f003 f8c7 	bl	8005e34 <HAL_GetTick>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	4a4f      	ldr	r2, [pc, #316]	; (8002de8 <WyslijWartoscERR+0x31c>)
 8002caa:	6013      	str	r3, [r2, #0]

	   ftoa(er5,after_con_val ,2);
 8002cac:	4b57      	ldr	r3, [pc, #348]	; (8002e0c <WyslijWartoscERR+0x340>)
 8002cae:	edd3 7a00 	vldr	s15, [r3]
 8002cb2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cb6:	463b      	mov	r3, r7
 8002cb8:	2102      	movs	r1, #2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	eeb0 0b47 	vmov.f64	d0, d7
 8002cc0:	f001 fbc6 	bl	8004450 <ftoa>
	   strcat(after_con_val, "$");
 8002cc4:	463b      	mov	r3, r7
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fd fb0a 	bl	80002e0 <strlen>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	461a      	mov	r2, r3
 8002cd0:	463b      	mov	r3, r7
 8002cd2:	4413      	add	r3, r2
 8002cd4:	494e      	ldr	r1, [pc, #312]	; (8002e10 <WyslijWartoscERR+0x344>)
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	460b      	mov	r3, r1
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 8002cde:	463b      	mov	r3, r7
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fe f839 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 8002ce6:	4b3f      	ldr	r3, [pc, #252]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	3301      	adds	r3, #1
 8002cec:	4a3d      	ldr	r2, [pc, #244]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002cee:	6013      	str	r3, [r2, #0]
	    }
	          if (k_wys_pom==6 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8002cf0:	4b3c      	ldr	r3, [pc, #240]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b06      	cmp	r3, #6
 8002cf6:	d12e      	bne.n	8002d56 <WyslijWartoscERR+0x28a>
 8002cf8:	f003 f89c 	bl	8005e34 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	4b3a      	ldr	r3, [pc, #232]	; (8002de8 <WyslijWartoscERR+0x31c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b0e      	cmp	r3, #14
 8002d06:	d926      	bls.n	8002d56 <WyslijWartoscERR+0x28a>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8002d08:	f003 f894 	bl	8005e34 <HAL_GetTick>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	4a36      	ldr	r2, [pc, #216]	; (8002de8 <WyslijWartoscERR+0x31c>)
 8002d10:	6013      	str	r3, [r2, #0]

	   ftoa(er6,after_con_val ,2);
 8002d12:	4b40      	ldr	r3, [pc, #256]	; (8002e14 <WyslijWartoscERR+0x348>)
 8002d14:	edd3 7a00 	vldr	s15, [r3]
 8002d18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d1c:	463b      	mov	r3, r7
 8002d1e:	2102      	movs	r1, #2
 8002d20:	4618      	mov	r0, r3
 8002d22:	eeb0 0b47 	vmov.f64	d0, d7
 8002d26:	f001 fb93 	bl	8004450 <ftoa>
	   strcat(after_con_val, "#");
 8002d2a:	463b      	mov	r3, r7
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fd fad7 	bl	80002e0 <strlen>
 8002d32:	4603      	mov	r3, r0
 8002d34:	461a      	mov	r2, r3
 8002d36:	463b      	mov	r3, r7
 8002d38:	4413      	add	r3, r2
 8002d3a:	4937      	ldr	r1, [pc, #220]	; (8002e18 <WyslijWartoscERR+0x34c>)
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	460b      	mov	r3, r1
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 8002d44:	463b      	mov	r3, r7
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fe f806 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 8002d4c:	4b25      	ldr	r3, [pc, #148]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	3301      	adds	r3, #1
 8002d52:	4a24      	ldr	r2, [pc, #144]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002d54:	6013      	str	r3, [r2, #0]
	    }
	          if (k_wys_pom==7 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8002d56:	4b23      	ldr	r3, [pc, #140]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b07      	cmp	r3, #7
 8002d5c:	d12e      	bne.n	8002dbc <WyslijWartoscERR+0x2f0>
 8002d5e:	f003 f869 	bl	8005e34 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	4b20      	ldr	r3, [pc, #128]	; (8002de8 <WyslijWartoscERR+0x31c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b0e      	cmp	r3, #14
 8002d6c:	d926      	bls.n	8002dbc <WyslijWartoscERR+0x2f0>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8002d6e:	f003 f861 	bl	8005e34 <HAL_GetTick>
 8002d72:	4603      	mov	r3, r0
 8002d74:	4a1c      	ldr	r2, [pc, #112]	; (8002de8 <WyslijWartoscERR+0x31c>)
 8002d76:	6013      	str	r3, [r2, #0]

	   ftoa(er7,after_con_val ,2);
 8002d78:	4b28      	ldr	r3, [pc, #160]	; (8002e1c <WyslijWartoscERR+0x350>)
 8002d7a:	edd3 7a00 	vldr	s15, [r3]
 8002d7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d82:	463b      	mov	r3, r7
 8002d84:	2102      	movs	r1, #2
 8002d86:	4618      	mov	r0, r3
 8002d88:	eeb0 0b47 	vmov.f64	d0, d7
 8002d8c:	f001 fb60 	bl	8004450 <ftoa>
	   strcat(after_con_val, "@");
 8002d90:	463b      	mov	r3, r7
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fd faa4 	bl	80002e0 <strlen>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	463b      	mov	r3, r7
 8002d9e:	4413      	add	r3, r2
 8002da0:	491f      	ldr	r1, [pc, #124]	; (8002e20 <WyslijWartoscERR+0x354>)
 8002da2:	461a      	mov	r2, r3
 8002da4:	460b      	mov	r3, r1
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 8002daa:	463b      	mov	r3, r7
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7fd ffd3 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 8002db2:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	3301      	adds	r3, #1
 8002db8:	4a0a      	ldr	r2, [pc, #40]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002dba:	6013      	str	r3, [r2, #0]
	    }
	          if (k_wys_pom==8 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8002dbc:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <WyslijWartoscERR+0x318>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d151      	bne.n	8002e68 <WyslijWartoscERR+0x39c>
 8002dc4:	f003 f836 	bl	8005e34 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	4b07      	ldr	r3, [pc, #28]	; (8002de8 <WyslijWartoscERR+0x31c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b0e      	cmp	r3, #14
 8002dd2:	d949      	bls.n	8002e68 <WyslijWartoscERR+0x39c>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8002dd4:	f003 f82e 	bl	8005e34 <HAL_GetTick>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	4a03      	ldr	r2, [pc, #12]	; (8002de8 <WyslijWartoscERR+0x31c>)
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	e021      	b.n	8002e24 <WyslijWartoscERR+0x358>
 8002de0:	2400028d 	.word	0x2400028d
 8002de4:	24000000 	.word	0x24000000
 8002de8:	24000284 	.word	0x24000284
 8002dec:	24000478 	.word	0x24000478
 8002df0:	08019420 	.word	0x08019420
 8002df4:	24000470 	.word	0x24000470
 8002df8:	08019424 	.word	0x08019424
 8002dfc:	2400047c 	.word	0x2400047c
 8002e00:	08019428 	.word	0x08019428
 8002e04:	2400045c 	.word	0x2400045c
 8002e08:	0801942c 	.word	0x0801942c
 8002e0c:	2400049c 	.word	0x2400049c
 8002e10:	08019430 	.word	0x08019430
 8002e14:	24000498 	.word	0x24000498
 8002e18:	08019434 	.word	0x08019434
 8002e1c:	240004a8 	.word	0x240004a8
 8002e20:	08019438 	.word	0x08019438

	   ftoa(err_max,after_con_val ,2);
 8002e24:	4bc1      	ldr	r3, [pc, #772]	; (800312c <WyslijWartoscERR+0x660>)
 8002e26:	edd3 7a00 	vldr	s15, [r3]
 8002e2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e2e:	463b      	mov	r3, r7
 8002e30:	2102      	movs	r1, #2
 8002e32:	4618      	mov	r0, r3
 8002e34:	eeb0 0b47 	vmov.f64	d0, d7
 8002e38:	f001 fb0a 	bl	8004450 <ftoa>
	   strcat(after_con_val, "!");
 8002e3c:	463b      	mov	r3, r7
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fd fa4e 	bl	80002e0 <strlen>
 8002e44:	4603      	mov	r3, r0
 8002e46:	461a      	mov	r2, r3
 8002e48:	463b      	mov	r3, r7
 8002e4a:	4413      	add	r3, r2
 8002e4c:	49b8      	ldr	r1, [pc, #736]	; (8003130 <WyslijWartoscERR+0x664>)
 8002e4e:	461a      	mov	r2, r3
 8002e50:	460b      	mov	r3, r1
 8002e52:	881b      	ldrh	r3, [r3, #0]
 8002e54:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 8002e56:	463b      	mov	r3, r7
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fd ff7d 	bl	8000d58 <DO_BLE>
	  // drukowanie=0;
	   //wynik=0;
	   k_wys_pom++;
 8002e5e:	4bb5      	ldr	r3, [pc, #724]	; (8003134 <WyslijWartoscERR+0x668>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	3301      	adds	r3, #1
 8002e64:	4ab3      	ldr	r2, [pc, #716]	; (8003134 <WyslijWartoscERR+0x668>)
 8002e66:	6013      	str	r3, [r2, #0]

	    }
              if (k_wys_pom==9 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8002e68:	4bb2      	ldr	r3, [pc, #712]	; (8003134 <WyslijWartoscERR+0x668>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b09      	cmp	r3, #9
 8002e6e:	d129      	bne.n	8002ec4 <WyslijWartoscERR+0x3f8>
 8002e70:	f002 ffe0 	bl	8005e34 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	4bb0      	ldr	r3, [pc, #704]	; (8003138 <WyslijWartoscERR+0x66c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b0e      	cmp	r3, #14
 8002e7e:	d921      	bls.n	8002ec4 <WyslijWartoscERR+0x3f8>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8002e80:	f002 ffd8 	bl	8005e34 <HAL_GetTick>
 8002e84:	4603      	mov	r3, r0
 8002e86:	4aac      	ldr	r2, [pc, #688]	; (8003138 <WyslijWartoscERR+0x66c>)
 8002e88:	6013      	str	r3, [r2, #0]

	   itoa(czcz1,after_con_val ,10);
 8002e8a:	4bac      	ldr	r3, [pc, #688]	; (800313c <WyslijWartoscERR+0x670>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4639      	mov	r1, r7
 8002e90:	220a      	movs	r2, #10
 8002e92:	4618      	mov	r0, r3
 8002e94:	f011 f876 	bl	8013f84 <itoa>
	   strcat(after_con_val, "§"); //alt+21
 8002e98:	463b      	mov	r3, r7
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fd fa20 	bl	80002e0 <strlen>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	463b      	mov	r3, r7
 8002ea6:	4413      	add	r3, r2
 8002ea8:	4aa5      	ldr	r2, [pc, #660]	; (8003140 <WyslijWartoscERR+0x674>)
 8002eaa:	8811      	ldrh	r1, [r2, #0]
 8002eac:	7892      	ldrb	r2, [r2, #2]
 8002eae:	8019      	strh	r1, [r3, #0]
 8002eb0:	709a      	strb	r2, [r3, #2]
	   DO_BLE(after_con_val);
 8002eb2:	463b      	mov	r3, r7
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fd ff4f 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 8002eba:	4b9e      	ldr	r3, [pc, #632]	; (8003134 <WyslijWartoscERR+0x668>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	4a9c      	ldr	r2, [pc, #624]	; (8003134 <WyslijWartoscERR+0x668>)
 8002ec2:	6013      	str	r3, [r2, #0]
	    }
	                  if (k_wys_pom==10 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8002ec4:	4b9b      	ldr	r3, [pc, #620]	; (8003134 <WyslijWartoscERR+0x668>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b0a      	cmp	r3, #10
 8002eca:	d129      	bne.n	8002f20 <WyslijWartoscERR+0x454>
 8002ecc:	f002 ffb2 	bl	8005e34 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	4b99      	ldr	r3, [pc, #612]	; (8003138 <WyslijWartoscERR+0x66c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b0e      	cmp	r3, #14
 8002eda:	d921      	bls.n	8002f20 <WyslijWartoscERR+0x454>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8002edc:	f002 ffaa 	bl	8005e34 <HAL_GetTick>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	4a95      	ldr	r2, [pc, #596]	; (8003138 <WyslijWartoscERR+0x66c>)
 8002ee4:	6013      	str	r3, [r2, #0]

	   itoa(czcz2,after_con_val ,10);
 8002ee6:	4b97      	ldr	r3, [pc, #604]	; (8003144 <WyslijWartoscERR+0x678>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4639      	mov	r1, r7
 8002eec:	220a      	movs	r2, #10
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f011 f848 	bl	8013f84 <itoa>
	   strcat(after_con_val, "H");
 8002ef4:	463b      	mov	r3, r7
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fd f9f2 	bl	80002e0 <strlen>
 8002efc:	4603      	mov	r3, r0
 8002efe:	461a      	mov	r2, r3
 8002f00:	463b      	mov	r3, r7
 8002f02:	4413      	add	r3, r2
 8002f04:	4990      	ldr	r1, [pc, #576]	; (8003148 <WyslijWartoscERR+0x67c>)
 8002f06:	461a      	mov	r2, r3
 8002f08:	460b      	mov	r3, r1
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 8002f0e:	463b      	mov	r3, r7
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fd ff21 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 8002f16:	4b87      	ldr	r3, [pc, #540]	; (8003134 <WyslijWartoscERR+0x668>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	4a85      	ldr	r2, [pc, #532]	; (8003134 <WyslijWartoscERR+0x668>)
 8002f1e:	6013      	str	r3, [r2, #0]
	    }
	                  if (k_wys_pom==11 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8002f20:	4b84      	ldr	r3, [pc, #528]	; (8003134 <WyslijWartoscERR+0x668>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b0b      	cmp	r3, #11
 8002f26:	d129      	bne.n	8002f7c <WyslijWartoscERR+0x4b0>
 8002f28:	f002 ff84 	bl	8005e34 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	4b82      	ldr	r3, [pc, #520]	; (8003138 <WyslijWartoscERR+0x66c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b0e      	cmp	r3, #14
 8002f36:	d921      	bls.n	8002f7c <WyslijWartoscERR+0x4b0>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8002f38:	f002 ff7c 	bl	8005e34 <HAL_GetTick>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	4a7e      	ldr	r2, [pc, #504]	; (8003138 <WyslijWartoscERR+0x66c>)
 8002f40:	6013      	str	r3, [r2, #0]

	   itoa(czcz3,after_con_val ,10);
 8002f42:	4b82      	ldr	r3, [pc, #520]	; (800314c <WyslijWartoscERR+0x680>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4639      	mov	r1, r7
 8002f48:	220a      	movs	r2, #10
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f011 f81a 	bl	8013f84 <itoa>
	   strcat(after_con_val, "Q");
 8002f50:	463b      	mov	r3, r7
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fd f9c4 	bl	80002e0 <strlen>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	463b      	mov	r3, r7
 8002f5e:	4413      	add	r3, r2
 8002f60:	497b      	ldr	r1, [pc, #492]	; (8003150 <WyslijWartoscERR+0x684>)
 8002f62:	461a      	mov	r2, r3
 8002f64:	460b      	mov	r3, r1
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 8002f6a:	463b      	mov	r3, r7
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fd fef3 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 8002f72:	4b70      	ldr	r3, [pc, #448]	; (8003134 <WyslijWartoscERR+0x668>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	3301      	adds	r3, #1
 8002f78:	4a6e      	ldr	r2, [pc, #440]	; (8003134 <WyslijWartoscERR+0x668>)
 8002f7a:	6013      	str	r3, [r2, #0]
	    }
	                  if (k_wys_pom==12 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8002f7c:	4b6d      	ldr	r3, [pc, #436]	; (8003134 <WyslijWartoscERR+0x668>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b0c      	cmp	r3, #12
 8002f82:	d129      	bne.n	8002fd8 <WyslijWartoscERR+0x50c>
 8002f84:	f002 ff56 	bl	8005e34 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	4b6b      	ldr	r3, [pc, #428]	; (8003138 <WyslijWartoscERR+0x66c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b0e      	cmp	r3, #14
 8002f92:	d921      	bls.n	8002fd8 <WyslijWartoscERR+0x50c>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8002f94:	f002 ff4e 	bl	8005e34 <HAL_GetTick>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	4a67      	ldr	r2, [pc, #412]	; (8003138 <WyslijWartoscERR+0x66c>)
 8002f9c:	6013      	str	r3, [r2, #0]

	   itoa(czcz4,after_con_val ,10);
 8002f9e:	4b6d      	ldr	r3, [pc, #436]	; (8003154 <WyslijWartoscERR+0x688>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4639      	mov	r1, r7
 8002fa4:	220a      	movs	r2, #10
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f010 ffec 	bl	8013f84 <itoa>
	   strcat(after_con_val, "W");
 8002fac:	463b      	mov	r3, r7
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fd f996 	bl	80002e0 <strlen>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	463b      	mov	r3, r7
 8002fba:	4413      	add	r3, r2
 8002fbc:	4966      	ldr	r1, [pc, #408]	; (8003158 <WyslijWartoscERR+0x68c>)
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 8002fc6:	463b      	mov	r3, r7
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7fd fec5 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 8002fce:	4b59      	ldr	r3, [pc, #356]	; (8003134 <WyslijWartoscERR+0x668>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	4a57      	ldr	r2, [pc, #348]	; (8003134 <WyslijWartoscERR+0x668>)
 8002fd6:	6013      	str	r3, [r2, #0]
	    }
	                  if (k_wys_pom==13 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8002fd8:	4b56      	ldr	r3, [pc, #344]	; (8003134 <WyslijWartoscERR+0x668>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b0d      	cmp	r3, #13
 8002fde:	d129      	bne.n	8003034 <WyslijWartoscERR+0x568>
 8002fe0:	f002 ff28 	bl	8005e34 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	4b54      	ldr	r3, [pc, #336]	; (8003138 <WyslijWartoscERR+0x66c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b0e      	cmp	r3, #14
 8002fee:	d921      	bls.n	8003034 <WyslijWartoscERR+0x568>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8002ff0:	f002 ff20 	bl	8005e34 <HAL_GetTick>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	4a50      	ldr	r2, [pc, #320]	; (8003138 <WyslijWartoscERR+0x66c>)
 8002ff8:	6013      	str	r3, [r2, #0]


	   itoa(czcz5,after_con_val ,10);
 8002ffa:	4b58      	ldr	r3, [pc, #352]	; (800315c <WyslijWartoscERR+0x690>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4639      	mov	r1, r7
 8003000:	220a      	movs	r2, #10
 8003002:	4618      	mov	r0, r3
 8003004:	f010 ffbe 	bl	8013f84 <itoa>
	   strcat(after_con_val, "?");
 8003008:	463b      	mov	r3, r7
 800300a:	4618      	mov	r0, r3
 800300c:	f7fd f968 	bl	80002e0 <strlen>
 8003010:	4603      	mov	r3, r0
 8003012:	461a      	mov	r2, r3
 8003014:	463b      	mov	r3, r7
 8003016:	4413      	add	r3, r2
 8003018:	4951      	ldr	r1, [pc, #324]	; (8003160 <WyslijWartoscERR+0x694>)
 800301a:	461a      	mov	r2, r3
 800301c:	460b      	mov	r3, r1
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 8003022:	463b      	mov	r3, r7
 8003024:	4618      	mov	r0, r3
 8003026:	f7fd fe97 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 800302a:	4b42      	ldr	r3, [pc, #264]	; (8003134 <WyslijWartoscERR+0x668>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	3301      	adds	r3, #1
 8003030:	4a40      	ldr	r2, [pc, #256]	; (8003134 <WyslijWartoscERR+0x668>)
 8003032:	6013      	str	r3, [r2, #0]
	    }
	                  if (k_wys_pom==14 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8003034:	4b3f      	ldr	r3, [pc, #252]	; (8003134 <WyslijWartoscERR+0x668>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b0e      	cmp	r3, #14
 800303a:	d129      	bne.n	8003090 <WyslijWartoscERR+0x5c4>
 800303c:	f002 fefa 	bl	8005e34 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	4b3d      	ldr	r3, [pc, #244]	; (8003138 <WyslijWartoscERR+0x66c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b0e      	cmp	r3, #14
 800304a:	d921      	bls.n	8003090 <WyslijWartoscERR+0x5c4>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 800304c:	f002 fef2 	bl	8005e34 <HAL_GetTick>
 8003050:	4603      	mov	r3, r0
 8003052:	4a39      	ldr	r2, [pc, #228]	; (8003138 <WyslijWartoscERR+0x66c>)
 8003054:	6013      	str	r3, [r2, #0]

	   itoa(czcz6,after_con_val ,10);
 8003056:	4b43      	ldr	r3, [pc, #268]	; (8003164 <WyslijWartoscERR+0x698>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4639      	mov	r1, r7
 800305c:	220a      	movs	r2, #10
 800305e:	4618      	mov	r0, r3
 8003060:	f010 ff90 	bl	8013f84 <itoa>
	   strcat(after_con_val, "L");
 8003064:	463b      	mov	r3, r7
 8003066:	4618      	mov	r0, r3
 8003068:	f7fd f93a 	bl	80002e0 <strlen>
 800306c:	4603      	mov	r3, r0
 800306e:	461a      	mov	r2, r3
 8003070:	463b      	mov	r3, r7
 8003072:	4413      	add	r3, r2
 8003074:	493c      	ldr	r1, [pc, #240]	; (8003168 <WyslijWartoscERR+0x69c>)
 8003076:	461a      	mov	r2, r3
 8003078:	460b      	mov	r3, r1
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 800307e:	463b      	mov	r3, r7
 8003080:	4618      	mov	r0, r3
 8003082:	f7fd fe69 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 8003086:	4b2b      	ldr	r3, [pc, #172]	; (8003134 <WyslijWartoscERR+0x668>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	3301      	adds	r3, #1
 800308c:	4a29      	ldr	r2, [pc, #164]	; (8003134 <WyslijWartoscERR+0x668>)
 800308e:	6013      	str	r3, [r2, #0]
	    }
	                  if (k_wys_pom==15 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8003090:	4b28      	ldr	r3, [pc, #160]	; (8003134 <WyslijWartoscERR+0x668>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b0f      	cmp	r3, #15
 8003096:	d129      	bne.n	80030ec <WyslijWartoscERR+0x620>
 8003098:	f002 fecc 	bl	8005e34 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	4b26      	ldr	r3, [pc, #152]	; (8003138 <WyslijWartoscERR+0x66c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b0e      	cmp	r3, #14
 80030a6:	d921      	bls.n	80030ec <WyslijWartoscERR+0x620>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 80030a8:	f002 fec4 	bl	8005e34 <HAL_GetTick>
 80030ac:	4603      	mov	r3, r0
 80030ae:	4a22      	ldr	r2, [pc, #136]	; (8003138 <WyslijWartoscERR+0x66c>)
 80030b0:	6013      	str	r3, [r2, #0]

	   itoa(czcz7,after_con_val ,10);
 80030b2:	4b2e      	ldr	r3, [pc, #184]	; (800316c <WyslijWartoscERR+0x6a0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4639      	mov	r1, r7
 80030b8:	220a      	movs	r2, #10
 80030ba:	4618      	mov	r0, r3
 80030bc:	f010 ff62 	bl	8013f84 <itoa>
	   strcat(after_con_val, "T");
 80030c0:	463b      	mov	r3, r7
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fd f90c 	bl	80002e0 <strlen>
 80030c8:	4603      	mov	r3, r0
 80030ca:	461a      	mov	r2, r3
 80030cc:	463b      	mov	r3, r7
 80030ce:	4413      	add	r3, r2
 80030d0:	4927      	ldr	r1, [pc, #156]	; (8003170 <WyslijWartoscERR+0x6a4>)
 80030d2:	461a      	mov	r2, r3
 80030d4:	460b      	mov	r3, r1
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 80030da:	463b      	mov	r3, r7
 80030dc:	4618      	mov	r0, r3
 80030de:	f7fd fe3b 	bl	8000d58 <DO_BLE>
	   k_wys_pom++;
 80030e2:	4b14      	ldr	r3, [pc, #80]	; (8003134 <WyslijWartoscERR+0x668>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3301      	adds	r3, #1
 80030e8:	4a12      	ldr	r2, [pc, #72]	; (8003134 <WyslijWartoscERR+0x668>)
 80030ea:	6013      	str	r3, [r2, #0]
	    }
	                  if (k_wys_pom==16 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 80030ec:	4b11      	ldr	r3, [pc, #68]	; (8003134 <WyslijWartoscERR+0x668>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b10      	cmp	r3, #16
 80030f2:	d154      	bne.n	800319e <WyslijWartoscERR+0x6d2>
 80030f4:	f002 fe9e 	bl	8005e34 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	4b0f      	ldr	r3, [pc, #60]	; (8003138 <WyslijWartoscERR+0x66c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b0e      	cmp	r3, #14
 8003102:	d94c      	bls.n	800319e <WyslijWartoscERR+0x6d2>
	   ZapamientanyCzasK_BLE = HAL_GetTick();
 8003104:	f002 fe96 	bl	8005e34 <HAL_GetTick>
 8003108:	4603      	mov	r3, r0
 800310a:	4a0b      	ldr	r2, [pc, #44]	; (8003138 <WyslijWartoscERR+0x66c>)
 800310c:	6013      	str	r3, [r2, #0]

	   itoa(czcz8,after_con_val ,10);
 800310e:	4b19      	ldr	r3, [pc, #100]	; (8003174 <WyslijWartoscERR+0x6a8>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4639      	mov	r1, r7
 8003114:	220a      	movs	r2, #10
 8003116:	4618      	mov	r0, r3
 8003118:	f010 ff34 	bl	8013f84 <itoa>
	   strcat(after_con_val, "Y");
 800311c:	463b      	mov	r3, r7
 800311e:	4618      	mov	r0, r3
 8003120:	f7fd f8de 	bl	80002e0 <strlen>
 8003124:	4603      	mov	r3, r0
 8003126:	461a      	mov	r2, r3
 8003128:	463b      	mov	r3, r7
 800312a:	e025      	b.n	8003178 <WyslijWartoscERR+0x6ac>
 800312c:	24000468 	.word	0x24000468
 8003130:	0801943c 	.word	0x0801943c
 8003134:	24000000 	.word	0x24000000
 8003138:	24000284 	.word	0x24000284
 800313c:	24000490 	.word	0x24000490
 8003140:	08019440 	.word	0x08019440
 8003144:	240004a0 	.word	0x240004a0
 8003148:	08019444 	.word	0x08019444
 800314c:	24000474 	.word	0x24000474
 8003150:	08019448 	.word	0x08019448
 8003154:	24000460 	.word	0x24000460
 8003158:	0801944c 	.word	0x0801944c
 800315c:	240004a4 	.word	0x240004a4
 8003160:	08019450 	.word	0x08019450
 8003164:	24000494 	.word	0x24000494
 8003168:	08019454 	.word	0x08019454
 800316c:	2400046c 	.word	0x2400046c
 8003170:	08019458 	.word	0x08019458
 8003174:	24000464 	.word	0x24000464
 8003178:	4413      	add	r3, r2
 800317a:	490b      	ldr	r1, [pc, #44]	; (80031a8 <WyslijWartoscERR+0x6dc>)
 800317c:	461a      	mov	r2, r3
 800317e:	460b      	mov	r3, r1
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	8013      	strh	r3, [r2, #0]
	   DO_BLE(after_con_val);
 8003184:	463b      	mov	r3, r7
 8003186:	4618      	mov	r0, r3
 8003188:	f7fd fde6 	bl	8000d58 <DO_BLE>
	   k_wys_pom=1;
 800318c:	4b07      	ldr	r3, [pc, #28]	; (80031ac <WyslijWartoscERR+0x6e0>)
 800318e:	2201      	movs	r2, #1
 8003190:	601a      	str	r2, [r3, #0]
	    drukowanie=0;
 8003192:	4b07      	ldr	r3, [pc, #28]	; (80031b0 <WyslijWartoscERR+0x6e4>)
 8003194:	2200      	movs	r2, #0
 8003196:	701a      	strb	r2, [r3, #0]
	 	  wynik=0;
 8003198:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <WyslijWartoscERR+0x6e8>)
 800319a:	2200      	movs	r2, #0
 800319c:	701a      	strb	r2, [r3, #0]

	    }

	  }
}
 800319e:	bf00      	nop
 80031a0:	3720      	adds	r7, #32
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	0801945c 	.word	0x0801945c
 80031ac:	24000000 	.word	0x24000000
 80031b0:	2400028d 	.word	0x2400028d
 80031b4:	2400028c 	.word	0x2400028c

080031b8 <PRZYPISYWANIEWARTOSCI>:

void PRZYPISYWANIEWARTOSCI()
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0

	//Z Ekranu "PODST"
  if(wynik==1){
 80031bc:	4bb6      	ldr	r3, [pc, #728]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d10d      	bne.n	80031e0 <PRZYPISYWANIEWARTOSCI+0x28>
	  Kp=atof(DANE_BLE);
 80031c4:	48b5      	ldr	r0, [pc, #724]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 80031c6:	f010 fe93 	bl	8013ef0 <atof>
 80031ca:	eeb0 7b40 	vmov.f64	d7, d0
 80031ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80031d2:	4bb3      	ldr	r3, [pc, #716]	; (80034a0 <PRZYPISYWANIEWARTOSCI+0x2e8>)
 80031d4:	edc3 7a00 	vstr	s15, [r3]
	  EEPROM_WRITE_FLOAT(50,&Kp);
 80031d8:	49b1      	ldr	r1, [pc, #708]	; (80034a0 <PRZYPISYWANIEWARTOSCI+0x2e8>)
 80031da:	2032      	movs	r0, #50	; 0x32
 80031dc:	f7fe f85c 	bl	8001298 <EEPROM_WRITE_FLOAT>

    }
  if(wynik==2){
 80031e0:	4bad      	ldr	r3, [pc, #692]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d10d      	bne.n	8003204 <PRZYPISYWANIEWARTOSCI+0x4c>
    Kd=atof(DANE_BLE);
 80031e8:	48ac      	ldr	r0, [pc, #688]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 80031ea:	f010 fe81 	bl	8013ef0 <atof>
 80031ee:	eeb0 7b40 	vmov.f64	d7, d0
 80031f2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80031f6:	4bab      	ldr	r3, [pc, #684]	; (80034a4 <PRZYPISYWANIEWARTOSCI+0x2ec>)
 80031f8:	edc3 7a00 	vstr	s15, [r3]
    EEPROM_WRITE_FLOAT(55,&Kd);
 80031fc:	49a9      	ldr	r1, [pc, #676]	; (80034a4 <PRZYPISYWANIEWARTOSCI+0x2ec>)
 80031fe:	2037      	movs	r0, #55	; 0x37
 8003200:	f7fe f84a 	bl	8001298 <EEPROM_WRITE_FLOAT>
  }
  if(wynik==103){
 8003204:	4ba4      	ldr	r3, [pc, #656]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b67      	cmp	r3, #103	; 0x67
 800320a:	d10d      	bne.n	8003228 <PRZYPISYWANIEWARTOSCI+0x70>
    pr_pocz_silnikow=atof(DANE_BLE);
 800320c:	48a3      	ldr	r0, [pc, #652]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 800320e:	f010 fe6f 	bl	8013ef0 <atof>
 8003212:	eeb0 7b40 	vmov.f64	d7, d0
 8003216:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800321a:	4ba3      	ldr	r3, [pc, #652]	; (80034a8 <PRZYPISYWANIEWARTOSCI+0x2f0>)
 800321c:	edc3 7a00 	vstr	s15, [r3]
    EEPROM_WRITE_FLOAT(60,&pr_pocz_silnikow);
 8003220:	49a1      	ldr	r1, [pc, #644]	; (80034a8 <PRZYPISYWANIEWARTOSCI+0x2f0>)
 8003222:	203c      	movs	r0, #60	; 0x3c
 8003224:	f7fe f838 	bl	8001298 <EEPROM_WRITE_FLOAT>
}
  if(wynik==4) {
 8003228:	4b9b      	ldr	r3, [pc, #620]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b04      	cmp	r3, #4
 800322e:	d10d      	bne.n	800324c <PRZYPISYWANIEWARTOSCI+0x94>
    Ki=atof(DANE_BLE);
 8003230:	489a      	ldr	r0, [pc, #616]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 8003232:	f010 fe5d 	bl	8013ef0 <atof>
 8003236:	eeb0 7b40 	vmov.f64	d7, d0
 800323a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800323e:	4b9b      	ldr	r3, [pc, #620]	; (80034ac <PRZYPISYWANIEWARTOSCI+0x2f4>)
 8003240:	edc3 7a00 	vstr	s15, [r3]
    EEPROM_WRITE_FLOAT(65,&Ki);
 8003244:	4999      	ldr	r1, [pc, #612]	; (80034ac <PRZYPISYWANIEWARTOSCI+0x2f4>)
 8003246:	2041      	movs	r0, #65	; 0x41
 8003248:	f7fe f826 	bl	8001298 <EEPROM_WRITE_FLOAT>



  //Z Ekranu "CZUJNIKI"

  if(wynik==10) {
 800324c:	4b92      	ldr	r3, [pc, #584]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b0a      	cmp	r3, #10
 8003252:	d10d      	bne.n	8003270 <PRZYPISYWANIEWARTOSCI+0xb8>
    er1=atof(DANE_BLE);  EEPROM_WRITE_FLOAT(70,&er1);
 8003254:	4891      	ldr	r0, [pc, #580]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 8003256:	f010 fe4b 	bl	8013ef0 <atof>
 800325a:	eeb0 7b40 	vmov.f64	d7, d0
 800325e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003262:	4b93      	ldr	r3, [pc, #588]	; (80034b0 <PRZYPISYWANIEWARTOSCI+0x2f8>)
 8003264:	edc3 7a00 	vstr	s15, [r3]
 8003268:	4991      	ldr	r1, [pc, #580]	; (80034b0 <PRZYPISYWANIEWARTOSCI+0x2f8>)
 800326a:	2046      	movs	r0, #70	; 0x46
 800326c:	f7fe f814 	bl	8001298 <EEPROM_WRITE_FLOAT>

  }
    if(wynik==11) {
 8003270:	4b89      	ldr	r3, [pc, #548]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b0b      	cmp	r3, #11
 8003276:	d10d      	bne.n	8003294 <PRZYPISYWANIEWARTOSCI+0xdc>
    er2=atof(DANE_BLE);  EEPROM_WRITE_FLOAT(75,&er2);
 8003278:	4888      	ldr	r0, [pc, #544]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 800327a:	f010 fe39 	bl	8013ef0 <atof>
 800327e:	eeb0 7b40 	vmov.f64	d7, d0
 8003282:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003286:	4b8b      	ldr	r3, [pc, #556]	; (80034b4 <PRZYPISYWANIEWARTOSCI+0x2fc>)
 8003288:	edc3 7a00 	vstr	s15, [r3]
 800328c:	4989      	ldr	r1, [pc, #548]	; (80034b4 <PRZYPISYWANIEWARTOSCI+0x2fc>)
 800328e:	204b      	movs	r0, #75	; 0x4b
 8003290:	f7fe f802 	bl	8001298 <EEPROM_WRITE_FLOAT>

  }
    if(wynik==12) {
 8003294:	4b80      	ldr	r3, [pc, #512]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b0c      	cmp	r3, #12
 800329a:	d10d      	bne.n	80032b8 <PRZYPISYWANIEWARTOSCI+0x100>
    er3=atof(DANE_BLE);  EEPROM_WRITE_FLOAT(80,&er3);
 800329c:	487f      	ldr	r0, [pc, #508]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 800329e:	f010 fe27 	bl	8013ef0 <atof>
 80032a2:	eeb0 7b40 	vmov.f64	d7, d0
 80032a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80032aa:	4b83      	ldr	r3, [pc, #524]	; (80034b8 <PRZYPISYWANIEWARTOSCI+0x300>)
 80032ac:	edc3 7a00 	vstr	s15, [r3]
 80032b0:	4981      	ldr	r1, [pc, #516]	; (80034b8 <PRZYPISYWANIEWARTOSCI+0x300>)
 80032b2:	2050      	movs	r0, #80	; 0x50
 80032b4:	f7fd fff0 	bl	8001298 <EEPROM_WRITE_FLOAT>

  }
    if(wynik==13) {
 80032b8:	4b77      	ldr	r3, [pc, #476]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b0d      	cmp	r3, #13
 80032be:	d10d      	bne.n	80032dc <PRZYPISYWANIEWARTOSCI+0x124>
    er4=atof(DANE_BLE);
 80032c0:	4876      	ldr	r0, [pc, #472]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 80032c2:	f010 fe15 	bl	8013ef0 <atof>
 80032c6:	eeb0 7b40 	vmov.f64	d7, d0
 80032ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80032ce:	4b7b      	ldr	r3, [pc, #492]	; (80034bc <PRZYPISYWANIEWARTOSCI+0x304>)
 80032d0:	edc3 7a00 	vstr	s15, [r3]
    EEPROM_WRITE_FLOAT(85,&er4);
 80032d4:	4979      	ldr	r1, [pc, #484]	; (80034bc <PRZYPISYWANIEWARTOSCI+0x304>)
 80032d6:	2055      	movs	r0, #85	; 0x55
 80032d8:	f7fd ffde 	bl	8001298 <EEPROM_WRITE_FLOAT>

  }
    if(wynik==14) {
 80032dc:	4b6e      	ldr	r3, [pc, #440]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b0e      	cmp	r3, #14
 80032e2:	d10d      	bne.n	8003300 <PRZYPISYWANIEWARTOSCI+0x148>
    er5=atof(DANE_BLE);  EEPROM_WRITE_FLOAT(90,&er5);
 80032e4:	486d      	ldr	r0, [pc, #436]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 80032e6:	f010 fe03 	bl	8013ef0 <atof>
 80032ea:	eeb0 7b40 	vmov.f64	d7, d0
 80032ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80032f2:	4b73      	ldr	r3, [pc, #460]	; (80034c0 <PRZYPISYWANIEWARTOSCI+0x308>)
 80032f4:	edc3 7a00 	vstr	s15, [r3]
 80032f8:	4971      	ldr	r1, [pc, #452]	; (80034c0 <PRZYPISYWANIEWARTOSCI+0x308>)
 80032fa:	205a      	movs	r0, #90	; 0x5a
 80032fc:	f7fd ffcc 	bl	8001298 <EEPROM_WRITE_FLOAT>

  }
    if(wynik==15) {
 8003300:	4b65      	ldr	r3, [pc, #404]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b0f      	cmp	r3, #15
 8003306:	d10d      	bne.n	8003324 <PRZYPISYWANIEWARTOSCI+0x16c>
    er6=atof(DANE_BLE);  EEPROM_WRITE_FLOAT(100,&er6); //adres 95 uszkodzony? :/
 8003308:	4864      	ldr	r0, [pc, #400]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 800330a:	f010 fdf1 	bl	8013ef0 <atof>
 800330e:	eeb0 7b40 	vmov.f64	d7, d0
 8003312:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003316:	4b6b      	ldr	r3, [pc, #428]	; (80034c4 <PRZYPISYWANIEWARTOSCI+0x30c>)
 8003318:	edc3 7a00 	vstr	s15, [r3]
 800331c:	4969      	ldr	r1, [pc, #420]	; (80034c4 <PRZYPISYWANIEWARTOSCI+0x30c>)
 800331e:	2064      	movs	r0, #100	; 0x64
 8003320:	f7fd ffba 	bl	8001298 <EEPROM_WRITE_FLOAT>

  }
    if(wynik==16) {
 8003324:	4b5c      	ldr	r3, [pc, #368]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b10      	cmp	r3, #16
 800332a:	d10d      	bne.n	8003348 <PRZYPISYWANIEWARTOSCI+0x190>
    er7=atof(DANE_BLE);  EEPROM_WRITE_FLOAT(105,&er7);
 800332c:	485b      	ldr	r0, [pc, #364]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 800332e:	f010 fddf 	bl	8013ef0 <atof>
 8003332:	eeb0 7b40 	vmov.f64	d7, d0
 8003336:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800333a:	4b63      	ldr	r3, [pc, #396]	; (80034c8 <PRZYPISYWANIEWARTOSCI+0x310>)
 800333c:	edc3 7a00 	vstr	s15, [r3]
 8003340:	4961      	ldr	r1, [pc, #388]	; (80034c8 <PRZYPISYWANIEWARTOSCI+0x310>)
 8003342:	2069      	movs	r0, #105	; 0x69
 8003344:	f7fd ffa8 	bl	8001298 <EEPROM_WRITE_FLOAT>

  }
    if(wynik==17) {
 8003348:	4b53      	ldr	r3, [pc, #332]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b11      	cmp	r3, #17
 800334e:	d10d      	bne.n	800336c <PRZYPISYWANIEWARTOSCI+0x1b4>
    	err_max=atof(DANE_BLE); EEPROM_WRITE_FLOAT(115,&err_max); //adres 110 uszkodzony? :/
 8003350:	4852      	ldr	r0, [pc, #328]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 8003352:	f010 fdcd 	bl	8013ef0 <atof>
 8003356:	eeb0 7b40 	vmov.f64	d7, d0
 800335a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800335e:	4b5b      	ldr	r3, [pc, #364]	; (80034cc <PRZYPISYWANIEWARTOSCI+0x314>)
 8003360:	edc3 7a00 	vstr	s15, [r3]
 8003364:	4959      	ldr	r1, [pc, #356]	; (80034cc <PRZYPISYWANIEWARTOSCI+0x314>)
 8003366:	2073      	movs	r0, #115	; 0x73
 8003368:	f7fd ff96 	bl	8001298 <EEPROM_WRITE_FLOAT>
  }




    if(wynik==40) {
 800336c:	4b4a      	ldr	r3, [pc, #296]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b28      	cmp	r3, #40	; 0x28
 8003372:	d10a      	bne.n	800338a <PRZYPISYWANIEWARTOSCI+0x1d2>
    	czcz1=atoi(DANE_BLE);  EEPROM_WRITE_INT(265,&czcz1); //adres 200 uszkodzony? tak
 8003374:	4849      	ldr	r0, [pc, #292]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 8003376:	f010 fdbe 	bl	8013ef6 <atoi>
 800337a:	4603      	mov	r3, r0
 800337c:	4a54      	ldr	r2, [pc, #336]	; (80034d0 <PRZYPISYWANIEWARTOSCI+0x318>)
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	4953      	ldr	r1, [pc, #332]	; (80034d0 <PRZYPISYWANIEWARTOSCI+0x318>)
 8003382:	f240 1009 	movw	r0, #265	; 0x109
 8003386:	f7fd ffbf 	bl	8001308 <EEPROM_WRITE_INT>
    	}
      if(wynik==41) {
 800338a:	4b43      	ldr	r3, [pc, #268]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b29      	cmp	r3, #41	; 0x29
 8003390:	d109      	bne.n	80033a6 <PRZYPISYWANIEWARTOSCI+0x1ee>
    	  czcz2=atoi(DANE_BLE);  EEPROM_WRITE_INT(245,&czcz2); //adres 205 uszkodzony? tak nwm o co kmn anyway
 8003392:	4842      	ldr	r0, [pc, #264]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 8003394:	f010 fdaf 	bl	8013ef6 <atoi>
 8003398:	4603      	mov	r3, r0
 800339a:	4a4e      	ldr	r2, [pc, #312]	; (80034d4 <PRZYPISYWANIEWARTOSCI+0x31c>)
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	494d      	ldr	r1, [pc, #308]	; (80034d4 <PRZYPISYWANIEWARTOSCI+0x31c>)
 80033a0:	20f5      	movs	r0, #245	; 0xf5
 80033a2:	f7fd ffb1 	bl	8001308 <EEPROM_WRITE_INT>
      	  }
      if(wynik==42) {
 80033a6:	4b3c      	ldr	r3, [pc, #240]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b2a      	cmp	r3, #42	; 0x2a
 80033ac:	d109      	bne.n	80033c2 <PRZYPISYWANIEWARTOSCI+0x20a>
    	  czcz3=atoi(DANE_BLE);  EEPROM_WRITE_INT(210,&czcz3);
 80033ae:	483b      	ldr	r0, [pc, #236]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 80033b0:	f010 fda1 	bl	8013ef6 <atoi>
 80033b4:	4603      	mov	r3, r0
 80033b6:	4a48      	ldr	r2, [pc, #288]	; (80034d8 <PRZYPISYWANIEWARTOSCI+0x320>)
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	4947      	ldr	r1, [pc, #284]	; (80034d8 <PRZYPISYWANIEWARTOSCI+0x320>)
 80033bc:	20d2      	movs	r0, #210	; 0xd2
 80033be:	f7fd ffa3 	bl	8001308 <EEPROM_WRITE_INT>
      	  }
      if(wynik==43) {
 80033c2:	4b35      	ldr	r3, [pc, #212]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b2b      	cmp	r3, #43	; 0x2b
 80033c8:	d109      	bne.n	80033de <PRZYPISYWANIEWARTOSCI+0x226>
    	  czcz4=atoi(DANE_BLE);  EEPROM_WRITE_INT(215,&czcz4);
 80033ca:	4834      	ldr	r0, [pc, #208]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 80033cc:	f010 fd93 	bl	8013ef6 <atoi>
 80033d0:	4603      	mov	r3, r0
 80033d2:	4a42      	ldr	r2, [pc, #264]	; (80034dc <PRZYPISYWANIEWARTOSCI+0x324>)
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	4941      	ldr	r1, [pc, #260]	; (80034dc <PRZYPISYWANIEWARTOSCI+0x324>)
 80033d8:	20d7      	movs	r0, #215	; 0xd7
 80033da:	f7fd ff95 	bl	8001308 <EEPROM_WRITE_INT>
      	  }
      if(wynik==44) {
 80033de:	4b2e      	ldr	r3, [pc, #184]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b2c      	cmp	r3, #44	; 0x2c
 80033e4:	d109      	bne.n	80033fa <PRZYPISYWANIEWARTOSCI+0x242>
    	  czcz5=atoi(DANE_BLE);  EEPROM_WRITE_INT(220,&czcz5);
 80033e6:	482d      	ldr	r0, [pc, #180]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 80033e8:	f010 fd85 	bl	8013ef6 <atoi>
 80033ec:	4603      	mov	r3, r0
 80033ee:	4a3c      	ldr	r2, [pc, #240]	; (80034e0 <PRZYPISYWANIEWARTOSCI+0x328>)
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	493b      	ldr	r1, [pc, #236]	; (80034e0 <PRZYPISYWANIEWARTOSCI+0x328>)
 80033f4:	20dc      	movs	r0, #220	; 0xdc
 80033f6:	f7fd ff87 	bl	8001308 <EEPROM_WRITE_INT>
      	  }
      	  if(wynik==45) {
 80033fa:	4b27      	ldr	r3, [pc, #156]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b2d      	cmp	r3, #45	; 0x2d
 8003400:	d109      	bne.n	8003416 <PRZYPISYWANIEWARTOSCI+0x25e>
    	  	  czcz6=atoi(DANE_BLE);  EEPROM_WRITE_INT(225,&czcz6);
 8003402:	4826      	ldr	r0, [pc, #152]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 8003404:	f010 fd77 	bl	8013ef6 <atoi>
 8003408:	4603      	mov	r3, r0
 800340a:	4a36      	ldr	r2, [pc, #216]	; (80034e4 <PRZYPISYWANIEWARTOSCI+0x32c>)
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	4935      	ldr	r1, [pc, #212]	; (80034e4 <PRZYPISYWANIEWARTOSCI+0x32c>)
 8003410:	20e1      	movs	r0, #225	; 0xe1
 8003412:	f7fd ff79 	bl	8001308 <EEPROM_WRITE_INT>
      	  }
      if(wynik==46) {
 8003416:	4b20      	ldr	r3, [pc, #128]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b2e      	cmp	r3, #46	; 0x2e
 800341c:	d109      	bne.n	8003432 <PRZYPISYWANIEWARTOSCI+0x27a>
    	  czcz7=atoi(DANE_BLE);  EEPROM_WRITE_INT(230,&czcz7);
 800341e:	481f      	ldr	r0, [pc, #124]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 8003420:	f010 fd69 	bl	8013ef6 <atoi>
 8003424:	4603      	mov	r3, r0
 8003426:	4a30      	ldr	r2, [pc, #192]	; (80034e8 <PRZYPISYWANIEWARTOSCI+0x330>)
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	492f      	ldr	r1, [pc, #188]	; (80034e8 <PRZYPISYWANIEWARTOSCI+0x330>)
 800342c:	20e6      	movs	r0, #230	; 0xe6
 800342e:	f7fd ff6b 	bl	8001308 <EEPROM_WRITE_INT>
      }
        if(wynik==47) {
 8003432:	4b19      	ldr	r3, [pc, #100]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b2f      	cmp	r3, #47	; 0x2f
 8003438:	d109      	bne.n	800344e <PRZYPISYWANIEWARTOSCI+0x296>
        	czcz8=atoi(DANE_BLE);  EEPROM_WRITE_INT(235,&czcz8);
 800343a:	4818      	ldr	r0, [pc, #96]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 800343c:	f010 fd5b 	bl	8013ef6 <atoi>
 8003440:	4603      	mov	r3, r0
 8003442:	4a2a      	ldr	r2, [pc, #168]	; (80034ec <PRZYPISYWANIEWARTOSCI+0x334>)
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	4929      	ldr	r1, [pc, #164]	; (80034ec <PRZYPISYWANIEWARTOSCI+0x334>)
 8003448:	20eb      	movs	r0, #235	; 0xeb
 800344a:	f7fd ff5d 	bl	8001308 <EEPROM_WRITE_INT>


        //@@@@@@@@@@@@@@@
//Z Ekranu "ZAAW"

    if(wynik==30) {
 800344e:	4b12      	ldr	r3, [pc, #72]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b1e      	cmp	r3, #30
 8003454:	d10e      	bne.n	8003474 <PRZYPISYWANIEWARTOSCI+0x2bc>
    	MAX_PID=atof(DANE_BLE);  EEPROM_WRITE_FLOAT(400,&MAX_PID);
 8003456:	4811      	ldr	r0, [pc, #68]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 8003458:	f010 fd4a 	bl	8013ef0 <atof>
 800345c:	eeb0 7b40 	vmov.f64	d7, d0
 8003460:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003464:	4b22      	ldr	r3, [pc, #136]	; (80034f0 <PRZYPISYWANIEWARTOSCI+0x338>)
 8003466:	edc3 7a00 	vstr	s15, [r3]
 800346a:	4921      	ldr	r1, [pc, #132]	; (80034f0 <PRZYPISYWANIEWARTOSCI+0x338>)
 800346c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003470:	f7fd ff12 	bl	8001298 <EEPROM_WRITE_FLOAT>

  }
      if(wynik==131) {
 8003474:	4b08      	ldr	r3, [pc, #32]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b83      	cmp	r3, #131	; 0x83
 800347a:	d10a      	bne.n	8003492 <PRZYPISYWANIEWARTOSCI+0x2da>
    pr_tyl=atoi(DANE_BLE);  EEPROM_WRITE_INT(405,&pr_tyl);
 800347c:	4807      	ldr	r0, [pc, #28]	; (800349c <PRZYPISYWANIEWARTOSCI+0x2e4>)
 800347e:	f010 fd3a 	bl	8013ef6 <atoi>
 8003482:	4603      	mov	r3, r0
 8003484:	4a1b      	ldr	r2, [pc, #108]	; (80034f4 <PRZYPISYWANIEWARTOSCI+0x33c>)
 8003486:	6013      	str	r3, [r2, #0]
 8003488:	491a      	ldr	r1, [pc, #104]	; (80034f4 <PRZYPISYWANIEWARTOSCI+0x33c>)
 800348a:	f240 1095 	movw	r0, #405	; 0x195
 800348e:	f7fd ff3b 	bl	8001308 <EEPROM_WRITE_INT>

  }
      if(wynik==32) {
 8003492:	4b01      	ldr	r3, [pc, #4]	; (8003498 <PRZYPISYWANIEWARTOSCI+0x2e0>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	e02f      	b.n	80034f8 <PRZYPISYWANIEWARTOSCI+0x340>
 8003498:	2400028c 	.word	0x2400028c
 800349c:	240003a0 	.word	0x240003a0
 80034a0:	24000004 	.word	0x24000004
 80034a4:	24000294 	.word	0x24000294
 80034a8:	24000008 	.word	0x24000008
 80034ac:	24000298 	.word	0x24000298
 80034b0:	24000478 	.word	0x24000478
 80034b4:	24000470 	.word	0x24000470
 80034b8:	2400047c 	.word	0x2400047c
 80034bc:	2400045c 	.word	0x2400045c
 80034c0:	2400049c 	.word	0x2400049c
 80034c4:	24000498 	.word	0x24000498
 80034c8:	240004a8 	.word	0x240004a8
 80034cc:	24000468 	.word	0x24000468
 80034d0:	24000490 	.word	0x24000490
 80034d4:	240004a0 	.word	0x240004a0
 80034d8:	24000474 	.word	0x24000474
 80034dc:	24000460 	.word	0x24000460
 80034e0:	240004a4 	.word	0x240004a4
 80034e4:	24000494 	.word	0x24000494
 80034e8:	2400046c 	.word	0x2400046c
 80034ec:	24000464 	.word	0x24000464
 80034f0:	240002b0 	.word	0x240002b0
 80034f4:	240002c0 	.word	0x240002c0
 80034f8:	2b20      	cmp	r3, #32
 80034fa:	d10e      	bne.n	800351a <PRZYPISYWANIEWARTOSCI+0x362>
    	  SUMA_MAX=atof(DANE_BLE);  EEPROM_WRITE_FLOAT(410,&SUMA_MAX);
 80034fc:	4839      	ldr	r0, [pc, #228]	; (80035e4 <PRZYPISYWANIEWARTOSCI+0x42c>)
 80034fe:	f010 fcf7 	bl	8013ef0 <atof>
 8003502:	eeb0 7b40 	vmov.f64	d7, d0
 8003506:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800350a:	4b37      	ldr	r3, [pc, #220]	; (80035e8 <PRZYPISYWANIEWARTOSCI+0x430>)
 800350c:	edc3 7a00 	vstr	s15, [r3]
 8003510:	4935      	ldr	r1, [pc, #212]	; (80035e8 <PRZYPISYWANIEWARTOSCI+0x430>)
 8003512:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8003516:	f7fd febf 	bl	8001298 <EEPROM_WRITE_FLOAT>

  }
      if(wynik==33) {
 800351a:	4b34      	ldr	r3, [pc, #208]	; (80035ec <PRZYPISYWANIEWARTOSCI+0x434>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	2b21      	cmp	r3, #33	; 0x21
 8003520:	d10a      	bne.n	8003538 <PRZYPISYWANIEWARTOSCI+0x380>
    CzasProbkowania_CZ_Rozniczkujacego=atoi(DANE_BLE);
 8003522:	4830      	ldr	r0, [pc, #192]	; (80035e4 <PRZYPISYWANIEWARTOSCI+0x42c>)
 8003524:	f010 fce7 	bl	8013ef6 <atoi>
 8003528:	4603      	mov	r3, r0
 800352a:	4a31      	ldr	r2, [pc, #196]	; (80035f0 <PRZYPISYWANIEWARTOSCI+0x438>)
 800352c:	6013      	str	r3, [r2, #0]

   EEPROM_WRITE_INT(420,&CzasProbkowania_CZ_Rozniczkujacego);
 800352e:	4930      	ldr	r1, [pc, #192]	; (80035f0 <PRZYPISYWANIEWARTOSCI+0x438>)
 8003530:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8003534:	f7fd fee8 	bl	8001308 <EEPROM_WRITE_INT>

  }

      if(wynik==134) { //test silnika wl
 8003538:	4b2c      	ldr	r3, [pc, #176]	; (80035ec <PRZYPISYWANIEWARTOSCI+0x434>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b86      	cmp	r3, #134	; 0x86
 800353e:	d102      	bne.n	8003546 <PRZYPISYWANIEWARTOSCI+0x38e>
    	  T_SIL=1;
 8003540:	4b2c      	ldr	r3, [pc, #176]	; (80035f4 <PRZYPISYWANIEWARTOSCI+0x43c>)
 8003542:	2201      	movs	r2, #1
 8003544:	601a      	str	r2, [r3, #0]
  }
      if(wynik==135) { //tesy silnika wyl
 8003546:	4b29      	ldr	r3, [pc, #164]	; (80035ec <PRZYPISYWANIEWARTOSCI+0x434>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	2b87      	cmp	r3, #135	; 0x87
 800354c:	d102      	bne.n	8003554 <PRZYPISYWANIEWARTOSCI+0x39c>
    	  T_SIL=0;
 800354e:	4b29      	ldr	r3, [pc, #164]	; (80035f4 <PRZYPISYWANIEWARTOSCI+0x43c>)
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
  }

      if(wynik==36) {
 8003554:	4b25      	ldr	r3, [pc, #148]	; (80035ec <PRZYPISYWANIEWARTOSCI+0x434>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b24      	cmp	r3, #36	; 0x24
 800355a:	d10e      	bne.n	800357a <PRZYPISYWANIEWARTOSCI+0x3c2>
     	  ZMIENNA3=atof(DANE_BLE);  EEPROM_WRITE_FLOAT(440,&ZMIENNA3);
 800355c:	4821      	ldr	r0, [pc, #132]	; (80035e4 <PRZYPISYWANIEWARTOSCI+0x42c>)
 800355e:	f010 fcc7 	bl	8013ef0 <atof>
 8003562:	eeb0 7b40 	vmov.f64	d7, d0
 8003566:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800356a:	4b23      	ldr	r3, [pc, #140]	; (80035f8 <PRZYPISYWANIEWARTOSCI+0x440>)
 800356c:	edc3 7a00 	vstr	s15, [r3]
 8003570:	4921      	ldr	r1, [pc, #132]	; (80035f8 <PRZYPISYWANIEWARTOSCI+0x440>)
 8003572:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8003576:	f7fd fe8f 	bl	8001298 <EEPROM_WRITE_FLOAT>

   }

      if(wynik==37) {
 800357a:	4b1c      	ldr	r3, [pc, #112]	; (80035ec <PRZYPISYWANIEWARTOSCI+0x434>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b25      	cmp	r3, #37	; 0x25
 8003580:	d110      	bne.n	80035a4 <PRZYPISYWANIEWARTOSCI+0x3ec>
    	  ZMIENNA4=atof(DANE_BLE);  EEPROM_WRITE_FLOAT(445,&ZMIENNA4);
 8003582:	4818      	ldr	r0, [pc, #96]	; (80035e4 <PRZYPISYWANIEWARTOSCI+0x42c>)
 8003584:	f010 fcb4 	bl	8013ef0 <atof>
 8003588:	eeb0 7b40 	vmov.f64	d7, d0
 800358c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003590:	4b1a      	ldr	r3, [pc, #104]	; (80035fc <PRZYPISYWANIEWARTOSCI+0x444>)
 8003592:	edc3 7a00 	vstr	s15, [r3]
 8003596:	4919      	ldr	r1, [pc, #100]	; (80035fc <PRZYPISYWANIEWARTOSCI+0x444>)
 8003598:	f240 10bd 	movw	r0, #445	; 0x1bd
 800359c:	f7fd fe7c 	bl	8001298 <EEPROM_WRITE_FLOAT>
    	  HAL_NVIC_SystemReset();
 80035a0:	f004 f831 	bl	8007606 <HAL_NVIC_SystemReset>
  }

//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ IR STATE @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
      if(wynik==38) {
 80035a4:	4b11      	ldr	r3, [pc, #68]	; (80035ec <PRZYPISYWANIEWARTOSCI+0x434>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b26      	cmp	r3, #38	; 0x26
 80035aa:	d10a      	bne.n	80035c2 <PRZYPISYWANIEWARTOSCI+0x40a>
    	  IR_READY=atoi(DANE_BLE);  EEPROM_WRITE_INT(450,&IR_READY);
 80035ac:	480d      	ldr	r0, [pc, #52]	; (80035e4 <PRZYPISYWANIEWARTOSCI+0x42c>)
 80035ae:	f010 fca2 	bl	8013ef6 <atoi>
 80035b2:	4603      	mov	r3, r0
 80035b4:	4a12      	ldr	r2, [pc, #72]	; (8003600 <PRZYPISYWANIEWARTOSCI+0x448>)
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	4911      	ldr	r1, [pc, #68]	; (8003600 <PRZYPISYWANIEWARTOSCI+0x448>)
 80035ba:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80035be:	f7fd fea3 	bl	8001308 <EEPROM_WRITE_INT>

  }
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ IR STATE @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

        if(wynik==39) {
 80035c2:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <PRZYPISYWANIEWARTOSCI+0x434>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	2b27      	cmp	r3, #39	; 0x27
 80035c8:	d10a      	bne.n	80035e0 <PRZYPISYWANIEWARTOSCI+0x428>
        	LED_BLINK=atoi(DANE_BLE);;  EEPROM_WRITE_INT(455,&LED_BLINK);
 80035ca:	4806      	ldr	r0, [pc, #24]	; (80035e4 <PRZYPISYWANIEWARTOSCI+0x42c>)
 80035cc:	f010 fc93 	bl	8013ef6 <atoi>
 80035d0:	4603      	mov	r3, r0
 80035d2:	4a0c      	ldr	r2, [pc, #48]	; (8003604 <PRZYPISYWANIEWARTOSCI+0x44c>)
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	490b      	ldr	r1, [pc, #44]	; (8003604 <PRZYPISYWANIEWARTOSCI+0x44c>)
 80035d8:	f240 10c7 	movw	r0, #455	; 0x1c7
 80035dc:	f7fd fe94 	bl	8001308 <EEPROM_WRITE_INT>
      }

  //@@@@@@@@@@@@@@@@


}
 80035e0:	bf00      	nop
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	240003a0 	.word	0x240003a0
 80035e8:	240002b4 	.word	0x240002b4
 80035ec:	2400028c 	.word	0x2400028c
 80035f0:	240002d4 	.word	0x240002d4
 80035f4:	240002dc 	.word	0x240002dc
 80035f8:	240002b8 	.word	0x240002b8
 80035fc:	240002bc 	.word	0x240002bc
 8003600:	240237c0 	.word	0x240237c0
 8003604:	2400000c 	.word	0x2400000c

08003608 <ZMIENNE_ZAAW_DO_BLE>:


void ZMIENNE_ZAAW_DO_BLE()
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b088      	sub	sp, #32
 800360c:	af00      	add	r7, sp, #0

      if(drukowanie==4)
 800360e:	4bc1      	ldr	r3, [pc, #772]	; (8003914 <ZMIENNE_ZAAW_DO_BLE+0x30c>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b04      	cmp	r3, #4
 8003614:	f040 81b8 	bne.w	8003988 <ZMIENNE_ZAAW_DO_BLE+0x380>
 {
    	  char after_con_val[32]={0};
 8003618:	2300      	movs	r3, #0
 800361a:	603b      	str	r3, [r7, #0]
 800361c:	1d3b      	adds	r3, r7, #4
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	605a      	str	r2, [r3, #4]
 8003624:	609a      	str	r2, [r3, #8]
 8003626:	60da      	str	r2, [r3, #12]
 8003628:	611a      	str	r2, [r3, #16]
 800362a:	615a      	str	r2, [r3, #20]
 800362c:	619a      	str	r2, [r3, #24]
    drukowanie=4;
 800362e:	4bb9      	ldr	r3, [pc, #740]	; (8003914 <ZMIENNE_ZAAW_DO_BLE+0x30c>)
 8003630:	2204      	movs	r2, #4
 8003632:	701a      	strb	r2, [r3, #0]

  if (k_wys_pom==1 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 8003634:	4bb8      	ldr	r3, [pc, #736]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d12e      	bne.n	800369a <ZMIENNE_ZAAW_DO_BLE+0x92>
 800363c:	f002 fbfa 	bl	8005e34 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	4bb6      	ldr	r3, [pc, #728]	; (800391c <ZMIENNE_ZAAW_DO_BLE+0x314>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b0e      	cmp	r3, #14
 800364a:	d926      	bls.n	800369a <ZMIENNE_ZAAW_DO_BLE+0x92>
	  ZapamientanyCzasK_BLE = HAL_GetTick();
 800364c:	f002 fbf2 	bl	8005e34 <HAL_GetTick>
 8003650:	4603      	mov	r3, r0
 8003652:	4ab2      	ldr	r2, [pc, #712]	; (800391c <ZMIENNE_ZAAW_DO_BLE+0x314>)
 8003654:	6013      	str	r3, [r2, #0]

   ftoa(MAX_PID,after_con_val ,2);
 8003656:	4bb2      	ldr	r3, [pc, #712]	; (8003920 <ZMIENNE_ZAAW_DO_BLE+0x318>)
 8003658:	edd3 7a00 	vldr	s15, [r3]
 800365c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003660:	463b      	mov	r3, r7
 8003662:	2102      	movs	r1, #2
 8003664:	4618      	mov	r0, r3
 8003666:	eeb0 0b47 	vmov.f64	d0, d7
 800366a:	f000 fef1 	bl	8004450 <ftoa>
   strcat(after_con_val, "g");
 800366e:	463b      	mov	r3, r7
 8003670:	4618      	mov	r0, r3
 8003672:	f7fc fe35 	bl	80002e0 <strlen>
 8003676:	4603      	mov	r3, r0
 8003678:	461a      	mov	r2, r3
 800367a:	463b      	mov	r3, r7
 800367c:	4413      	add	r3, r2
 800367e:	49a9      	ldr	r1, [pc, #676]	; (8003924 <ZMIENNE_ZAAW_DO_BLE+0x31c>)
 8003680:	461a      	mov	r2, r3
 8003682:	460b      	mov	r3, r1
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	8013      	strh	r3, [r2, #0]
  DO_BLE(after_con_val);
 8003688:	463b      	mov	r3, r7
 800368a:	4618      	mov	r0, r3
 800368c:	f7fd fb64 	bl	8000d58 <DO_BLE>
k_wys_pom++;
 8003690:	4ba1      	ldr	r3, [pc, #644]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3301      	adds	r3, #1
 8003696:	4aa0      	ldr	r2, [pc, #640]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 8003698:	6013      	str	r3, [r2, #0]
  }
  if (k_wys_pom==2 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15)  {
 800369a:	4b9f      	ldr	r3, [pc, #636]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d129      	bne.n	80036f6 <ZMIENNE_ZAAW_DO_BLE+0xee>
 80036a2:	f002 fbc7 	bl	8005e34 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	4b9c      	ldr	r3, [pc, #624]	; (800391c <ZMIENNE_ZAAW_DO_BLE+0x314>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b0e      	cmp	r3, #14
 80036b0:	d921      	bls.n	80036f6 <ZMIENNE_ZAAW_DO_BLE+0xee>
   ZapamientanyCzasK_BLE = HAL_GetTick();
 80036b2:	f002 fbbf 	bl	8005e34 <HAL_GetTick>
 80036b6:	4603      	mov	r3, r0
 80036b8:	4a98      	ldr	r2, [pc, #608]	; (800391c <ZMIENNE_ZAAW_DO_BLE+0x314>)
 80036ba:	6013      	str	r3, [r2, #0]

   itoa(pr_tyl,after_con_val ,10);
 80036bc:	4b9a      	ldr	r3, [pc, #616]	; (8003928 <ZMIENNE_ZAAW_DO_BLE+0x320>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4639      	mov	r1, r7
 80036c2:	220a      	movs	r2, #10
 80036c4:	4618      	mov	r0, r3
 80036c6:	f010 fc5d 	bl	8013f84 <itoa>
   strcat(after_con_val, "h");
 80036ca:	463b      	mov	r3, r7
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fc fe07 	bl	80002e0 <strlen>
 80036d2:	4603      	mov	r3, r0
 80036d4:	461a      	mov	r2, r3
 80036d6:	463b      	mov	r3, r7
 80036d8:	4413      	add	r3, r2
 80036da:	4994      	ldr	r1, [pc, #592]	; (800392c <ZMIENNE_ZAAW_DO_BLE+0x324>)
 80036dc:	461a      	mov	r2, r3
 80036de:	460b      	mov	r3, r1
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	8013      	strh	r3, [r2, #0]
  DO_BLE(after_con_val);
 80036e4:	463b      	mov	r3, r7
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fd fb36 	bl	8000d58 <DO_BLE>
k_wys_pom++;
 80036ec:	4b8a      	ldr	r3, [pc, #552]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	3301      	adds	r3, #1
 80036f2:	4a89      	ldr	r2, [pc, #548]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 80036f4:	6013      	str	r3, [r2, #0]
  }
    if (k_wys_pom==3 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15)  {
 80036f6:	4b88      	ldr	r3, [pc, #544]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	d12e      	bne.n	800375c <ZMIENNE_ZAAW_DO_BLE+0x154>
 80036fe:	f002 fb99 	bl	8005e34 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	4b85      	ldr	r3, [pc, #532]	; (800391c <ZMIENNE_ZAAW_DO_BLE+0x314>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b0e      	cmp	r3, #14
 800370c:	d926      	bls.n	800375c <ZMIENNE_ZAAW_DO_BLE+0x154>
   ZapamientanyCzasK_BLE = HAL_GetTick();
 800370e:	f002 fb91 	bl	8005e34 <HAL_GetTick>
 8003712:	4603      	mov	r3, r0
 8003714:	4a81      	ldr	r2, [pc, #516]	; (800391c <ZMIENNE_ZAAW_DO_BLE+0x314>)
 8003716:	6013      	str	r3, [r2, #0]

   ftoa(SUMA_MAX,after_con_val ,2);
 8003718:	4b85      	ldr	r3, [pc, #532]	; (8003930 <ZMIENNE_ZAAW_DO_BLE+0x328>)
 800371a:	edd3 7a00 	vldr	s15, [r3]
 800371e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003722:	463b      	mov	r3, r7
 8003724:	2102      	movs	r1, #2
 8003726:	4618      	mov	r0, r3
 8003728:	eeb0 0b47 	vmov.f64	d0, d7
 800372c:	f000 fe90 	bl	8004450 <ftoa>
   strcat(after_con_val, "q");
 8003730:	463b      	mov	r3, r7
 8003732:	4618      	mov	r0, r3
 8003734:	f7fc fdd4 	bl	80002e0 <strlen>
 8003738:	4603      	mov	r3, r0
 800373a:	461a      	mov	r2, r3
 800373c:	463b      	mov	r3, r7
 800373e:	4413      	add	r3, r2
 8003740:	497c      	ldr	r1, [pc, #496]	; (8003934 <ZMIENNE_ZAAW_DO_BLE+0x32c>)
 8003742:	461a      	mov	r2, r3
 8003744:	460b      	mov	r3, r1
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	8013      	strh	r3, [r2, #0]
  DO_BLE(after_con_val);
 800374a:	463b      	mov	r3, r7
 800374c:	4618      	mov	r0, r3
 800374e:	f7fd fb03 	bl	8000d58 <DO_BLE>
k_wys_pom++;
 8003752:	4b71      	ldr	r3, [pc, #452]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	3301      	adds	r3, #1
 8003758:	4a6f      	ldr	r2, [pc, #444]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 800375a:	6013      	str	r3, [r2, #0]
   }
       if (k_wys_pom==4 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15)  {
 800375c:	4b6e      	ldr	r3, [pc, #440]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b04      	cmp	r3, #4
 8003762:	d129      	bne.n	80037b8 <ZMIENNE_ZAAW_DO_BLE+0x1b0>
 8003764:	f002 fb66 	bl	8005e34 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	4b6c      	ldr	r3, [pc, #432]	; (800391c <ZMIENNE_ZAAW_DO_BLE+0x314>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b0e      	cmp	r3, #14
 8003772:	d921      	bls.n	80037b8 <ZMIENNE_ZAAW_DO_BLE+0x1b0>
   ZapamientanyCzasK_BLE = HAL_GetTick();
 8003774:	f002 fb5e 	bl	8005e34 <HAL_GetTick>
 8003778:	4603      	mov	r3, r0
 800377a:	4a68      	ldr	r2, [pc, #416]	; (800391c <ZMIENNE_ZAAW_DO_BLE+0x314>)
 800377c:	6013      	str	r3, [r2, #0]

   itoa(CzasProbkowania_CZ_Rozniczkujacego,after_con_val ,10);
 800377e:	4b6e      	ldr	r3, [pc, #440]	; (8003938 <ZMIENNE_ZAAW_DO_BLE+0x330>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4639      	mov	r1, r7
 8003784:	220a      	movs	r2, #10
 8003786:	4618      	mov	r0, r3
 8003788:	f010 fbfc 	bl	8013f84 <itoa>
   strcat(after_con_val, "w");
 800378c:	463b      	mov	r3, r7
 800378e:	4618      	mov	r0, r3
 8003790:	f7fc fda6 	bl	80002e0 <strlen>
 8003794:	4603      	mov	r3, r0
 8003796:	461a      	mov	r2, r3
 8003798:	463b      	mov	r3, r7
 800379a:	4413      	add	r3, r2
 800379c:	4967      	ldr	r1, [pc, #412]	; (800393c <ZMIENNE_ZAAW_DO_BLE+0x334>)
 800379e:	461a      	mov	r2, r3
 80037a0:	460b      	mov	r3, r1
 80037a2:	881b      	ldrh	r3, [r3, #0]
 80037a4:	8013      	strh	r3, [r2, #0]
  DO_BLE(after_con_val);
 80037a6:	463b      	mov	r3, r7
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7fd fad5 	bl	8000d58 <DO_BLE>
k_wys_pom++;
 80037ae:	4b5a      	ldr	r3, [pc, #360]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	3301      	adds	r3, #1
 80037b4:	4a58      	ldr	r2, [pc, #352]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 80037b6:	6013      	str	r3, [r2, #0]
    }

          if (k_wys_pom==5 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15)  {
 80037b8:	4b57      	ldr	r3, [pc, #348]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b05      	cmp	r3, #5
 80037be:	d12e      	bne.n	800381e <ZMIENNE_ZAAW_DO_BLE+0x216>
 80037c0:	f002 fb38 	bl	8005e34 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	4b55      	ldr	r3, [pc, #340]	; (800391c <ZMIENNE_ZAAW_DO_BLE+0x314>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b0e      	cmp	r3, #14
 80037ce:	d926      	bls.n	800381e <ZMIENNE_ZAAW_DO_BLE+0x216>
   ZapamientanyCzasK_BLE = HAL_GetTick();
 80037d0:	f002 fb30 	bl	8005e34 <HAL_GetTick>
 80037d4:	4603      	mov	r3, r0
 80037d6:	4a51      	ldr	r2, [pc, #324]	; (800391c <ZMIENNE_ZAAW_DO_BLE+0x314>)
 80037d8:	6013      	str	r3, [r2, #0]

   ftoa(ZMIENNA3,after_con_val ,2);
 80037da:	4b59      	ldr	r3, [pc, #356]	; (8003940 <ZMIENNE_ZAAW_DO_BLE+0x338>)
 80037dc:	edd3 7a00 	vldr	s15, [r3]
 80037e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037e4:	463b      	mov	r3, r7
 80037e6:	2102      	movs	r1, #2
 80037e8:	4618      	mov	r0, r3
 80037ea:	eeb0 0b47 	vmov.f64	d0, d7
 80037ee:	f000 fe2f 	bl	8004450 <ftoa>
   strcat(after_con_val, "t");
 80037f2:	463b      	mov	r3, r7
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fc fd73 	bl	80002e0 <strlen>
 80037fa:	4603      	mov	r3, r0
 80037fc:	461a      	mov	r2, r3
 80037fe:	463b      	mov	r3, r7
 8003800:	4413      	add	r3, r2
 8003802:	4950      	ldr	r1, [pc, #320]	; (8003944 <ZMIENNE_ZAAW_DO_BLE+0x33c>)
 8003804:	461a      	mov	r2, r3
 8003806:	460b      	mov	r3, r1
 8003808:	881b      	ldrh	r3, [r3, #0]
 800380a:	8013      	strh	r3, [r2, #0]
  DO_BLE(after_con_val);
 800380c:	463b      	mov	r3, r7
 800380e:	4618      	mov	r0, r3
 8003810:	f7fd faa2 	bl	8000d58 <DO_BLE>
k_wys_pom++;
 8003814:	4b40      	ldr	r3, [pc, #256]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	3301      	adds	r3, #1
 800381a:	4a3f      	ldr	r2, [pc, #252]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 800381c:	6013      	str	r3, [r2, #0]
    }
              if (k_wys_pom==6 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15)  {
 800381e:	4b3e      	ldr	r3, [pc, #248]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b06      	cmp	r3, #6
 8003824:	d129      	bne.n	800387a <ZMIENNE_ZAAW_DO_BLE+0x272>
 8003826:	f002 fb05 	bl	8005e34 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	4b3b      	ldr	r3, [pc, #236]	; (800391c <ZMIENNE_ZAAW_DO_BLE+0x314>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b0e      	cmp	r3, #14
 8003834:	d921      	bls.n	800387a <ZMIENNE_ZAAW_DO_BLE+0x272>
   ZapamientanyCzasK_BLE = HAL_GetTick();
 8003836:	f002 fafd 	bl	8005e34 <HAL_GetTick>
 800383a:	4603      	mov	r3, r0
 800383c:	4a37      	ldr	r2, [pc, #220]	; (800391c <ZMIENNE_ZAAW_DO_BLE+0x314>)
 800383e:	6013      	str	r3, [r2, #0]

   itoa(IR_READY,after_con_val ,10);
 8003840:	4b41      	ldr	r3, [pc, #260]	; (8003948 <ZMIENNE_ZAAW_DO_BLE+0x340>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4639      	mov	r1, r7
 8003846:	220a      	movs	r2, #10
 8003848:	4618      	mov	r0, r3
 800384a:	f010 fb9b 	bl	8013f84 <itoa>
     strcat(after_con_val, "j");
 800384e:	463b      	mov	r3, r7
 8003850:	4618      	mov	r0, r3
 8003852:	f7fc fd45 	bl	80002e0 <strlen>
 8003856:	4603      	mov	r3, r0
 8003858:	461a      	mov	r2, r3
 800385a:	463b      	mov	r3, r7
 800385c:	4413      	add	r3, r2
 800385e:	493b      	ldr	r1, [pc, #236]	; (800394c <ZMIENNE_ZAAW_DO_BLE+0x344>)
 8003860:	461a      	mov	r2, r3
 8003862:	460b      	mov	r3, r1
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	8013      	strh	r3, [r2, #0]
    DO_BLE(after_con_val);
 8003868:	463b      	mov	r3, r7
 800386a:	4618      	mov	r0, r3
 800386c:	f7fd fa74 	bl	8000d58 <DO_BLE>
  k_wys_pom++;
 8003870:	4b29      	ldr	r3, [pc, #164]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3301      	adds	r3, #1
 8003876:	4a28      	ldr	r2, [pc, #160]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 8003878:	6013      	str	r3, [r2, #0]
    }
              if (k_wys_pom==7 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15)  {
 800387a:	4b27      	ldr	r3, [pc, #156]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2b07      	cmp	r3, #7
 8003880:	d129      	bne.n	80038d6 <ZMIENNE_ZAAW_DO_BLE+0x2ce>
 8003882:	f002 fad7 	bl	8005e34 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	4b24      	ldr	r3, [pc, #144]	; (800391c <ZMIENNE_ZAAW_DO_BLE+0x314>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b0e      	cmp	r3, #14
 8003890:	d921      	bls.n	80038d6 <ZMIENNE_ZAAW_DO_BLE+0x2ce>
   ZapamientanyCzasK_BLE = HAL_GetTick();
 8003892:	f002 facf 	bl	8005e34 <HAL_GetTick>
 8003896:	4603      	mov	r3, r0
 8003898:	4a20      	ldr	r2, [pc, #128]	; (800391c <ZMIENNE_ZAAW_DO_BLE+0x314>)
 800389a:	6013      	str	r3, [r2, #0]

   itoa(LED_BLINK,after_con_val ,10);
 800389c:	4b2c      	ldr	r3, [pc, #176]	; (8003950 <ZMIENNE_ZAAW_DO_BLE+0x348>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4639      	mov	r1, r7
 80038a2:	220a      	movs	r2, #10
 80038a4:	4618      	mov	r0, r3
 80038a6:	f010 fb6d 	bl	8013f84 <itoa>
     strcat(after_con_val, "J");
 80038aa:	463b      	mov	r3, r7
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7fc fd17 	bl	80002e0 <strlen>
 80038b2:	4603      	mov	r3, r0
 80038b4:	461a      	mov	r2, r3
 80038b6:	463b      	mov	r3, r7
 80038b8:	4413      	add	r3, r2
 80038ba:	4926      	ldr	r1, [pc, #152]	; (8003954 <ZMIENNE_ZAAW_DO_BLE+0x34c>)
 80038bc:	461a      	mov	r2, r3
 80038be:	460b      	mov	r3, r1
 80038c0:	881b      	ldrh	r3, [r3, #0]
 80038c2:	8013      	strh	r3, [r2, #0]
    DO_BLE(after_con_val);
 80038c4:	463b      	mov	r3, r7
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fd fa46 	bl	8000d58 <DO_BLE>
  k_wys_pom++;
 80038cc:	4b12      	ldr	r3, [pc, #72]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3301      	adds	r3, #1
 80038d2:	4a11      	ldr	r2, [pc, #68]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 80038d4:	6013      	str	r3, [r2, #0]
    }
          if (k_wys_pom==8 && (HAL_GetTick() - ZapamientanyCzasK_BLE) >= 15) {
 80038d6:	4b10      	ldr	r3, [pc, #64]	; (8003918 <ZMIENNE_ZAAW_DO_BLE+0x310>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d154      	bne.n	8003988 <ZMIENNE_ZAAW_DO_BLE+0x380>
 80038de:	f002 faa9 	bl	8005e34 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	4b0d      	ldr	r3, [pc, #52]	; (800391c <ZMIENNE_ZAAW_DO_BLE+0x314>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b0e      	cmp	r3, #14
 80038ec:	d94c      	bls.n	8003988 <ZMIENNE_ZAAW_DO_BLE+0x380>
   ZapamientanyCzasK_BLE = HAL_GetTick();
 80038ee:	f002 faa1 	bl	8005e34 <HAL_GetTick>
 80038f2:	4603      	mov	r3, r0
 80038f4:	4a09      	ldr	r2, [pc, #36]	; (800391c <ZMIENNE_ZAAW_DO_BLE+0x314>)
 80038f6:	6013      	str	r3, [r2, #0]

   ftoa(ZMIENNA4,after_con_val ,2);
 80038f8:	4b17      	ldr	r3, [pc, #92]	; (8003958 <ZMIENNE_ZAAW_DO_BLE+0x350>)
 80038fa:	edd3 7a00 	vldr	s15, [r3]
 80038fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003902:	463b      	mov	r3, r7
 8003904:	2102      	movs	r1, #2
 8003906:	4618      	mov	r0, r3
 8003908:	eeb0 0b47 	vmov.f64	d0, d7
 800390c:	f000 fda0 	bl	8004450 <ftoa>
     strcat(after_con_val, "y");
 8003910:	463b      	mov	r3, r7
 8003912:	e023      	b.n	800395c <ZMIENNE_ZAAW_DO_BLE+0x354>
 8003914:	2400028d 	.word	0x2400028d
 8003918:	24000000 	.word	0x24000000
 800391c:	24000284 	.word	0x24000284
 8003920:	240002b0 	.word	0x240002b0
 8003924:	08019460 	.word	0x08019460
 8003928:	240002c0 	.word	0x240002c0
 800392c:	08019464 	.word	0x08019464
 8003930:	240002b4 	.word	0x240002b4
 8003934:	08019468 	.word	0x08019468
 8003938:	240002d4 	.word	0x240002d4
 800393c:	080193dc 	.word	0x080193dc
 8003940:	240002b8 	.word	0x240002b8
 8003944:	0801946c 	.word	0x0801946c
 8003948:	240237c0 	.word	0x240237c0
 800394c:	08019470 	.word	0x08019470
 8003950:	2400000c 	.word	0x2400000c
 8003954:	08019474 	.word	0x08019474
 8003958:	240002bc 	.word	0x240002bc
 800395c:	4618      	mov	r0, r3
 800395e:	f7fc fcbf 	bl	80002e0 <strlen>
 8003962:	4603      	mov	r3, r0
 8003964:	461a      	mov	r2, r3
 8003966:	463b      	mov	r3, r7
 8003968:	4413      	add	r3, r2
 800396a:	4909      	ldr	r1, [pc, #36]	; (8003990 <ZMIENNE_ZAAW_DO_BLE+0x388>)
 800396c:	461a      	mov	r2, r3
 800396e:	460b      	mov	r3, r1
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	8013      	strh	r3, [r2, #0]
    DO_BLE(after_con_val);
 8003974:	463b      	mov	r3, r7
 8003976:	4618      	mov	r0, r3
 8003978:	f7fd f9ee 	bl	8000d58 <DO_BLE>
  k_wys_pom=1;
 800397c:	4b05      	ldr	r3, [pc, #20]	; (8003994 <ZMIENNE_ZAAW_DO_BLE+0x38c>)
 800397e:	2201      	movs	r2, #1
 8003980:	601a      	str	r2, [r3, #0]
   drukowanie=0; //tylko jeden raz
 8003982:	4b05      	ldr	r3, [pc, #20]	; (8003998 <ZMIENNE_ZAAW_DO_BLE+0x390>)
 8003984:	2200      	movs	r2, #0
 8003986:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8003988:	bf00      	nop
 800398a:	3720      	adds	r7, #32
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	08019478 	.word	0x08019478
 8003994:	24000000 	.word	0x24000000
 8003998:	2400028d 	.word	0x2400028d

0800399c <calculatePID>:

int CzasProbkowania_CZ_Rozniczkujacego=0;
uint32_t zCzas_PID=0;

float calculatePID()
{
 800399c:	b590      	push	{r4, r7, lr}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0

P=ERR_CZ;
 80039a2:	4b25      	ldr	r3, [pc, #148]	; (8003a38 <calculatePID+0x9c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a25      	ldr	r2, [pc, #148]	; (8003a3c <calculatePID+0xa0>)
 80039a8:	6013      	str	r3, [r2, #0]

uint32_t Cz_Pr_Cz_Rozn=CzasProbkowania_CZ_Rozniczkujacego;
 80039aa:	4b25      	ldr	r3, [pc, #148]	; (8003a40 <calculatePID+0xa4>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	607b      	str	r3, [r7, #4]
if(Cz_Pr_Cz_Rozn>190)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2bbe      	cmp	r3, #190	; 0xbe
 80039b4:	d901      	bls.n	80039ba <calculatePID+0x1e>
{
	Cz_Pr_Cz_Rozn=190;
 80039b6:	23be      	movs	r3, #190	; 0xbe
 80039b8:	607b      	str	r3, [r7, #4]
}

if(zCzas_PID + Cz_Pr_Cz_Rozn < HAL_GetTick())
 80039ba:	4b22      	ldr	r3, [pc, #136]	; (8003a44 <calculatePID+0xa8>)
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	18d4      	adds	r4, r2, r3
 80039c2:	f002 fa37 	bl	8005e34 <HAL_GetTick>
 80039c6:	4603      	mov	r3, r0
 80039c8:	429c      	cmp	r4, r3
 80039ca:	d213      	bcs.n	80039f4 <calculatePID+0x58>
{
D= ERR_CZ - P_ERR_CZ;
 80039cc:	4b1a      	ldr	r3, [pc, #104]	; (8003a38 <calculatePID+0x9c>)
 80039ce:	ed93 7a00 	vldr	s14, [r3]
 80039d2:	4b1d      	ldr	r3, [pc, #116]	; (8003a48 <calculatePID+0xac>)
 80039d4:	edd3 7a00 	vldr	s15, [r3]
 80039d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039dc:	4b1b      	ldr	r3, [pc, #108]	; (8003a4c <calculatePID+0xb0>)
 80039de:	edc3 7a00 	vstr	s15, [r3]
P_ERR_CZ=ERR_CZ;
 80039e2:	4b15      	ldr	r3, [pc, #84]	; (8003a38 <calculatePID+0x9c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a18      	ldr	r2, [pc, #96]	; (8003a48 <calculatePID+0xac>)
 80039e8:	6013      	str	r3, [r2, #0]
zCzas_PID=HAL_GetTick();
 80039ea:	f002 fa23 	bl	8005e34 <HAL_GetTick>
 80039ee:	4603      	mov	r3, r0
 80039f0:	4a14      	ldr	r2, [pc, #80]	; (8003a44 <calculatePID+0xa8>)
 80039f2:	6013      	str	r3, [r2, #0]

}

PID_value = (Kp * P)+(Kd*D);
 80039f4:	4b16      	ldr	r3, [pc, #88]	; (8003a50 <calculatePID+0xb4>)
 80039f6:	ed93 7a00 	vldr	s14, [r3]
 80039fa:	4b10      	ldr	r3, [pc, #64]	; (8003a3c <calculatePID+0xa0>)
 80039fc:	edd3 7a00 	vldr	s15, [r3]
 8003a00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a04:	4b13      	ldr	r3, [pc, #76]	; (8003a54 <calculatePID+0xb8>)
 8003a06:	edd3 6a00 	vldr	s13, [r3]
 8003a0a:	4b10      	ldr	r3, [pc, #64]	; (8003a4c <calculatePID+0xb0>)
 8003a0c:	edd3 7a00 	vldr	s15, [r3]
 8003a10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a18:	4b0f      	ldr	r3, [pc, #60]	; (8003a58 <calculatePID+0xbc>)
 8003a1a:	edc3 7a00 	vstr	s15, [r3]


#define feedback

#ifdef feedback
rz_predkoscfb();
 8003a1e:	f000 f81d 	bl	8003a5c <rz_predkoscfb>
#else
	Pr_Silnika_Lewego = pr_pocz_silnikow + PID_value;
	Pr_Silnika_Prawego = pr_pocz_silnikow - PID_value;
#endif

max_speed();
 8003a22:	f000 f8f5 	bl	8003c10 <max_speed>
return 0;
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	ee07 3a90 	vmov	s15, r3

}
 8003a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd90      	pop	{r4, r7, pc}
 8003a38:	24000234 	.word	0x24000234
 8003a3c:	240002a4 	.word	0x240002a4
 8003a40:	240002d4 	.word	0x240002d4
 8003a44:	240002d8 	.word	0x240002d8
 8003a48:	240002ac 	.word	0x240002ac
 8003a4c:	240002a8 	.word	0x240002a8
 8003a50:	24000004 	.word	0x24000004
 8003a54:	24000294 	.word	0x24000294
 8003a58:	2400029c 	.word	0x2400029c

08003a5c <rz_predkoscfb>:



float rz_predkoscfb()
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b089      	sub	sp, #36	; 0x24
 8003a60:	af00      	add	r7, sp, #0
	 float pr_zadana=pr_pocz_silnikow;
 8003a62:	4b63      	ldr	r3, [pc, #396]	; (8003bf0 <rz_predkoscfb+0x194>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	617b      	str	r3, [r7, #20]

	 float PR_zP;
	 float PR_zL;

	 	 PR_zL=pr_zadana+PID_value;
 8003a68:	4b62      	ldr	r3, [pc, #392]	; (8003bf4 <rz_predkoscfb+0x198>)
 8003a6a:	edd3 7a00 	vldr	s15, [r3]
 8003a6e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003a72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a76:	edc7 7a06 	vstr	s15, [r7, #24]
	 	 PR_zP=pr_zadana-PID_value;
 8003a7a:	4b5e      	ldr	r3, [pc, #376]	; (8003bf4 <rz_predkoscfb+0x198>)
 8003a7c:	edd3 7a00 	vldr	s15, [r3]
 8003a80:	ed97 7a05 	vldr	s14, [r7, #20]
 8003a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a88:	edc7 7a07 	vstr	s15, [r7, #28]



		 if(PR_zP>Predkosc_P)
 8003a8c:	4b5a      	ldr	r3, [pc, #360]	; (8003bf8 <rz_predkoscfb+0x19c>)
 8003a8e:	edd3 7a00 	vldr	s15, [r3]
 8003a92:	ed97 7a07 	vldr	s14, [r7, #28]
 8003a96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a9e:	dd10      	ble.n	8003ac2 <rz_predkoscfb+0x66>
		 {
			 float delta_pr=PR_zP-Predkosc_P;
 8003aa0:	4b55      	ldr	r3, [pc, #340]	; (8003bf8 <rz_predkoscfb+0x19c>)
 8003aa2:	edd3 7a00 	vldr	s15, [r3]
 8003aa6:	ed97 7a07 	vldr	s14, [r7, #28]
 8003aaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aae:	edc7 7a04 	vstr	s15, [r7, #16]
			 PR_zP=PR_zP+(delta_pr);
 8003ab2:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ab6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003aba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003abe:	edc7 7a07 	vstr	s15, [r7, #28]
		 }

		 if(PR_zP<Predkosc_P)
 8003ac2:	4b4d      	ldr	r3, [pc, #308]	; (8003bf8 <rz_predkoscfb+0x19c>)
 8003ac4:	edd3 7a00 	vldr	s15, [r3]
 8003ac8:	ed97 7a07 	vldr	s14, [r7, #28]
 8003acc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad4:	d510      	bpl.n	8003af8 <rz_predkoscfb+0x9c>
		 {
			 float delta_pr=PR_zP-Predkosc_P;
 8003ad6:	4b48      	ldr	r3, [pc, #288]	; (8003bf8 <rz_predkoscfb+0x19c>)
 8003ad8:	edd3 7a00 	vldr	s15, [r3]
 8003adc:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ae0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ae4:	edc7 7a03 	vstr	s15, [r7, #12]
			 PR_zP=PR_zP+(delta_pr);
 8003ae8:	ed97 7a07 	vldr	s14, [r7, #28]
 8003aec:	edd7 7a03 	vldr	s15, [r7, #12]
 8003af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003af4:	edc7 7a07 	vstr	s15, [r7, #28]
		 }




		 if(PR_zL>Predkosc_L)
 8003af8:	4b40      	ldr	r3, [pc, #256]	; (8003bfc <rz_predkoscfb+0x1a0>)
 8003afa:	edd3 7a00 	vldr	s15, [r3]
 8003afe:	ed97 7a06 	vldr	s14, [r7, #24]
 8003b02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b0a:	dd10      	ble.n	8003b2e <rz_predkoscfb+0xd2>
		 {
			 float delta_pr=PR_zL-Predkosc_L;
 8003b0c:	4b3b      	ldr	r3, [pc, #236]	; (8003bfc <rz_predkoscfb+0x1a0>)
 8003b0e:	edd3 7a00 	vldr	s15, [r3]
 8003b12:	ed97 7a06 	vldr	s14, [r7, #24]
 8003b16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b1a:	edc7 7a02 	vstr	s15, [r7, #8]
			 PR_zL=PR_zL+(delta_pr);
 8003b1e:	ed97 7a06 	vldr	s14, [r7, #24]
 8003b22:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b2a:	edc7 7a06 	vstr	s15, [r7, #24]
		 }

		 if(PR_zL<Predkosc_L)
 8003b2e:	4b33      	ldr	r3, [pc, #204]	; (8003bfc <rz_predkoscfb+0x1a0>)
 8003b30:	edd3 7a00 	vldr	s15, [r3]
 8003b34:	ed97 7a06 	vldr	s14, [r7, #24]
 8003b38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b40:	d510      	bpl.n	8003b64 <rz_predkoscfb+0x108>
		 {
			 float delta_pr=PR_zL-Predkosc_L;
 8003b42:	4b2e      	ldr	r3, [pc, #184]	; (8003bfc <rz_predkoscfb+0x1a0>)
 8003b44:	edd3 7a00 	vldr	s15, [r3]
 8003b48:	ed97 7a06 	vldr	s14, [r7, #24]
 8003b4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b50:	edc7 7a01 	vstr	s15, [r7, #4]
			 PR_zL=PR_zL+(delta_pr);
 8003b54:	ed97 7a06 	vldr	s14, [r7, #24]
 8003b58:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b60:	edc7 7a06 	vstr	s15, [r7, #24]
		 }

			 PR_zP= (220*PR_zP)+50 - (220*PID_value);
 8003b64:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b68:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003c00 <rz_predkoscfb+0x1a4>
 8003b6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b70:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003c04 <rz_predkoscfb+0x1a8>
 8003b74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b78:	4b1e      	ldr	r3, [pc, #120]	; (8003bf4 <rz_predkoscfb+0x198>)
 8003b7a:	edd3 7a00 	vldr	s15, [r3]
 8003b7e:	eddf 6a20 	vldr	s13, [pc, #128]	; 8003c00 <rz_predkoscfb+0x1a4>
 8003b82:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b8a:	edc7 7a07 	vstr	s15, [r7, #28]
			 PR_zL= (220*PR_zL)+50 + (220*PID_value);
 8003b8e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b92:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003c00 <rz_predkoscfb+0x1a4>
 8003b96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b9a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003c04 <rz_predkoscfb+0x1a8>
 8003b9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ba2:	4b14      	ldr	r3, [pc, #80]	; (8003bf4 <rz_predkoscfb+0x198>)
 8003ba4:	edd3 7a00 	vldr	s15, [r3]
 8003ba8:	eddf 6a15 	vldr	s13, [pc, #84]	; 8003c00 <rz_predkoscfb+0x1a4>
 8003bac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003bb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bb4:	edc7 7a06 	vstr	s15, [r7, #24]

 Pr_Silnika_Lewego  = PR_zL;
 8003bb8:	edd7 7a06 	vldr	s15, [r7, #24]
 8003bbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bc0:	ee17 2a90 	vmov	r2, s15
 8003bc4:	4b10      	ldr	r3, [pc, #64]	; (8003c08 <rz_predkoscfb+0x1ac>)
 8003bc6:	601a      	str	r2, [r3, #0]
 Pr_Silnika_Prawego = PR_zP;
 8003bc8:	edd7 7a07 	vldr	s15, [r7, #28]
 8003bcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bd0:	ee17 2a90 	vmov	r2, s15
 8003bd4:	4b0d      	ldr	r3, [pc, #52]	; (8003c0c <rz_predkoscfb+0x1b0>)
 8003bd6:	601a      	str	r2, [r3, #0]


return 0;
 8003bd8:	f04f 0300 	mov.w	r3, #0
 8003bdc:	ee07 3a90 	vmov	s15, r3
}
 8003be0:	eeb0 0a67 	vmov.f32	s0, s15
 8003be4:	3724      	adds	r7, #36	; 0x24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	24000008 	.word	0x24000008
 8003bf4:	2400029c 	.word	0x2400029c
 8003bf8:	240004b0 	.word	0x240004b0
 8003bfc:	240004ac 	.word	0x240004ac
 8003c00:	435c0000 	.word	0x435c0000
 8003c04:	42480000 	.word	0x42480000
 8003c08:	240002d0 	.word	0x240002d0
 8003c0c:	240002cc 	.word	0x240002cc

08003c10 <max_speed>:

void max_speed()
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
	if(Pr_Silnika_Lewego>1000)
 8003c14:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <max_speed+0x54>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c1c:	dd03      	ble.n	8003c26 <max_speed+0x16>
	{
		Pr_Silnika_Lewego=1000;
 8003c1e:	4b11      	ldr	r3, [pc, #68]	; (8003c64 <max_speed+0x54>)
 8003c20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c24:	601a      	str	r2, [r3, #0]
	}


	//Mniejsza od -1000!!!!!!!!!@@@@@@@@
	if(Pr_Silnika_Lewego<-1000)
 8003c26:	4b0f      	ldr	r3, [pc, #60]	; (8003c64 <max_speed+0x54>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8003c2e:	da02      	bge.n	8003c36 <max_speed+0x26>
	{
		Pr_Silnika_Lewego=-1000;
 8003c30:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <max_speed+0x54>)
 8003c32:	4a0d      	ldr	r2, [pc, #52]	; (8003c68 <max_speed+0x58>)
 8003c34:	601a      	str	r2, [r3, #0]
	}

	if(Pr_Silnika_Prawego>1000)
 8003c36:	4b0d      	ldr	r3, [pc, #52]	; (8003c6c <max_speed+0x5c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c3e:	dd03      	ble.n	8003c48 <max_speed+0x38>
	{
		Pr_Silnika_Prawego=1000;
 8003c40:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <max_speed+0x5c>)
 8003c42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c46:	601a      	str	r2, [r3, #0]
	}
	//Mniejsza od -1000!!!!!!!!!@@@@@@@@
	if(Pr_Silnika_Prawego<-1000)
 8003c48:	4b08      	ldr	r3, [pc, #32]	; (8003c6c <max_speed+0x5c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8003c50:	da02      	bge.n	8003c58 <max_speed+0x48>
	{
		Pr_Silnika_Prawego=-1000;
 8003c52:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <max_speed+0x5c>)
 8003c54:	4a04      	ldr	r2, [pc, #16]	; (8003c68 <max_speed+0x58>)
 8003c56:	601a      	str	r2, [r3, #0]
	}
}
 8003c58:	bf00      	nop
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	240002d0 	.word	0x240002d0
 8003c68:	fffffc18 	.word	0xfffffc18
 8003c6c:	240002cc 	.word	0x240002cc

08003c70 <JAZDA_DO_PRZODU>:



void JAZDA_DO_PRZODU(int Pr_Sil_Lew, int Pr_Sil_Pr)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]

  __HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_2,1000);//-->> Naprzod
 8003c7a:	4b0e      	ldr	r3, [pc, #56]	; (8003cb4 <JAZDA_DO_PRZODU+0x44>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c82:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_1,1000-Pr_Sil_Pr);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8003c8a:	4b0a      	ldr	r3, [pc, #40]	; (8003cb4 <JAZDA_DO_PRZODU+0x44>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	635a      	str	r2, [r3, #52]	; 0x34

  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,1000);
 8003c90:	4b09      	ldr	r3, [pc, #36]	; (8003cb8 <JAZDA_DO_PRZODU+0x48>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c98:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,1000-Pr_Sil_Lew); //-->> Naprzod
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8003ca0:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <JAZDA_DO_PRZODU+0x48>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	641a      	str	r2, [r3, #64]	; 0x40

}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	24023a7c 	.word	0x24023a7c
 8003cb8:	24023a3c 	.word	0x24023a3c

08003cbc <PRAWY_DO_TYLU>:
void PRAWY_DO_TYLU(int Pr_Sil_Lew, int Pr_Sil_Pr)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
	  __HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_2,1000-Pr_Sil_Pr);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8003ccc:	4b0c      	ldr	r3, [pc, #48]	; (8003d00 <PRAWY_DO_TYLU+0x44>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_1,1000);  //-->> Do tylu
 8003cd2:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <PRAWY_DO_TYLU+0x44>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003cda:	635a      	str	r2, [r3, #52]	; 0x34


	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,1000);
 8003cdc:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <PRAWY_DO_TYLU+0x48>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ce4:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,1000-Pr_Sil_Lew); //-->> Naprzod
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8003cec:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <PRAWY_DO_TYLU+0x48>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	641a      	str	r2, [r3, #64]	; 0x40



}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	24023a7c 	.word	0x24023a7c
 8003d04:	24023a3c 	.word	0x24023a3c

08003d08 <LEWY_DO_TYLU>:
void LEWY_DO_TYLU(int Pr_Sil_Lew, int Pr_Sil_Pr)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
	  __HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_2,1000); //-->> Do tylu
 8003d12:	4b0e      	ldr	r3, [pc, #56]	; (8003d4c <LEWY_DO_TYLU+0x44>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d1a:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_1,1000-Pr_Sil_Pr);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8003d22:	4b0a      	ldr	r3, [pc, #40]	; (8003d4c <LEWY_DO_TYLU+0x44>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	635a      	str	r2, [r3, #52]	; 0x34


	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,1000-Pr_Sil_Lew); //-->> Naprzod
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8003d2e:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <LEWY_DO_TYLU+0x48>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,1000);
 8003d34:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <LEWY_DO_TYLU+0x48>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d3c:	641a      	str	r2, [r3, #64]	; 0x40



}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	24023a7c 	.word	0x24023a7c
 8003d50:	24023a3c 	.word	0x24023a3c

08003d54 <EEPROM_ZAAW_READ>:
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,1000-Pr_Sil_Lew);
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,1000); //-->> Do tylu

}
void EEPROM_ZAAW_READ()
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
	EEPROM_READ_FLOAT(400, &MAX_PID);
 8003d58:	490f      	ldr	r1, [pc, #60]	; (8003d98 <EEPROM_ZAAW_READ+0x44>)
 8003d5a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003d5e:	f7fd fab4 	bl	80012ca <EEPROM_READ_FLOAT>
	EEPROM_READ_FLOAT(410, &SUMA_MAX);
 8003d62:	490e      	ldr	r1, [pc, #56]	; (8003d9c <EEPROM_ZAAW_READ+0x48>)
 8003d64:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8003d68:	f7fd faaf 	bl	80012ca <EEPROM_READ_FLOAT>

	EEPROM_READ_FLOAT(440, &ZMIENNA3); //@@@@@@@@@@@@@@@@@@@@
 8003d6c:	490c      	ldr	r1, [pc, #48]	; (8003da0 <EEPROM_ZAAW_READ+0x4c>)
 8003d6e:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8003d72:	f7fd faaa 	bl	80012ca <EEPROM_READ_FLOAT>

	EEPROM_READ_FLOAT(445, &ZMIENNA4);
 8003d76:	490b      	ldr	r1, [pc, #44]	; (8003da4 <EEPROM_ZAAW_READ+0x50>)
 8003d78:	f240 10bd 	movw	r0, #445	; 0x1bd
 8003d7c:	f7fd faa5 	bl	80012ca <EEPROM_READ_FLOAT>

	EEPROM_READ_INT(405, &pr_tyl);
 8003d80:	4909      	ldr	r1, [pc, #36]	; (8003da8 <EEPROM_ZAAW_READ+0x54>)
 8003d82:	f240 1095 	movw	r0, #405	; 0x195
 8003d86:	f7fd fad4 	bl	8001332 <EEPROM_READ_INT>
	EEPROM_READ_INT(420, &CzasProbkowania_CZ_Rozniczkujacego);
 8003d8a:	4908      	ldr	r1, [pc, #32]	; (8003dac <EEPROM_ZAAW_READ+0x58>)
 8003d8c:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8003d90:	f7fd facf 	bl	8001332 <EEPROM_READ_INT>
}
 8003d94:	bf00      	nop
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	240002b0 	.word	0x240002b0
 8003d9c:	240002b4 	.word	0x240002b4
 8003da0:	240002b8 	.word	0x240002b8
 8003da4:	240002bc 	.word	0x240002bc
 8003da8:	240002c0 	.word	0x240002c0
 8003dac:	240002d4 	.word	0x240002d4

08003db0 <EEPROM_PID_READ>:
void EEPROM_PID_READ()
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
	EEPROM_READ_FLOAT(50, &Kp);
 8003db4:	4908      	ldr	r1, [pc, #32]	; (8003dd8 <EEPROM_PID_READ+0x28>)
 8003db6:	2032      	movs	r0, #50	; 0x32
 8003db8:	f7fd fa87 	bl	80012ca <EEPROM_READ_FLOAT>
	EEPROM_READ_FLOAT(55, &Kd);
 8003dbc:	4907      	ldr	r1, [pc, #28]	; (8003ddc <EEPROM_PID_READ+0x2c>)
 8003dbe:	2037      	movs	r0, #55	; 0x37
 8003dc0:	f7fd fa83 	bl	80012ca <EEPROM_READ_FLOAT>
	EEPROM_READ_FLOAT(60, &pr_pocz_silnikow);
 8003dc4:	4906      	ldr	r1, [pc, #24]	; (8003de0 <EEPROM_PID_READ+0x30>)
 8003dc6:	203c      	movs	r0, #60	; 0x3c
 8003dc8:	f7fd fa7f 	bl	80012ca <EEPROM_READ_FLOAT>
	EEPROM_READ_FLOAT(65, &Ki);
 8003dcc:	4905      	ldr	r1, [pc, #20]	; (8003de4 <EEPROM_PID_READ+0x34>)
 8003dce:	2041      	movs	r0, #65	; 0x41
 8003dd0:	f7fd fa7b 	bl	80012ca <EEPROM_READ_FLOAT>
}
 8003dd4:	bf00      	nop
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	24000004 	.word	0x24000004
 8003ddc:	24000294 	.word	0x24000294
 8003de0:	24000008 	.word	0x24000008
 8003de4:	24000298 	.word	0x24000298

08003de8 <Motor_PWM_Init>:
void Motor_PWM_Init()
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
	EEPROM_PID_READ();
 8003dec:	f7ff ffe0 	bl	8003db0 <EEPROM_PID_READ>
	EEPROM_ZAAW_READ();
 8003df0:	f7ff ffb0 	bl	8003d54 <EEPROM_ZAAW_READ>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8003df4:	2100      	movs	r1, #0
 8003df6:	4810      	ldr	r0, [pc, #64]	; (8003e38 <Motor_PWM_Init+0x50>)
 8003df8:	f00a ffba 	bl	800ed70 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8003dfc:	2104      	movs	r1, #4
 8003dfe:	480e      	ldr	r0, [pc, #56]	; (8003e38 <Motor_PWM_Init+0x50>)
 8003e00:	f00a ffb6 	bl	800ed70 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8003e04:	2108      	movs	r1, #8
 8003e06:	480d      	ldr	r0, [pc, #52]	; (8003e3c <Motor_PWM_Init+0x54>)
 8003e08:	f00a ffb2 	bl	800ed70 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8003e0c:	210c      	movs	r1, #12
 8003e0e:	480b      	ldr	r0, [pc, #44]	; (8003e3c <Motor_PWM_Init+0x54>)
 8003e10:	f00a ffae 	bl	800ed70 <HAL_TIM_PWM_Start>



    __HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_2,0);
 8003e14:	4b08      	ldr	r3, [pc, #32]	; (8003e38 <Motor_PWM_Init+0x50>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_1,0);
 8003e1c:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <Motor_PWM_Init+0x50>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2200      	movs	r2, #0
 8003e22:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,0);
 8003e24:	4b05      	ldr	r3, [pc, #20]	; (8003e3c <Motor_PWM_Init+0x54>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,0);
 8003e2c:	4b03      	ldr	r3, [pc, #12]	; (8003e3c <Motor_PWM_Init+0x54>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2200      	movs	r2, #0
 8003e32:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003e34:	bf00      	nop
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	24023a7c 	.word	0x24023a7c
 8003e3c:	24023a3c 	.word	0x24023a3c

08003e40 <Robot_Control>:


void Decode_PID();

void Robot_Control()
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
	if(URUCHAMIANIE_ROBOTA)
 8003e44:	4b12      	ldr	r3, [pc, #72]	; (8003e90 <Robot_Control+0x50>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <Robot_Control+0x12>
	{
		//Robot start
		//Poki co to tak tylko dla testow...

		Decode_PID();
 8003e4c:	f000 f82a 	bl	8003ea4 <Decode_PID>

	    __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,1000);
	    __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,1000);
	}

}
 8003e50:	e01b      	b.n	8003e8a <Robot_Control+0x4a>
		rz_IP=0;
 8003e52:	4b10      	ldr	r3, [pc, #64]	; (8003e94 <Robot_Control+0x54>)
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]
		rz_IL=0;
 8003e5a:	4b0f      	ldr	r3, [pc, #60]	; (8003e98 <Robot_Control+0x58>)
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]
	    __HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_1,1000);
 8003e62:	4b0e      	ldr	r3, [pc, #56]	; (8003e9c <Robot_Control+0x5c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e6a:	635a      	str	r2, [r3, #52]	; 0x34
	    __HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_2,1000);
 8003e6c:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <Robot_Control+0x5c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e74:	639a      	str	r2, [r3, #56]	; 0x38
	    __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,1000);
 8003e76:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <Robot_Control+0x60>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e7e:	63da      	str	r2, [r3, #60]	; 0x3c
	    __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,1000);
 8003e80:	4b07      	ldr	r3, [pc, #28]	; (8003ea0 <Robot_Control+0x60>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e88:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003e8a:	bf00      	nop
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	240002e0 	.word	0x240002e0
 8003e94:	240002c4 	.word	0x240002c4
 8003e98:	240002c8 	.word	0x240002c8
 8003e9c:	24023a7c 	.word	0x24023a7c
 8003ea0:	24023a3c 	.word	0x24023a3c

08003ea4 <Decode_PID>:


void Decode_PID()
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0




if(Pr_Silnika_Lewego<0)
 8003ea8:	4b16      	ldr	r3, [pc, #88]	; (8003f04 <Decode_PID+0x60>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	da0d      	bge.n	8003ecc <Decode_PID+0x28>
{
	Pr_Silnika_Lewego=Pr_Silnika_Lewego*(-1);
 8003eb0:	4b14      	ldr	r3, [pc, #80]	; (8003f04 <Decode_PID+0x60>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	425b      	negs	r3, r3
 8003eb6:	4a13      	ldr	r2, [pc, #76]	; (8003f04 <Decode_PID+0x60>)
 8003eb8:	6013      	str	r3, [r2, #0]

	LEWY_DO_TYLU(Pr_Silnika_Lewego, Pr_Silnika_Prawego);
 8003eba:	4b12      	ldr	r3, [pc, #72]	; (8003f04 <Decode_PID+0x60>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a12      	ldr	r2, [pc, #72]	; (8003f08 <Decode_PID+0x64>)
 8003ec0:	6812      	ldr	r2, [r2, #0]
 8003ec2:	4611      	mov	r1, r2
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff ff1f 	bl	8003d08 <LEWY_DO_TYLU>
	return;
 8003eca:	e019      	b.n	8003f00 <Decode_PID+0x5c>
}
else if(Pr_Silnika_Prawego<0)
 8003ecc:	4b0e      	ldr	r3, [pc, #56]	; (8003f08 <Decode_PID+0x64>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	da0d      	bge.n	8003ef0 <Decode_PID+0x4c>
{
	Pr_Silnika_Prawego=Pr_Silnika_Prawego*(-1);
 8003ed4:	4b0c      	ldr	r3, [pc, #48]	; (8003f08 <Decode_PID+0x64>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	425b      	negs	r3, r3
 8003eda:	4a0b      	ldr	r2, [pc, #44]	; (8003f08 <Decode_PID+0x64>)
 8003edc:	6013      	str	r3, [r2, #0]

	PRAWY_DO_TYLU(Pr_Silnika_Lewego, Pr_Silnika_Prawego);
 8003ede:	4b09      	ldr	r3, [pc, #36]	; (8003f04 <Decode_PID+0x60>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a09      	ldr	r2, [pc, #36]	; (8003f08 <Decode_PID+0x64>)
 8003ee4:	6812      	ldr	r2, [r2, #0]
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff fee7 	bl	8003cbc <PRAWY_DO_TYLU>
	return;
 8003eee:	e007      	b.n	8003f00 <Decode_PID+0x5c>
}
else
	JAZDA_DO_PRZODU(Pr_Silnika_Lewego, Pr_Silnika_Prawego);
 8003ef0:	4b04      	ldr	r3, [pc, #16]	; (8003f04 <Decode_PID+0x60>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a04      	ldr	r2, [pc, #16]	; (8003f08 <Decode_PID+0x64>)
 8003ef6:	6812      	ldr	r2, [r2, #0]
 8003ef8:	4611      	mov	r1, r2
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7ff feb8 	bl	8003c70 <JAZDA_DO_PRZODU>
}
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	240002d0 	.word	0x240002d0
 8003f08:	240002cc 	.word	0x240002cc

08003f0c <IR_INIT>:
void EEPROM_IR_STATE_READ();
void OBSLUGAPILOTA();


void IR_INIT()
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
	 HAL_TIM_Base_Start_IT(&htim2); //Turn on IRDA //must be correctly configured to interrupt after 100us
 8003f10:	4803      	ldr	r0, [pc, #12]	; (8003f20 <IR_INIT+0x14>)
 8003f12:	f00a fed7 	bl	800ecc4 <HAL_TIM_Base_Start_IT>
	 EEPROM_IR_STATE_READ();            //--<< Set it in Bluetooth APP
 8003f16:	f000 f8ed 	bl	80040f4 <EEPROM_IR_STATE_READ>
	// IR_READY=1;
}
 8003f1a:	bf00      	nop
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	24023afc 	.word	0x24023afc

08003f24 <IR_IT_Dec>:
   	   {
   	   }
}

void IR_IT_Dec()
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0

	if( ( (pr_IR+160 )  >  t2  &&  (pr_IR+100 ) <   t2 )  ) //Receive Sync Header
 8003f28:	4b1c      	ldr	r3, [pc, #112]	; (8003f9c <IR_IT_Dec+0x78>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8003f30:	4b1b      	ldr	r3, [pc, #108]	; (8003fa0 <IR_IT_Dec+0x7c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d90a      	bls.n	8003f4e <IR_IT_Dec+0x2a>
 8003f38:	4b18      	ldr	r3, [pc, #96]	; (8003f9c <IR_IT_Dec+0x78>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003f40:	4b17      	ldr	r3, [pc, #92]	; (8003fa0 <IR_IT_Dec+0x7c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d202      	bcs.n	8003f4e <IR_IT_Dec+0x2a>
	{
		idx=0;
 8003f48:	4b16      	ldr	r3, [pc, #88]	; (8003fa4 <IR_IT_Dec+0x80>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	701a      	strb	r2, [r3, #0]
	//	goto DONE;
	}

	   irdata[idx]= t2-pr_IR;
 8003f4e:	4b14      	ldr	r3, [pc, #80]	; (8003fa0 <IR_IT_Dec+0x7c>)
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	4b12      	ldr	r3, [pc, #72]	; (8003f9c <IR_IT_Dec+0x78>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4913      	ldr	r1, [pc, #76]	; (8003fa4 <IR_IT_Dec+0x80>)
 8003f58:	7809      	ldrb	r1, [r1, #0]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	4a12      	ldr	r2, [pc, #72]	; (8003fa8 <IR_IT_Dec+0x84>)
 8003f5e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   	   idx++;
 8003f62:	4b10      	ldr	r3, [pc, #64]	; (8003fa4 <IR_IT_Dec+0x80>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	3301      	adds	r3, #1
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	4b0e      	ldr	r3, [pc, #56]	; (8003fa4 <IR_IT_Dec+0x80>)
 8003f6c:	701a      	strb	r2, [r3, #0]

   	   if(idx==33)
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	; (8003fa4 <IR_IT_Dec+0x80>)
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	2b21      	cmp	r3, #33	; 0x21
 8003f74:	d105      	bne.n	8003f82 <IR_IT_Dec+0x5e>
   	   {
   		 receiveComplete = true;
 8003f76:	4b0d      	ldr	r3, [pc, #52]	; (8003fac <IR_IT_Dec+0x88>)
 8003f78:	2201      	movs	r2, #1
 8003f7a:	701a      	strb	r2, [r3, #0]
   		idx=0;
 8003f7c:	4b09      	ldr	r3, [pc, #36]	; (8003fa4 <IR_IT_Dec+0x80>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	701a      	strb	r2, [r3, #0]
   	   }
//DONE:
	pr_IR=t2;
 8003f82:	4b07      	ldr	r3, [pc, #28]	; (8003fa0 <IR_IT_Dec+0x7c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a05      	ldr	r2, [pc, #20]	; (8003f9c <IR_IT_Dec+0x78>)
 8003f88:	6013      	str	r3, [r2, #0]
	flaga_RT=1;
 8003f8a:	4b09      	ldr	r3, [pc, #36]	; (8003fb0 <IR_IT_Dec+0x8c>)
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]

}
 8003f90:	bf00      	nop
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	240002e4 	.word	0x240002e4
 8003fa0:	240002fc 	.word	0x240002fc
 8003fa4:	240237c5 	.word	0x240237c5
 8003fa8:	2402373c 	.word	0x2402373c
 8003fac:	240237c4 	.word	0x240237c4
 8003fb0:	240002e8 	.word	0x240002e8

08003fb4 <teo_dec>:

uint32_t remote_code[32];
uint32_t receiver_codet=0;

void teo_dec()
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
	for(int i=0; i<33; i++)
 8003fba:	2300      	movs	r3, #0
 8003fbc:	607b      	str	r3, [r7, #4]
 8003fbe:	e031      	b.n	8004024 <teo_dec+0x70>
	{
		if(irdata[i] >=8 && irdata[i] < 15)   //Represents 0
 8003fc0:	4a1d      	ldr	r2, [pc, #116]	; (8004038 <teo_dec+0x84>)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fc8:	2b07      	cmp	r3, #7
 8003fca:	d912      	bls.n	8003ff2 <teo_dec+0x3e>
 8003fcc:	4a1a      	ldr	r2, [pc, #104]	; (8004038 <teo_dec+0x84>)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fd4:	2b0e      	cmp	r3, #14
 8003fd6:	d80c      	bhi.n	8003ff2 <teo_dec+0x3e>
		{
			receiver_codet &= ~(1UL << (32-i));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f1c3 0320 	rsb	r3, r3, #32
 8003fde:	2201      	movs	r2, #1
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	43da      	mvns	r2, r3
 8003fe6:	4b15      	ldr	r3, [pc, #84]	; (800403c <teo_dec+0x88>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4013      	ands	r3, r2
 8003fec:	4a13      	ldr	r2, [pc, #76]	; (800403c <teo_dec+0x88>)
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	e015      	b.n	800401e <teo_dec+0x6a>
		}
		else if(irdata[i] >=16 && irdata[i]<25) //Represents 1
 8003ff2:	4a11      	ldr	r2, [pc, #68]	; (8004038 <teo_dec+0x84>)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ffa:	2b0f      	cmp	r3, #15
 8003ffc:	d90f      	bls.n	800401e <teo_dec+0x6a>
 8003ffe:	4a0e      	ldr	r2, [pc, #56]	; (8004038 <teo_dec+0x84>)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004006:	2b18      	cmp	r3, #24
 8004008:	d809      	bhi.n	800401e <teo_dec+0x6a>
		{
			receiver_codet |= (1UL << (32-i));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f1c3 0320 	rsb	r3, r3, #32
 8004010:	2201      	movs	r2, #1
 8004012:	409a      	lsls	r2, r3
 8004014:	4b09      	ldr	r3, [pc, #36]	; (800403c <teo_dec+0x88>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4313      	orrs	r3, r2
 800401a:	4a08      	ldr	r2, [pc, #32]	; (800403c <teo_dec+0x88>)
 800401c:	6013      	str	r3, [r2, #0]
	for(int i=0; i<33; i++)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3301      	adds	r3, #1
 8004022:	607b      	str	r3, [r7, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b20      	cmp	r3, #32
 8004028:	ddca      	ble.n	8003fc0 <teo_dec+0xc>
		}
	}
}
 800402a:	bf00      	nop
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	2402373c 	.word	0x2402373c
 800403c:	240002ec 	.word	0x240002ec

08004040 <IR_READER>:

void IR_READER()
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
	if(IR_READY)
 8004044:	4b10      	ldr	r3, [pc, #64]	; (8004088 <IR_READER+0x48>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d01a      	beq.n	8004082 <IR_READER+0x42>
	{
	if(pr_IR && flaga_RT==1 )
 800404c:	4b0f      	ldr	r3, [pc, #60]	; (800408c <IR_READER+0x4c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00b      	beq.n	800406c <IR_READER+0x2c>
 8004054:	4b0e      	ldr	r3, [pc, #56]	; (8004090 <IR_READER+0x50>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d107      	bne.n	800406c <IR_READER+0x2c>
	{
		  HAL_GPIO_TogglePin(IR_LED_GPIO_Port, IR_LED_Pin);
 800405c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004060:	480c      	ldr	r0, [pc, #48]	; (8004094 <IR_READER+0x54>)
 8004062:	f006 f8d0 	bl	800a206 <HAL_GPIO_TogglePin>

		  flaga_RT=0;
 8004066:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <IR_READER+0x50>)
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]
	}

	if(receiveComplete)
 800406c:	4b0a      	ldr	r3, [pc, #40]	; (8004098 <IR_READER+0x58>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d006      	beq.n	8004082 <IR_READER+0x42>
	{
		receiveComplete=false;
 8004074:	4b08      	ldr	r3, [pc, #32]	; (8004098 <IR_READER+0x58>)
 8004076:	2200      	movs	r2, #0
 8004078:	701a      	strb	r2, [r3, #0]
		teo_dec();
 800407a:	f7ff ff9b 	bl	8003fb4 <teo_dec>
		OBSLUGAPILOTA();
 800407e:	f000 f80d 	bl	800409c <OBSLUGAPILOTA>
	}

	}

}
 8004082:	bf00      	nop
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	240237c0 	.word	0x240237c0
 800408c:	240002e4 	.word	0x240002e4
 8004090:	240002e8 	.word	0x240002e8
 8004094:	58020800 	.word	0x58020800
 8004098:	240237c4 	.word	0x240237c4

0800409c <OBSLUGAPILOTA>:

int znakwylaczdiode=0;


void OBSLUGAPILOTA()
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0

if(receiver_codet==2774180190) //DVD - ROBOT START
 80040a0:	4b0e      	ldr	r3, [pc, #56]	; (80040dc <OBSLUGAPILOTA+0x40>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a0e      	ldr	r2, [pc, #56]	; (80040e0 <OBSLUGAPILOTA+0x44>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d102      	bne.n	80040b0 <OBSLUGAPILOTA+0x14>
{
	URUCHAMIANIE_ROBOTA=1;
 80040aa:	4b0e      	ldr	r3, [pc, #56]	; (80040e4 <OBSLUGAPILOTA+0x48>)
 80040ac:	2201      	movs	r2, #1
 80040ae:	601a      	str	r2, [r3, #0]
}

if(receiver_codet==2774151375) //TV - ROBOT STOP
 80040b0:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <OBSLUGAPILOTA+0x40>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a0c      	ldr	r2, [pc, #48]	; (80040e8 <OBSLUGAPILOTA+0x4c>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d102      	bne.n	80040c0 <OBSLUGAPILOTA+0x24>
{
	URUCHAMIANIE_ROBOTA=0;
 80040ba:	4b0a      	ldr	r3, [pc, #40]	; (80040e4 <OBSLUGAPILOTA+0x48>)
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]
if(receiver_codet==2774159790) //FM
{


}
if(receiver_codet==2774192430) //am  //IR OFF!!! @@@@@@@@@@@@@
 80040c0:	4b06      	ldr	r3, [pc, #24]	; (80040dc <OBSLUGAPILOTA+0x40>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a09      	ldr	r2, [pc, #36]	; (80040ec <OBSLUGAPILOTA+0x50>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d102      	bne.n	80040d0 <OBSLUGAPILOTA+0x34>
{
	IR_READY=0;
 80040ca:	4b09      	ldr	r3, [pc, #36]	; (80040f0 <OBSLUGAPILOTA+0x54>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]
{

}


}
 80040d0:	bf00      	nop
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	240002ec 	.word	0x240002ec
 80040e0:	a55aa15e 	.word	0xa55aa15e
 80040e4:	240002e0 	.word	0x240002e0
 80040e8:	a55a30cf 	.word	0xa55a30cf
 80040ec:	a55ad12e 	.word	0xa55ad12e
 80040f0:	240237c0 	.word	0x240237c0

080040f4 <EEPROM_IR_STATE_READ>:



void EEPROM_IR_STATE_READ()
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
	EEPROM_READ_INT(450, &IR_READY);
 80040f8:	4903      	ldr	r1, [pc, #12]	; (8004108 <EEPROM_IR_STATE_READ+0x14>)
 80040fa:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80040fe:	f7fd f918 	bl	8001332 <EEPROM_READ_INT>
}
 8004102:	bf00      	nop
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	240237c0 	.word	0x240237c0

0800410c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b08a      	sub	sp, #40	; 0x28
 8004110:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8004112:	f107 031c 	add.w	r3, r7, #28
 8004116:	2200      	movs	r2, #0
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	605a      	str	r2, [r3, #4]
 800411c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800411e:	463b      	mov	r3, r7
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	605a      	str	r2, [r3, #4]
 8004126:	609a      	str	r2, [r3, #8]
 8004128:	60da      	str	r2, [r3, #12]
 800412a:	611a      	str	r2, [r3, #16]
 800412c:	615a      	str	r2, [r3, #20]
 800412e:	619a      	str	r2, [r3, #24]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8004130:	4b62      	ldr	r3, [pc, #392]	; (80042bc <MX_ADC1_Init+0x1b0>)
 8004132:	4a63      	ldr	r2, [pc, #396]	; (80042c0 <MX_ADC1_Init+0x1b4>)
 8004134:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8004136:	4b61      	ldr	r3, [pc, #388]	; (80042bc <MX_ADC1_Init+0x1b0>)
 8004138:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800413c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800413e:	4b5f      	ldr	r3, [pc, #380]	; (80042bc <MX_ADC1_Init+0x1b0>)
 8004140:	2208      	movs	r2, #8
 8004142:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004144:	4b5d      	ldr	r3, [pc, #372]	; (80042bc <MX_ADC1_Init+0x1b0>)
 8004146:	2201      	movs	r2, #1
 8004148:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800414a:	4b5c      	ldr	r3, [pc, #368]	; (80042bc <MX_ADC1_Init+0x1b0>)
 800414c:	2204      	movs	r2, #4
 800414e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004150:	4b5a      	ldr	r3, [pc, #360]	; (80042bc <MX_ADC1_Init+0x1b0>)
 8004152:	2200      	movs	r2, #0
 8004154:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004156:	4b59      	ldr	r3, [pc, #356]	; (80042bc <MX_ADC1_Init+0x1b0>)
 8004158:	2201      	movs	r2, #1
 800415a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 8;
 800415c:	4b57      	ldr	r3, [pc, #348]	; (80042bc <MX_ADC1_Init+0x1b0>)
 800415e:	2208      	movs	r2, #8
 8004160:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004162:	4b56      	ldr	r3, [pc, #344]	; (80042bc <MX_ADC1_Init+0x1b0>)
 8004164:	2200      	movs	r2, #0
 8004166:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004168:	4b54      	ldr	r3, [pc, #336]	; (80042bc <MX_ADC1_Init+0x1b0>)
 800416a:	2200      	movs	r2, #0
 800416c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800416e:	4b53      	ldr	r3, [pc, #332]	; (80042bc <MX_ADC1_Init+0x1b0>)
 8004170:	2200      	movs	r2, #0
 8004172:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8004174:	4b51      	ldr	r3, [pc, #324]	; (80042bc <MX_ADC1_Init+0x1b0>)
 8004176:	2203      	movs	r2, #3
 8004178:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800417a:	4b50      	ldr	r3, [pc, #320]	; (80042bc <MX_ADC1_Init+0x1b0>)
 800417c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004180:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8004182:	4b4e      	ldr	r3, [pc, #312]	; (80042bc <MX_ADC1_Init+0x1b0>)
 8004184:	2200      	movs	r2, #0
 8004186:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8004188:	4b4c      	ldr	r3, [pc, #304]	; (80042bc <MX_ADC1_Init+0x1b0>)
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004190:	484a      	ldr	r0, [pc, #296]	; (80042bc <MX_ADC1_Init+0x1b0>)
 8004192:	f002 f867 	bl	8006264 <HAL_ADC_Init>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800419c:	f000 ff84 	bl	80050a8 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80041a0:	2300      	movs	r3, #0
 80041a2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80041a4:	f107 031c 	add.w	r3, r7, #28
 80041a8:	4619      	mov	r1, r3
 80041aa:	4844      	ldr	r0, [pc, #272]	; (80042bc <MX_ADC1_Init+0x1b0>)
 80041ac:	f003 f838 	bl	8007220 <HAL_ADCEx_MultiModeConfigChannel>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80041b6:	f000 ff77 	bl	80050a8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80041ba:	4b42      	ldr	r3, [pc, #264]	; (80042c4 <MX_ADC1_Init+0x1b8>)
 80041bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80041be:	2306      	movs	r3, #6
 80041c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 80041c2:	2303      	movs	r3, #3
 80041c4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80041c6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80041ca:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80041cc:	2304      	movs	r3, #4
 80041ce:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80041d0:	2300      	movs	r3, #0
 80041d2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80041d4:	463b      	mov	r3, r7
 80041d6:	4619      	mov	r1, r3
 80041d8:	4838      	ldr	r0, [pc, #224]	; (80042bc <MX_ADC1_Init+0x1b0>)
 80041da:	f002 fac5 	bl	8006768 <HAL_ADC_ConfigChannel>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80041e4:	f000 ff60 	bl	80050a8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80041e8:	4b37      	ldr	r3, [pc, #220]	; (80042c8 <MX_ADC1_Init+0x1bc>)
 80041ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80041ec:	230c      	movs	r3, #12
 80041ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80041f0:	463b      	mov	r3, r7
 80041f2:	4619      	mov	r1, r3
 80041f4:	4831      	ldr	r0, [pc, #196]	; (80042bc <MX_ADC1_Init+0x1b0>)
 80041f6:	f002 fab7 	bl	8006768 <HAL_ADC_ConfigChannel>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8004200:	f000 ff52 	bl	80050a8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8004204:	4b31      	ldr	r3, [pc, #196]	; (80042cc <MX_ADC1_Init+0x1c0>)
 8004206:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004208:	2312      	movs	r3, #18
 800420a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800420c:	463b      	mov	r3, r7
 800420e:	4619      	mov	r1, r3
 8004210:	482a      	ldr	r0, [pc, #168]	; (80042bc <MX_ADC1_Init+0x1b0>)
 8004212:	f002 faa9 	bl	8006768 <HAL_ADC_ConfigChannel>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 800421c:	f000 ff44 	bl	80050a8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8004220:	4b2b      	ldr	r3, [pc, #172]	; (80042d0 <MX_ADC1_Init+0x1c4>)
 8004222:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8004224:	2318      	movs	r3, #24
 8004226:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004228:	463b      	mov	r3, r7
 800422a:	4619      	mov	r1, r3
 800422c:	4823      	ldr	r0, [pc, #140]	; (80042bc <MX_ADC1_Init+0x1b0>)
 800422e:	f002 fa9b 	bl	8006768 <HAL_ADC_ConfigChannel>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 8004238:	f000 ff36 	bl	80050a8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800423c:	4b25      	ldr	r3, [pc, #148]	; (80042d4 <MX_ADC1_Init+0x1c8>)
 800423e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8004240:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004244:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004246:	463b      	mov	r3, r7
 8004248:	4619      	mov	r1, r3
 800424a:	481c      	ldr	r0, [pc, #112]	; (80042bc <MX_ADC1_Init+0x1b0>)
 800424c:	f002 fa8c 	bl	8006768 <HAL_ADC_ConfigChannel>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8004256:	f000 ff27 	bl	80050a8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800425a:	4b1f      	ldr	r3, [pc, #124]	; (80042d8 <MX_ADC1_Init+0x1cc>)
 800425c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800425e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8004262:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004264:	463b      	mov	r3, r7
 8004266:	4619      	mov	r1, r3
 8004268:	4814      	ldr	r0, [pc, #80]	; (80042bc <MX_ADC1_Init+0x1b0>)
 800426a:	f002 fa7d 	bl	8006768 <HAL_ADC_ConfigChannel>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <MX_ADC1_Init+0x16c>
  {
    Error_Handler();
 8004274:	f000 ff18 	bl	80050a8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004278:	4b18      	ldr	r3, [pc, #96]	; (80042dc <MX_ADC1_Init+0x1d0>)
 800427a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800427c:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8004280:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004282:	463b      	mov	r3, r7
 8004284:	4619      	mov	r1, r3
 8004286:	480d      	ldr	r0, [pc, #52]	; (80042bc <MX_ADC1_Init+0x1b0>)
 8004288:	f002 fa6e 	bl	8006768 <HAL_ADC_ConfigChannel>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 8004292:	f000 ff09 	bl	80050a8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004296:	4b12      	ldr	r3, [pc, #72]	; (80042e0 <MX_ADC1_Init+0x1d4>)
 8004298:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800429a:	f44f 7389 	mov.w	r3, #274	; 0x112
 800429e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80042a0:	463b      	mov	r3, r7
 80042a2:	4619      	mov	r1, r3
 80042a4:	4805      	ldr	r0, [pc, #20]	; (80042bc <MX_ADC1_Init+0x1b0>)
 80042a6:	f002 fa5f 	bl	8006768 <HAL_ADC_ConfigChannel>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 80042b0:	f000 fefa 	bl	80050a8 <Error_Handler>
  }

}
 80042b4:	bf00      	nop
 80042b6:	3728      	adds	r7, #40	; 0x28
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	24023848 	.word	0x24023848
 80042c0:	40022000 	.word	0x40022000
 80042c4:	3ac04000 	.word	0x3ac04000
 80042c8:	3ef08000 	.word	0x3ef08000
 80042cc:	4b840000 	.word	0x4b840000
 80042d0:	4fb80000 	.word	0x4fb80000
 80042d4:	0c900008 	.word	0x0c900008
 80042d8:	1d500080 	.word	0x1d500080
 80042dc:	10c00010 	.word	0x10c00010
 80042e0:	21800100 	.word	0x21800100

080042e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b08a      	sub	sp, #40	; 0x28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042ec:	f107 0314 	add.w	r3, r7, #20
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	605a      	str	r2, [r3, #4]
 80042f6:	609a      	str	r2, [r3, #8]
 80042f8:	60da      	str	r2, [r3, #12]
 80042fa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a3d      	ldr	r2, [pc, #244]	; (80043f8 <HAL_ADC_MspInit+0x114>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d174      	bne.n	80043f0 <HAL_ADC_MspInit+0x10c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004306:	4b3d      	ldr	r3, [pc, #244]	; (80043fc <HAL_ADC_MspInit+0x118>)
 8004308:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800430c:	4a3b      	ldr	r2, [pc, #236]	; (80043fc <HAL_ADC_MspInit+0x118>)
 800430e:	f043 0320 	orr.w	r3, r3, #32
 8004312:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004316:	4b39      	ldr	r3, [pc, #228]	; (80043fc <HAL_ADC_MspInit+0x118>)
 8004318:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800431c:	f003 0320 	and.w	r3, r3, #32
 8004320:	613b      	str	r3, [r7, #16]
 8004322:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004324:	4b35      	ldr	r3, [pc, #212]	; (80043fc <HAL_ADC_MspInit+0x118>)
 8004326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800432a:	4a34      	ldr	r2, [pc, #208]	; (80043fc <HAL_ADC_MspInit+0x118>)
 800432c:	f043 0301 	orr.w	r3, r3, #1
 8004330:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004334:	4b31      	ldr	r3, [pc, #196]	; (80043fc <HAL_ADC_MspInit+0x118>)
 8004336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004342:	4b2e      	ldr	r3, [pc, #184]	; (80043fc <HAL_ADC_MspInit+0x118>)
 8004344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004348:	4a2c      	ldr	r2, [pc, #176]	; (80043fc <HAL_ADC_MspInit+0x118>)
 800434a:	f043 0304 	orr.w	r3, r3, #4
 800434e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004352:	4b2a      	ldr	r3, [pc, #168]	; (80043fc <HAL_ADC_MspInit+0x118>)
 8004354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	60bb      	str	r3, [r7, #8]
 800435e:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_INP3
    PA7     ------> ADC1_INP7
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8004360:	23fc      	movs	r3, #252	; 0xfc
 8004362:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004364:	2303      	movs	r3, #3
 8004366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004368:	2300      	movs	r3, #0
 800436a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800436c:	f107 0314 	add.w	r3, r7, #20
 8004370:	4619      	mov	r1, r3
 8004372:	4823      	ldr	r0, [pc, #140]	; (8004400 <HAL_ADC_MspInit+0x11c>)
 8004374:	f005 fc74 	bl	8009c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004378:	2330      	movs	r3, #48	; 0x30
 800437a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800437c:	2303      	movs	r3, #3
 800437e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004380:	2300      	movs	r3, #0
 8004382:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004384:	f107 0314 	add.w	r3, r7, #20
 8004388:	4619      	mov	r1, r3
 800438a:	481e      	ldr	r0, [pc, #120]	; (8004404 <HAL_ADC_MspInit+0x120>)
 800438c:	f005 fc68 	bl	8009c60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8004390:	4b1d      	ldr	r3, [pc, #116]	; (8004408 <HAL_ADC_MspInit+0x124>)
 8004392:	4a1e      	ldr	r2, [pc, #120]	; (800440c <HAL_ADC_MspInit+0x128>)
 8004394:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004396:	4b1c      	ldr	r3, [pc, #112]	; (8004408 <HAL_ADC_MspInit+0x124>)
 8004398:	2209      	movs	r2, #9
 800439a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800439c:	4b1a      	ldr	r3, [pc, #104]	; (8004408 <HAL_ADC_MspInit+0x124>)
 800439e:	2200      	movs	r2, #0
 80043a0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80043a2:	4b19      	ldr	r3, [pc, #100]	; (8004408 <HAL_ADC_MspInit+0x124>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80043a8:	4b17      	ldr	r3, [pc, #92]	; (8004408 <HAL_ADC_MspInit+0x124>)
 80043aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043ae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80043b0:	4b15      	ldr	r3, [pc, #84]	; (8004408 <HAL_ADC_MspInit+0x124>)
 80043b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043b6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80043b8:	4b13      	ldr	r3, [pc, #76]	; (8004408 <HAL_ADC_MspInit+0x124>)
 80043ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043be:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80043c0:	4b11      	ldr	r3, [pc, #68]	; (8004408 <HAL_ADC_MspInit+0x124>)
 80043c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043c6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80043c8:	4b0f      	ldr	r3, [pc, #60]	; (8004408 <HAL_ADC_MspInit+0x124>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043ce:	4b0e      	ldr	r3, [pc, #56]	; (8004408 <HAL_ADC_MspInit+0x124>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80043d4:	480c      	ldr	r0, [pc, #48]	; (8004408 <HAL_ADC_MspInit+0x124>)
 80043d6:	f003 f927 	bl	8007628 <HAL_DMA_Init>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 80043e0:	f000 fe62 	bl	80050a8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a08      	ldr	r2, [pc, #32]	; (8004408 <HAL_ADC_MspInit+0x124>)
 80043e8:	64da      	str	r2, [r3, #76]	; 0x4c
 80043ea:	4a07      	ldr	r2, [pc, #28]	; (8004408 <HAL_ADC_MspInit+0x124>)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80043f0:	bf00      	nop
 80043f2:	3728      	adds	r7, #40	; 0x28
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40022000 	.word	0x40022000
 80043fc:	58024400 	.word	0x58024400
 8004400:	58020000 	.word	0x58020000
 8004404:	58020800 	.word	0x58020800
 8004408:	240238ac 	.word	0x240238ac
 800440c:	40020010 	.word	0x40020010

08004410 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004416:	4b0d      	ldr	r3, [pc, #52]	; (800444c <MX_DMA_Init+0x3c>)
 8004418:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800441c:	4a0b      	ldr	r2, [pc, #44]	; (800444c <MX_DMA_Init+0x3c>)
 800441e:	f043 0301 	orr.w	r3, r3, #1
 8004422:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004426:	4b09      	ldr	r3, [pc, #36]	; (800444c <MX_DMA_Init+0x3c>)
 8004428:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	607b      	str	r3, [r7, #4]
 8004432:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8004434:	2200      	movs	r2, #0
 8004436:	2100      	movs	r1, #0
 8004438:	200b      	movs	r0, #11
 800443a:	f003 f8bc 	bl	80075b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800443e:	200b      	movs	r0, #11
 8004440:	f003 f8d3 	bl	80075ea <HAL_NVIC_EnableIRQ>

}
 8004444:	bf00      	nop
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	58024400 	.word	0x58024400

08004450 <ftoa>:
	0.0000000005,		// 9
	0.00000000005		// 10
};

char * ftoa(double f, char * buf, int precision)
{
 8004450:	b480      	push	{r7}
 8004452:	b08d      	sub	sp, #52	; 0x34
 8004454:	af00      	add	r7, sp, #0
 8004456:	ed87 0b04 	vstr	d0, [r7, #16]
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
	char * ptr = buf;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	62fb      	str	r3, [r7, #44]	; 0x2c
	char * p = ptr;
 8004462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004464:	62bb      	str	r3, [r7, #40]	; 0x28
	char * p1;
	char c;
	long intPart;

	// check precision bounds
	if (precision > MAX_PRECISION)
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2b0a      	cmp	r3, #10
 800446a:	dd01      	ble.n	8004470 <ftoa+0x20>
		precision = MAX_PRECISION;
 800446c:	230a      	movs	r3, #10
 800446e:	60bb      	str	r3, [r7, #8]

	// sign stuff
	if (f < 0)
 8004470:	ed97 7b04 	vldr	d7, [r7, #16]
 8004474:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800447c:	d50a      	bpl.n	8004494 <ftoa+0x44>
	{
		f = -f;
 800447e:	ed97 7b04 	vldr	d7, [r7, #16]
 8004482:	eeb1 7b47 	vneg.f64	d7, d7
 8004486:	ed87 7b04 	vstr	d7, [r7, #16]
		*ptr++ = '-';
 800448a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004490:	222d      	movs	r2, #45	; 0x2d
 8004492:	701a      	strb	r2, [r3, #0]
	}

	if (precision < 0)  // negative precision == automatic precision guess
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	2b00      	cmp	r3, #0
 8004498:	da49      	bge.n	800452e <ftoa+0xde>
	{
		if (f < 1.0) precision = 6;
 800449a:	ed97 7b04 	vldr	d7, [r7, #16]
 800449e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80044a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80044a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044aa:	d502      	bpl.n	80044b2 <ftoa+0x62>
 80044ac:	2306      	movs	r3, #6
 80044ae:	60bb      	str	r3, [r7, #8]
 80044b0:	e03d      	b.n	800452e <ftoa+0xde>
		else if (f < 10.0) precision = 5;
 80044b2:	ed97 7b04 	vldr	d7, [r7, #16]
 80044b6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80044ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80044be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c2:	d502      	bpl.n	80044ca <ftoa+0x7a>
 80044c4:	2305      	movs	r3, #5
 80044c6:	60bb      	str	r3, [r7, #8]
 80044c8:	e031      	b.n	800452e <ftoa+0xde>
		else if (f < 100.0) precision = 4;
 80044ca:	ed97 7b04 	vldr	d7, [r7, #16]
 80044ce:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8004668 <ftoa+0x218>
 80044d2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80044d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044da:	d502      	bpl.n	80044e2 <ftoa+0x92>
 80044dc:	2304      	movs	r3, #4
 80044de:	60bb      	str	r3, [r7, #8]
 80044e0:	e025      	b.n	800452e <ftoa+0xde>
		else if (f < 1000.0) precision = 3;
 80044e2:	ed97 7b04 	vldr	d7, [r7, #16]
 80044e6:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8004670 <ftoa+0x220>
 80044ea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80044ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044f2:	d502      	bpl.n	80044fa <ftoa+0xaa>
 80044f4:	2303      	movs	r3, #3
 80044f6:	60bb      	str	r3, [r7, #8]
 80044f8:	e019      	b.n	800452e <ftoa+0xde>
		else if (f < 10000.0) precision = 2;
 80044fa:	ed97 7b04 	vldr	d7, [r7, #16]
 80044fe:	ed9f 6b5e 	vldr	d6, [pc, #376]	; 8004678 <ftoa+0x228>
 8004502:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800450a:	d502      	bpl.n	8004512 <ftoa+0xc2>
 800450c:	2302      	movs	r3, #2
 800450e:	60bb      	str	r3, [r7, #8]
 8004510:	e00d      	b.n	800452e <ftoa+0xde>
		else if (f < 100000.0) precision = 1;
 8004512:	ed97 7b04 	vldr	d7, [r7, #16]
 8004516:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8004680 <ftoa+0x230>
 800451a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800451e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004522:	d502      	bpl.n	800452a <ftoa+0xda>
 8004524:	2301      	movs	r3, #1
 8004526:	60bb      	str	r3, [r7, #8]
 8004528:	e001      	b.n	800452e <ftoa+0xde>
		else precision = 0;
 800452a:	2300      	movs	r3, #0
 800452c:	60bb      	str	r3, [r7, #8]
	}

	// round value according the precision
	if (precision)
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00b      	beq.n	800454c <ftoa+0xfc>
		f += rounders[precision];
 8004534:	4a54      	ldr	r2, [pc, #336]	; (8004688 <ftoa+0x238>)
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	4413      	add	r3, r2
 800453c:	ed93 7b00 	vldr	d7, [r3]
 8004540:	ed97 6b04 	vldr	d6, [r7, #16]
 8004544:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004548:	ed87 7b04 	vstr	d7, [r7, #16]

	// integer part...
	intPart = f;
 800454c:	ed97 7b04 	vldr	d7, [r7, #16]
 8004550:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004554:	ee17 3a90 	vmov	r3, s15
 8004558:	627b      	str	r3, [r7, #36]	; 0x24
	f -= intPart;
 800455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455c:	ee07 3a90 	vmov	s15, r3
 8004560:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004564:	ed97 6b04 	vldr	d6, [r7, #16]
 8004568:	ee36 7b47 	vsub.f64	d7, d6, d7
 800456c:	ed87 7b04 	vstr	d7, [r7, #16]

	if (!intPart)
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	2b00      	cmp	r3, #0
 8004574:	d105      	bne.n	8004582 <ftoa+0x132>
		*ptr++ = '0';
 8004576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800457c:	2230      	movs	r2, #48	; 0x30
 800457e:	701a      	strb	r2, [r3, #0]
 8004580:	e038      	b.n	80045f4 <ftoa+0x1a4>
	else
	{
		// save start pointer
		p = ptr;
 8004582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004584:	62bb      	str	r3, [r7, #40]	; 0x28

		// convert (reverse order)
		while (intPart)
 8004586:	e01a      	b.n	80045be <ftoa+0x16e>
		{
			*p++ = '0' + intPart % 10;
 8004588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800458a:	4b40      	ldr	r3, [pc, #256]	; (800468c <ftoa+0x23c>)
 800458c:	fb83 1302 	smull	r1, r3, r3, r2
 8004590:	1099      	asrs	r1, r3, #2
 8004592:	17d3      	asrs	r3, r2, #31
 8004594:	1ac9      	subs	r1, r1, r3
 8004596:	460b      	mov	r3, r1
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	1ad1      	subs	r1, r2, r3
 80045a0:	b2ca      	uxtb	r2, r1
 80045a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a4:	1c59      	adds	r1, r3, #1
 80045a6:	62b9      	str	r1, [r7, #40]	; 0x28
 80045a8:	3230      	adds	r2, #48	; 0x30
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	4a36      	ldr	r2, [pc, #216]	; (800468c <ftoa+0x23c>)
 80045b2:	fb82 1203 	smull	r1, r2, r2, r3
 80045b6:	1092      	asrs	r2, r2, #2
 80045b8:	17db      	asrs	r3, r3, #31
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	627b      	str	r3, [r7, #36]	; 0x24
		while (intPart)
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1e1      	bne.n	8004588 <ftoa+0x138>
		}

		// save end pos
		p1 = p;
 80045c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c6:	623b      	str	r3, [r7, #32]

		// reverse result
		while (p > ptr)
 80045c8:	e00e      	b.n	80045e8 <ftoa+0x198>
		{
			c = *--p;
 80045ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045cc:	3b01      	subs	r3, #1
 80045ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80045d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	77fb      	strb	r3, [r7, #31]
			*p = *ptr;
 80045d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d8:	781a      	ldrb	r2, [r3, #0]
 80045da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045dc:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 80045de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045e4:	7ffa      	ldrb	r2, [r7, #31]
 80045e6:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 80045e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d8ec      	bhi.n	80045ca <ftoa+0x17a>
		}

		// restore end pos
		ptr = p1;
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	// decimal part
	if (precision)
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d02c      	beq.n	8004654 <ftoa+0x204>
	{
		// place decimal point
		*ptr++ = '.';
 80045fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004600:	222e      	movs	r2, #46	; 0x2e
 8004602:	701a      	strb	r2, [r3, #0]

		// convert
		while (precision--)
 8004604:	e021      	b.n	800464a <ftoa+0x1fa>
		{
			f *= 10.0;
 8004606:	ed97 7b04 	vldr	d7, [r7, #16]
 800460a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800460e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004612:	ed87 7b04 	vstr	d7, [r7, #16]
			c = f;
 8004616:	ed97 7b04 	vldr	d7, [r7, #16]
 800461a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800461e:	edc7 7a01 	vstr	s15, [r7, #4]
 8004622:	793b      	ldrb	r3, [r7, #4]
 8004624:	77fb      	strb	r3, [r7, #31]
			*ptr++ = '0' + c;
 8004626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800462c:	7ffa      	ldrb	r2, [r7, #31]
 800462e:	3230      	adds	r2, #48	; 0x30
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	701a      	strb	r2, [r3, #0]
			f -= c;
 8004634:	7ffb      	ldrb	r3, [r7, #31]
 8004636:	ee07 3a90 	vmov	s15, r3
 800463a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800463e:	ed97 6b04 	vldr	d6, [r7, #16]
 8004642:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004646:	ed87 7b04 	vstr	d7, [r7, #16]
		while (precision--)
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	1e5a      	subs	r2, r3, #1
 800464e:	60ba      	str	r2, [r7, #8]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1d8      	bne.n	8004606 <ftoa+0x1b6>
		}
	}

	// terminating zero
	*ptr = 0;
 8004654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004656:	2200      	movs	r2, #0
 8004658:	701a      	strb	r2, [r3, #0]

	return buf;
 800465a:	68fb      	ldr	r3, [r7, #12]
}
 800465c:	4618      	mov	r0, r3
 800465e:	3734      	adds	r7, #52	; 0x34
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	00000000 	.word	0x00000000
 800466c:	40590000 	.word	0x40590000
 8004670:	00000000 	.word	0x00000000
 8004674:	408f4000 	.word	0x408f4000
 8004678:	00000000 	.word	0x00000000
 800467c:	40c38800 	.word	0x40c38800
 8004680:	00000000 	.word	0x00000000
 8004684:	40f86a00 	.word	0x40f86a00
 8004688:	08019490 	.word	0x08019490
 800468c:	66666667 	.word	0x66666667

08004690 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08c      	sub	sp, #48	; 0x30
 8004694:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004696:	f107 031c 	add.w	r3, r7, #28
 800469a:	2200      	movs	r2, #0
 800469c:	601a      	str	r2, [r3, #0]
 800469e:	605a      	str	r2, [r3, #4]
 80046a0:	609a      	str	r2, [r3, #8]
 80046a2:	60da      	str	r2, [r3, #12]
 80046a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80046a6:	4b80      	ldr	r3, [pc, #512]	; (80048a8 <MX_GPIO_Init+0x218>)
 80046a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046ac:	4a7e      	ldr	r2, [pc, #504]	; (80048a8 <MX_GPIO_Init+0x218>)
 80046ae:	f043 0310 	orr.w	r3, r3, #16
 80046b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046b6:	4b7c      	ldr	r3, [pc, #496]	; (80048a8 <MX_GPIO_Init+0x218>)
 80046b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046bc:	f003 0310 	and.w	r3, r3, #16
 80046c0:	61bb      	str	r3, [r7, #24]
 80046c2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046c4:	4b78      	ldr	r3, [pc, #480]	; (80048a8 <MX_GPIO_Init+0x218>)
 80046c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046ca:	4a77      	ldr	r2, [pc, #476]	; (80048a8 <MX_GPIO_Init+0x218>)
 80046cc:	f043 0304 	orr.w	r3, r3, #4
 80046d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046d4:	4b74      	ldr	r3, [pc, #464]	; (80048a8 <MX_GPIO_Init+0x218>)
 80046d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046da:	f003 0304 	and.w	r3, r3, #4
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80046e2:	4b71      	ldr	r3, [pc, #452]	; (80048a8 <MX_GPIO_Init+0x218>)
 80046e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046e8:	4a6f      	ldr	r2, [pc, #444]	; (80048a8 <MX_GPIO_Init+0x218>)
 80046ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046f2:	4b6d      	ldr	r3, [pc, #436]	; (80048a8 <MX_GPIO_Init+0x218>)
 80046f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fc:	613b      	str	r3, [r7, #16]
 80046fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004700:	4b69      	ldr	r3, [pc, #420]	; (80048a8 <MX_GPIO_Init+0x218>)
 8004702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004706:	4a68      	ldr	r2, [pc, #416]	; (80048a8 <MX_GPIO_Init+0x218>)
 8004708:	f043 0301 	orr.w	r3, r3, #1
 800470c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004710:	4b65      	ldr	r3, [pc, #404]	; (80048a8 <MX_GPIO_Init+0x218>)
 8004712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800471e:	4b62      	ldr	r3, [pc, #392]	; (80048a8 <MX_GPIO_Init+0x218>)
 8004720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004724:	4a60      	ldr	r2, [pc, #384]	; (80048a8 <MX_GPIO_Init+0x218>)
 8004726:	f043 0302 	orr.w	r3, r3, #2
 800472a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800472e:	4b5e      	ldr	r3, [pc, #376]	; (80048a8 <MX_GPIO_Init+0x218>)
 8004730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	60bb      	str	r3, [r7, #8]
 800473a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800473c:	4b5a      	ldr	r3, [pc, #360]	; (80048a8 <MX_GPIO_Init+0x218>)
 800473e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004742:	4a59      	ldr	r2, [pc, #356]	; (80048a8 <MX_GPIO_Init+0x218>)
 8004744:	f043 0308 	orr.w	r3, r3, #8
 8004748:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800474c:	4b56      	ldr	r3, [pc, #344]	; (80048a8 <MX_GPIO_Init+0x218>)
 800474e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	607b      	str	r3, [r7, #4]
 8004758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IR_LED_GPIO_Port, IR_LED_Pin, GPIO_PIN_SET);
 800475a:	2201      	movs	r2, #1
 800475c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004760:	4852      	ldr	r0, [pc, #328]	; (80048ac <MX_GPIO_Init+0x21c>)
 8004762:	f005 fd37 	bl	800a1d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|EEPROM_WC_Pin, GPIO_PIN_SET);
 8004766:	2201      	movs	r2, #1
 8004768:	2184      	movs	r1, #132	; 0x84
 800476a:	4851      	ldr	r0, [pc, #324]	; (80048b0 <MX_GPIO_Init+0x220>)
 800476c:	f005 fd32 	bl	800a1d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8004770:	2201      	movs	r2, #1
 8004772:	2180      	movs	r1, #128	; 0x80
 8004774:	484f      	ldr	r0, [pc, #316]	; (80048b4 <MX_GPIO_Init+0x224>)
 8004776:	f005 fd2d 	bl	800a1d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDD1_GPIO_Port, LDD1_Pin, GPIO_PIN_SET);
 800477a:	2201      	movs	r2, #1
 800477c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004780:	484d      	ldr	r0, [pc, #308]	; (80048b8 <MX_GPIO_Init+0x228>)
 8004782:	f005 fd27 	bl	800a1d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IR_PIN_Pin;
 8004786:	2304      	movs	r3, #4
 8004788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800478a:	4b4c      	ldr	r3, [pc, #304]	; (80048bc <MX_GPIO_Init+0x22c>)
 800478c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800478e:	2300      	movs	r3, #0
 8004790:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IR_PIN_GPIO_Port, &GPIO_InitStruct);
 8004792:	f107 031c 	add.w	r3, r7, #28
 8004796:	4619      	mov	r1, r3
 8004798:	4846      	ldr	r0, [pc, #280]	; (80048b4 <MX_GPIO_Init+0x224>)
 800479a:	f005 fa61 	bl	8009c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ENK1_Pin|ENK2_Pin;
 800479e:	2318      	movs	r3, #24
 80047a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80047a2:	4b47      	ldr	r3, [pc, #284]	; (80048c0 <MX_GPIO_Init+0x230>)
 80047a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a6:	2300      	movs	r3, #0
 80047a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047aa:	f107 031c 	add.w	r3, r7, #28
 80047ae:	4619      	mov	r1, r3
 80047b0:	4840      	ldr	r0, [pc, #256]	; (80048b4 <MX_GPIO_Init+0x224>)
 80047b2:	f005 fa55 	bl	8009c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IR_LED_Pin;
 80047b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80047bc:	2311      	movs	r3, #17
 80047be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c0:	2300      	movs	r3, #0
 80047c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047c4:	2300      	movs	r3, #0
 80047c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IR_LED_GPIO_Port, &GPIO_InitStruct);
 80047c8:	f107 031c 	add.w	r3, r7, #28
 80047cc:	4619      	mov	r1, r3
 80047ce:	4837      	ldr	r0, [pc, #220]	; (80048ac <MX_GPIO_Init+0x21c>)
 80047d0:	f005 fa46 	bl	8009c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80047d4:	2304      	movs	r3, #4
 80047d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80047d8:	2311      	movs	r3, #17
 80047da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047dc:	2300      	movs	r3, #0
 80047de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047e0:	2300      	movs	r3, #0
 80047e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80047e4:	f107 031c 	add.w	r3, r7, #28
 80047e8:	4619      	mov	r1, r3
 80047ea:	4831      	ldr	r0, [pc, #196]	; (80048b0 <MX_GPIO_Init+0x220>)
 80047ec:	f005 fa38 	bl	8009c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80047f0:	2380      	movs	r3, #128	; 0x80
 80047f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80047f4:	2311      	movs	r3, #17
 80047f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f8:	2300      	movs	r3, #0
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047fc:	2300      	movs	r3, #0
 80047fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8004800:	f107 031c 	add.w	r3, r7, #28
 8004804:	4619      	mov	r1, r3
 8004806:	482b      	ldr	r0, [pc, #172]	; (80048b4 <MX_GPIO_Init+0x224>)
 8004808:	f005 fa2a 	bl	8009c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ENK4_Pin|ENK3_Pin;
 800480c:	23c0      	movs	r3, #192	; 0xc0
 800480e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004810:	4b2b      	ldr	r3, [pc, #172]	; (80048c0 <MX_GPIO_Init+0x230>)
 8004812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004814:	2300      	movs	r3, #0
 8004816:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004818:	f107 031c 	add.w	r3, r7, #28
 800481c:	4619      	mov	r1, r3
 800481e:	4823      	ldr	r0, [pc, #140]	; (80048ac <MX_GPIO_Init+0x21c>)
 8004820:	f005 fa1e 	bl	8009c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LDD1_Pin;
 8004824:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800482a:	2311      	movs	r3, #17
 800482c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800482e:	2300      	movs	r3, #0
 8004830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004832:	2300      	movs	r3, #0
 8004834:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LDD1_GPIO_Port, &GPIO_InitStruct);
 8004836:	f107 031c 	add.w	r3, r7, #28
 800483a:	4619      	mov	r1, r3
 800483c:	481e      	ldr	r0, [pc, #120]	; (80048b8 <MX_GPIO_Init+0x228>)
 800483e:	f005 fa0f 	bl	8009c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EEPROM_WC_Pin;
 8004842:	2380      	movs	r3, #128	; 0x80
 8004844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004846:	2301      	movs	r3, #1
 8004848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800484a:	2300      	movs	r3, #0
 800484c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800484e:	2300      	movs	r3, #0
 8004850:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(EEPROM_WC_GPIO_Port, &GPIO_InitStruct);
 8004852:	f107 031c 	add.w	r3, r7, #28
 8004856:	4619      	mov	r1, r3
 8004858:	4815      	ldr	r0, [pc, #84]	; (80048b0 <MX_GPIO_Init+0x220>)
 800485a:	f005 fa01 	bl	8009c60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 13, 0);
 800485e:	2200      	movs	r2, #0
 8004860:	210d      	movs	r1, #13
 8004862:	2008      	movs	r0, #8
 8004864:	f002 fea7 	bl	80075b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004868:	2008      	movs	r0, #8
 800486a:	f002 febe 	bl	80075ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 14, 0);
 800486e:	2200      	movs	r2, #0
 8004870:	210e      	movs	r1, #14
 8004872:	2009      	movs	r0, #9
 8004874:	f002 fe9f 	bl	80075b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8004878:	2009      	movs	r0, #9
 800487a:	f002 feb6 	bl	80075ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 14, 0);
 800487e:	2200      	movs	r2, #0
 8004880:	210e      	movs	r1, #14
 8004882:	200a      	movs	r0, #10
 8004884:	f002 fe97 	bl	80075b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004888:	200a      	movs	r0, #10
 800488a:	f002 feae 	bl	80075ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 14, 0);
 800488e:	2200      	movs	r2, #0
 8004890:	210e      	movs	r1, #14
 8004892:	2017      	movs	r0, #23
 8004894:	f002 fe8f 	bl	80075b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004898:	2017      	movs	r0, #23
 800489a:	f002 fea6 	bl	80075ea <HAL_NVIC_EnableIRQ>

}
 800489e:	bf00      	nop
 80048a0:	3730      	adds	r7, #48	; 0x30
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	58024400 	.word	0x58024400
 80048ac:	58020800 	.word	0x58020800
 80048b0:	58020400 	.word	0x58020400
 80048b4:	58021000 	.word	0x58021000
 80048b8:	58020000 	.word	0x58020000
 80048bc:	11210000 	.word	0x11210000
 80048c0:	11310000 	.word	0x11310000

080048c4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80048c8:	4b1b      	ldr	r3, [pc, #108]	; (8004938 <MX_I2C1_Init+0x74>)
 80048ca:	4a1c      	ldr	r2, [pc, #112]	; (800493c <MX_I2C1_Init+0x78>)
 80048cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 80048ce:	4b1a      	ldr	r3, [pc, #104]	; (8004938 <MX_I2C1_Init+0x74>)
 80048d0:	4a1b      	ldr	r2, [pc, #108]	; (8004940 <MX_I2C1_Init+0x7c>)
 80048d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80048d4:	4b18      	ldr	r3, [pc, #96]	; (8004938 <MX_I2C1_Init+0x74>)
 80048d6:	2200      	movs	r2, #0
 80048d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80048da:	4b17      	ldr	r3, [pc, #92]	; (8004938 <MX_I2C1_Init+0x74>)
 80048dc:	2201      	movs	r2, #1
 80048de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80048e0:	4b15      	ldr	r3, [pc, #84]	; (8004938 <MX_I2C1_Init+0x74>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80048e6:	4b14      	ldr	r3, [pc, #80]	; (8004938 <MX_I2C1_Init+0x74>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80048ec:	4b12      	ldr	r3, [pc, #72]	; (8004938 <MX_I2C1_Init+0x74>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80048f2:	4b11      	ldr	r3, [pc, #68]	; (8004938 <MX_I2C1_Init+0x74>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80048f8:	4b0f      	ldr	r3, [pc, #60]	; (8004938 <MX_I2C1_Init+0x74>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80048fe:	480e      	ldr	r0, [pc, #56]	; (8004938 <MX_I2C1_Init+0x74>)
 8004900:	f005 fcb6 	bl	800a270 <HAL_I2C_Init>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800490a:	f000 fbcd 	bl	80050a8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800490e:	2100      	movs	r1, #0
 8004910:	4809      	ldr	r0, [pc, #36]	; (8004938 <MX_I2C1_Init+0x74>)
 8004912:	f006 f9b7 	bl	800ac84 <HAL_I2CEx_ConfigAnalogFilter>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800491c:	f000 fbc4 	bl	80050a8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004920:	2100      	movs	r1, #0
 8004922:	4805      	ldr	r0, [pc, #20]	; (8004938 <MX_I2C1_Init+0x74>)
 8004924:	f006 f9f9 	bl	800ad1a <HAL_I2CEx_ConfigDigitalFilter>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800492e:	f000 fbbb 	bl	80050a8 <Error_Handler>
  }

}
 8004932:	bf00      	nop
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	24023970 	.word	0x24023970
 800493c:	40005400 	.word	0x40005400
 8004940:	00b03fdb 	.word	0x00b03fdb

08004944 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	af00      	add	r7, sp, #0

  hi2c4.Instance = I2C4;
 8004948:	4b1b      	ldr	r3, [pc, #108]	; (80049b8 <MX_I2C4_Init+0x74>)
 800494a:	4a1c      	ldr	r2, [pc, #112]	; (80049bc <MX_I2C4_Init+0x78>)
 800494c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 800494e:	4b1a      	ldr	r3, [pc, #104]	; (80049b8 <MX_I2C4_Init+0x74>)
 8004950:	4a1b      	ldr	r2, [pc, #108]	; (80049c0 <MX_I2C4_Init+0x7c>)
 8004952:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8004954:	4b18      	ldr	r3, [pc, #96]	; (80049b8 <MX_I2C4_Init+0x74>)
 8004956:	2200      	movs	r2, #0
 8004958:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800495a:	4b17      	ldr	r3, [pc, #92]	; (80049b8 <MX_I2C4_Init+0x74>)
 800495c:	2201      	movs	r2, #1
 800495e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004960:	4b15      	ldr	r3, [pc, #84]	; (80049b8 <MX_I2C4_Init+0x74>)
 8004962:	2200      	movs	r2, #0
 8004964:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8004966:	4b14      	ldr	r3, [pc, #80]	; (80049b8 <MX_I2C4_Init+0x74>)
 8004968:	2200      	movs	r2, #0
 800496a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800496c:	4b12      	ldr	r3, [pc, #72]	; (80049b8 <MX_I2C4_Init+0x74>)
 800496e:	2200      	movs	r2, #0
 8004970:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004972:	4b11      	ldr	r3, [pc, #68]	; (80049b8 <MX_I2C4_Init+0x74>)
 8004974:	2200      	movs	r2, #0
 8004976:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004978:	4b0f      	ldr	r3, [pc, #60]	; (80049b8 <MX_I2C4_Init+0x74>)
 800497a:	2200      	movs	r2, #0
 800497c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800497e:	480e      	ldr	r0, [pc, #56]	; (80049b8 <MX_I2C4_Init+0x74>)
 8004980:	f005 fc76 	bl	800a270 <HAL_I2C_Init>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800498a:	f000 fb8d 	bl	80050a8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800498e:	2100      	movs	r1, #0
 8004990:	4809      	ldr	r0, [pc, #36]	; (80049b8 <MX_I2C4_Init+0x74>)
 8004992:	f006 f977 	bl	800ac84 <HAL_I2CEx_ConfigAnalogFilter>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800499c:	f000 fb84 	bl	80050a8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80049a0:	2100      	movs	r1, #0
 80049a2:	4805      	ldr	r0, [pc, #20]	; (80049b8 <MX_I2C4_Init+0x74>)
 80049a4:	f006 f9b9 	bl	800ad1a <HAL_I2CEx_ConfigDigitalFilter>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80049ae:	f000 fb7b 	bl	80050a8 <Error_Handler>
  }

}
 80049b2:	bf00      	nop
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	24023924 	.word	0x24023924
 80049bc:	58001c00 	.word	0x58001c00
 80049c0:	307075b1 	.word	0x307075b1

080049c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b08c      	sub	sp, #48	; 0x30
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049cc:	f107 031c 	add.w	r3, r7, #28
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	605a      	str	r2, [r3, #4]
 80049d6:	609a      	str	r2, [r3, #8]
 80049d8:	60da      	str	r2, [r3, #12]
 80049da:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a35      	ldr	r2, [pc, #212]	; (8004ab8 <HAL_I2C_MspInit+0xf4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d12f      	bne.n	8004a46 <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049e6:	4b35      	ldr	r3, [pc, #212]	; (8004abc <HAL_I2C_MspInit+0xf8>)
 80049e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049ec:	4a33      	ldr	r2, [pc, #204]	; (8004abc <HAL_I2C_MspInit+0xf8>)
 80049ee:	f043 0302 	orr.w	r3, r3, #2
 80049f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80049f6:	4b31      	ldr	r3, [pc, #196]	; (8004abc <HAL_I2C_MspInit+0xf8>)
 80049f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	61bb      	str	r3, [r7, #24]
 8004a02:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004a04:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a0a:	2312      	movs	r3, #18
 8004a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a12:	2300      	movs	r3, #0
 8004a14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004a16:	2304      	movs	r3, #4
 8004a18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a1a:	f107 031c 	add.w	r3, r7, #28
 8004a1e:	4619      	mov	r1, r3
 8004a20:	4827      	ldr	r0, [pc, #156]	; (8004ac0 <HAL_I2C_MspInit+0xfc>)
 8004a22:	f005 f91d 	bl	8009c60 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004a26:	4b25      	ldr	r3, [pc, #148]	; (8004abc <HAL_I2C_MspInit+0xf8>)
 8004a28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a2c:	4a23      	ldr	r2, [pc, #140]	; (8004abc <HAL_I2C_MspInit+0xf8>)
 8004a2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a32:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004a36:	4b21      	ldr	r3, [pc, #132]	; (8004abc <HAL_I2C_MspInit+0xf8>)
 8004a38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a40:	617b      	str	r3, [r7, #20]
 8004a42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8004a44:	e033      	b.n	8004aae <HAL_I2C_MspInit+0xea>
  else if(i2cHandle->Instance==I2C4)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a1e      	ldr	r2, [pc, #120]	; (8004ac4 <HAL_I2C_MspInit+0x100>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d12e      	bne.n	8004aae <HAL_I2C_MspInit+0xea>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a50:	4b1a      	ldr	r3, [pc, #104]	; (8004abc <HAL_I2C_MspInit+0xf8>)
 8004a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a56:	4a19      	ldr	r2, [pc, #100]	; (8004abc <HAL_I2C_MspInit+0xf8>)
 8004a58:	f043 0308 	orr.w	r3, r3, #8
 8004a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a60:	4b16      	ldr	r3, [pc, #88]	; (8004abc <HAL_I2C_MspInit+0xf8>)
 8004a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a66:	f003 0308 	and.w	r3, r3, #8
 8004a6a:	613b      	str	r3, [r7, #16]
 8004a6c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004a6e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a74:	2312      	movs	r3, #18
 8004a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8004a80:	2304      	movs	r3, #4
 8004a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a84:	f107 031c 	add.w	r3, r7, #28
 8004a88:	4619      	mov	r1, r3
 8004a8a:	480f      	ldr	r0, [pc, #60]	; (8004ac8 <HAL_I2C_MspInit+0x104>)
 8004a8c:	f005 f8e8 	bl	8009c60 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8004a90:	4b0a      	ldr	r3, [pc, #40]	; (8004abc <HAL_I2C_MspInit+0xf8>)
 8004a92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a96:	4a09      	ldr	r2, [pc, #36]	; (8004abc <HAL_I2C_MspInit+0xf8>)
 8004a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a9c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004aa0:	4b06      	ldr	r3, [pc, #24]	; (8004abc <HAL_I2C_MspInit+0xf8>)
 8004aa2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	68fb      	ldr	r3, [r7, #12]
}
 8004aae:	bf00      	nop
 8004ab0:	3730      	adds	r7, #48	; 0x30
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40005400 	.word	0x40005400
 8004abc:	58024400 	.word	0x58024400
 8004ac0:	58020400 	.word	0x58020400
 8004ac4:	58001c00 	.word	0x58001c00
 8004ac8:	58020c00 	.word	0x58020c00

08004acc <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a13      	ldr	r2, [pc, #76]	; (8004b28 <HAL_I2C_MspDeInit+0x5c>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d10d      	bne.n	8004afa <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004ade:	4b13      	ldr	r3, [pc, #76]	; (8004b2c <HAL_I2C_MspDeInit+0x60>)
 8004ae0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ae4:	4a11      	ldr	r2, [pc, #68]	; (8004b2c <HAL_I2C_MspDeInit+0x60>)
 8004ae6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004aea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8004aee:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004af2:	480f      	ldr	r0, [pc, #60]	; (8004b30 <HAL_I2C_MspDeInit+0x64>)
 8004af4:	f005 fa64 	bl	8009fc0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }
} 
 8004af8:	e011      	b.n	8004b1e <HAL_I2C_MspDeInit+0x52>
  else if(i2cHandle->Instance==I2C4)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a0d      	ldr	r2, [pc, #52]	; (8004b34 <HAL_I2C_MspDeInit+0x68>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d10c      	bne.n	8004b1e <HAL_I2C_MspDeInit+0x52>
    __HAL_RCC_I2C4_CLK_DISABLE();
 8004b04:	4b09      	ldr	r3, [pc, #36]	; (8004b2c <HAL_I2C_MspDeInit+0x60>)
 8004b06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b0a:	4a08      	ldr	r2, [pc, #32]	; (8004b2c <HAL_I2C_MspDeInit+0x60>)
 8004b0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b10:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13);
 8004b14:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004b18:	4807      	ldr	r0, [pc, #28]	; (8004b38 <HAL_I2C_MspDeInit+0x6c>)
 8004b1a:	f005 fa51 	bl	8009fc0 <HAL_GPIO_DeInit>
} 
 8004b1e:	bf00      	nop
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	40005400 	.word	0x40005400
 8004b2c:	58024400 	.word	0x58024400
 8004b30:	58020400 	.word	0x58020400
 8004b34:	58001c00 	.word	0x58001c00
 8004b38:	58020c00 	.word	0x58020c00

08004b3c <EEPROM_LED_BLINK_READ>:

int LED_BLINK=1,LED_Helper=0;
int Sys_Reset=0;

void EEPROM_LED_BLINK_READ()
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
	EEPROM_READ_INT(455, &LED_BLINK);
 8004b40:	4903      	ldr	r1, [pc, #12]	; (8004b50 <EEPROM_LED_BLINK_READ+0x14>)
 8004b42:	f240 10c7 	movw	r0, #455	; 0x1c7
 8004b46:	f7fc fbf4 	bl	8001332 <EEPROM_READ_INT>
}
 8004b4a:	bf00      	nop
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	2400000c 	.word	0x2400000c

08004b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004b58:	f001 f8e6 	bl	8005d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004b5c:	f000 f83e 	bl	8004bdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004b60:	f7ff fd96 	bl	8004690 <MX_GPIO_Init>
  MX_DMA_Init();
 8004b64:	f7ff fc54 	bl	8004410 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8004b68:	f000 faa6 	bl	80050b8 <MX_SDMMC1_SD_Init>
  MX_ADC1_Init();
 8004b6c:	f7ff face 	bl	800410c <MX_ADC1_Init>
  MX_TIM15_Init();
 8004b70:	f000 fdf4 	bl	800575c <MX_TIM15_Init>
  MX_TIM4_Init();
 8004b74:	f000 fd3e 	bl	80055f4 <MX_TIM4_Init>
  MX_I2C4_Init();
 8004b78:	f7ff fee4 	bl	8004944 <MX_I2C4_Init>
  MX_USART2_UART_Init();
 8004b7c:	f000 ffcc 	bl	8005b18 <MX_USART2_UART_Init>
  MX_UART5_Init();
 8004b80:	f000 ff7e 	bl	8005a80 <MX_UART5_Init>
  MX_TIM2_Init();
 8004b84:	f000 fcea 	bl	800555c <MX_TIM2_Init>
  MX_I2C1_Init();
 8004b88:	f7ff fe9c 	bl	80048c4 <MX_I2C1_Init>
  MX_TIM5_Init();
 8004b8c:	f000 fd98 	bl	80056c0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  EEPROM_LED_BLINK_READ(); //defined in this file above
 8004b90:	f7ff ffd4 	bl	8004b3c <EEPROM_LED_BLINK_READ>
  CZUJNIKI_INIT(); //Init the sensors,reference to file "CZUJNIKI.c"
 8004b94:	f7fc fac6 	bl	8001124 <CZUJNIKI_INIT>
  Motor_PWM_Init(); //Init the PWM on Motor Drivers,reference to file "R_PID.c"
 8004b98:	f7ff f926 	bl	8003de8 <Motor_PWM_Init>
  IR_INIT(); //Init the IR detector, reference to file "IR_TSOP2236_byTeor.c"
 8004b9c:	f7ff f9b6 	bl	8003f0c <IR_INIT>
  BLE_INIT(); //Init the BLE Module, reference to file "BLE_PC_CON.c"
 8004ba0:	f7fb ff8a 	bl	8000ab8 <BLE_INIT>
  HAL_GPIO_WritePin(EEPROM_WC_GPIO_Port, EEPROM_WC_Pin, GPIO_PIN_RESET);
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	2180      	movs	r1, #128	; 0x80
 8004ba8:	480b      	ldr	r0, [pc, #44]	; (8004bd8 <main+0x84>)
 8004baa:	f005 fb13 	bl	800a1d4 <HAL_GPIO_WritePin>

		  //Sredni czas podczas wysylania danych do apki telefonu to okolo 40us jednak maxy napewno sa inne...

	 // zrob_charakterystki_siln();

	  oblicz_predkosc();
 8004bae:	f7fc fc1f 	bl	80013f0 <oblicz_predkosc>
	  mierzprzebdr();
 8004bb2:	f7fc fcef 	bl	8001594 <mierzprzebdr>

	  ProfilPredkosci();
 8004bb6:	f000 fa25 	bl	8005004 <ProfilPredkosci>

	  OBLICZ_BLAD(); //reference to file "CZUJNIKI.c"
 8004bba:	f7fc f8fb 	bl	8000db4 <OBLICZ_BLAD>
	  calculatePID(); //reference to file "R_PID.c"
 8004bbe:	f7fe feed 	bl	800399c <calculatePID>
	  Robot_Control(); //reference to file "Robot_Control.c"
 8004bc2:	f7ff f93d 	bl	8003e40 <Robot_Control>
	  DANE_DO_APLIKACJI_MOBILNEJ(); ////reference to file "Komendy_BLE.h"
 8004bc6:	f7fd fb53 	bl	8002270 <DANE_DO_APLIKACJI_MOBILNEJ>
	  LED_BLINKING(); //defined in this file below
 8004bca:	f000 fa23 	bl	8005014 <LED_BLINKING>
	  IR_READER();
 8004bce:	f7ff fa37 	bl	8004040 <IR_READER>

	 wykryj_znacznik();
 8004bd2:	f7fc fd49 	bl	8001668 <wykryj_znacznik>
	  oblicz_predkosc();
 8004bd6:	e7ea      	b.n	8004bae <main+0x5a>
 8004bd8:	58020400 	.word	0x58020400

08004bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b0cc      	sub	sp, #304	; 0x130
 8004be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004be2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004be6:	224c      	movs	r2, #76	; 0x4c
 8004be8:	2100      	movs	r1, #0
 8004bea:	4618      	mov	r0, r3
 8004bec:	f00f f9cc 	bl	8013f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004bf0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f00f f9c5 	bl	8013f88 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004bfe:	f107 0308 	add.w	r3, r7, #8
 8004c02:	4618      	mov	r0, r3
 8004c04:	23bc      	movs	r3, #188	; 0xbc
 8004c06:	461a      	mov	r2, r3
 8004c08:	2100      	movs	r1, #0
 8004c0a:	f00f f9bd 	bl	8013f88 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004c0e:	2002      	movs	r0, #2
 8004c10:	f006 f8d0 	bl	800adb4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8004c14:	1d3b      	adds	r3, r7, #4
 8004c16:	2200      	movs	r2, #0
 8004c18:	601a      	str	r2, [r3, #0]
 8004c1a:	4b63      	ldr	r3, [pc, #396]	; (8004da8 <SystemClock_Config+0x1cc>)
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	4a62      	ldr	r2, [pc, #392]	; (8004da8 <SystemClock_Config+0x1cc>)
 8004c20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c24:	6193      	str	r3, [r2, #24]
 8004c26:	4b60      	ldr	r3, [pc, #384]	; (8004da8 <SystemClock_Config+0x1cc>)
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8004c2e:	1d3b      	adds	r3, r7, #4
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	4b5e      	ldr	r3, [pc, #376]	; (8004dac <SystemClock_Config+0x1d0>)
 8004c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c36:	4a5d      	ldr	r2, [pc, #372]	; (8004dac <SystemClock_Config+0x1d0>)
 8004c38:	f043 0301 	orr.w	r3, r3, #1
 8004c3c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c3e:	4b5b      	ldr	r3, [pc, #364]	; (8004dac <SystemClock_Config+0x1d0>)
 8004c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c42:	f003 0201 	and.w	r2, r3, #1
 8004c46:	1d3b      	adds	r3, r7, #4
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	1d3b      	adds	r3, r7, #4
 8004c4c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004c4e:	bf00      	nop
 8004c50:	4b55      	ldr	r3, [pc, #340]	; (8004da8 <SystemClock_Config+0x1cc>)
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c5c:	d1f8      	bne.n	8004c50 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8004c5e:	4b54      	ldr	r3, [pc, #336]	; (8004db0 <SystemClock_Config+0x1d4>)
 8004c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c62:	f023 0303 	bic.w	r3, r3, #3
 8004c66:	4a52      	ldr	r2, [pc, #328]	; (8004db0 <SystemClock_Config+0x1d4>)
 8004c68:	f043 0302 	orr.w	r3, r3, #2
 8004c6c:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004c74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c78:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004c82:	2302      	movs	r3, #2
 8004c84:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8004c88:	2302      	movs	r3, #2
 8004c8a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 8004c8e:	2378      	movs	r3, #120	; 0x78
 8004c90:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004c94:	2302      	movs	r3, #2
 8004c96:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8004c9a:	2308      	movs	r3, #8
 8004c9c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 8;
 8004ca0:	2308      	movs	r3, #8
 8004ca2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8004ca6:	230c      	movs	r3, #12
 8004ca8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004cac:	2300      	movs	r3, #0
 8004cae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004cb8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f006 f8b3 	bl	800ae28 <HAL_RCC_OscConfig>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8004cc8:	f000 f9ee 	bl	80050a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ccc:	233f      	movs	r3, #63	; 0x3f
 8004cce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8004cde:	2308      	movs	r3, #8
 8004ce0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004ce4:	2340      	movs	r3, #64	; 0x40
 8004ce6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004cea:	2340      	movs	r3, #64	; 0x40
 8004cec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004cf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cf4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004cf8:	2340      	movs	r3, #64	; 0x40
 8004cfa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004cfe:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004d02:	2104      	movs	r1, #4
 8004d04:	4618      	mov	r0, r3
 8004d06:	f006 fc67 	bl	800b5d8 <HAL_RCC_ClockConfig>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d001      	beq.n	8004d14 <SystemClock_Config+0x138>
  {
    Error_Handler();
 8004d10:	f000 f9ca 	bl	80050a8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART5
 8004d14:	f107 0308 	add.w	r3, r7, #8
 8004d18:	4a26      	ldr	r2, [pc, #152]	; (8004db4 <SystemClock_Config+0x1d8>)
 8004d1a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_ADC
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C4;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8004d1c:	f107 0308 	add.w	r3, r7, #8
 8004d20:	2202      	movs	r2, #2
 8004d22:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 120;
 8004d24:	f107 0308 	add.w	r3, r7, #8
 8004d28:	2278      	movs	r2, #120	; 0x78
 8004d2a:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8004d2c:	f107 0308 	add.w	r3, r7, #8
 8004d30:	2208      	movs	r2, #8
 8004d32:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 8;
 8004d34:	f107 0308 	add.w	r3, r7, #8
 8004d38:	2208      	movs	r2, #8
 8004d3a:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 8;
 8004d3c:	f107 0308 	add.w	r3, r7, #8
 8004d40:	2208      	movs	r2, #8
 8004d42:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8004d44:	f107 0308 	add.w	r3, r7, #8
 8004d48:	22c0      	movs	r2, #192	; 0xc0
 8004d4a:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8004d4c:	f107 0308 	add.w	r3, r7, #8
 8004d50:	2200      	movs	r2, #0
 8004d52:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8004d54:	f107 0308 	add.w	r3, r7, #8
 8004d58:	2200      	movs	r2, #0
 8004d5a:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8004d5c:	f107 0308 	add.w	r3, r7, #8
 8004d60:	2200      	movs	r2, #0
 8004d62:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004d64:	f107 0308 	add.w	r3, r7, #8
 8004d68:	2200      	movs	r2, #0
 8004d6a:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8004d6c:	f107 0308 	add.w	r3, r7, #8
 8004d70:	2200      	movs	r2, #0
 8004d72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8004d76:	f107 0308 	add.w	r3, r7, #8
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8004d80:	f107 0308 	add.w	r3, r7, #8
 8004d84:	2200      	movs	r2, #0
 8004d86:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004d8a:	f107 0308 	add.w	r3, r7, #8
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f006 ffae 	bl	800bcf0 <HAL_RCCEx_PeriphCLKConfig>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <SystemClock_Config+0x1c2>
  {
    Error_Handler();
 8004d9a:	f000 f985 	bl	80050a8 <Error_Handler>
  }
}
 8004d9e:	bf00      	nop
 8004da0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	58024800 	.word	0x58024800
 8004dac:	58000400 	.word	0x58000400
 8004db0:	58024400 	.word	0x58024400
 8004db4:	0009001a 	.word	0x0009001a

08004db8 <P_trasaA>:


*/

void P_trasaA()
{
 8004db8:	b480      	push	{r7}
 8004dba:	af00      	add	r7, sp, #0
	if(ZMIENNA3==1) //trasa A
 8004dbc:	4b34      	ldr	r3, [pc, #208]	; (8004e90 <P_trasaA+0xd8>)
 8004dbe:	edd3 7a00 	vldr	s15, [r3]
 8004dc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dc6:	eef4 7a47 	vcmp.f32	s15, s14
 8004dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dce:	d149      	bne.n	8004e64 <P_trasaA+0xac>
	{
	if(P_DRSR>0)
 8004dd0:	4b30      	ldr	r3, [pc, #192]	; (8004e94 <P_trasaA+0xdc>)
 8004dd2:	edd3 7a00 	vldr	s15, [r3]
 8004dd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dde:	dd03      	ble.n	8004de8 <P_trasaA+0x30>
	{
		pr_pocz_silnikow=2.0;
 8004de0:	4b2d      	ldr	r3, [pc, #180]	; (8004e98 <P_trasaA+0xe0>)
 8004de2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004de6:	601a      	str	r2, [r3, #0]
	}

	if(P_DRSR>0.2)
 8004de8:	4b2a      	ldr	r3, [pc, #168]	; (8004e94 <P_trasaA+0xdc>)
 8004dea:	edd3 7a00 	vldr	s15, [r3]
 8004dee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004df2:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8004e70 <P_trasaA+0xb8>
 8004df6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dfe:	dd02      	ble.n	8004e06 <P_trasaA+0x4e>
	{
	pr_pocz_silnikow=1.7;
 8004e00:	4b25      	ldr	r3, [pc, #148]	; (8004e98 <P_trasaA+0xe0>)
 8004e02:	4a26      	ldr	r2, [pc, #152]	; (8004e9c <P_trasaA+0xe4>)
 8004e04:	601a      	str	r2, [r3, #0]
	}
	if(P_DRSR>1.1)
 8004e06:	4b23      	ldr	r3, [pc, #140]	; (8004e94 <P_trasaA+0xdc>)
 8004e08:	edd3 7a00 	vldr	s15, [r3]
 8004e0c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e10:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8004e78 <P_trasaA+0xc0>
 8004e14:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e1c:	dd02      	ble.n	8004e24 <P_trasaA+0x6c>
	{
	pr_pocz_silnikow=2.2;
 8004e1e:	4b1e      	ldr	r3, [pc, #120]	; (8004e98 <P_trasaA+0xe0>)
 8004e20:	4a1f      	ldr	r2, [pc, #124]	; (8004ea0 <P_trasaA+0xe8>)
 8004e22:	601a      	str	r2, [r3, #0]
	}
	if(P_DRSR>2.3)
 8004e24:	4b1b      	ldr	r3, [pc, #108]	; (8004e94 <P_trasaA+0xdc>)
 8004e26:	edd3 7a00 	vldr	s15, [r3]
 8004e2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e2e:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8004e80 <P_trasaA+0xc8>
 8004e32:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e3a:	dd02      	ble.n	8004e42 <P_trasaA+0x8a>
	{
	pr_pocz_silnikow=1.7;
 8004e3c:	4b16      	ldr	r3, [pc, #88]	; (8004e98 <P_trasaA+0xe0>)
 8004e3e:	4a17      	ldr	r2, [pc, #92]	; (8004e9c <P_trasaA+0xe4>)
 8004e40:	601a      	str	r2, [r3, #0]
	}
	if(P_DRSR>3.8)
 8004e42:	4b14      	ldr	r3, [pc, #80]	; (8004e94 <P_trasaA+0xdc>)
 8004e44:	edd3 7a00 	vldr	s15, [r3]
 8004e48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e4c:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8004e88 <P_trasaA+0xd0>
 8004e50:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e58:	dc00      	bgt.n	8004e5c <P_trasaA+0xa4>
	{
	pr_pocz_silnikow=2.0;
	}
	}
}
 8004e5a:	e003      	b.n	8004e64 <P_trasaA+0xac>
	pr_pocz_silnikow=2.0;
 8004e5c:	4b0e      	ldr	r3, [pc, #56]	; (8004e98 <P_trasaA+0xe0>)
 8004e5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e62:	601a      	str	r2, [r3, #0]
}
 8004e64:	bf00      	nop
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	9999999a 	.word	0x9999999a
 8004e74:	3fc99999 	.word	0x3fc99999
 8004e78:	9999999a 	.word	0x9999999a
 8004e7c:	3ff19999 	.word	0x3ff19999
 8004e80:	66666666 	.word	0x66666666
 8004e84:	40026666 	.word	0x40026666
 8004e88:	66666666 	.word	0x66666666
 8004e8c:	400e6666 	.word	0x400e6666
 8004e90:	240002b8 	.word	0x240002b8
 8004e94:	24000258 	.word	0x24000258
 8004e98:	24000008 	.word	0x24000008
 8004e9c:	3fd9999a 	.word	0x3fd9999a
 8004ea0:	400ccccd 	.word	0x400ccccd
 8004ea4:	00000000 	.word	0x00000000

08004ea8 <P_trasaB>:
void P_trasaB()
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	af00      	add	r7, sp, #0
	//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@//
	if(ZMIENNA3==2) //trasa B
 8004eac:	4b4e      	ldr	r3, [pc, #312]	; (8004fe8 <P_trasaB+0x140>)
 8004eae:	edd3 7a00 	vldr	s15, [r3]
 8004eb2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004eb6:	eef4 7a47 	vcmp.f32	s15, s14
 8004eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ebe:	d174      	bne.n	8004faa <P_trasaB+0x102>
	{
	if(P_DRSR>0)
 8004ec0:	4b4a      	ldr	r3, [pc, #296]	; (8004fec <P_trasaB+0x144>)
 8004ec2:	edd3 7a00 	vldr	s15, [r3]
 8004ec6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ece:	dd03      	ble.n	8004ed8 <P_trasaB+0x30>
	{
		pr_pocz_silnikow=1.5;
 8004ed0:	4b47      	ldr	r3, [pc, #284]	; (8004ff0 <P_trasaB+0x148>)
 8004ed2:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8004ed6:	601a      	str	r2, [r3, #0]
	}
	if(P_DRSR>0.1)
 8004ed8:	4b44      	ldr	r3, [pc, #272]	; (8004fec <P_trasaB+0x144>)
 8004eda:	edd3 7a00 	vldr	s15, [r3]
 8004ede:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ee2:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8004fb8 <P_trasaB+0x110>
 8004ee6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eee:	dd02      	ble.n	8004ef6 <P_trasaB+0x4e>
	{
	pr_pocz_silnikow=2.5;
 8004ef0:	4b3f      	ldr	r3, [pc, #252]	; (8004ff0 <P_trasaB+0x148>)
 8004ef2:	4a40      	ldr	r2, [pc, #256]	; (8004ff4 <P_trasaB+0x14c>)
 8004ef4:	601a      	str	r2, [r3, #0]
	}

	if(P_DRSR>0.8)
 8004ef6:	4b3d      	ldr	r3, [pc, #244]	; (8004fec <P_trasaB+0x144>)
 8004ef8:	edd3 7a00 	vldr	s15, [r3]
 8004efc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004f00:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 8004fc0 <P_trasaB+0x118>
 8004f04:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f0c:	dd02      	ble.n	8004f14 <P_trasaB+0x6c>
	{
	pr_pocz_silnikow=2.2;
 8004f0e:	4b38      	ldr	r3, [pc, #224]	; (8004ff0 <P_trasaB+0x148>)
 8004f10:	4a39      	ldr	r2, [pc, #228]	; (8004ff8 <P_trasaB+0x150>)
 8004f12:	601a      	str	r2, [r3, #0]
	}
	if(P_DRSR>1)
 8004f14:	4b35      	ldr	r3, [pc, #212]	; (8004fec <P_trasaB+0x144>)
 8004f16:	edd3 7a00 	vldr	s15, [r3]
 8004f1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f26:	dd02      	ble.n	8004f2e <P_trasaB+0x86>
	{
	pr_pocz_silnikow=2.5;
 8004f28:	4b31      	ldr	r3, [pc, #196]	; (8004ff0 <P_trasaB+0x148>)
 8004f2a:	4a32      	ldr	r2, [pc, #200]	; (8004ff4 <P_trasaB+0x14c>)
 8004f2c:	601a      	str	r2, [r3, #0]
	}
	if(P_DRSR>1.3)
 8004f2e:	4b2f      	ldr	r3, [pc, #188]	; (8004fec <P_trasaB+0x144>)
 8004f30:	edd3 7a00 	vldr	s15, [r3]
 8004f34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004f38:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8004fc8 <P_trasaB+0x120>
 8004f3c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f44:	dd03      	ble.n	8004f4e <P_trasaB+0xa6>
	{
	pr_pocz_silnikow=1.5;
 8004f46:	4b2a      	ldr	r3, [pc, #168]	; (8004ff0 <P_trasaB+0x148>)
 8004f48:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8004f4c:	601a      	str	r2, [r3, #0]
	}
	if(P_DRSR>3.1)
 8004f4e:	4b27      	ldr	r3, [pc, #156]	; (8004fec <P_trasaB+0x144>)
 8004f50:	edd3 7a00 	vldr	s15, [r3]
 8004f54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004f58:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8004fd0 <P_trasaB+0x128>
 8004f5c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f64:	dd02      	ble.n	8004f6c <P_trasaB+0xc4>
	{
	pr_pocz_silnikow=2.2;
 8004f66:	4b22      	ldr	r3, [pc, #136]	; (8004ff0 <P_trasaB+0x148>)
 8004f68:	4a23      	ldr	r2, [pc, #140]	; (8004ff8 <P_trasaB+0x150>)
 8004f6a:	601a      	str	r2, [r3, #0]
	}
	if(P_DRSR>3.6)
 8004f6c:	4b1f      	ldr	r3, [pc, #124]	; (8004fec <P_trasaB+0x144>)
 8004f6e:	edd3 7a00 	vldr	s15, [r3]
 8004f72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004f76:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8004fd8 <P_trasaB+0x130>
 8004f7a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f82:	dd02      	ble.n	8004f8a <P_trasaB+0xe2>
	{
	pr_pocz_silnikow=2.3;
 8004f84:	4b1a      	ldr	r3, [pc, #104]	; (8004ff0 <P_trasaB+0x148>)
 8004f86:	4a1d      	ldr	r2, [pc, #116]	; (8004ffc <P_trasaB+0x154>)
 8004f88:	601a      	str	r2, [r3, #0]
	}
	if(P_DRSR>3.9)
 8004f8a:	4b18      	ldr	r3, [pc, #96]	; (8004fec <P_trasaB+0x144>)
 8004f8c:	edd3 7a00 	vldr	s15, [r3]
 8004f90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004f94:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8004fe0 <P_trasaB+0x138>
 8004f98:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fa0:	dc00      	bgt.n	8004fa4 <P_trasaB+0xfc>
	{
	pr_pocz_silnikow=2.4;
	}
	}
}
 8004fa2:	e002      	b.n	8004faa <P_trasaB+0x102>
	pr_pocz_silnikow=2.4;
 8004fa4:	4b12      	ldr	r3, [pc, #72]	; (8004ff0 <P_trasaB+0x148>)
 8004fa6:	4a16      	ldr	r2, [pc, #88]	; (8005000 <P_trasaB+0x158>)
 8004fa8:	601a      	str	r2, [r3, #0]
}
 8004faa:	bf00      	nop
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	f3af 8000 	nop.w
 8004fb8:	9999999a 	.word	0x9999999a
 8004fbc:	3fb99999 	.word	0x3fb99999
 8004fc0:	9999999a 	.word	0x9999999a
 8004fc4:	3fe99999 	.word	0x3fe99999
 8004fc8:	cccccccd 	.word	0xcccccccd
 8004fcc:	3ff4cccc 	.word	0x3ff4cccc
 8004fd0:	cccccccd 	.word	0xcccccccd
 8004fd4:	4008cccc 	.word	0x4008cccc
 8004fd8:	cccccccd 	.word	0xcccccccd
 8004fdc:	400ccccc 	.word	0x400ccccc
 8004fe0:	33333333 	.word	0x33333333
 8004fe4:	400f3333 	.word	0x400f3333
 8004fe8:	240002b8 	.word	0x240002b8
 8004fec:	24000258 	.word	0x24000258
 8004ff0:	24000008 	.word	0x24000008
 8004ff4:	40200000 	.word	0x40200000
 8004ff8:	400ccccd 	.word	0x400ccccd
 8004ffc:	40133333 	.word	0x40133333
 8005000:	4019999a 	.word	0x4019999a

08005004 <ProfilPredkosci>:

void ProfilPredkosci()
{
 8005004:	b580      	push	{r7, lr}
 8005006:	af00      	add	r7, sp, #0
	P_trasaA();
 8005008:	f7ff fed6 	bl	8004db8 <P_trasaA>
	P_trasaB();
 800500c:	f7ff ff4c 	bl	8004ea8 <P_trasaB>
	{
	pr_pocz_silnikow=600;
	}
	}
*/
}
 8005010:	bf00      	nop
 8005012:	bd80      	pop	{r7, pc}

08005014 <LED_BLINKING>:


void LED_BLINKING()
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
#define LED_TOGGLE_TIME 500

	if(LED_BLINK)
 8005018:	4b1d      	ldr	r3, [pc, #116]	; (8005090 <LED_BLINKING+0x7c>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d034      	beq.n	800508a <LED_BLINKING+0x76>
	{

	  aktCzas=HAL_GetTick();
 8005020:	f000 ff08 	bl	8005e34 <HAL_GetTick>
 8005024:	4603      	mov	r3, r0
 8005026:	4a1b      	ldr	r2, [pc, #108]	; (8005094 <LED_BLINKING+0x80>)
 8005028:	6013      	str	r3, [r2, #0]

	  if( zapCzas+LED_TOGGLE_TIME < aktCzas)
 800502a:	4b1b      	ldr	r3, [pc, #108]	; (8005098 <LED_BLINKING+0x84>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8005032:	4b18      	ldr	r3, [pc, #96]	; (8005094 <LED_BLINKING+0x80>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	429a      	cmp	r2, r3
 8005038:	d227      	bcs.n	800508a <LED_BLINKING+0x76>
	  {


	  if(LED_Helper)
 800503a:	4b18      	ldr	r3, [pc, #96]	; (800509c <LED_BLINKING+0x88>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00d      	beq.n	800505e <LED_BLINKING+0x4a>
		  {
			 // HAL_GPIO_WritePin(LDD1_GPIO_Port, LDD1_Pin,GPIO_PIN_SET);
					//  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_SET);
					  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,GPIO_PIN_SET);
 8005042:	2201      	movs	r2, #1
 8005044:	2104      	movs	r1, #4
 8005046:	4816      	ldr	r0, [pc, #88]	; (80050a0 <LED_BLINKING+0x8c>)
 8005048:	f005 f8c4 	bl	800a1d4 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin,GPIO_PIN_SET);
 800504c:	2201      	movs	r2, #1
 800504e:	2180      	movs	r1, #128	; 0x80
 8005050:	4814      	ldr	r0, [pc, #80]	; (80050a4 <LED_BLINKING+0x90>)
 8005052:	f005 f8bf 	bl	800a1d4 <HAL_GPIO_WritePin>
					  LED_Helper=0;
 8005056:	4b11      	ldr	r3, [pc, #68]	; (800509c <LED_BLINKING+0x88>)
 8005058:	2200      	movs	r2, #0
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	e00c      	b.n	8005078 <LED_BLINKING+0x64>

	  else
	  {
		//  HAL_GPIO_WritePin(LDD1_GPIO_Port, LDD1_Pin,GPIO_PIN_RESET);
		//  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,GPIO_PIN_RESET);
 800505e:	2200      	movs	r2, #0
 8005060:	2104      	movs	r1, #4
 8005062:	480f      	ldr	r0, [pc, #60]	; (80050a0 <LED_BLINKING+0x8c>)
 8005064:	f005 f8b6 	bl	800a1d4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin,GPIO_PIN_RESET);
 8005068:	2200      	movs	r2, #0
 800506a:	2180      	movs	r1, #128	; 0x80
 800506c:	480d      	ldr	r0, [pc, #52]	; (80050a4 <LED_BLINKING+0x90>)
 800506e:	f005 f8b1 	bl	800a1d4 <HAL_GPIO_WritePin>
		  LED_Helper=1;
 8005072:	4b0a      	ldr	r3, [pc, #40]	; (800509c <LED_BLINKING+0x88>)
 8005074:	2201      	movs	r2, #1
 8005076:	601a      	str	r2, [r3, #0]
	  }
		  zapCzas= HAL_GetTick();
 8005078:	f000 fedc 	bl	8005e34 <HAL_GetTick>
 800507c:	4603      	mov	r3, r0
 800507e:	4a06      	ldr	r2, [pc, #24]	; (8005098 <LED_BLINKING+0x84>)
 8005080:	6013      	str	r3, [r2, #0]
		  		  zapCzas=aktCzas;
 8005082:	4b04      	ldr	r3, [pc, #16]	; (8005094 <LED_BLINKING+0x80>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a04      	ldr	r2, [pc, #16]	; (8005098 <LED_BLINKING+0x84>)
 8005088:	6013      	str	r3, [r2, #0]
	  }
	}

}
 800508a:	bf00      	nop
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	2400000c 	.word	0x2400000c
 8005094:	240002f0 	.word	0x240002f0
 8005098:	240002f4 	.word	0x240002f4
 800509c:	240002f8 	.word	0x240002f8
 80050a0:	58020400 	.word	0x58020400
 80050a4:	58021000 	.word	0x58021000

080050a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80050a8:	b480      	push	{r7}
 80050aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80050ac:	bf00      	nop
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
	...

080050b8 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	af00      	add	r7, sp, #0

  hsd1.Instance = SDMMC1;
 80050bc:	4b0f      	ldr	r3, [pc, #60]	; (80050fc <MX_SDMMC1_SD_Init+0x44>)
 80050be:	4a10      	ldr	r2, [pc, #64]	; (8005100 <MX_SDMMC1_SD_Init+0x48>)
 80050c0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80050c2:	4b0e      	ldr	r3, [pc, #56]	; (80050fc <MX_SDMMC1_SD_Init+0x44>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80050c8:	4b0c      	ldr	r3, [pc, #48]	; (80050fc <MX_SDMMC1_SD_Init+0x44>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80050ce:	4b0b      	ldr	r3, [pc, #44]	; (80050fc <MX_SDMMC1_SD_Init+0x44>)
 80050d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80050d4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80050d6:	4b09      	ldr	r3, [pc, #36]	; (80050fc <MX_SDMMC1_SD_Init+0x44>)
 80050d8:	2200      	movs	r2, #0
 80050da:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80050dc:	4b07      	ldr	r3, [pc, #28]	; (80050fc <MX_SDMMC1_SD_Init+0x44>)
 80050de:	2200      	movs	r2, #0
 80050e0:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 80050e2:	4b06      	ldr	r3, [pc, #24]	; (80050fc <MX_SDMMC1_SD_Init+0x44>)
 80050e4:	2201      	movs	r2, #1
 80050e6:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80050e8:	4804      	ldr	r0, [pc, #16]	; (80050fc <MX_SDMMC1_SD_Init+0x44>)
 80050ea:	f008 fd4d 	bl	800db88 <HAL_SD_Init>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 80050f4:	f7ff ffd8 	bl	80050a8 <Error_Handler>
  }

}
 80050f8:	bf00      	nop
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	240239bc 	.word	0x240239bc
 8005100:	52007000 	.word	0x52007000

08005104 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b08a      	sub	sp, #40	; 0x28
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800510c:	f107 0314 	add.w	r3, r7, #20
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	605a      	str	r2, [r3, #4]
 8005116:	609a      	str	r2, [r3, #8]
 8005118:	60da      	str	r2, [r3, #12]
 800511a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a2a      	ldr	r2, [pc, #168]	; (80051cc <HAL_SD_MspInit+0xc8>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d14d      	bne.n	80051c2 <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8005126:	4b2a      	ldr	r3, [pc, #168]	; (80051d0 <HAL_SD_MspInit+0xcc>)
 8005128:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800512c:	4a28      	ldr	r2, [pc, #160]	; (80051d0 <HAL_SD_MspInit+0xcc>)
 800512e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005132:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8005136:	4b26      	ldr	r3, [pc, #152]	; (80051d0 <HAL_SD_MspInit+0xcc>)
 8005138:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800513c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005140:	613b      	str	r3, [r7, #16]
 8005142:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005144:	4b22      	ldr	r3, [pc, #136]	; (80051d0 <HAL_SD_MspInit+0xcc>)
 8005146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800514a:	4a21      	ldr	r2, [pc, #132]	; (80051d0 <HAL_SD_MspInit+0xcc>)
 800514c:	f043 0304 	orr.w	r3, r3, #4
 8005150:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005154:	4b1e      	ldr	r3, [pc, #120]	; (80051d0 <HAL_SD_MspInit+0xcc>)
 8005156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800515a:	f003 0304 	and.w	r3, r3, #4
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005162:	4b1b      	ldr	r3, [pc, #108]	; (80051d0 <HAL_SD_MspInit+0xcc>)
 8005164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005168:	4a19      	ldr	r2, [pc, #100]	; (80051d0 <HAL_SD_MspInit+0xcc>)
 800516a:	f043 0308 	orr.w	r3, r3, #8
 800516e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005172:	4b17      	ldr	r3, [pc, #92]	; (80051d0 <HAL_SD_MspInit+0xcc>)
 8005174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005178:	f003 0308 	and.w	r3, r3, #8
 800517c:	60bb      	str	r3, [r7, #8]
 800517e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8005180:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8005184:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005186:	2302      	movs	r3, #2
 8005188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800518a:	2300      	movs	r3, #0
 800518c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800518e:	2303      	movs	r3, #3
 8005190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8005192:	230c      	movs	r3, #12
 8005194:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005196:	f107 0314 	add.w	r3, r7, #20
 800519a:	4619      	mov	r1, r3
 800519c:	480d      	ldr	r0, [pc, #52]	; (80051d4 <HAL_SD_MspInit+0xd0>)
 800519e:	f004 fd5f 	bl	8009c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80051a2:	2304      	movs	r3, #4
 80051a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a6:	2302      	movs	r3, #2
 80051a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051aa:	2300      	movs	r3, #0
 80051ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051ae:	2303      	movs	r3, #3
 80051b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80051b2:	230c      	movs	r3, #12
 80051b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051b6:	f107 0314 	add.w	r3, r7, #20
 80051ba:	4619      	mov	r1, r3
 80051bc:	4806      	ldr	r0, [pc, #24]	; (80051d8 <HAL_SD_MspInit+0xd4>)
 80051be:	f004 fd4f 	bl	8009c60 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80051c2:	bf00      	nop
 80051c4:	3728      	adds	r7, #40	; 0x28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	52007000 	.word	0x52007000
 80051d0:	58024400 	.word	0x58024400
 80051d4:	58020800 	.word	0x58020800
 80051d8:	58020c00 	.word	0x58020c00

080051dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051e2:	4b0a      	ldr	r3, [pc, #40]	; (800520c <HAL_MspInit+0x30>)
 80051e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80051e8:	4a08      	ldr	r2, [pc, #32]	; (800520c <HAL_MspInit+0x30>)
 80051ea:	f043 0302 	orr.w	r3, r3, #2
 80051ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80051f2:	4b06      	ldr	r3, [pc, #24]	; (800520c <HAL_MspInit+0x30>)
 80051f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	607b      	str	r3, [r7, #4]
 80051fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	58024400 	.word	0x58024400

08005210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005214:	bf00      	nop
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800521e:	b480      	push	{r7}
 8005220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005222:	e7fe      	b.n	8005222 <HardFault_Handler+0x4>

08005224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005228:	e7fe      	b.n	8005228 <MemManage_Handler+0x4>

0800522a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800522a:	b480      	push	{r7}
 800522c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800522e:	e7fe      	b.n	800522e <BusFault_Handler+0x4>

08005230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005230:	b480      	push	{r7}
 8005232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005234:	e7fe      	b.n	8005234 <UsageFault_Handler+0x4>

08005236 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005236:	b480      	push	{r7}
 8005238:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800523a:	bf00      	nop
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005244:	b480      	push	{r7}
 8005246:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005248:	bf00      	nop
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005252:	b480      	push	{r7}
 8005254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005256:	bf00      	nop
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005264:	f000 fdd2 	bl	8005e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005268:	bf00      	nop
 800526a:	bd80      	pop	{r7, pc}

0800526c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	IR_IT_Dec();
 8005270:	f7fe fe58 	bl	8003f24 <IR_IT_Dec>
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005274:	2004      	movs	r0, #4
 8005276:	f004 ffe1 	bl	800a23c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800527a:	bf00      	nop
 800527c:	bd80      	pop	{r7, pc}

0800527e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005282:	2008      	movs	r0, #8
 8005284:	f004 ffda 	bl	800a23c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005288:	bf00      	nop
 800528a:	bd80      	pop	{r7, pc}

0800528c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8005290:	2010      	movs	r0, #16
 8005292:	f004 ffd3 	bl	800a23c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005296:	bf00      	nop
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80052a0:	4802      	ldr	r0, [pc, #8]	; (80052ac <DMA1_Stream0_IRQHandler+0x10>)
 80052a2:	f003 f9cb 	bl	800863c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80052a6:	bf00      	nop
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	240238ac 	.word	0x240238ac

080052b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80052b4:	2040      	movs	r0, #64	; 0x40
 80052b6:	f004 ffc1 	bl	800a23c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80052ba:	2080      	movs	r0, #128	; 0x80
 80052bc:	f004 ffbe 	bl	800a23c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80052c0:	bf00      	nop
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
t2++;
 80052c8:	4b04      	ldr	r3, [pc, #16]	; (80052dc <TIM2_IRQHandler+0x18>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3301      	adds	r3, #1
 80052ce:	4a03      	ldr	r2, [pc, #12]	; (80052dc <TIM2_IRQHandler+0x18>)
 80052d0:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80052d2:	4803      	ldr	r0, [pc, #12]	; (80052e0 <TIM2_IRQHandler+0x1c>)
 80052d4:	f009 fda4 	bl	800ee20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80052d8:	bf00      	nop
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	240002fc 	.word	0x240002fc
 80052e0:	24023afc 	.word	0x24023afc

080052e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80052e8:	4802      	ldr	r0, [pc, #8]	; (80052f4 <USART2_IRQHandler+0x10>)
 80052ea:	f00b f87f 	bl	80103ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80052ee:	bf00      	nop
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	24023bc8 	.word	0x24023bc8

080052f8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80052fc:	4802      	ldr	r0, [pc, #8]	; (8005308 <TIM5_IRQHandler+0x10>)
 80052fe:	f009 fd8f 	bl	800ee20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8005302:	bf00      	nop
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	24023abc 	.word	0x24023abc

0800530c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8005310:	4802      	ldr	r0, [pc, #8]	; (800531c <UART5_IRQHandler+0x10>)
 8005312:	f00b f86b 	bl	80103ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8005316:	bf00      	nop
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	24023b3c 	.word	0x24023b3c

08005320 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005320:	b480      	push	{r7}
 8005322:	af00      	add	r7, sp, #0
	return 1;
 8005324:	2301      	movs	r3, #1
}
 8005326:	4618      	mov	r0, r3
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <_kill>:

int _kill(int pid, int sig)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800533a:	f00e fde1 	bl	8013f00 <__errno>
 800533e:	4603      	mov	r3, r0
 8005340:	2216      	movs	r2, #22
 8005342:	601a      	str	r2, [r3, #0]
	return -1;
 8005344:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005348:	4618      	mov	r0, r3
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <_exit>:

void _exit (int status)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005358:	f04f 31ff 	mov.w	r1, #4294967295
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7ff ffe7 	bl	8005330 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005362:	e7fe      	b.n	8005362 <_exit+0x12>

08005364 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005370:	2300      	movs	r3, #0
 8005372:	617b      	str	r3, [r7, #20]
 8005374:	e00a      	b.n	800538c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005376:	f3af 8000 	nop.w
 800537a:	4601      	mov	r1, r0
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	1c5a      	adds	r2, r3, #1
 8005380:	60ba      	str	r2, [r7, #8]
 8005382:	b2ca      	uxtb	r2, r1
 8005384:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	3301      	adds	r3, #1
 800538a:	617b      	str	r3, [r7, #20]
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	429a      	cmp	r2, r3
 8005392:	dbf0      	blt.n	8005376 <_read+0x12>
	}

return len;
 8005394:	687b      	ldr	r3, [r7, #4]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3718      	adds	r7, #24
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b086      	sub	sp, #24
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	60f8      	str	r0, [r7, #12]
 80053a6:	60b9      	str	r1, [r7, #8]
 80053a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053aa:	2300      	movs	r3, #0
 80053ac:	617b      	str	r3, [r7, #20]
 80053ae:	e009      	b.n	80053c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	1c5a      	adds	r2, r3, #1
 80053b4:	60ba      	str	r2, [r7, #8]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7fb fb97 	bl	8000aec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	3301      	adds	r3, #1
 80053c2:	617b      	str	r3, [r7, #20]
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	dbf1      	blt.n	80053b0 <_write+0x12>
	}
	return len;
 80053cc:	687b      	ldr	r3, [r7, #4]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <_close>:

int _close(int file)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b083      	sub	sp, #12
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
	return -1;
 80053de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b083      	sub	sp, #12
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
 80053f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80053fe:	605a      	str	r2, [r3, #4]
	return 0;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <_isatty>:

int _isatty(int file)
{
 800540e:	b480      	push	{r7}
 8005410:	b083      	sub	sp, #12
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
	return 1;
 8005416:	2301      	movs	r3, #1
}
 8005418:	4618      	mov	r0, r3
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
	return 0;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
	...

08005440 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005448:	4b11      	ldr	r3, [pc, #68]	; (8005490 <_sbrk+0x50>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d102      	bne.n	8005456 <_sbrk+0x16>
		heap_end = &end;
 8005450:	4b0f      	ldr	r3, [pc, #60]	; (8005490 <_sbrk+0x50>)
 8005452:	4a10      	ldr	r2, [pc, #64]	; (8005494 <_sbrk+0x54>)
 8005454:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005456:	4b0e      	ldr	r3, [pc, #56]	; (8005490 <_sbrk+0x50>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800545c:	4b0c      	ldr	r3, [pc, #48]	; (8005490 <_sbrk+0x50>)
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4413      	add	r3, r2
 8005464:	466a      	mov	r2, sp
 8005466:	4293      	cmp	r3, r2
 8005468:	d907      	bls.n	800547a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800546a:	f00e fd49 	bl	8013f00 <__errno>
 800546e:	4603      	mov	r3, r0
 8005470:	220c      	movs	r2, #12
 8005472:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8005474:	f04f 33ff 	mov.w	r3, #4294967295
 8005478:	e006      	b.n	8005488 <_sbrk+0x48>
	}

	heap_end += incr;
 800547a:	4b05      	ldr	r3, [pc, #20]	; (8005490 <_sbrk+0x50>)
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4413      	add	r3, r2
 8005482:	4a03      	ldr	r2, [pc, #12]	; (8005490 <_sbrk+0x50>)
 8005484:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005486:	68fb      	ldr	r3, [r7, #12]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	24000300 	.word	0x24000300
 8005494:	24023c68 	.word	0x24023c68

08005498 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005498:	b480      	push	{r7}
 800549a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800549c:	4b29      	ldr	r3, [pc, #164]	; (8005544 <SystemInit+0xac>)
 800549e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a2:	4a28      	ldr	r2, [pc, #160]	; (8005544 <SystemInit+0xac>)
 80054a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80054ac:	4b26      	ldr	r3, [pc, #152]	; (8005548 <SystemInit+0xb0>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a25      	ldr	r2, [pc, #148]	; (8005548 <SystemInit+0xb0>)
 80054b2:	f043 0301 	orr.w	r3, r3, #1
 80054b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80054b8:	4b23      	ldr	r3, [pc, #140]	; (8005548 <SystemInit+0xb0>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80054be:	4b22      	ldr	r3, [pc, #136]	; (8005548 <SystemInit+0xb0>)
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	4921      	ldr	r1, [pc, #132]	; (8005548 <SystemInit+0xb0>)
 80054c4:	4b21      	ldr	r3, [pc, #132]	; (800554c <SystemInit+0xb4>)
 80054c6:	4013      	ands	r3, r2
 80054c8:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80054ca:	4b1f      	ldr	r3, [pc, #124]	; (8005548 <SystemInit+0xb0>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80054d0:	4b1d      	ldr	r3, [pc, #116]	; (8005548 <SystemInit+0xb0>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80054d6:	4b1c      	ldr	r3, [pc, #112]	; (8005548 <SystemInit+0xb0>)
 80054d8:	2200      	movs	r2, #0
 80054da:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80054dc:	4b1a      	ldr	r3, [pc, #104]	; (8005548 <SystemInit+0xb0>)
 80054de:	2200      	movs	r2, #0
 80054e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80054e2:	4b19      	ldr	r3, [pc, #100]	; (8005548 <SystemInit+0xb0>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80054e8:	4b17      	ldr	r3, [pc, #92]	; (8005548 <SystemInit+0xb0>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80054ee:	4b16      	ldr	r3, [pc, #88]	; (8005548 <SystemInit+0xb0>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80054f4:	4b14      	ldr	r3, [pc, #80]	; (8005548 <SystemInit+0xb0>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80054fa:	4b13      	ldr	r3, [pc, #76]	; (8005548 <SystemInit+0xb0>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8005500:	4b11      	ldr	r3, [pc, #68]	; (8005548 <SystemInit+0xb0>)
 8005502:	2200      	movs	r2, #0
 8005504:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005506:	4b10      	ldr	r3, [pc, #64]	; (8005548 <SystemInit+0xb0>)
 8005508:	2200      	movs	r2, #0
 800550a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800550c:	4b0e      	ldr	r3, [pc, #56]	; (8005548 <SystemInit+0xb0>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a0d      	ldr	r2, [pc, #52]	; (8005548 <SystemInit+0xb0>)
 8005512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005516:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005518:	4b0b      	ldr	r3, [pc, #44]	; (8005548 <SystemInit+0xb0>)
 800551a:	2200      	movs	r2, #0
 800551c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800551e:	4b0c      	ldr	r3, [pc, #48]	; (8005550 <SystemInit+0xb8>)
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	4b0c      	ldr	r3, [pc, #48]	; (8005554 <SystemInit+0xbc>)
 8005524:	4013      	ands	r3, r2
 8005526:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800552a:	d202      	bcs.n	8005532 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800552c:	4b0a      	ldr	r3, [pc, #40]	; (8005558 <SystemInit+0xc0>)
 800552e:	2201      	movs	r2, #1
 8005530:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005532:	4b04      	ldr	r3, [pc, #16]	; (8005544 <SystemInit+0xac>)
 8005534:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005538:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800553a:	bf00      	nop
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	e000ed00 	.word	0xe000ed00
 8005548:	58024400 	.word	0x58024400
 800554c:	eaf6ed7f 	.word	0xeaf6ed7f
 8005550:	5c001000 	.word	0x5c001000
 8005554:	ffff0000 	.word	0xffff0000
 8005558:	51008108 	.word	0x51008108

0800555c <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b088      	sub	sp, #32
 8005560:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005562:	f107 0310 	add.w	r3, r7, #16
 8005566:	2200      	movs	r2, #0
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	605a      	str	r2, [r3, #4]
 800556c:	609a      	str	r2, [r3, #8]
 800556e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005570:	1d3b      	adds	r3, r7, #4
 8005572:	2200      	movs	r2, #0
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	605a      	str	r2, [r3, #4]
 8005578:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800557a:	4b1d      	ldr	r3, [pc, #116]	; (80055f0 <MX_TIM2_Init+0x94>)
 800557c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005580:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240;
 8005582:	4b1b      	ldr	r3, [pc, #108]	; (80055f0 <MX_TIM2_Init+0x94>)
 8005584:	22f0      	movs	r2, #240	; 0xf0
 8005586:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005588:	4b19      	ldr	r3, [pc, #100]	; (80055f0 <MX_TIM2_Init+0x94>)
 800558a:	2200      	movs	r2, #0
 800558c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800558e:	4b18      	ldr	r3, [pc, #96]	; (80055f0 <MX_TIM2_Init+0x94>)
 8005590:	2264      	movs	r2, #100	; 0x64
 8005592:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005594:	4b16      	ldr	r3, [pc, #88]	; (80055f0 <MX_TIM2_Init+0x94>)
 8005596:	2200      	movs	r2, #0
 8005598:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800559a:	4b15      	ldr	r3, [pc, #84]	; (80055f0 <MX_TIM2_Init+0x94>)
 800559c:	2200      	movs	r2, #0
 800559e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80055a0:	4813      	ldr	r0, [pc, #76]	; (80055f0 <MX_TIM2_Init+0x94>)
 80055a2:	f009 fb63 	bl	800ec6c <HAL_TIM_Base_Init>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80055ac:	f7ff fd7c 	bl	80050a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80055b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80055b6:	f107 0310 	add.w	r3, r7, #16
 80055ba:	4619      	mov	r1, r3
 80055bc:	480c      	ldr	r0, [pc, #48]	; (80055f0 <MX_TIM2_Init+0x94>)
 80055be:	f009 fe67 	bl	800f290 <HAL_TIM_ConfigClockSource>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80055c8:	f7ff fd6e 	bl	80050a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055cc:	2300      	movs	r3, #0
 80055ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055d0:	2300      	movs	r3, #0
 80055d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80055d4:	1d3b      	adds	r3, r7, #4
 80055d6:	4619      	mov	r1, r3
 80055d8:	4805      	ldr	r0, [pc, #20]	; (80055f0 <MX_TIM2_Init+0x94>)
 80055da:	f00a fba1 	bl	800fd20 <HAL_TIMEx_MasterConfigSynchronization>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80055e4:	f7ff fd60 	bl	80050a8 <Error_Handler>
  }

}
 80055e8:	bf00      	nop
 80055ea:	3720      	adds	r7, #32
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	24023afc 	.word	0x24023afc

080055f4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b08a      	sub	sp, #40	; 0x28
 80055f8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055fa:	f107 031c 	add.w	r3, r7, #28
 80055fe:	2200      	movs	r2, #0
 8005600:	601a      	str	r2, [r3, #0]
 8005602:	605a      	str	r2, [r3, #4]
 8005604:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005606:	463b      	mov	r3, r7
 8005608:	2200      	movs	r2, #0
 800560a:	601a      	str	r2, [r3, #0]
 800560c:	605a      	str	r2, [r3, #4]
 800560e:	609a      	str	r2, [r3, #8]
 8005610:	60da      	str	r2, [r3, #12]
 8005612:	611a      	str	r2, [r3, #16]
 8005614:	615a      	str	r2, [r3, #20]
 8005616:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8005618:	4b27      	ldr	r3, [pc, #156]	; (80056b8 <MX_TIM4_Init+0xc4>)
 800561a:	4a28      	ldr	r2, [pc, #160]	; (80056bc <MX_TIM4_Init+0xc8>)
 800561c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10;
 800561e:	4b26      	ldr	r3, [pc, #152]	; (80056b8 <MX_TIM4_Init+0xc4>)
 8005620:	220a      	movs	r2, #10
 8005622:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005624:	4b24      	ldr	r3, [pc, #144]	; (80056b8 <MX_TIM4_Init+0xc4>)
 8005626:	2200      	movs	r2, #0
 8005628:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800562a:	4b23      	ldr	r3, [pc, #140]	; (80056b8 <MX_TIM4_Init+0xc4>)
 800562c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005630:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005632:	4b21      	ldr	r3, [pc, #132]	; (80056b8 <MX_TIM4_Init+0xc4>)
 8005634:	2200      	movs	r2, #0
 8005636:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005638:	4b1f      	ldr	r3, [pc, #124]	; (80056b8 <MX_TIM4_Init+0xc4>)
 800563a:	2200      	movs	r2, #0
 800563c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800563e:	481e      	ldr	r0, [pc, #120]	; (80056b8 <MX_TIM4_Init+0xc4>)
 8005640:	f009 fb6a 	bl	800ed18 <HAL_TIM_PWM_Init>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800564a:	f7ff fd2d 	bl	80050a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800564e:	2300      	movs	r3, #0
 8005650:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005652:	2300      	movs	r3, #0
 8005654:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005656:	f107 031c 	add.w	r3, r7, #28
 800565a:	4619      	mov	r1, r3
 800565c:	4816      	ldr	r0, [pc, #88]	; (80056b8 <MX_TIM4_Init+0xc4>)
 800565e:	f00a fb5f 	bl	800fd20 <HAL_TIMEx_MasterConfigSynchronization>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8005668:	f7ff fd1e 	bl	80050a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800566c:	2360      	movs	r3, #96	; 0x60
 800566e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005670:	2300      	movs	r3, #0
 8005672:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005674:	2300      	movs	r3, #0
 8005676:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005678:	2300      	movs	r3, #0
 800567a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800567c:	463b      	mov	r3, r7
 800567e:	2208      	movs	r2, #8
 8005680:	4619      	mov	r1, r3
 8005682:	480d      	ldr	r0, [pc, #52]	; (80056b8 <MX_TIM4_Init+0xc4>)
 8005684:	f009 fcec 	bl	800f060 <HAL_TIM_PWM_ConfigChannel>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800568e:	f7ff fd0b 	bl	80050a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005692:	463b      	mov	r3, r7
 8005694:	220c      	movs	r2, #12
 8005696:	4619      	mov	r1, r3
 8005698:	4807      	ldr	r0, [pc, #28]	; (80056b8 <MX_TIM4_Init+0xc4>)
 800569a:	f009 fce1 	bl	800f060 <HAL_TIM_PWM_ConfigChannel>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80056a4:	f7ff fd00 	bl	80050a8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80056a8:	4803      	ldr	r0, [pc, #12]	; (80056b8 <MX_TIM4_Init+0xc4>)
 80056aa:	f000 f985 	bl	80059b8 <HAL_TIM_MspPostInit>

}
 80056ae:	bf00      	nop
 80056b0:	3728      	adds	r7, #40	; 0x28
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	24023a3c 	.word	0x24023a3c
 80056bc:	40000800 	.word	0x40000800

080056c0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b088      	sub	sp, #32
 80056c4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80056c6:	f107 0310 	add.w	r3, r7, #16
 80056ca:	2200      	movs	r2, #0
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	605a      	str	r2, [r3, #4]
 80056d0:	609a      	str	r2, [r3, #8]
 80056d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056d4:	1d3b      	adds	r3, r7, #4
 80056d6:	2200      	movs	r2, #0
 80056d8:	601a      	str	r2, [r3, #0]
 80056da:	605a      	str	r2, [r3, #4]
 80056dc:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 80056de:	4b1d      	ldr	r3, [pc, #116]	; (8005754 <MX_TIM5_Init+0x94>)
 80056e0:	4a1d      	ldr	r2, [pc, #116]	; (8005758 <MX_TIM5_Init+0x98>)
 80056e2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 240;
 80056e4:	4b1b      	ldr	r3, [pc, #108]	; (8005754 <MX_TIM5_Init+0x94>)
 80056e6:	22f0      	movs	r2, #240	; 0xf0
 80056e8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056ea:	4b1a      	ldr	r3, [pc, #104]	; (8005754 <MX_TIM5_Init+0x94>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000;
 80056f0:	4b18      	ldr	r3, [pc, #96]	; (8005754 <MX_TIM5_Init+0x94>)
 80056f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80056f6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056f8:	4b16      	ldr	r3, [pc, #88]	; (8005754 <MX_TIM5_Init+0x94>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056fe:	4b15      	ldr	r3, [pc, #84]	; (8005754 <MX_TIM5_Init+0x94>)
 8005700:	2200      	movs	r2, #0
 8005702:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005704:	4813      	ldr	r0, [pc, #76]	; (8005754 <MX_TIM5_Init+0x94>)
 8005706:	f009 fab1 	bl	800ec6c <HAL_TIM_Base_Init>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d001      	beq.n	8005714 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8005710:	f7ff fcca 	bl	80050a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005718:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800571a:	f107 0310 	add.w	r3, r7, #16
 800571e:	4619      	mov	r1, r3
 8005720:	480c      	ldr	r0, [pc, #48]	; (8005754 <MX_TIM5_Init+0x94>)
 8005722:	f009 fdb5 	bl	800f290 <HAL_TIM_ConfigClockSource>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d001      	beq.n	8005730 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800572c:	f7ff fcbc 	bl	80050a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005730:	2300      	movs	r3, #0
 8005732:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005734:	2300      	movs	r3, #0
 8005736:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005738:	1d3b      	adds	r3, r7, #4
 800573a:	4619      	mov	r1, r3
 800573c:	4805      	ldr	r0, [pc, #20]	; (8005754 <MX_TIM5_Init+0x94>)
 800573e:	f00a faef 	bl	800fd20 <HAL_TIMEx_MasterConfigSynchronization>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8005748:	f7ff fcae 	bl	80050a8 <Error_Handler>
  }

}
 800574c:	bf00      	nop
 800574e:	3720      	adds	r7, #32
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	24023abc 	.word	0x24023abc
 8005758:	40000c00 	.word	0x40000c00

0800575c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b09a      	sub	sp, #104	; 0x68
 8005760:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005762:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005766:	2200      	movs	r2, #0
 8005768:	601a      	str	r2, [r3, #0]
 800576a:	605a      	str	r2, [r3, #4]
 800576c:	609a      	str	r2, [r3, #8]
 800576e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005770:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005774:	2200      	movs	r2, #0
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	605a      	str	r2, [r3, #4]
 800577a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800577c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005780:	2200      	movs	r2, #0
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	605a      	str	r2, [r3, #4]
 8005786:	609a      	str	r2, [r3, #8]
 8005788:	60da      	str	r2, [r3, #12]
 800578a:	611a      	str	r2, [r3, #16]
 800578c:	615a      	str	r2, [r3, #20]
 800578e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005790:	1d3b      	adds	r3, r7, #4
 8005792:	222c      	movs	r2, #44	; 0x2c
 8005794:	2100      	movs	r1, #0
 8005796:	4618      	mov	r0, r3
 8005798:	f00e fbf6 	bl	8013f88 <memset>

  htim15.Instance = TIM15;
 800579c:	4b45      	ldr	r3, [pc, #276]	; (80058b4 <MX_TIM15_Init+0x158>)
 800579e:	4a46      	ldr	r2, [pc, #280]	; (80058b8 <MX_TIM15_Init+0x15c>)
 80057a0:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 10;
 80057a2:	4b44      	ldr	r3, [pc, #272]	; (80058b4 <MX_TIM15_Init+0x158>)
 80057a4:	220a      	movs	r2, #10
 80057a6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057a8:	4b42      	ldr	r3, [pc, #264]	; (80058b4 <MX_TIM15_Init+0x158>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000;
 80057ae:	4b41      	ldr	r3, [pc, #260]	; (80058b4 <MX_TIM15_Init+0x158>)
 80057b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80057b4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057b6:	4b3f      	ldr	r3, [pc, #252]	; (80058b4 <MX_TIM15_Init+0x158>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80057bc:	4b3d      	ldr	r3, [pc, #244]	; (80058b4 <MX_TIM15_Init+0x158>)
 80057be:	2200      	movs	r2, #0
 80057c0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057c2:	4b3c      	ldr	r3, [pc, #240]	; (80058b4 <MX_TIM15_Init+0x158>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80057c8:	483a      	ldr	r0, [pc, #232]	; (80058b4 <MX_TIM15_Init+0x158>)
 80057ca:	f009 fa4f 	bl	800ec6c <HAL_TIM_Base_Init>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d001      	beq.n	80057d8 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80057d4:	f7ff fc68 	bl	80050a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057dc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80057de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80057e2:	4619      	mov	r1, r3
 80057e4:	4833      	ldr	r0, [pc, #204]	; (80058b4 <MX_TIM15_Init+0x158>)
 80057e6:	f009 fd53 	bl	800f290 <HAL_TIM_ConfigClockSource>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 80057f0:	f7ff fc5a 	bl	80050a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80057f4:	482f      	ldr	r0, [pc, #188]	; (80058b4 <MX_TIM15_Init+0x158>)
 80057f6:	f009 fa8f 	bl	800ed18 <HAL_TIM_PWM_Init>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8005800:	f7ff fc52 	bl	80050a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005804:	2300      	movs	r3, #0
 8005806:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005808:	2300      	movs	r3, #0
 800580a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800580c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005810:	4619      	mov	r1, r3
 8005812:	4828      	ldr	r0, [pc, #160]	; (80058b4 <MX_TIM15_Init+0x158>)
 8005814:	f00a fa84 	bl	800fd20 <HAL_TIMEx_MasterConfigSynchronization>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800581e:	f7ff fc43 	bl	80050a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005822:	2360      	movs	r3, #96	; 0x60
 8005824:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8005826:	2300      	movs	r3, #0
 8005828:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800582a:	2300      	movs	r3, #0
 800582c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800582e:	2300      	movs	r3, #0
 8005830:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005832:	2300      	movs	r3, #0
 8005834:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005836:	2300      	movs	r3, #0
 8005838:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800583a:	2300      	movs	r3, #0
 800583c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800583e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005842:	2200      	movs	r2, #0
 8005844:	4619      	mov	r1, r3
 8005846:	481b      	ldr	r0, [pc, #108]	; (80058b4 <MX_TIM15_Init+0x158>)
 8005848:	f009 fc0a 	bl	800f060 <HAL_TIM_PWM_ConfigChannel>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8005852:	f7ff fc29 	bl	80050a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005856:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800585a:	2204      	movs	r2, #4
 800585c:	4619      	mov	r1, r3
 800585e:	4815      	ldr	r0, [pc, #84]	; (80058b4 <MX_TIM15_Init+0x158>)
 8005860:	f009 fbfe 	bl	800f060 <HAL_TIM_PWM_ConfigChannel>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <MX_TIM15_Init+0x112>
  {
    Error_Handler();
 800586a:	f7ff fc1d 	bl	80050a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800586e:	2300      	movs	r3, #0
 8005870:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005872:	2300      	movs	r3, #0
 8005874:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005876:	2300      	movs	r3, #0
 8005878:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800587a:	2300      	movs	r3, #0
 800587c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800587e:	2300      	movs	r3, #0
 8005880:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005882:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005886:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005888:	2300      	movs	r3, #0
 800588a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800588c:	2300      	movs	r3, #0
 800588e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8005890:	1d3b      	adds	r3, r7, #4
 8005892:	4619      	mov	r1, r3
 8005894:	4807      	ldr	r0, [pc, #28]	; (80058b4 <MX_TIM15_Init+0x158>)
 8005896:	f00a facb 	bl	800fe30 <HAL_TIMEx_ConfigBreakDeadTime>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <MX_TIM15_Init+0x148>
  {
    Error_Handler();
 80058a0:	f7ff fc02 	bl	80050a8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim15);
 80058a4:	4803      	ldr	r0, [pc, #12]	; (80058b4 <MX_TIM15_Init+0x158>)
 80058a6:	f000 f887 	bl	80059b8 <HAL_TIM_MspPostInit>

}
 80058aa:	bf00      	nop
 80058ac:	3768      	adds	r7, #104	; 0x68
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	24023a7c 	.word	0x24023a7c
 80058b8:	40014000 	.word	0x40014000

080058bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058cc:	d117      	bne.n	80058fe <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80058ce:	4b26      	ldr	r3, [pc, #152]	; (8005968 <HAL_TIM_Base_MspInit+0xac>)
 80058d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80058d4:	4a24      	ldr	r2, [pc, #144]	; (8005968 <HAL_TIM_Base_MspInit+0xac>)
 80058d6:	f043 0301 	orr.w	r3, r3, #1
 80058da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80058de:	4b22      	ldr	r3, [pc, #136]	; (8005968 <HAL_TIM_Base_MspInit+0xac>)
 80058e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	617b      	str	r3, [r7, #20]
 80058ea:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 13, 0);
 80058ec:	2200      	movs	r2, #0
 80058ee:	210d      	movs	r1, #13
 80058f0:	201c      	movs	r0, #28
 80058f2:	f001 fe60 	bl	80075b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80058f6:	201c      	movs	r0, #28
 80058f8:	f001 fe77 	bl	80075ea <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80058fc:	e030      	b.n	8005960 <HAL_TIM_Base_MspInit+0xa4>
  else if(tim_baseHandle->Instance==TIM5)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a1a      	ldr	r2, [pc, #104]	; (800596c <HAL_TIM_Base_MspInit+0xb0>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d117      	bne.n	8005938 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005908:	4b17      	ldr	r3, [pc, #92]	; (8005968 <HAL_TIM_Base_MspInit+0xac>)
 800590a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800590e:	4a16      	ldr	r2, [pc, #88]	; (8005968 <HAL_TIM_Base_MspInit+0xac>)
 8005910:	f043 0308 	orr.w	r3, r3, #8
 8005914:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005918:	4b13      	ldr	r3, [pc, #76]	; (8005968 <HAL_TIM_Base_MspInit+0xac>)
 800591a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800591e:	f003 0308 	and.w	r3, r3, #8
 8005922:	613b      	str	r3, [r7, #16]
 8005924:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 15, 0);
 8005926:	2200      	movs	r2, #0
 8005928:	210f      	movs	r1, #15
 800592a:	2032      	movs	r0, #50	; 0x32
 800592c:	f001 fe43 	bl	80075b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005930:	2032      	movs	r0, #50	; 0x32
 8005932:	f001 fe5a 	bl	80075ea <HAL_NVIC_EnableIRQ>
}
 8005936:	e013      	b.n	8005960 <HAL_TIM_Base_MspInit+0xa4>
  else if(tim_baseHandle->Instance==TIM15)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a0c      	ldr	r2, [pc, #48]	; (8005970 <HAL_TIM_Base_MspInit+0xb4>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d10e      	bne.n	8005960 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005942:	4b09      	ldr	r3, [pc, #36]	; (8005968 <HAL_TIM_Base_MspInit+0xac>)
 8005944:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005948:	4a07      	ldr	r2, [pc, #28]	; (8005968 <HAL_TIM_Base_MspInit+0xac>)
 800594a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800594e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005952:	4b05      	ldr	r3, [pc, #20]	; (8005968 <HAL_TIM_Base_MspInit+0xac>)
 8005954:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800595c:	60fb      	str	r3, [r7, #12]
 800595e:	68fb      	ldr	r3, [r7, #12]
}
 8005960:	bf00      	nop
 8005962:	3718      	adds	r7, #24
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	58024400 	.word	0x58024400
 800596c:	40000c00 	.word	0x40000c00
 8005970:	40014000 	.word	0x40014000

08005974 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a0b      	ldr	r2, [pc, #44]	; (80059b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d10e      	bne.n	80059a4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005986:	4b0b      	ldr	r3, [pc, #44]	; (80059b4 <HAL_TIM_PWM_MspInit+0x40>)
 8005988:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800598c:	4a09      	ldr	r2, [pc, #36]	; (80059b4 <HAL_TIM_PWM_MspInit+0x40>)
 800598e:	f043 0304 	orr.w	r3, r3, #4
 8005992:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005996:	4b07      	ldr	r3, [pc, #28]	; (80059b4 <HAL_TIM_PWM_MspInit+0x40>)
 8005998:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800599c:	f003 0304 	and.w	r3, r3, #4
 80059a0:	60fb      	str	r3, [r7, #12]
 80059a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80059a4:	bf00      	nop
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	40000800 	.word	0x40000800
 80059b4:	58024400 	.word	0x58024400

080059b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b08a      	sub	sp, #40	; 0x28
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059c0:	f107 0314 	add.w	r3, r7, #20
 80059c4:	2200      	movs	r2, #0
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	605a      	str	r2, [r3, #4]
 80059ca:	609a      	str	r2, [r3, #8]
 80059cc:	60da      	str	r2, [r3, #12]
 80059ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a25      	ldr	r2, [pc, #148]	; (8005a6c <HAL_TIM_MspPostInit+0xb4>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d120      	bne.n	8005a1c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80059da:	4b25      	ldr	r3, [pc, #148]	; (8005a70 <HAL_TIM_MspPostInit+0xb8>)
 80059dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059e0:	4a23      	ldr	r2, [pc, #140]	; (8005a70 <HAL_TIM_MspPostInit+0xb8>)
 80059e2:	f043 0308 	orr.w	r3, r3, #8
 80059e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80059ea:	4b21      	ldr	r3, [pc, #132]	; (8005a70 <HAL_TIM_MspPostInit+0xb8>)
 80059ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059f0:	f003 0308 	and.w	r3, r3, #8
 80059f4:	613b      	str	r3, [r7, #16]
 80059f6:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration    
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80059f8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80059fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059fe:	2302      	movs	r3, #2
 8005a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a02:	2300      	movs	r3, #0
 8005a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a06:	2300      	movs	r3, #0
 8005a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005a0a:	2302      	movs	r3, #2
 8005a0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a0e:	f107 0314 	add.w	r3, r7, #20
 8005a12:	4619      	mov	r1, r3
 8005a14:	4817      	ldr	r0, [pc, #92]	; (8005a74 <HAL_TIM_MspPostInit+0xbc>)
 8005a16:	f004 f923 	bl	8009c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8005a1a:	e023      	b.n	8005a64 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM15)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a15      	ldr	r2, [pc, #84]	; (8005a78 <HAL_TIM_MspPostInit+0xc0>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d11e      	bne.n	8005a64 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005a26:	4b12      	ldr	r3, [pc, #72]	; (8005a70 <HAL_TIM_MspPostInit+0xb8>)
 8005a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a2c:	4a10      	ldr	r2, [pc, #64]	; (8005a70 <HAL_TIM_MspPostInit+0xb8>)
 8005a2e:	f043 0310 	orr.w	r3, r3, #16
 8005a32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005a36:	4b0e      	ldr	r3, [pc, #56]	; (8005a70 <HAL_TIM_MspPostInit+0xb8>)
 8005a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a3c:	f003 0310 	and.w	r3, r3, #16
 8005a40:	60fb      	str	r3, [r7, #12]
 8005a42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005a44:	2360      	movs	r3, #96	; 0x60
 8005a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a48:	2302      	movs	r3, #2
 8005a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a50:	2300      	movs	r3, #0
 8005a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8005a54:	2304      	movs	r3, #4
 8005a56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005a58:	f107 0314 	add.w	r3, r7, #20
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	4807      	ldr	r0, [pc, #28]	; (8005a7c <HAL_TIM_MspPostInit+0xc4>)
 8005a60:	f004 f8fe 	bl	8009c60 <HAL_GPIO_Init>
}
 8005a64:	bf00      	nop
 8005a66:	3728      	adds	r7, #40	; 0x28
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	40000800 	.word	0x40000800
 8005a70:	58024400 	.word	0x58024400
 8005a74:	58020c00 	.word	0x58020c00
 8005a78:	40014000 	.word	0x40014000
 8005a7c:	58021000 	.word	0x58021000

08005a80 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart2;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8005a84:	4b22      	ldr	r3, [pc, #136]	; (8005b10 <MX_UART5_Init+0x90>)
 8005a86:	4a23      	ldr	r2, [pc, #140]	; (8005b14 <MX_UART5_Init+0x94>)
 8005a88:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8005a8a:	4b21      	ldr	r3, [pc, #132]	; (8005b10 <MX_UART5_Init+0x90>)
 8005a8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005a90:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8005a92:	4b1f      	ldr	r3, [pc, #124]	; (8005b10 <MX_UART5_Init+0x90>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8005a98:	4b1d      	ldr	r3, [pc, #116]	; (8005b10 <MX_UART5_Init+0x90>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8005a9e:	4b1c      	ldr	r3, [pc, #112]	; (8005b10 <MX_UART5_Init+0x90>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8005aa4:	4b1a      	ldr	r3, [pc, #104]	; (8005b10 <MX_UART5_Init+0x90>)
 8005aa6:	220c      	movs	r2, #12
 8005aa8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005aaa:	4b19      	ldr	r3, [pc, #100]	; (8005b10 <MX_UART5_Init+0x90>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ab0:	4b17      	ldr	r3, [pc, #92]	; (8005b10 <MX_UART5_Init+0x90>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005ab6:	4b16      	ldr	r3, [pc, #88]	; (8005b10 <MX_UART5_Init+0x90>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005abc:	4b14      	ldr	r3, [pc, #80]	; (8005b10 <MX_UART5_Init+0x90>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005ac2:	4b13      	ldr	r3, [pc, #76]	; (8005b10 <MX_UART5_Init+0x90>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8005ac8:	4811      	ldr	r0, [pc, #68]	; (8005b10 <MX_UART5_Init+0x90>)
 8005aca:	f00a fa4d 	bl	800ff68 <HAL_UART_Init>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8005ad4:	f7ff fae8 	bl	80050a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005ad8:	2100      	movs	r1, #0
 8005ada:	480d      	ldr	r0, [pc, #52]	; (8005b10 <MX_UART5_Init+0x90>)
 8005adc:	f00d fc21 	bl	8013322 <HAL_UARTEx_SetTxFifoThreshold>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8005ae6:	f7ff fadf 	bl	80050a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005aea:	2100      	movs	r1, #0
 8005aec:	4808      	ldr	r0, [pc, #32]	; (8005b10 <MX_UART5_Init+0x90>)
 8005aee:	f00d fc56 	bl	801339e <HAL_UARTEx_SetRxFifoThreshold>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d001      	beq.n	8005afc <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8005af8:	f7ff fad6 	bl	80050a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8005afc:	4804      	ldr	r0, [pc, #16]	; (8005b10 <MX_UART5_Init+0x90>)
 8005afe:	f00d fbd7 	bl	80132b0 <HAL_UARTEx_DisableFifoMode>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d001      	beq.n	8005b0c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8005b08:	f7ff face 	bl	80050a8 <Error_Handler>
  }

}
 8005b0c:	bf00      	nop
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	24023b3c 	.word	0x24023b3c
 8005b14:	40005000 	.word	0x40005000

08005b18 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8005b1c:	4b22      	ldr	r3, [pc, #136]	; (8005ba8 <MX_USART2_UART_Init+0x90>)
 8005b1e:	4a23      	ldr	r2, [pc, #140]	; (8005bac <MX_USART2_UART_Init+0x94>)
 8005b20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005b22:	4b21      	ldr	r3, [pc, #132]	; (8005ba8 <MX_USART2_UART_Init+0x90>)
 8005b24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005b28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005b2a:	4b1f      	ldr	r3, [pc, #124]	; (8005ba8 <MX_USART2_UART_Init+0x90>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005b30:	4b1d      	ldr	r3, [pc, #116]	; (8005ba8 <MX_USART2_UART_Init+0x90>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005b36:	4b1c      	ldr	r3, [pc, #112]	; (8005ba8 <MX_USART2_UART_Init+0x90>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005b3c:	4b1a      	ldr	r3, [pc, #104]	; (8005ba8 <MX_USART2_UART_Init+0x90>)
 8005b3e:	220c      	movs	r2, #12
 8005b40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b42:	4b19      	ldr	r3, [pc, #100]	; (8005ba8 <MX_USART2_UART_Init+0x90>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b48:	4b17      	ldr	r3, [pc, #92]	; (8005ba8 <MX_USART2_UART_Init+0x90>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005b4e:	4b16      	ldr	r3, [pc, #88]	; (8005ba8 <MX_USART2_UART_Init+0x90>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005b54:	4b14      	ldr	r3, [pc, #80]	; (8005ba8 <MX_USART2_UART_Init+0x90>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005b5a:	4b13      	ldr	r3, [pc, #76]	; (8005ba8 <MX_USART2_UART_Init+0x90>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005b60:	4811      	ldr	r0, [pc, #68]	; (8005ba8 <MX_USART2_UART_Init+0x90>)
 8005b62:	f00a fa01 	bl	800ff68 <HAL_UART_Init>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8005b6c:	f7ff fa9c 	bl	80050a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005b70:	2100      	movs	r1, #0
 8005b72:	480d      	ldr	r0, [pc, #52]	; (8005ba8 <MX_USART2_UART_Init+0x90>)
 8005b74:	f00d fbd5 	bl	8013322 <HAL_UARTEx_SetTxFifoThreshold>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8005b7e:	f7ff fa93 	bl	80050a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005b82:	2100      	movs	r1, #0
 8005b84:	4808      	ldr	r0, [pc, #32]	; (8005ba8 <MX_USART2_UART_Init+0x90>)
 8005b86:	f00d fc0a 	bl	801339e <HAL_UARTEx_SetRxFifoThreshold>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d001      	beq.n	8005b94 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8005b90:	f7ff fa8a 	bl	80050a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005b94:	4804      	ldr	r0, [pc, #16]	; (8005ba8 <MX_USART2_UART_Init+0x90>)
 8005b96:	f00d fb8b 	bl	80132b0 <HAL_UARTEx_DisableFifoMode>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8005ba0:	f7ff fa82 	bl	80050a8 <Error_Handler>
  }

}
 8005ba4:	bf00      	nop
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	24023bc8 	.word	0x24023bc8
 8005bac:	40004400 	.word	0x40004400

08005bb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b08c      	sub	sp, #48	; 0x30
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bb8:	f107 031c 	add.w	r3, r7, #28
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	601a      	str	r2, [r3, #0]
 8005bc0:	605a      	str	r2, [r3, #4]
 8005bc2:	609a      	str	r2, [r3, #8]
 8005bc4:	60da      	str	r2, [r3, #12]
 8005bc6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a3c      	ldr	r2, [pc, #240]	; (8005cc0 <HAL_UART_MspInit+0x110>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d136      	bne.n	8005c40 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8005bd2:	4b3c      	ldr	r3, [pc, #240]	; (8005cc4 <HAL_UART_MspInit+0x114>)
 8005bd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005bd8:	4a3a      	ldr	r2, [pc, #232]	; (8005cc4 <HAL_UART_MspInit+0x114>)
 8005bda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bde:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005be2:	4b38      	ldr	r3, [pc, #224]	; (8005cc4 <HAL_UART_MspInit+0x114>)
 8005be4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005be8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bec:	61bb      	str	r3, [r7, #24]
 8005bee:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bf0:	4b34      	ldr	r3, [pc, #208]	; (8005cc4 <HAL_UART_MspInit+0x114>)
 8005bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005bf6:	4a33      	ldr	r2, [pc, #204]	; (8005cc4 <HAL_UART_MspInit+0x114>)
 8005bf8:	f043 0302 	orr.w	r3, r3, #2
 8005bfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005c00:	4b30      	ldr	r3, [pc, #192]	; (8005cc4 <HAL_UART_MspInit+0x114>)
 8005c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	617b      	str	r3, [r7, #20]
 8005c0c:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration    
    PB5     ------> UART5_RX
    PB6     ------> UART5_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005c0e:	2360      	movs	r3, #96	; 0x60
 8005c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c12:	2302      	movs	r3, #2
 8005c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c16:	2300      	movs	r3, #0
 8005c18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8005c1e:	230e      	movs	r3, #14
 8005c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c22:	f107 031c 	add.w	r3, r7, #28
 8005c26:	4619      	mov	r1, r3
 8005c28:	4827      	ldr	r0, [pc, #156]	; (8005cc8 <HAL_UART_MspInit+0x118>)
 8005c2a:	f004 f819 	bl	8009c60 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 15, 0);
 8005c2e:	2200      	movs	r2, #0
 8005c30:	210f      	movs	r1, #15
 8005c32:	2035      	movs	r0, #53	; 0x35
 8005c34:	f001 fcbf 	bl	80075b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8005c38:	2035      	movs	r0, #53	; 0x35
 8005c3a:	f001 fcd6 	bl	80075ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005c3e:	e03a      	b.n	8005cb6 <HAL_UART_MspInit+0x106>
  else if(uartHandle->Instance==USART2)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a21      	ldr	r2, [pc, #132]	; (8005ccc <HAL_UART_MspInit+0x11c>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d135      	bne.n	8005cb6 <HAL_UART_MspInit+0x106>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005c4a:	4b1e      	ldr	r3, [pc, #120]	; (8005cc4 <HAL_UART_MspInit+0x114>)
 8005c4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c50:	4a1c      	ldr	r2, [pc, #112]	; (8005cc4 <HAL_UART_MspInit+0x114>)
 8005c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005c5a:	4b1a      	ldr	r3, [pc, #104]	; (8005cc4 <HAL_UART_MspInit+0x114>)
 8005c5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c64:	613b      	str	r3, [r7, #16]
 8005c66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c68:	4b16      	ldr	r3, [pc, #88]	; (8005cc4 <HAL_UART_MspInit+0x114>)
 8005c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c6e:	4a15      	ldr	r2, [pc, #84]	; (8005cc4 <HAL_UART_MspInit+0x114>)
 8005c70:	f043 0308 	orr.w	r3, r3, #8
 8005c74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005c78:	4b12      	ldr	r3, [pc, #72]	; (8005cc4 <HAL_UART_MspInit+0x114>)
 8005c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c7e:	f003 0308 	and.w	r3, r3, #8
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005c86:	2360      	movs	r3, #96	; 0x60
 8005c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c92:	2300      	movs	r3, #0
 8005c94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005c96:	2307      	movs	r3, #7
 8005c98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005c9a:	f107 031c 	add.w	r3, r7, #28
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	480b      	ldr	r0, [pc, #44]	; (8005cd0 <HAL_UART_MspInit+0x120>)
 8005ca2:	f003 ffdd 	bl	8009c60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	2100      	movs	r1, #0
 8005caa:	2026      	movs	r0, #38	; 0x26
 8005cac:	f001 fc83 	bl	80075b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005cb0:	2026      	movs	r0, #38	; 0x26
 8005cb2:	f001 fc9a 	bl	80075ea <HAL_NVIC_EnableIRQ>
}
 8005cb6:	bf00      	nop
 8005cb8:	3730      	adds	r7, #48	; 0x30
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	40005000 	.word	0x40005000
 8005cc4:	58024400 	.word	0x58024400
 8005cc8:	58020400 	.word	0x58020400
 8005ccc:	40004400 	.word	0x40004400
 8005cd0:	58020c00 	.word	0x58020c00

08005cd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005cd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005d0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005cd8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005cda:	e003      	b.n	8005ce4 <LoopCopyDataInit>

08005cdc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005cdc:	4b0c      	ldr	r3, [pc, #48]	; (8005d10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005cde:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005ce0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005ce2:	3104      	adds	r1, #4

08005ce4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005ce4:	480b      	ldr	r0, [pc, #44]	; (8005d14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005ce6:	4b0c      	ldr	r3, [pc, #48]	; (8005d18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005ce8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005cea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005cec:	d3f6      	bcc.n	8005cdc <CopyDataInit>
  ldr  r2, =_sbss
 8005cee:	4a0b      	ldr	r2, [pc, #44]	; (8005d1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005cf0:	e002      	b.n	8005cf8 <LoopFillZerobss>

08005cf2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005cf2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005cf4:	f842 3b04 	str.w	r3, [r2], #4

08005cf8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005cf8:	4b09      	ldr	r3, [pc, #36]	; (8005d20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005cfa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005cfc:	d3f9      	bcc.n	8005cf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005cfe:	f7ff fbcb 	bl	8005498 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005d02:	f00e f903 	bl	8013f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005d06:	f7fe ff25 	bl	8004b54 <main>
  bx  lr    
 8005d0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005d0c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8005d10:	08019bc0 	.word	0x08019bc0
  ldr  r0, =_sdata
 8005d14:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8005d18:	240001f4 	.word	0x240001f4
  ldr  r2, =_sbss
 8005d1c:	240001f4 	.word	0x240001f4
  ldr  r3, = _ebss
 8005d20:	24023c68 	.word	0x24023c68

08005d24 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005d24:	e7fe      	b.n	8005d24 <ADC3_IRQHandler>
	...

08005d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d2e:	2003      	movs	r0, #3
 8005d30:	f001 fc36 	bl	80075a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005d34:	f005 fe06 	bl	800b944 <HAL_RCC_GetSysClockFreq>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	4b15      	ldr	r3, [pc, #84]	; (8005d90 <HAL_Init+0x68>)
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	0a1b      	lsrs	r3, r3, #8
 8005d40:	f003 030f 	and.w	r3, r3, #15
 8005d44:	4913      	ldr	r1, [pc, #76]	; (8005d94 <HAL_Init+0x6c>)
 8005d46:	5ccb      	ldrb	r3, [r1, r3]
 8005d48:	f003 031f 	and.w	r3, r3, #31
 8005d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d50:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d52:	4b0f      	ldr	r3, [pc, #60]	; (8005d90 <HAL_Init+0x68>)
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	f003 030f 	and.w	r3, r3, #15
 8005d5a:	4a0e      	ldr	r2, [pc, #56]	; (8005d94 <HAL_Init+0x6c>)
 8005d5c:	5cd3      	ldrb	r3, [r2, r3]
 8005d5e:	f003 031f 	and.w	r3, r3, #31
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	fa22 f303 	lsr.w	r3, r2, r3
 8005d68:	4a0b      	ldr	r2, [pc, #44]	; (8005d98 <HAL_Init+0x70>)
 8005d6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d6c:	4a0b      	ldr	r2, [pc, #44]	; (8005d9c <HAL_Init+0x74>)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005d72:	2000      	movs	r0, #0
 8005d74:	f000 f814 	bl	8005da0 <HAL_InitTick>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e002      	b.n	8005d88 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005d82:	f7ff fa2b 	bl	80051dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3708      	adds	r7, #8
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	58024400 	.word	0x58024400
 8005d94:	080194e8 	.word	0x080194e8
 8005d98:	24000014 	.word	0x24000014
 8005d9c:	24000010 	.word	0x24000010

08005da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005da8:	4b15      	ldr	r3, [pc, #84]	; (8005e00 <HAL_InitTick+0x60>)
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d101      	bne.n	8005db4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e021      	b.n	8005df8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005db4:	4b13      	ldr	r3, [pc, #76]	; (8005e04 <HAL_InitTick+0x64>)
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	4b11      	ldr	r3, [pc, #68]	; (8005e00 <HAL_InitTick+0x60>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f001 fc1f 	bl	800760e <HAL_SYSTICK_Config>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d001      	beq.n	8005dda <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e00e      	b.n	8005df8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2b0f      	cmp	r3, #15
 8005dde:	d80a      	bhi.n	8005df6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005de0:	2200      	movs	r2, #0
 8005de2:	6879      	ldr	r1, [r7, #4]
 8005de4:	f04f 30ff 	mov.w	r0, #4294967295
 8005de8:	f001 fbe5 	bl	80075b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005dec:	4a06      	ldr	r2, [pc, #24]	; (8005e08 <HAL_InitTick+0x68>)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
 8005df4:	e000      	b.n	8005df8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3708      	adds	r7, #8
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	2400001c 	.word	0x2400001c
 8005e04:	24000010 	.word	0x24000010
 8005e08:	24000018 	.word	0x24000018

08005e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005e10:	4b06      	ldr	r3, [pc, #24]	; (8005e2c <HAL_IncTick+0x20>)
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	461a      	mov	r2, r3
 8005e16:	4b06      	ldr	r3, [pc, #24]	; (8005e30 <HAL_IncTick+0x24>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	4a04      	ldr	r2, [pc, #16]	; (8005e30 <HAL_IncTick+0x24>)
 8005e1e:	6013      	str	r3, [r2, #0]
}
 8005e20:	bf00      	nop
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	2400001c 	.word	0x2400001c
 8005e30:	24023c54 	.word	0x24023c54

08005e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e34:	b480      	push	{r7}
 8005e36:	af00      	add	r7, sp, #0
  return uwTick;
 8005e38:	4b03      	ldr	r3, [pc, #12]	; (8005e48 <HAL_GetTick+0x14>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	24023c54 	.word	0x24023c54

08005e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e54:	f7ff ffee 	bl	8005e34 <HAL_GetTick>
 8005e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e64:	d005      	beq.n	8005e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e66:	4b0a      	ldr	r3, [pc, #40]	; (8005e90 <HAL_Delay+0x44>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	4413      	add	r3, r2
 8005e70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005e72:	bf00      	nop
 8005e74:	f7ff ffde 	bl	8005e34 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d8f7      	bhi.n	8005e74 <HAL_Delay+0x28>
  {
  }
}
 8005e84:	bf00      	nop
 8005e86:	bf00      	nop
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	2400001c 	.word	0x2400001c

08005e94 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005e94:	b480      	push	{r7}
 8005e96:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005e98:	4b03      	ldr	r3, [pc, #12]	; (8005ea8 <HAL_GetREVID+0x14>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	0c1b      	lsrs	r3, r3, #16
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr
 8005ea8:	5c001000 	.word	0x5c001000

08005eac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	431a      	orrs	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	609a      	str	r2, [r3, #8]
}
 8005ec6:	bf00      	nop
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b083      	sub	sp, #12
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
 8005eda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	609a      	str	r2, [r3, #8]
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005f14:	b490      	push	{r4, r7}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
 8005f20:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	3360      	adds	r3, #96	; 0x60
 8005f26:	461a      	mov	r2, r3
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4413      	add	r3, r2
 8005f2e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005f30:	6823      	ldr	r3, [r4, #0]
 8005f32:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	430b      	orrs	r3, r1
 8005f40:	4313      	orrs	r3, r2
 8005f42:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005f44:	bf00      	nop
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bc90      	pop	{r4, r7}
 8005f4c:	4770      	bx	lr

08005f4e <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b085      	sub	sp, #20
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	60f8      	str	r0, [r7, #12]
 8005f56:	60b9      	str	r1, [r7, #8]
 8005f58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	f003 031f 	and.w	r3, r3, #31
 8005f68:	6879      	ldr	r1, [r7, #4]
 8005f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f6e:	431a      	orrs	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	611a      	str	r2, [r3, #16]
}
 8005f74:	bf00      	nop
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8005f80:	b490      	push	{r4, r7}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	3360      	adds	r3, #96	; 0x60
 8005f90:	461a      	mov	r2, r3
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8005f9a:	6823      	ldr	r3, [r4, #0]
 8005f9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	6023      	str	r3, [r4, #0]
}
 8005fa6:	bf00      	nop
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bc90      	pop	{r4, r7}
 8005fae:	4770      	bx	lr

08005fb0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e000      	b.n	8005fca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005fd6:	b490      	push	{r4, r7}
 8005fd8:	b084      	sub	sp, #16
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	60f8      	str	r0, [r7, #12]
 8005fde:	60b9      	str	r1, [r7, #8]
 8005fe0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	3330      	adds	r3, #48	; 0x30
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	0a1b      	lsrs	r3, r3, #8
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	f003 030c 	and.w	r3, r3, #12
 8005ff2:	4413      	add	r3, r2
 8005ff4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005ff6:	6822      	ldr	r2, [r4, #0]
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	f003 031f 	and.w	r3, r3, #31
 8005ffe:	211f      	movs	r1, #31
 8006000:	fa01 f303 	lsl.w	r3, r1, r3
 8006004:	43db      	mvns	r3, r3
 8006006:	401a      	ands	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	0e9b      	lsrs	r3, r3, #26
 800600c:	f003 011f 	and.w	r1, r3, #31
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	f003 031f 	and.w	r3, r3, #31
 8006016:	fa01 f303 	lsl.w	r3, r1, r3
 800601a:	4313      	orrs	r3, r2
 800601c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800601e:	bf00      	nop
 8006020:	3710      	adds	r7, #16
 8006022:	46bd      	mov	sp, r7
 8006024:	bc90      	pop	{r4, r7}
 8006026:	4770      	bx	lr

08006028 <LL_ADC_REG_SetDataTransferMode>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  *         @arg @ref LL_ADC_REG_DFSDM_TRANSFER
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	f023 0203 	bic.w	r2, r3, #3
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	431a      	orrs	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	60da      	str	r2, [r3, #12]
}
 8006042:	bf00      	nop
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800604e:	b490      	push	{r4, r7}
 8006050:	b084      	sub	sp, #16
 8006052:	af00      	add	r7, sp, #0
 8006054:	60f8      	str	r0, [r7, #12]
 8006056:	60b9      	str	r1, [r7, #8]
 8006058:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	3314      	adds	r3, #20
 800605e:	461a      	mov	r2, r3
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	0e5b      	lsrs	r3, r3, #25
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	f003 0304 	and.w	r3, r3, #4
 800606a:	4413      	add	r3, r2
 800606c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800606e:	6822      	ldr	r2, [r4, #0]
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	0d1b      	lsrs	r3, r3, #20
 8006074:	f003 031f 	and.w	r3, r3, #31
 8006078:	2107      	movs	r1, #7
 800607a:	fa01 f303 	lsl.w	r3, r1, r3
 800607e:	43db      	mvns	r3, r3
 8006080:	401a      	ands	r2, r3
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	0d1b      	lsrs	r3, r3, #20
 8006086:	f003 031f 	and.w	r3, r3, #31
 800608a:	6879      	ldr	r1, [r7, #4]
 800608c:	fa01 f303 	lsl.w	r3, r1, r3
 8006090:	4313      	orrs	r3, r2
 8006092:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006094:	bf00      	nop
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bc90      	pop	{r4, r7}
 800609c:	4770      	bx	lr
	...

080060a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060b8:	43db      	mvns	r3, r3
 80060ba:	401a      	ands	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f003 0318 	and.w	r3, r3, #24
 80060c2:	4908      	ldr	r1, [pc, #32]	; (80060e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80060c4:	40d9      	lsrs	r1, r3
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	400b      	ands	r3, r1
 80060ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060ce:	431a      	orrs	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80060d6:	bf00      	nop
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	000fffff 	.word	0x000fffff

080060e8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f003 031f 	and.w	r3, r3, #31
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689a      	ldr	r2, [r3, #8]
 8006110:	4b04      	ldr	r3, [pc, #16]	; (8006124 <LL_ADC_DisableDeepPowerDown+0x20>)
 8006112:	4013      	ands	r3, r2
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	6093      	str	r3, [r2, #8]
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr
 8006124:	5fffffc0 	.word	0x5fffffc0

08006128 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800613c:	d101      	bne.n	8006142 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800613e:	2301      	movs	r3, #1
 8006140:	e000      	b.n	8006144 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	689a      	ldr	r2, [r3, #8]
 800615c:	4b05      	ldr	r3, [pc, #20]	; (8006174 <LL_ADC_EnableInternalRegulator+0x24>)
 800615e:	4013      	ands	r3, r2
 8006160:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	6fffffc0 	.word	0x6fffffc0

08006178 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006188:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800618c:	d101      	bne.n	8006192 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800618e:	2301      	movs	r3, #1
 8006190:	e000      	b.n	8006194 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	689a      	ldr	r2, [r3, #8]
 80061ac:	4b05      	ldr	r3, [pc, #20]	; (80061c4 <LL_ADC_Enable+0x24>)
 80061ae:	4013      	ands	r3, r2
 80061b0:	f043 0201 	orr.w	r2, r3, #1
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr
 80061c4:	7fffffc0 	.word	0x7fffffc0

080061c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d101      	bne.n	80061e0 <LL_ADC_IsEnabled+0x18>
 80061dc:	2301      	movs	r3, #1
 80061de:	e000      	b.n	80061e2 <LL_ADC_IsEnabled+0x1a>
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
	...

080061f0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	4b05      	ldr	r3, [pc, #20]	; (8006214 <LL_ADC_REG_StartConversion+0x24>)
 80061fe:	4013      	ands	r3, r2
 8006200:	f043 0204 	orr.w	r2, r3, #4
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	7fffffc0 	.word	0x7fffffc0

08006218 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f003 0304 	and.w	r3, r3, #4
 8006228:	2b04      	cmp	r3, #4
 800622a:	d101      	bne.n	8006230 <LL_ADC_REG_IsConversionOngoing+0x18>
 800622c:	2301      	movs	r3, #1
 800622e:	e000      	b.n	8006232 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f003 0308 	and.w	r3, r3, #8
 800624e:	2b08      	cmp	r3, #8
 8006250:	d101      	bne.n	8006256 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006252:	2301      	movs	r3, #1
 8006254:	e000      	b.n	8006258 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006264:	b590      	push	{r4, r7, lr}
 8006266:	b089      	sub	sp, #36	; 0x24
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800626c:	2300      	movs	r3, #0
 800626e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006270:	2300      	movs	r3, #0
 8006272:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e18e      	b.n	800659c <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006288:	2b00      	cmp	r3, #0
 800628a:	d109      	bne.n	80062a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f7fe f829 	bl	80042e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7ff ff3f 	bl	8006128 <LL_ADC_IsDeepPowerDownEnabled>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d004      	beq.n	80062ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7ff ff25 	bl	8006104 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4618      	mov	r0, r3
 80062c0:	f7ff ff5a 	bl	8006178 <LL_ADC_IsInternalRegulatorEnabled>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d113      	bne.n	80062f2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff ff3e 	bl	8006150 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80062d4:	4b9a      	ldr	r3, [pc, #616]	; (8006540 <HAL_ADC_Init+0x2dc>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	099b      	lsrs	r3, r3, #6
 80062da:	4a9a      	ldr	r2, [pc, #616]	; (8006544 <HAL_ADC_Init+0x2e0>)
 80062dc:	fba2 2303 	umull	r2, r3, r2, r3
 80062e0:	099b      	lsrs	r3, r3, #6
 80062e2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80062e4:	e002      	b.n	80062ec <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	3b01      	subs	r3, #1
 80062ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1f9      	bne.n	80062e6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7ff ff3e 	bl	8006178 <LL_ADC_IsInternalRegulatorEnabled>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10d      	bne.n	800631e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006306:	f043 0210 	orr.w	r2, r3, #16
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006312:	f043 0201 	orr.w	r2, r3, #1
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4618      	mov	r0, r3
 8006324:	f7ff ff78 	bl	8006218 <LL_ADC_REG_IsConversionOngoing>
 8006328:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800632e:	f003 0310 	and.w	r3, r3, #16
 8006332:	2b00      	cmp	r3, #0
 8006334:	f040 8129 	bne.w	800658a <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	2b00      	cmp	r3, #0
 800633c:	f040 8125 	bne.w	800658a <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006344:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006348:	f043 0202 	orr.w	r2, r3, #2
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4618      	mov	r0, r3
 8006356:	f7ff ff37 	bl	80061c8 <LL_ADC_IsEnabled>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d136      	bne.n	80063ce <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a78      	ldr	r2, [pc, #480]	; (8006548 <HAL_ADC_Init+0x2e4>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d004      	beq.n	8006374 <HAL_ADC_Init+0x110>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a77      	ldr	r2, [pc, #476]	; (800654c <HAL_ADC_Init+0x2e8>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d10e      	bne.n	8006392 <HAL_ADC_Init+0x12e>
 8006374:	4874      	ldr	r0, [pc, #464]	; (8006548 <HAL_ADC_Init+0x2e4>)
 8006376:	f7ff ff27 	bl	80061c8 <LL_ADC_IsEnabled>
 800637a:	4604      	mov	r4, r0
 800637c:	4873      	ldr	r0, [pc, #460]	; (800654c <HAL_ADC_Init+0x2e8>)
 800637e:	f7ff ff23 	bl	80061c8 <LL_ADC_IsEnabled>
 8006382:	4603      	mov	r3, r0
 8006384:	4323      	orrs	r3, r4
 8006386:	2b00      	cmp	r3, #0
 8006388:	bf0c      	ite	eq
 800638a:	2301      	moveq	r3, #1
 800638c:	2300      	movne	r3, #0
 800638e:	b2db      	uxtb	r3, r3
 8006390:	e008      	b.n	80063a4 <HAL_ADC_Init+0x140>
 8006392:	486f      	ldr	r0, [pc, #444]	; (8006550 <HAL_ADC_Init+0x2ec>)
 8006394:	f7ff ff18 	bl	80061c8 <LL_ADC_IsEnabled>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	bf0c      	ite	eq
 800639e:	2301      	moveq	r3, #1
 80063a0:	2300      	movne	r3, #0
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d012      	beq.n	80063ce <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a66      	ldr	r2, [pc, #408]	; (8006548 <HAL_ADC_Init+0x2e4>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d004      	beq.n	80063bc <HAL_ADC_Init+0x158>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a65      	ldr	r2, [pc, #404]	; (800654c <HAL_ADC_Init+0x2e8>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d101      	bne.n	80063c0 <HAL_ADC_Init+0x15c>
 80063bc:	4a65      	ldr	r2, [pc, #404]	; (8006554 <HAL_ADC_Init+0x2f0>)
 80063be:	e000      	b.n	80063c2 <HAL_ADC_Init+0x15e>
 80063c0:	4a65      	ldr	r2, [pc, #404]	; (8006558 <HAL_ADC_Init+0x2f4>)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	4619      	mov	r1, r3
 80063c8:	4610      	mov	r0, r2
 80063ca:	f7ff fd6f 	bl	8005eac <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80063ce:	f7ff fd61 	bl	8005e94 <HAL_GetREVID>
 80063d2:	4603      	mov	r3, r0
 80063d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80063d8:	4293      	cmp	r3, r2
 80063da:	d914      	bls.n	8006406 <HAL_ADC_Init+0x1a2>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	2b10      	cmp	r3, #16
 80063e2:	d110      	bne.n	8006406 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	7d5b      	ldrb	r3, [r3, #21]
 80063e8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80063ee:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80063f4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	7f1b      	ldrb	r3, [r3, #28]
 80063fa:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 80063fc:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80063fe:	f043 030c 	orr.w	r3, r3, #12
 8006402:	61bb      	str	r3, [r7, #24]
 8006404:	e00d      	b.n	8006422 <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	7d5b      	ldrb	r3, [r3, #21]
 800640a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006410:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8006416:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	7f1b      	ldrb	r3, [r3, #28]
 800641c:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800641e:	4313      	orrs	r3, r2
 8006420:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	7f1b      	ldrb	r3, [r3, #28]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d106      	bne.n	8006438 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	3b01      	subs	r3, #1
 8006430:	045b      	lsls	r3, r3, #17
 8006432:	69ba      	ldr	r2, [r7, #24]
 8006434:	4313      	orrs	r3, r2
 8006436:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643c:	2b00      	cmp	r3, #0
 800643e:	d009      	beq.n	8006454 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006444:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	4313      	orrs	r3, r2
 8006452:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68da      	ldr	r2, [r3, #12]
 800645a:	4b40      	ldr	r3, [pc, #256]	; (800655c <HAL_ADC_Init+0x2f8>)
 800645c:	4013      	ands	r3, r2
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	6812      	ldr	r2, [r2, #0]
 8006462:	69b9      	ldr	r1, [r7, #24]
 8006464:	430b      	orrs	r3, r1
 8006466:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4618      	mov	r0, r3
 800646e:	f7ff fed3 	bl	8006218 <LL_ADC_REG_IsConversionOngoing>
 8006472:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4618      	mov	r0, r3
 800647a:	f7ff fee0 	bl	800623e <LL_ADC_INJ_IsConversionOngoing>
 800647e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d14a      	bne.n	800651c <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d147      	bne.n	800651c <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	7d1b      	ldrb	r3, [r3, #20]
 8006490:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8006496:	4313      	orrs	r3, r2
 8006498:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68da      	ldr	r2, [r3, #12]
 80064a0:	4b2f      	ldr	r3, [pc, #188]	; (8006560 <HAL_ADC_Init+0x2fc>)
 80064a2:	4013      	ands	r3, r2
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	6812      	ldr	r2, [r2, #0]
 80064a8:	69b9      	ldr	r1, [r7, #24]
 80064aa:	430b      	orrs	r3, r1
 80064ac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d11b      	bne.n	80064f0 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064bc:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	691a      	ldr	r2, [r3, #16]
 80064c4:	4b27      	ldr	r3, [pc, #156]	; (8006564 <HAL_ADC_Init+0x300>)
 80064c6:	4013      	ands	r3, r2
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80064cc:	3a01      	subs	r2, #1
 80064ce:	0411      	lsls	r1, r2, #16
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80064d4:	4311      	orrs	r1, r2
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80064da:	4311      	orrs	r1, r2
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80064e0:	430a      	orrs	r2, r1
 80064e2:	431a      	orrs	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f042 0201 	orr.w	r2, r2, #1
 80064ec:	611a      	str	r2, [r3, #16]
 80064ee:	e007      	b.n	8006500 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	691a      	ldr	r2, [r3, #16]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f022 0201 	bic.w	r2, r2, #1
 80064fe:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	430a      	orrs	r2, r1
 8006514:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fd52 	bl	8006fc0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d121      	bne.n	8006568 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652a:	f023 010f 	bic.w	r1, r3, #15
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	1e5a      	subs	r2, r3, #1
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	631a      	str	r2, [r3, #48]	; 0x30
 800653c:	e01c      	b.n	8006578 <HAL_ADC_Init+0x314>
 800653e:	bf00      	nop
 8006540:	24000010 	.word	0x24000010
 8006544:	053e2d63 	.word	0x053e2d63
 8006548:	40022000 	.word	0x40022000
 800654c:	40022100 	.word	0x40022100
 8006550:	58026000 	.word	0x58026000
 8006554:	40022300 	.word	0x40022300
 8006558:	58026300 	.word	0x58026300
 800655c:	fff0c003 	.word	0xfff0c003
 8006560:	ffffbffc 	.word	0xffffbffc
 8006564:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f022 020f 	bic.w	r2, r2, #15
 8006576:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800657c:	f023 0303 	bic.w	r3, r3, #3
 8006580:	f043 0201 	orr.w	r2, r3, #1
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	655a      	str	r2, [r3, #84]	; 0x54
 8006588:	e007      	b.n	800659a <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800658e:	f043 0210 	orr.w	r2, r3, #16
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800659a:	7ffb      	ldrb	r3, [r7, #31]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3724      	adds	r7, #36	; 0x24
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd90      	pop	{r4, r7, pc}

080065a4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b086      	sub	sp, #24
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a55      	ldr	r2, [pc, #340]	; (800670c <HAL_ADC_Start_DMA+0x168>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d004      	beq.n	80065c4 <HAL_ADC_Start_DMA+0x20>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a54      	ldr	r2, [pc, #336]	; (8006710 <HAL_ADC_Start_DMA+0x16c>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d101      	bne.n	80065c8 <HAL_ADC_Start_DMA+0x24>
 80065c4:	4b53      	ldr	r3, [pc, #332]	; (8006714 <HAL_ADC_Start_DMA+0x170>)
 80065c6:	e000      	b.n	80065ca <HAL_ADC_Start_DMA+0x26>
 80065c8:	4b53      	ldr	r3, [pc, #332]	; (8006718 <HAL_ADC_Start_DMA+0x174>)
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7ff fd8c 	bl	80060e8 <LL_ADC_GetMultimode>
 80065d0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7ff fe1e 	bl	8006218 <LL_ADC_REG_IsConversionOngoing>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f040 808c 	bne.w	80066fc <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d101      	bne.n	80065f2 <HAL_ADC_Start_DMA+0x4e>
 80065ee:	2302      	movs	r3, #2
 80065f0:	e087      	b.n	8006702 <HAL_ADC_Start_DMA+0x15e>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d005      	beq.n	800660c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	2b05      	cmp	r3, #5
 8006604:	d002      	beq.n	800660c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	2b09      	cmp	r3, #9
 800660a:	d170      	bne.n	80066ee <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 fbbf 	bl	8006d90 <ADC_Enable>
 8006612:	4603      	mov	r3, r0
 8006614:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006616:	7dfb      	ldrb	r3, [r7, #23]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d163      	bne.n	80066e4 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006620:	4b3e      	ldr	r3, [pc, #248]	; (800671c <HAL_ADC_Start_DMA+0x178>)
 8006622:	4013      	ands	r3, r2
 8006624:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a37      	ldr	r2, [pc, #220]	; (8006710 <HAL_ADC_Start_DMA+0x16c>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d002      	beq.n	800663c <HAL_ADC_Start_DMA+0x98>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	e000      	b.n	800663e <HAL_ADC_Start_DMA+0x9a>
 800663c:	4b33      	ldr	r3, [pc, #204]	; (800670c <HAL_ADC_Start_DMA+0x168>)
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	6812      	ldr	r2, [r2, #0]
 8006642:	4293      	cmp	r3, r2
 8006644:	d002      	beq.n	800664c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d105      	bne.n	8006658 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006650:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800665c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d006      	beq.n	8006672 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006668:	f023 0206 	bic.w	r2, r3, #6
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	659a      	str	r2, [r3, #88]	; 0x58
 8006670:	e002      	b.n	8006678 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800667c:	4a28      	ldr	r2, [pc, #160]	; (8006720 <HAL_ADC_Start_DMA+0x17c>)
 800667e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006684:	4a27      	ldr	r2, [pc, #156]	; (8006724 <HAL_ADC_Start_DMA+0x180>)
 8006686:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800668c:	4a26      	ldr	r2, [pc, #152]	; (8006728 <HAL_ADC_Start_DMA+0x184>)
 800668e:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	221c      	movs	r2, #28
 8006696:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f042 0210 	orr.w	r2, r2, #16
 80066ae:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b8:	4619      	mov	r1, r3
 80066ba:	4610      	mov	r0, r2
 80066bc:	f7ff fcb4 	bl	8006028 <LL_ADC_REG_SetDataTransferMode>

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	3340      	adds	r3, #64	; 0x40
 80066ca:	4619      	mov	r1, r3
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f001 fb06 	bl	8007ce0 <HAL_DMA_Start_IT>
 80066d4:	4603      	mov	r3, r0
 80066d6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4618      	mov	r0, r3
 80066de:	f7ff fd87 	bl	80061f0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80066e2:	e00d      	b.n	8006700 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80066ec:	e008      	b.n	8006700 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80066fa:	e001      	b.n	8006700 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80066fc:	2302      	movs	r3, #2
 80066fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006700:	7dfb      	ldrb	r3, [r7, #23]
}
 8006702:	4618      	mov	r0, r3
 8006704:	3718      	adds	r7, #24
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	40022000 	.word	0x40022000
 8006710:	40022100 	.word	0x40022100
 8006714:	40022300 	.word	0x40022300
 8006718:	58026300 	.word	0x58026300
 800671c:	fffff0fe 	.word	0xfffff0fe
 8006720:	08006e99 	.word	0x08006e99
 8006724:	08006f71 	.word	0x08006f71
 8006728:	08006f8d 	.word	0x08006f8d

0800672c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006768:	b590      	push	{r4, r7, lr}
 800676a:	b099      	sub	sp, #100	; 0x64
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006772:	2300      	movs	r3, #0
 8006774:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006778:	2300      	movs	r3, #0
 800677a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	4a99      	ldr	r2, [pc, #612]	; (80069e8 <HAL_ADC_ConfigChannel+0x280>)
 8006782:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800678a:	2b01      	cmp	r3, #1
 800678c:	d101      	bne.n	8006792 <HAL_ADC_ConfigChannel+0x2a>
 800678e:	2302      	movs	r3, #2
 8006790:	e2e6      	b.n	8006d60 <HAL_ADC_ConfigChannel+0x5f8>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4618      	mov	r0, r3
 80067a0:	f7ff fd3a 	bl	8006218 <LL_ADC_REG_IsConversionOngoing>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f040 82cb 	bne.w	8006d42 <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d108      	bne.n	80067ca <HAL_ADC_ConfigChannel+0x62>
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	0e9b      	lsrs	r3, r3, #26
 80067be:	f003 031f 	and.w	r3, r3, #31
 80067c2:	2201      	movs	r2, #1
 80067c4:	fa02 f303 	lsl.w	r3, r2, r3
 80067c8:	e00f      	b.n	80067ea <HAL_ADC_ConfigChannel+0x82>
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067d2:	fa93 f3a3 	rbit	r3, r3
 80067d6:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80067d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067da:	fab3 f383 	clz	r3, r3
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	f003 031f 	and.w	r3, r3, #31
 80067e4:	2201      	movs	r2, #1
 80067e6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	6812      	ldr	r2, [r2, #0]
 80067ee:	69d1      	ldr	r1, [r2, #28]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	6812      	ldr	r2, [r2, #0]
 80067f4:	430b      	orrs	r3, r1
 80067f6:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6818      	ldr	r0, [r3, #0]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	6859      	ldr	r1, [r3, #4]
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	461a      	mov	r2, r3
 8006806:	f7ff fbe6 	bl	8005fd6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4618      	mov	r0, r3
 8006810:	f7ff fd02 	bl	8006218 <LL_ADC_REG_IsConversionOngoing>
 8006814:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4618      	mov	r0, r3
 800681c:	f7ff fd0f 	bl	800623e <LL_ADC_INJ_IsConversionOngoing>
 8006820:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006822:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006824:	2b00      	cmp	r3, #0
 8006826:	f040 80b3 	bne.w	8006990 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800682a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800682c:	2b00      	cmp	r3, #0
 800682e:	f040 80af 	bne.w	8006990 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6818      	ldr	r0, [r3, #0]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	6819      	ldr	r1, [r3, #0]
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	461a      	mov	r2, r3
 8006840:	f7ff fc05 	bl	800604e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006844:	4b69      	ldr	r3, [pc, #420]	; (80069ec <HAL_ADC_ConfigChannel+0x284>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800684c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006850:	d10b      	bne.n	800686a <HAL_ADC_ConfigChannel+0x102>
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	695a      	ldr	r2, [r3, #20]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	089b      	lsrs	r3, r3, #2
 800685e:	f003 0307 	and.w	r3, r3, #7
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	fa02 f303 	lsl.w	r3, r2, r3
 8006868:	e01d      	b.n	80068a6 <HAL_ADC_ConfigChannel+0x13e>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	f003 0310 	and.w	r3, r3, #16
 8006874:	2b00      	cmp	r3, #0
 8006876:	d10b      	bne.n	8006890 <HAL_ADC_ConfigChannel+0x128>
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	695a      	ldr	r2, [r3, #20]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	089b      	lsrs	r3, r3, #2
 8006884:	f003 0307 	and.w	r3, r3, #7
 8006888:	005b      	lsls	r3, r3, #1
 800688a:	fa02 f303 	lsl.w	r3, r2, r3
 800688e:	e00a      	b.n	80068a6 <HAL_ADC_ConfigChannel+0x13e>
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	695a      	ldr	r2, [r3, #20]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	089b      	lsrs	r3, r3, #2
 800689c:	f003 0304 	and.w	r3, r3, #4
 80068a0:	005b      	lsls	r3, r3, #1
 80068a2:	fa02 f303 	lsl.w	r3, r2, r3
 80068a6:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	2b04      	cmp	r3, #4
 80068ae:	d027      	beq.n	8006900 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6818      	ldr	r0, [r3, #0]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	6919      	ldr	r1, [r3, #16]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068be:	f7ff fb29 	bl	8005f14 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6818      	ldr	r0, [r3, #0]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	6919      	ldr	r1, [r3, #16]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	7e5b      	ldrb	r3, [r3, #25]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d102      	bne.n	80068d8 <HAL_ADC_ConfigChannel+0x170>
 80068d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80068d6:	e000      	b.n	80068da <HAL_ADC_ConfigChannel+0x172>
 80068d8:	2300      	movs	r3, #0
 80068da:	461a      	mov	r2, r3
 80068dc:	f7ff fb50 	bl	8005f80 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6818      	ldr	r0, [r3, #0]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	6919      	ldr	r1, [r3, #16]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	7e1b      	ldrb	r3, [r3, #24]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d102      	bne.n	80068f6 <HAL_ADC_ConfigChannel+0x18e>
 80068f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80068f4:	e000      	b.n	80068f8 <HAL_ADC_ConfigChannel+0x190>
 80068f6:	2300      	movs	r3, #0
 80068f8:	461a      	mov	r2, r3
 80068fa:	f7ff fb28 	bl	8005f4e <LL_ADC_SetDataRightShift>
 80068fe:	e047      	b.n	8006990 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006906:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	069b      	lsls	r3, r3, #26
 8006910:	429a      	cmp	r2, r3
 8006912:	d107      	bne.n	8006924 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006922:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800692a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	069b      	lsls	r3, r3, #26
 8006934:	429a      	cmp	r2, r3
 8006936:	d107      	bne.n	8006948 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006946:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800694e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	069b      	lsls	r3, r3, #26
 8006958:	429a      	cmp	r2, r3
 800695a:	d107      	bne.n	800696c <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800696a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006972:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	069b      	lsls	r3, r3, #26
 800697c:	429a      	cmp	r2, r3
 800697e:	d107      	bne.n	8006990 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800698e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4618      	mov	r0, r3
 8006996:	f7ff fc17 	bl	80061c8 <LL_ADC_IsEnabled>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	f040 81d9 	bne.w	8006d54 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6818      	ldr	r0, [r3, #0]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	6819      	ldr	r1, [r3, #0]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	461a      	mov	r2, r3
 80069b0:	f7ff fb76 	bl	80060a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	4a0b      	ldr	r2, [pc, #44]	; (80069e8 <HAL_ADC_ConfigChannel+0x280>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	f040 8101 	bne.w	8006bc2 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10f      	bne.n	80069f0 <HAL_ADC_ConfigChannel+0x288>
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	0e9b      	lsrs	r3, r3, #26
 80069d6:	3301      	adds	r3, #1
 80069d8:	f003 031f 	and.w	r3, r3, #31
 80069dc:	2b09      	cmp	r3, #9
 80069de:	bf94      	ite	ls
 80069e0:	2301      	movls	r3, #1
 80069e2:	2300      	movhi	r3, #0
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	e016      	b.n	8006a16 <HAL_ADC_ConfigChannel+0x2ae>
 80069e8:	47ff0000 	.word	0x47ff0000
 80069ec:	5c001000 	.word	0x5c001000
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069f8:	fa93 f3a3 	rbit	r3, r3
 80069fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80069fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a00:	fab3 f383 	clz	r3, r3
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	3301      	adds	r3, #1
 8006a08:	f003 031f 	and.w	r3, r3, #31
 8006a0c:	2b09      	cmp	r3, #9
 8006a0e:	bf94      	ite	ls
 8006a10:	2301      	movls	r3, #1
 8006a12:	2300      	movhi	r3, #0
 8006a14:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d064      	beq.n	8006ae4 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d107      	bne.n	8006a36 <HAL_ADC_ConfigChannel+0x2ce>
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	0e9b      	lsrs	r3, r3, #26
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	069b      	lsls	r3, r3, #26
 8006a30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006a34:	e00e      	b.n	8006a54 <HAL_ADC_ConfigChannel+0x2ec>
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3e:	fa93 f3a3 	rbit	r3, r3
 8006a42:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a46:	fab3 f383 	clz	r3, r3
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	069b      	lsls	r3, r3, #26
 8006a50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d109      	bne.n	8006a74 <HAL_ADC_ConfigChannel+0x30c>
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	0e9b      	lsrs	r3, r3, #26
 8006a66:	3301      	adds	r3, #1
 8006a68:	f003 031f 	and.w	r3, r3, #31
 8006a6c:	2101      	movs	r1, #1
 8006a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a72:	e010      	b.n	8006a96 <HAL_ADC_ConfigChannel+0x32e>
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7c:	fa93 f3a3 	rbit	r3, r3
 8006a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a84:	fab3 f383 	clz	r3, r3
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	f003 031f 	and.w	r3, r3, #31
 8006a90:	2101      	movs	r1, #1
 8006a92:	fa01 f303 	lsl.w	r3, r1, r3
 8006a96:	ea42 0103 	orr.w	r1, r2, r3
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d10a      	bne.n	8006abc <HAL_ADC_ConfigChannel+0x354>
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	0e9b      	lsrs	r3, r3, #26
 8006aac:	3301      	adds	r3, #1
 8006aae:	f003 021f 	and.w	r2, r3, #31
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	005b      	lsls	r3, r3, #1
 8006ab6:	4413      	add	r3, r2
 8006ab8:	051b      	lsls	r3, r3, #20
 8006aba:	e011      	b.n	8006ae0 <HAL_ADC_ConfigChannel+0x378>
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac4:	fa93 f3a3 	rbit	r3, r3
 8006ac8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	fab3 f383 	clz	r3, r3
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	f003 021f 	and.w	r2, r3, #31
 8006ad8:	4613      	mov	r3, r2
 8006ada:	005b      	lsls	r3, r3, #1
 8006adc:	4413      	add	r3, r2
 8006ade:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006ae0:	430b      	orrs	r3, r1
 8006ae2:	e069      	b.n	8006bb8 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d107      	bne.n	8006b00 <HAL_ADC_ConfigChannel+0x398>
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	0e9b      	lsrs	r3, r3, #26
 8006af6:	3301      	adds	r3, #1
 8006af8:	069b      	lsls	r3, r3, #26
 8006afa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006afe:	e00e      	b.n	8006b1e <HAL_ADC_ConfigChannel+0x3b6>
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b06:	6a3b      	ldr	r3, [r7, #32]
 8006b08:	fa93 f3a3 	rbit	r3, r3
 8006b0c:	61fb      	str	r3, [r7, #28]
  return result;
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	fab3 f383 	clz	r3, r3
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	3301      	adds	r3, #1
 8006b18:	069b      	lsls	r3, r3, #26
 8006b1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d109      	bne.n	8006b3e <HAL_ADC_ConfigChannel+0x3d6>
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	0e9b      	lsrs	r3, r3, #26
 8006b30:	3301      	adds	r3, #1
 8006b32:	f003 031f 	and.w	r3, r3, #31
 8006b36:	2101      	movs	r1, #1
 8006b38:	fa01 f303 	lsl.w	r3, r1, r3
 8006b3c:	e010      	b.n	8006b60 <HAL_ADC_ConfigChannel+0x3f8>
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	fa93 f3a3 	rbit	r3, r3
 8006b4a:	617b      	str	r3, [r7, #20]
  return result;
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	fab3 f383 	clz	r3, r3
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	3301      	adds	r3, #1
 8006b56:	f003 031f 	and.w	r3, r3, #31
 8006b5a:	2101      	movs	r1, #1
 8006b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b60:	ea42 0103 	orr.w	r1, r2, r3
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10d      	bne.n	8006b8c <HAL_ADC_ConfigChannel+0x424>
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	0e9b      	lsrs	r3, r3, #26
 8006b76:	3301      	adds	r3, #1
 8006b78:	f003 021f 	and.w	r2, r3, #31
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	005b      	lsls	r3, r3, #1
 8006b80:	4413      	add	r3, r2
 8006b82:	3b1e      	subs	r3, #30
 8006b84:	051b      	lsls	r3, r3, #20
 8006b86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006b8a:	e014      	b.n	8006bb6 <HAL_ADC_ConfigChannel+0x44e>
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	fa93 f3a3 	rbit	r3, r3
 8006b98:	60fb      	str	r3, [r7, #12]
  return result;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	fab3 f383 	clz	r3, r3
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	f003 021f 	and.w	r2, r3, #31
 8006ba8:	4613      	mov	r3, r2
 8006baa:	005b      	lsls	r3, r3, #1
 8006bac:	4413      	add	r3, r2
 8006bae:	3b1e      	subs	r3, #30
 8006bb0:	051b      	lsls	r3, r3, #20
 8006bb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006bb6:	430b      	orrs	r3, r1
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	6892      	ldr	r2, [r2, #8]
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	f7ff fa46 	bl	800604e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f280 80c4 	bge.w	8006d54 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a65      	ldr	r2, [pc, #404]	; (8006d68 <HAL_ADC_ConfigChannel+0x600>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d004      	beq.n	8006be0 <HAL_ADC_ConfigChannel+0x478>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a64      	ldr	r2, [pc, #400]	; (8006d6c <HAL_ADC_ConfigChannel+0x604>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d101      	bne.n	8006be4 <HAL_ADC_ConfigChannel+0x47c>
 8006be0:	4b63      	ldr	r3, [pc, #396]	; (8006d70 <HAL_ADC_ConfigChannel+0x608>)
 8006be2:	e000      	b.n	8006be6 <HAL_ADC_ConfigChannel+0x47e>
 8006be4:	4b63      	ldr	r3, [pc, #396]	; (8006d74 <HAL_ADC_ConfigChannel+0x60c>)
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7ff f986 	bl	8005ef8 <LL_ADC_GetCommonPathInternalCh>
 8006bec:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a5d      	ldr	r2, [pc, #372]	; (8006d68 <HAL_ADC_ConfigChannel+0x600>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d004      	beq.n	8006c02 <HAL_ADC_ConfigChannel+0x49a>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a5b      	ldr	r2, [pc, #364]	; (8006d6c <HAL_ADC_ConfigChannel+0x604>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d10e      	bne.n	8006c20 <HAL_ADC_ConfigChannel+0x4b8>
 8006c02:	4859      	ldr	r0, [pc, #356]	; (8006d68 <HAL_ADC_ConfigChannel+0x600>)
 8006c04:	f7ff fae0 	bl	80061c8 <LL_ADC_IsEnabled>
 8006c08:	4604      	mov	r4, r0
 8006c0a:	4858      	ldr	r0, [pc, #352]	; (8006d6c <HAL_ADC_ConfigChannel+0x604>)
 8006c0c:	f7ff fadc 	bl	80061c8 <LL_ADC_IsEnabled>
 8006c10:	4603      	mov	r3, r0
 8006c12:	4323      	orrs	r3, r4
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	bf0c      	ite	eq
 8006c18:	2301      	moveq	r3, #1
 8006c1a:	2300      	movne	r3, #0
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	e008      	b.n	8006c32 <HAL_ADC_ConfigChannel+0x4ca>
 8006c20:	4855      	ldr	r0, [pc, #340]	; (8006d78 <HAL_ADC_ConfigChannel+0x610>)
 8006c22:	f7ff fad1 	bl	80061c8 <LL_ADC_IsEnabled>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	bf0c      	ite	eq
 8006c2c:	2301      	moveq	r3, #1
 8006c2e:	2300      	movne	r3, #0
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d07b      	beq.n	8006d2e <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a50      	ldr	r2, [pc, #320]	; (8006d7c <HAL_ADC_ConfigChannel+0x614>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d12e      	bne.n	8006c9e <HAL_ADC_ConfigChannel+0x536>
 8006c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d129      	bne.n	8006c9e <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a4a      	ldr	r2, [pc, #296]	; (8006d78 <HAL_ADC_ConfigChannel+0x610>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d17f      	bne.n	8006d54 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a43      	ldr	r2, [pc, #268]	; (8006d68 <HAL_ADC_ConfigChannel+0x600>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d004      	beq.n	8006c68 <HAL_ADC_ConfigChannel+0x500>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a42      	ldr	r2, [pc, #264]	; (8006d6c <HAL_ADC_ConfigChannel+0x604>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d101      	bne.n	8006c6c <HAL_ADC_ConfigChannel+0x504>
 8006c68:	4a41      	ldr	r2, [pc, #260]	; (8006d70 <HAL_ADC_ConfigChannel+0x608>)
 8006c6a:	e000      	b.n	8006c6e <HAL_ADC_ConfigChannel+0x506>
 8006c6c:	4a41      	ldr	r2, [pc, #260]	; (8006d74 <HAL_ADC_ConfigChannel+0x60c>)
 8006c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006c74:	4619      	mov	r1, r3
 8006c76:	4610      	mov	r0, r2
 8006c78:	f7ff f92b 	bl	8005ed2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006c7c:	4b40      	ldr	r3, [pc, #256]	; (8006d80 <HAL_ADC_ConfigChannel+0x618>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	099b      	lsrs	r3, r3, #6
 8006c82:	4a40      	ldr	r2, [pc, #256]	; (8006d84 <HAL_ADC_ConfigChannel+0x61c>)
 8006c84:	fba2 2303 	umull	r2, r3, r2, r3
 8006c88:	099b      	lsrs	r3, r3, #6
 8006c8a:	005b      	lsls	r3, r3, #1
 8006c8c:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8006c8e:	e002      	b.n	8006c96 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	3b01      	subs	r3, #1
 8006c94:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1f9      	bne.n	8006c90 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006c9c:	e05a      	b.n	8006d54 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a39      	ldr	r2, [pc, #228]	; (8006d88 <HAL_ADC_ConfigChannel+0x620>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d11e      	bne.n	8006ce6 <HAL_ADC_ConfigChannel+0x57e>
 8006ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006caa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d119      	bne.n	8006ce6 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a30      	ldr	r2, [pc, #192]	; (8006d78 <HAL_ADC_ConfigChannel+0x610>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d14b      	bne.n	8006d54 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a29      	ldr	r2, [pc, #164]	; (8006d68 <HAL_ADC_ConfigChannel+0x600>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d004      	beq.n	8006cd0 <HAL_ADC_ConfigChannel+0x568>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a28      	ldr	r2, [pc, #160]	; (8006d6c <HAL_ADC_ConfigChannel+0x604>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d101      	bne.n	8006cd4 <HAL_ADC_ConfigChannel+0x56c>
 8006cd0:	4a27      	ldr	r2, [pc, #156]	; (8006d70 <HAL_ADC_ConfigChannel+0x608>)
 8006cd2:	e000      	b.n	8006cd6 <HAL_ADC_ConfigChannel+0x56e>
 8006cd4:	4a27      	ldr	r2, [pc, #156]	; (8006d74 <HAL_ADC_ConfigChannel+0x60c>)
 8006cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cdc:	4619      	mov	r1, r3
 8006cde:	4610      	mov	r0, r2
 8006ce0:	f7ff f8f7 	bl	8005ed2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006ce4:	e036      	b.n	8006d54 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a28      	ldr	r2, [pc, #160]	; (8006d8c <HAL_ADC_ConfigChannel+0x624>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d131      	bne.n	8006d54 <HAL_ADC_ConfigChannel+0x5ec>
 8006cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d12c      	bne.n	8006d54 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a1e      	ldr	r2, [pc, #120]	; (8006d78 <HAL_ADC_ConfigChannel+0x610>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d127      	bne.n	8006d54 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a17      	ldr	r2, [pc, #92]	; (8006d68 <HAL_ADC_ConfigChannel+0x600>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d004      	beq.n	8006d18 <HAL_ADC_ConfigChannel+0x5b0>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a16      	ldr	r2, [pc, #88]	; (8006d6c <HAL_ADC_ConfigChannel+0x604>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d101      	bne.n	8006d1c <HAL_ADC_ConfigChannel+0x5b4>
 8006d18:	4a15      	ldr	r2, [pc, #84]	; (8006d70 <HAL_ADC_ConfigChannel+0x608>)
 8006d1a:	e000      	b.n	8006d1e <HAL_ADC_ConfigChannel+0x5b6>
 8006d1c:	4a15      	ldr	r2, [pc, #84]	; (8006d74 <HAL_ADC_ConfigChannel+0x60c>)
 8006d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006d24:	4619      	mov	r1, r3
 8006d26:	4610      	mov	r0, r2
 8006d28:	f7ff f8d3 	bl	8005ed2 <LL_ADC_SetCommonPathInternalCh>
 8006d2c:	e012      	b.n	8006d54 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d32:	f043 0220 	orr.w	r2, r3, #32
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006d40:	e008      	b.n	8006d54 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d46:	f043 0220 	orr.w	r2, r3, #32
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006d5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3764      	adds	r7, #100	; 0x64
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd90      	pop	{r4, r7, pc}
 8006d68:	40022000 	.word	0x40022000
 8006d6c:	40022100 	.word	0x40022100
 8006d70:	40022300 	.word	0x40022300
 8006d74:	58026300 	.word	0x58026300
 8006d78:	58026000 	.word	0x58026000
 8006d7c:	cb840000 	.word	0xcb840000
 8006d80:	24000010 	.word	0x24000010
 8006d84:	053e2d63 	.word	0x053e2d63
 8006d88:	c7520000 	.word	0xc7520000
 8006d8c:	cfb80000 	.word	0xcfb80000

08006d90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7ff fa13 	bl	80061c8 <LL_ADC_IsEnabled>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d167      	bne.n	8006e78 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	689a      	ldr	r2, [r3, #8]
 8006dae:	4b35      	ldr	r3, [pc, #212]	; (8006e84 <ADC_Enable+0xf4>)
 8006db0:	4013      	ands	r3, r2
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00d      	beq.n	8006dd2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dba:	f043 0210 	orr.w	r2, r3, #16
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dc6:	f043 0201 	orr.w	r2, r3, #1
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e053      	b.n	8006e7a <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7ff f9e2 	bl	80061a0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006ddc:	f7ff f82a 	bl	8005e34 <HAL_GetTick>
 8006de0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a28      	ldr	r2, [pc, #160]	; (8006e88 <ADC_Enable+0xf8>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d004      	beq.n	8006df6 <ADC_Enable+0x66>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a26      	ldr	r2, [pc, #152]	; (8006e8c <ADC_Enable+0xfc>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d101      	bne.n	8006dfa <ADC_Enable+0x6a>
 8006df6:	4b26      	ldr	r3, [pc, #152]	; (8006e90 <ADC_Enable+0x100>)
 8006df8:	e000      	b.n	8006dfc <ADC_Enable+0x6c>
 8006dfa:	4b26      	ldr	r3, [pc, #152]	; (8006e94 <ADC_Enable+0x104>)
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7ff f973 	bl	80060e8 <LL_ADC_GetMultimode>
 8006e02:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a20      	ldr	r2, [pc, #128]	; (8006e8c <ADC_Enable+0xfc>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d002      	beq.n	8006e14 <ADC_Enable+0x84>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	e000      	b.n	8006e16 <ADC_Enable+0x86>
 8006e14:	4b1c      	ldr	r3, [pc, #112]	; (8006e88 <ADC_Enable+0xf8>)
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	6812      	ldr	r2, [r2, #0]
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d025      	beq.n	8006e6a <ADC_Enable+0xda>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d129      	bne.n	8006e78 <ADC_Enable+0xe8>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006e24:	e021      	b.n	8006e6a <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7ff f9cc 	bl	80061c8 <LL_ADC_IsEnabled>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d104      	bne.n	8006e40 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7ff f9b0 	bl	80061a0 <LL_ADC_Enable>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006e40:	f7fe fff8 	bl	8005e34 <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d90d      	bls.n	8006e6a <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e52:	f043 0210 	orr.w	r2, r3, #16
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e5e:	f043 0201 	orr.w	r2, r3, #1
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e007      	b.n	8006e7a <ADC_Enable+0xea>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0301 	and.w	r3, r3, #1
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d1d6      	bne.n	8006e26 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	8000003f 	.word	0x8000003f
 8006e88:	40022000 	.word	0x40022000
 8006e8c:	40022100 	.word	0x40022100
 8006e90:	40022300 	.word	0x40022300
 8006e94:	58026300 	.word	0x58026300

08006e98 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eaa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d14b      	bne.n	8006f4a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0308 	and.w	r3, r3, #8
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d021      	beq.n	8006f10 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7ff f86d 	bl	8005fb0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d032      	beq.n	8006f42 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d12b      	bne.n	8006f42 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006efa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d11f      	bne.n	8006f42 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f06:	f043 0201 	orr.w	r2, r3, #1
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	655a      	str	r2, [r3, #84]	; 0x54
 8006f0e:	e018      	b.n	8006f42 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	f003 0303 	and.w	r3, r3, #3
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d111      	bne.n	8006f42 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d105      	bne.n	8006f42 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f3a:	f043 0201 	orr.w	r2, r3, #1
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f7ff fbf2 	bl	800672c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006f48:	e00e      	b.n	8006f68 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f4e:	f003 0310 	and.w	r3, r3, #16
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d003      	beq.n	8006f5e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f7ff fbfc 	bl	8006754 <HAL_ADC_ErrorCallback>
}
 8006f5c:	e004      	b.n	8006f68 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	4798      	blx	r3
}
 8006f68:	bf00      	nop
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f7ff fbde 	bl	8006740 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006f84:	bf00      	nop
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f98:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006faa:	f043 0204 	orr.w	r2, r3, #4
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f7ff fbce 	bl	8006754 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006fb8:	bf00      	nop
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a79      	ldr	r2, [pc, #484]	; (80071b4 <ADC_ConfigureBoostMode+0x1f4>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d004      	beq.n	8006fdc <ADC_ConfigureBoostMode+0x1c>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a78      	ldr	r2, [pc, #480]	; (80071b8 <ADC_ConfigureBoostMode+0x1f8>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d109      	bne.n	8006ff0 <ADC_ConfigureBoostMode+0x30>
 8006fdc:	4b77      	ldr	r3, [pc, #476]	; (80071bc <ADC_ConfigureBoostMode+0x1fc>)
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	bf14      	ite	ne
 8006fe8:	2301      	movne	r3, #1
 8006fea:	2300      	moveq	r3, #0
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	e008      	b.n	8007002 <ADC_ConfigureBoostMode+0x42>
 8006ff0:	4b73      	ldr	r3, [pc, #460]	; (80071c0 <ADC_ConfigureBoostMode+0x200>)
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	bf14      	ite	ne
 8006ffc:	2301      	movne	r3, #1
 8006ffe:	2300      	moveq	r3, #0
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	d01c      	beq.n	8007040 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8007006:	f004 fe17 	bl	800bc38 <HAL_RCC_GetHCLKFreq>
 800700a:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007014:	d010      	beq.n	8007038 <ADC_ConfigureBoostMode+0x78>
 8007016:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800701a:	d871      	bhi.n	8007100 <ADC_ConfigureBoostMode+0x140>
 800701c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007020:	d002      	beq.n	8007028 <ADC_ConfigureBoostMode+0x68>
 8007022:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007026:	d16b      	bne.n	8007100 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	0c1b      	lsrs	r3, r3, #16
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	fbb2 f3f3 	udiv	r3, r2, r3
 8007034:	60fb      	str	r3, [r7, #12]
        break;
 8007036:	e066      	b.n	8007106 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	089b      	lsrs	r3, r3, #2
 800703c:	60fb      	str	r3, [r7, #12]
        break;
 800703e:	e062      	b.n	8007106 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8007040:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007044:	f005 fd74 	bl	800cb30 <HAL_RCCEx_GetPeriphCLKFreq>
 8007048:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8007052:	d051      	beq.n	80070f8 <ADC_ConfigureBoostMode+0x138>
 8007054:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8007058:	d854      	bhi.n	8007104 <ADC_ConfigureBoostMode+0x144>
 800705a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800705e:	d047      	beq.n	80070f0 <ADC_ConfigureBoostMode+0x130>
 8007060:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8007064:	d84e      	bhi.n	8007104 <ADC_ConfigureBoostMode+0x144>
 8007066:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800706a:	d03d      	beq.n	80070e8 <ADC_ConfigureBoostMode+0x128>
 800706c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8007070:	d848      	bhi.n	8007104 <ADC_ConfigureBoostMode+0x144>
 8007072:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007076:	d033      	beq.n	80070e0 <ADC_ConfigureBoostMode+0x120>
 8007078:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800707c:	d842      	bhi.n	8007104 <ADC_ConfigureBoostMode+0x144>
 800707e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8007082:	d029      	beq.n	80070d8 <ADC_ConfigureBoostMode+0x118>
 8007084:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8007088:	d83c      	bhi.n	8007104 <ADC_ConfigureBoostMode+0x144>
 800708a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800708e:	d01a      	beq.n	80070c6 <ADC_ConfigureBoostMode+0x106>
 8007090:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8007094:	d836      	bhi.n	8007104 <ADC_ConfigureBoostMode+0x144>
 8007096:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800709a:	d014      	beq.n	80070c6 <ADC_ConfigureBoostMode+0x106>
 800709c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80070a0:	d830      	bhi.n	8007104 <ADC_ConfigureBoostMode+0x144>
 80070a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070a6:	d00e      	beq.n	80070c6 <ADC_ConfigureBoostMode+0x106>
 80070a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070ac:	d82a      	bhi.n	8007104 <ADC_ConfigureBoostMode+0x144>
 80070ae:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80070b2:	d008      	beq.n	80070c6 <ADC_ConfigureBoostMode+0x106>
 80070b4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80070b8:	d824      	bhi.n	8007104 <ADC_ConfigureBoostMode+0x144>
 80070ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80070be:	d002      	beq.n	80070c6 <ADC_ConfigureBoostMode+0x106>
 80070c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80070c4:	d11e      	bne.n	8007104 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	0c9b      	lsrs	r3, r3, #18
 80070cc:	005b      	lsls	r3, r3, #1
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d4:	60fb      	str	r3, [r7, #12]
        break;
 80070d6:	e016      	b.n	8007106 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	091b      	lsrs	r3, r3, #4
 80070dc:	60fb      	str	r3, [r7, #12]
      break;
 80070de:	e012      	b.n	8007106 <ADC_ConfigureBoostMode+0x146>
        case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	095b      	lsrs	r3, r3, #5
 80070e4:	60fb      	str	r3, [r7, #12]
        break;
 80070e6:	e00e      	b.n	8007106 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	099b      	lsrs	r3, r3, #6
 80070ec:	60fb      	str	r3, [r7, #12]
        break;
 80070ee:	e00a      	b.n	8007106 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	09db      	lsrs	r3, r3, #7
 80070f4:	60fb      	str	r3, [r7, #12]
        break;
 80070f6:	e006      	b.n	8007106 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	0a1b      	lsrs	r3, r3, #8
 80070fc:	60fb      	str	r3, [r7, #12]
        break;
 80070fe:	e002      	b.n	8007106 <ADC_ConfigureBoostMode+0x146>
        break;
 8007100:	bf00      	nop
 8007102:	e000      	b.n	8007106 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8007104:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8007106:	f7fe fec5 	bl	8005e94 <HAL_GetREVID>
 800710a:	4603      	mov	r3, r0
 800710c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007110:	4293      	cmp	r3, r2
 8007112:	d815      	bhi.n	8007140 <ADC_ConfigureBoostMode+0x180>
  {
    if(freq > 20000000UL)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	4a2b      	ldr	r2, [pc, #172]	; (80071c4 <ADC_ConfigureBoostMode+0x204>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d908      	bls.n	800712e <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	689a      	ldr	r2, [r3, #8]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800712a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800712c:	e03e      	b.n	80071ac <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	689a      	ldr	r2, [r3, #8]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800713c:	609a      	str	r2, [r3, #8]
}
 800713e:	e035      	b.n	80071ac <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	085b      	lsrs	r3, r3, #1
 8007144:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	4a1f      	ldr	r2, [pc, #124]	; (80071c8 <ADC_ConfigureBoostMode+0x208>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d808      	bhi.n	8007160 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	689a      	ldr	r2, [r3, #8]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800715c:	609a      	str	r2, [r3, #8]
}
 800715e:	e025      	b.n	80071ac <ADC_ConfigureBoostMode+0x1ec>
    else if(freq <= 12500000UL)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	4a1a      	ldr	r2, [pc, #104]	; (80071cc <ADC_ConfigureBoostMode+0x20c>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d80a      	bhi.n	800717e <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800717a:	609a      	str	r2, [r3, #8]
}
 800717c:	e016      	b.n	80071ac <ADC_ConfigureBoostMode+0x1ec>
    else if(freq <= 25000000UL)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	4a13      	ldr	r2, [pc, #76]	; (80071d0 <ADC_ConfigureBoostMode+0x210>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d80a      	bhi.n	800719c <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007198:	609a      	str	r2, [r3, #8]
}
 800719a:	e007      	b.n	80071ac <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	689a      	ldr	r2, [r3, #8]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80071aa:	609a      	str	r2, [r3, #8]
}
 80071ac:	bf00      	nop
 80071ae:	3710      	adds	r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	40022000 	.word	0x40022000
 80071b8:	40022100 	.word	0x40022100
 80071bc:	40022300 	.word	0x40022300
 80071c0:	58026300 	.word	0x58026300
 80071c4:	01312d00 	.word	0x01312d00
 80071c8:	005f5e10 	.word	0x005f5e10
 80071cc:	00bebc20 	.word	0x00bebc20
 80071d0:	017d7840 	.word	0x017d7840

080071d4 <LL_ADC_IsEnabled>:
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	f003 0301 	and.w	r3, r3, #1
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d101      	bne.n	80071ec <LL_ADC_IsEnabled+0x18>
 80071e8:	2301      	movs	r3, #1
 80071ea:	e000      	b.n	80071ee <LL_ADC_IsEnabled+0x1a>
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	370c      	adds	r7, #12
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <LL_ADC_REG_IsConversionOngoing>:
{
 80071fa:	b480      	push	{r7}
 80071fc:	b083      	sub	sp, #12
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f003 0304 	and.w	r3, r3, #4
 800720a:	2b04      	cmp	r3, #4
 800720c:	d101      	bne.n	8007212 <LL_ADC_REG_IsConversionOngoing+0x18>
 800720e:	2301      	movs	r3, #1
 8007210:	e000      	b.n	8007214 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007220:	b590      	push	{r4, r7, lr}
 8007222:	b09f      	sub	sp, #124	; 0x7c
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800722a:	2300      	movs	r3, #0
 800722c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007236:	2b01      	cmp	r3, #1
 8007238:	d101      	bne.n	800723e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800723a:	2302      	movs	r3, #2
 800723c:	e0ba      	b.n	80073b4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a5c      	ldr	r2, [pc, #368]	; (80073bc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d102      	bne.n	8007256 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8007250:	4b5b      	ldr	r3, [pc, #364]	; (80073c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8007252:	60bb      	str	r3, [r7, #8]
 8007254:	e001      	b.n	800725a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8007256:	2300      	movs	r3, #0
 8007258:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10b      	bne.n	8007278 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007264:	f043 0220 	orr.w	r2, r3, #32
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e09d      	b.n	80073b4 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	4618      	mov	r0, r3
 800727c:	f7ff ffbd 	bl	80071fa <LL_ADC_REG_IsConversionOngoing>
 8007280:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4618      	mov	r0, r3
 8007288:	f7ff ffb7 	bl	80071fa <LL_ADC_REG_IsConversionOngoing>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d17f      	bne.n	8007392 <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8007292:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007294:	2b00      	cmp	r3, #0
 8007296:	d17c      	bne.n	8007392 <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a47      	ldr	r2, [pc, #284]	; (80073bc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d004      	beq.n	80072ac <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a46      	ldr	r2, [pc, #280]	; (80073c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d101      	bne.n	80072b0 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 80072ac:	4b45      	ldr	r3, [pc, #276]	; (80073c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80072ae:	e000      	b.n	80072b2 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 80072b0:	4b45      	ldr	r3, [pc, #276]	; (80073c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80072b2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d039      	beq.n	8007330 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80072bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	431a      	orrs	r2, r3
 80072ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072cc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a3a      	ldr	r2, [pc, #232]	; (80073bc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d004      	beq.n	80072e2 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a38      	ldr	r2, [pc, #224]	; (80073c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d10e      	bne.n	8007300 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 80072e2:	4836      	ldr	r0, [pc, #216]	; (80073bc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80072e4:	f7ff ff76 	bl	80071d4 <LL_ADC_IsEnabled>
 80072e8:	4604      	mov	r4, r0
 80072ea:	4835      	ldr	r0, [pc, #212]	; (80073c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80072ec:	f7ff ff72 	bl	80071d4 <LL_ADC_IsEnabled>
 80072f0:	4603      	mov	r3, r0
 80072f2:	4323      	orrs	r3, r4
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	bf0c      	ite	eq
 80072f8:	2301      	moveq	r3, #1
 80072fa:	2300      	movne	r3, #0
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	e008      	b.n	8007312 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8007300:	4832      	ldr	r0, [pc, #200]	; (80073cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007302:	f7ff ff67 	bl	80071d4 <LL_ADC_IsEnabled>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	bf0c      	ite	eq
 800730c:	2301      	moveq	r3, #1
 800730e:	2300      	movne	r3, #0
 8007310:	b2db      	uxtb	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d047      	beq.n	80073a6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007318:	689a      	ldr	r2, [r3, #8]
 800731a:	4b2d      	ldr	r3, [pc, #180]	; (80073d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800731c:	4013      	ands	r3, r2
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	6811      	ldr	r1, [r2, #0]
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	6892      	ldr	r2, [r2, #8]
 8007326:	430a      	orrs	r2, r1
 8007328:	431a      	orrs	r2, r3
 800732a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800732c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800732e:	e03a      	b.n	80073a6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8007330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800733a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a1e      	ldr	r2, [pc, #120]	; (80073bc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d004      	beq.n	8007350 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a1d      	ldr	r2, [pc, #116]	; (80073c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d10e      	bne.n	800736e <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8007350:	481a      	ldr	r0, [pc, #104]	; (80073bc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8007352:	f7ff ff3f 	bl	80071d4 <LL_ADC_IsEnabled>
 8007356:	4604      	mov	r4, r0
 8007358:	4819      	ldr	r0, [pc, #100]	; (80073c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800735a:	f7ff ff3b 	bl	80071d4 <LL_ADC_IsEnabled>
 800735e:	4603      	mov	r3, r0
 8007360:	4323      	orrs	r3, r4
 8007362:	2b00      	cmp	r3, #0
 8007364:	bf0c      	ite	eq
 8007366:	2301      	moveq	r3, #1
 8007368:	2300      	movne	r3, #0
 800736a:	b2db      	uxtb	r3, r3
 800736c:	e008      	b.n	8007380 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 800736e:	4817      	ldr	r0, [pc, #92]	; (80073cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007370:	f7ff ff30 	bl	80071d4 <LL_ADC_IsEnabled>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	bf0c      	ite	eq
 800737a:	2301      	moveq	r3, #1
 800737c:	2300      	movne	r3, #0
 800737e:	b2db      	uxtb	r3, r3
 8007380:	2b00      	cmp	r3, #0
 8007382:	d010      	beq.n	80073a6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007386:	689a      	ldr	r2, [r3, #8]
 8007388:	4b11      	ldr	r3, [pc, #68]	; (80073d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800738a:	4013      	ands	r3, r2
 800738c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800738e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007390:	e009      	b.n	80073a6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007396:	f043 0220 	orr.w	r2, r3, #32
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80073a4:	e000      	b.n	80073a8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80073a6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80073b0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	377c      	adds	r7, #124	; 0x7c
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd90      	pop	{r4, r7, pc}
 80073bc:	40022000 	.word	0x40022000
 80073c0:	40022100 	.word	0x40022100
 80073c4:	40022300 	.word	0x40022300
 80073c8:	58026300 	.word	0x58026300
 80073cc:	58026000 	.word	0x58026000
 80073d0:	fffff0e0 	.word	0xfffff0e0

080073d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b085      	sub	sp, #20
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f003 0307 	and.w	r3, r3, #7
 80073e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80073e4:	4b0b      	ldr	r3, [pc, #44]	; (8007414 <__NVIC_SetPriorityGrouping+0x40>)
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80073ea:	68ba      	ldr	r2, [r7, #8]
 80073ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80073f0:	4013      	ands	r3, r2
 80073f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80073fc:	4b06      	ldr	r3, [pc, #24]	; (8007418 <__NVIC_SetPriorityGrouping+0x44>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007402:	4a04      	ldr	r2, [pc, #16]	; (8007414 <__NVIC_SetPriorityGrouping+0x40>)
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	60d3      	str	r3, [r2, #12]
}
 8007408:	bf00      	nop
 800740a:	3714      	adds	r7, #20
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	e000ed00 	.word	0xe000ed00
 8007418:	05fa0000 	.word	0x05fa0000

0800741c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800741c:	b480      	push	{r7}
 800741e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007420:	4b04      	ldr	r3, [pc, #16]	; (8007434 <__NVIC_GetPriorityGrouping+0x18>)
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	0a1b      	lsrs	r3, r3, #8
 8007426:	f003 0307 	and.w	r3, r3, #7
}
 800742a:	4618      	mov	r0, r3
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr
 8007434:	e000ed00 	.word	0xe000ed00

08007438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	4603      	mov	r3, r0
 8007440:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007442:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007446:	2b00      	cmp	r3, #0
 8007448:	db0b      	blt.n	8007462 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800744a:	88fb      	ldrh	r3, [r7, #6]
 800744c:	f003 021f 	and.w	r2, r3, #31
 8007450:	4907      	ldr	r1, [pc, #28]	; (8007470 <__NVIC_EnableIRQ+0x38>)
 8007452:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007456:	095b      	lsrs	r3, r3, #5
 8007458:	2001      	movs	r0, #1
 800745a:	fa00 f202 	lsl.w	r2, r0, r2
 800745e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007462:	bf00      	nop
 8007464:	370c      	adds	r7, #12
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	e000e100 	.word	0xe000e100

08007474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	4603      	mov	r3, r0
 800747c:	6039      	str	r1, [r7, #0]
 800747e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007480:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007484:	2b00      	cmp	r3, #0
 8007486:	db0a      	blt.n	800749e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	b2da      	uxtb	r2, r3
 800748c:	490c      	ldr	r1, [pc, #48]	; (80074c0 <__NVIC_SetPriority+0x4c>)
 800748e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007492:	0112      	lsls	r2, r2, #4
 8007494:	b2d2      	uxtb	r2, r2
 8007496:	440b      	add	r3, r1
 8007498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800749c:	e00a      	b.n	80074b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	b2da      	uxtb	r2, r3
 80074a2:	4908      	ldr	r1, [pc, #32]	; (80074c4 <__NVIC_SetPriority+0x50>)
 80074a4:	88fb      	ldrh	r3, [r7, #6]
 80074a6:	f003 030f 	and.w	r3, r3, #15
 80074aa:	3b04      	subs	r3, #4
 80074ac:	0112      	lsls	r2, r2, #4
 80074ae:	b2d2      	uxtb	r2, r2
 80074b0:	440b      	add	r3, r1
 80074b2:	761a      	strb	r2, [r3, #24]
}
 80074b4:	bf00      	nop
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr
 80074c0:	e000e100 	.word	0xe000e100
 80074c4:	e000ed00 	.word	0xe000ed00

080074c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b089      	sub	sp, #36	; 0x24
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f003 0307 	and.w	r3, r3, #7
 80074da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	f1c3 0307 	rsb	r3, r3, #7
 80074e2:	2b04      	cmp	r3, #4
 80074e4:	bf28      	it	cs
 80074e6:	2304      	movcs	r3, #4
 80074e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	3304      	adds	r3, #4
 80074ee:	2b06      	cmp	r3, #6
 80074f0:	d902      	bls.n	80074f8 <NVIC_EncodePriority+0x30>
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	3b03      	subs	r3, #3
 80074f6:	e000      	b.n	80074fa <NVIC_EncodePriority+0x32>
 80074f8:	2300      	movs	r3, #0
 80074fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	fa02 f303 	lsl.w	r3, r2, r3
 8007506:	43da      	mvns	r2, r3
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	401a      	ands	r2, r3
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007510:	f04f 31ff 	mov.w	r1, #4294967295
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	fa01 f303 	lsl.w	r3, r1, r3
 800751a:	43d9      	mvns	r1, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007520:	4313      	orrs	r3, r2
         );
}
 8007522:	4618      	mov	r0, r3
 8007524:	3724      	adds	r7, #36	; 0x24
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
	...

08007530 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007530:	b480      	push	{r7}
 8007532:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8007534:	f3bf 8f4f 	dsb	sy
}
 8007538:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800753a:	4b06      	ldr	r3, [pc, #24]	; (8007554 <__NVIC_SystemReset+0x24>)
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007542:	4904      	ldr	r1, [pc, #16]	; (8007554 <__NVIC_SystemReset+0x24>)
 8007544:	4b04      	ldr	r3, [pc, #16]	; (8007558 <__NVIC_SystemReset+0x28>)
 8007546:	4313      	orrs	r3, r2
 8007548:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800754a:	f3bf 8f4f 	dsb	sy
}
 800754e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8007550:	bf00      	nop
 8007552:	e7fd      	b.n	8007550 <__NVIC_SystemReset+0x20>
 8007554:	e000ed00 	.word	0xe000ed00
 8007558:	05fa0004 	.word	0x05fa0004

0800755c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	3b01      	subs	r3, #1
 8007568:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800756c:	d301      	bcc.n	8007572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800756e:	2301      	movs	r3, #1
 8007570:	e00f      	b.n	8007592 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007572:	4a0a      	ldr	r2, [pc, #40]	; (800759c <SysTick_Config+0x40>)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	3b01      	subs	r3, #1
 8007578:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800757a:	210f      	movs	r1, #15
 800757c:	f04f 30ff 	mov.w	r0, #4294967295
 8007580:	f7ff ff78 	bl	8007474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007584:	4b05      	ldr	r3, [pc, #20]	; (800759c <SysTick_Config+0x40>)
 8007586:	2200      	movs	r2, #0
 8007588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800758a:	4b04      	ldr	r3, [pc, #16]	; (800759c <SysTick_Config+0x40>)
 800758c:	2207      	movs	r2, #7
 800758e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3708      	adds	r7, #8
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	e000e010 	.word	0xe000e010

080075a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f7ff ff13 	bl	80073d4 <__NVIC_SetPriorityGrouping>
}
 80075ae:	bf00      	nop
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b086      	sub	sp, #24
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	4603      	mov	r3, r0
 80075be:	60b9      	str	r1, [r7, #8]
 80075c0:	607a      	str	r2, [r7, #4]
 80075c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80075c4:	f7ff ff2a 	bl	800741c <__NVIC_GetPriorityGrouping>
 80075c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	68b9      	ldr	r1, [r7, #8]
 80075ce:	6978      	ldr	r0, [r7, #20]
 80075d0:	f7ff ff7a 	bl	80074c8 <NVIC_EncodePriority>
 80075d4:	4602      	mov	r2, r0
 80075d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80075da:	4611      	mov	r1, r2
 80075dc:	4618      	mov	r0, r3
 80075de:	f7ff ff49 	bl	8007474 <__NVIC_SetPriority>
}
 80075e2:	bf00      	nop
 80075e4:	3718      	adds	r7, #24
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b082      	sub	sp, #8
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	4603      	mov	r3, r0
 80075f2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80075f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7ff ff1d 	bl	8007438 <__NVIC_EnableIRQ>
}
 80075fe:	bf00      	nop
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8007606:	b580      	push	{r7, lr}
 8007608:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800760a:	f7ff ff91 	bl	8007530 <__NVIC_SystemReset>

0800760e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b082      	sub	sp, #8
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f7ff ffa0 	bl	800755c <SysTick_Config>
 800761c:	4603      	mov	r3, r0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
	...

08007628 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b086      	sub	sp, #24
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007630:	f7fe fc00 	bl	8005e34 <HAL_GetTick>
 8007634:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d101      	bne.n	8007640 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e316      	b.n	8007c6e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a66      	ldr	r2, [pc, #408]	; (80077e0 <HAL_DMA_Init+0x1b8>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d04a      	beq.n	80076e0 <HAL_DMA_Init+0xb8>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a65      	ldr	r2, [pc, #404]	; (80077e4 <HAL_DMA_Init+0x1bc>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d045      	beq.n	80076e0 <HAL_DMA_Init+0xb8>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a63      	ldr	r2, [pc, #396]	; (80077e8 <HAL_DMA_Init+0x1c0>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d040      	beq.n	80076e0 <HAL_DMA_Init+0xb8>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a62      	ldr	r2, [pc, #392]	; (80077ec <HAL_DMA_Init+0x1c4>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d03b      	beq.n	80076e0 <HAL_DMA_Init+0xb8>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a60      	ldr	r2, [pc, #384]	; (80077f0 <HAL_DMA_Init+0x1c8>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d036      	beq.n	80076e0 <HAL_DMA_Init+0xb8>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a5f      	ldr	r2, [pc, #380]	; (80077f4 <HAL_DMA_Init+0x1cc>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d031      	beq.n	80076e0 <HAL_DMA_Init+0xb8>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a5d      	ldr	r2, [pc, #372]	; (80077f8 <HAL_DMA_Init+0x1d0>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d02c      	beq.n	80076e0 <HAL_DMA_Init+0xb8>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a5c      	ldr	r2, [pc, #368]	; (80077fc <HAL_DMA_Init+0x1d4>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d027      	beq.n	80076e0 <HAL_DMA_Init+0xb8>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a5a      	ldr	r2, [pc, #360]	; (8007800 <HAL_DMA_Init+0x1d8>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d022      	beq.n	80076e0 <HAL_DMA_Init+0xb8>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a59      	ldr	r2, [pc, #356]	; (8007804 <HAL_DMA_Init+0x1dc>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d01d      	beq.n	80076e0 <HAL_DMA_Init+0xb8>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a57      	ldr	r2, [pc, #348]	; (8007808 <HAL_DMA_Init+0x1e0>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d018      	beq.n	80076e0 <HAL_DMA_Init+0xb8>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a56      	ldr	r2, [pc, #344]	; (800780c <HAL_DMA_Init+0x1e4>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d013      	beq.n	80076e0 <HAL_DMA_Init+0xb8>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a54      	ldr	r2, [pc, #336]	; (8007810 <HAL_DMA_Init+0x1e8>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d00e      	beq.n	80076e0 <HAL_DMA_Init+0xb8>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a53      	ldr	r2, [pc, #332]	; (8007814 <HAL_DMA_Init+0x1ec>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d009      	beq.n	80076e0 <HAL_DMA_Init+0xb8>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a51      	ldr	r2, [pc, #324]	; (8007818 <HAL_DMA_Init+0x1f0>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d004      	beq.n	80076e0 <HAL_DMA_Init+0xb8>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a50      	ldr	r2, [pc, #320]	; (800781c <HAL_DMA_Init+0x1f4>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d101      	bne.n	80076e4 <HAL_DMA_Init+0xbc>
 80076e0:	2301      	movs	r3, #1
 80076e2:	e000      	b.n	80076e6 <HAL_DMA_Init+0xbe>
 80076e4:	2300      	movs	r3, #0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f000 813b 	beq.w	8007962 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2202      	movs	r2, #2
 80076f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a37      	ldr	r2, [pc, #220]	; (80077e0 <HAL_DMA_Init+0x1b8>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d04a      	beq.n	800779c <HAL_DMA_Init+0x174>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a36      	ldr	r2, [pc, #216]	; (80077e4 <HAL_DMA_Init+0x1bc>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d045      	beq.n	800779c <HAL_DMA_Init+0x174>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a34      	ldr	r2, [pc, #208]	; (80077e8 <HAL_DMA_Init+0x1c0>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d040      	beq.n	800779c <HAL_DMA_Init+0x174>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a33      	ldr	r2, [pc, #204]	; (80077ec <HAL_DMA_Init+0x1c4>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d03b      	beq.n	800779c <HAL_DMA_Init+0x174>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a31      	ldr	r2, [pc, #196]	; (80077f0 <HAL_DMA_Init+0x1c8>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d036      	beq.n	800779c <HAL_DMA_Init+0x174>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a30      	ldr	r2, [pc, #192]	; (80077f4 <HAL_DMA_Init+0x1cc>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d031      	beq.n	800779c <HAL_DMA_Init+0x174>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a2e      	ldr	r2, [pc, #184]	; (80077f8 <HAL_DMA_Init+0x1d0>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d02c      	beq.n	800779c <HAL_DMA_Init+0x174>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a2d      	ldr	r2, [pc, #180]	; (80077fc <HAL_DMA_Init+0x1d4>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d027      	beq.n	800779c <HAL_DMA_Init+0x174>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a2b      	ldr	r2, [pc, #172]	; (8007800 <HAL_DMA_Init+0x1d8>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d022      	beq.n	800779c <HAL_DMA_Init+0x174>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a2a      	ldr	r2, [pc, #168]	; (8007804 <HAL_DMA_Init+0x1dc>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d01d      	beq.n	800779c <HAL_DMA_Init+0x174>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a28      	ldr	r2, [pc, #160]	; (8007808 <HAL_DMA_Init+0x1e0>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d018      	beq.n	800779c <HAL_DMA_Init+0x174>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a27      	ldr	r2, [pc, #156]	; (800780c <HAL_DMA_Init+0x1e4>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d013      	beq.n	800779c <HAL_DMA_Init+0x174>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a25      	ldr	r2, [pc, #148]	; (8007810 <HAL_DMA_Init+0x1e8>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d00e      	beq.n	800779c <HAL_DMA_Init+0x174>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a24      	ldr	r2, [pc, #144]	; (8007814 <HAL_DMA_Init+0x1ec>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d009      	beq.n	800779c <HAL_DMA_Init+0x174>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a22      	ldr	r2, [pc, #136]	; (8007818 <HAL_DMA_Init+0x1f0>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d004      	beq.n	800779c <HAL_DMA_Init+0x174>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a21      	ldr	r2, [pc, #132]	; (800781c <HAL_DMA_Init+0x1f4>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d108      	bne.n	80077ae <HAL_DMA_Init+0x186>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f022 0201 	bic.w	r2, r2, #1
 80077aa:	601a      	str	r2, [r3, #0]
 80077ac:	e007      	b.n	80077be <HAL_DMA_Init+0x196>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f022 0201 	bic.w	r2, r2, #1
 80077bc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80077be:	e02f      	b.n	8007820 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80077c0:	f7fe fb38 	bl	8005e34 <HAL_GetTick>
 80077c4:	4602      	mov	r2, r0
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	2b05      	cmp	r3, #5
 80077cc:	d928      	bls.n	8007820 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2220      	movs	r2, #32
 80077d2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2203      	movs	r2, #3
 80077d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e246      	b.n	8007c6e <HAL_DMA_Init+0x646>
 80077e0:	40020010 	.word	0x40020010
 80077e4:	40020028 	.word	0x40020028
 80077e8:	40020040 	.word	0x40020040
 80077ec:	40020058 	.word	0x40020058
 80077f0:	40020070 	.word	0x40020070
 80077f4:	40020088 	.word	0x40020088
 80077f8:	400200a0 	.word	0x400200a0
 80077fc:	400200b8 	.word	0x400200b8
 8007800:	40020410 	.word	0x40020410
 8007804:	40020428 	.word	0x40020428
 8007808:	40020440 	.word	0x40020440
 800780c:	40020458 	.word	0x40020458
 8007810:	40020470 	.word	0x40020470
 8007814:	40020488 	.word	0x40020488
 8007818:	400204a0 	.word	0x400204a0
 800781c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 0301 	and.w	r3, r3, #1
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1c8      	bne.n	80077c0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	4b83      	ldr	r3, [pc, #524]	; (8007a48 <HAL_DMA_Init+0x420>)
 800783a:	4013      	ands	r3, r2
 800783c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007846:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007852:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	699b      	ldr	r3, [r3, #24]
 8007858:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800785e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a1b      	ldr	r3, [r3, #32]
 8007864:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007866:	697a      	ldr	r2, [r7, #20]
 8007868:	4313      	orrs	r3, r2
 800786a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007870:	2b04      	cmp	r3, #4
 8007872:	d107      	bne.n	8007884 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787c:	4313      	orrs	r3, r2
 800787e:	697a      	ldr	r2, [r7, #20]
 8007880:	4313      	orrs	r3, r2
 8007882:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007884:	4b71      	ldr	r3, [pc, #452]	; (8007a4c <HAL_DMA_Init+0x424>)
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	4b71      	ldr	r3, [pc, #452]	; (8007a50 <HAL_DMA_Init+0x428>)
 800788a:	4013      	ands	r3, r2
 800788c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007890:	d328      	bcc.n	80078e4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	2b28      	cmp	r3, #40	; 0x28
 8007898:	d903      	bls.n	80078a2 <HAL_DMA_Init+0x27a>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	2b2e      	cmp	r3, #46	; 0x2e
 80078a0:	d917      	bls.n	80078d2 <HAL_DMA_Init+0x2aa>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	2b3e      	cmp	r3, #62	; 0x3e
 80078a8:	d903      	bls.n	80078b2 <HAL_DMA_Init+0x28a>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	2b42      	cmp	r3, #66	; 0x42
 80078b0:	d90f      	bls.n	80078d2 <HAL_DMA_Init+0x2aa>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	2b46      	cmp	r3, #70	; 0x46
 80078b8:	d903      	bls.n	80078c2 <HAL_DMA_Init+0x29a>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	2b48      	cmp	r3, #72	; 0x48
 80078c0:	d907      	bls.n	80078d2 <HAL_DMA_Init+0x2aa>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	2b4e      	cmp	r3, #78	; 0x4e
 80078c8:	d905      	bls.n	80078d6 <HAL_DMA_Init+0x2ae>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	2b52      	cmp	r3, #82	; 0x52
 80078d0:	d801      	bhi.n	80078d6 <HAL_DMA_Init+0x2ae>
 80078d2:	2301      	movs	r3, #1
 80078d4:	e000      	b.n	80078d8 <HAL_DMA_Init+0x2b0>
 80078d6:	2300      	movs	r3, #0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d003      	beq.n	80078e4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078e2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	697a      	ldr	r2, [r7, #20]
 80078ea:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	f023 0307 	bic.w	r3, r3, #7
 80078fa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	4313      	orrs	r3, r2
 8007904:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790a:	2b04      	cmp	r3, #4
 800790c:	d117      	bne.n	800793e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	4313      	orrs	r3, r2
 8007916:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00e      	beq.n	800793e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f002 f813 	bl	800994c <DMA_CheckFifoParam>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d008      	beq.n	800793e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2240      	movs	r2, #64	; 0x40
 8007930:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2201      	movs	r2, #1
 8007936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e197      	b.n	8007c6e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	697a      	ldr	r2, [r7, #20]
 8007944:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f001 ff4e 	bl	80097e8 <DMA_CalcBaseAndBitshift>
 800794c:	4603      	mov	r3, r0
 800794e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007954:	f003 031f 	and.w	r3, r3, #31
 8007958:	223f      	movs	r2, #63	; 0x3f
 800795a:	409a      	lsls	r2, r3
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	609a      	str	r2, [r3, #8]
 8007960:	e0cd      	b.n	8007afe <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a3b      	ldr	r2, [pc, #236]	; (8007a54 <HAL_DMA_Init+0x42c>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d022      	beq.n	80079b2 <HAL_DMA_Init+0x38a>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a39      	ldr	r2, [pc, #228]	; (8007a58 <HAL_DMA_Init+0x430>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d01d      	beq.n	80079b2 <HAL_DMA_Init+0x38a>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a38      	ldr	r2, [pc, #224]	; (8007a5c <HAL_DMA_Init+0x434>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d018      	beq.n	80079b2 <HAL_DMA_Init+0x38a>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a36      	ldr	r2, [pc, #216]	; (8007a60 <HAL_DMA_Init+0x438>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d013      	beq.n	80079b2 <HAL_DMA_Init+0x38a>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a35      	ldr	r2, [pc, #212]	; (8007a64 <HAL_DMA_Init+0x43c>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d00e      	beq.n	80079b2 <HAL_DMA_Init+0x38a>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a33      	ldr	r2, [pc, #204]	; (8007a68 <HAL_DMA_Init+0x440>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d009      	beq.n	80079b2 <HAL_DMA_Init+0x38a>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a32      	ldr	r2, [pc, #200]	; (8007a6c <HAL_DMA_Init+0x444>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d004      	beq.n	80079b2 <HAL_DMA_Init+0x38a>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a30      	ldr	r2, [pc, #192]	; (8007a70 <HAL_DMA_Init+0x448>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d101      	bne.n	80079b6 <HAL_DMA_Init+0x38e>
 80079b2:	2301      	movs	r3, #1
 80079b4:	e000      	b.n	80079b8 <HAL_DMA_Init+0x390>
 80079b6:	2300      	movs	r3, #0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 8097 	beq.w	8007aec <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a24      	ldr	r2, [pc, #144]	; (8007a54 <HAL_DMA_Init+0x42c>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d021      	beq.n	8007a0c <HAL_DMA_Init+0x3e4>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a22      	ldr	r2, [pc, #136]	; (8007a58 <HAL_DMA_Init+0x430>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d01c      	beq.n	8007a0c <HAL_DMA_Init+0x3e4>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a21      	ldr	r2, [pc, #132]	; (8007a5c <HAL_DMA_Init+0x434>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d017      	beq.n	8007a0c <HAL_DMA_Init+0x3e4>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a1f      	ldr	r2, [pc, #124]	; (8007a60 <HAL_DMA_Init+0x438>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d012      	beq.n	8007a0c <HAL_DMA_Init+0x3e4>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a1e      	ldr	r2, [pc, #120]	; (8007a64 <HAL_DMA_Init+0x43c>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d00d      	beq.n	8007a0c <HAL_DMA_Init+0x3e4>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a1c      	ldr	r2, [pc, #112]	; (8007a68 <HAL_DMA_Init+0x440>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d008      	beq.n	8007a0c <HAL_DMA_Init+0x3e4>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a1b      	ldr	r2, [pc, #108]	; (8007a6c <HAL_DMA_Init+0x444>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d003      	beq.n	8007a0c <HAL_DMA_Init+0x3e4>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a19      	ldr	r2, [pc, #100]	; (8007a70 <HAL_DMA_Init+0x448>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2202      	movs	r2, #2
 8007a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	4b12      	ldr	r3, [pc, #72]	; (8007a74 <HAL_DMA_Init+0x44c>)
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	2b40      	cmp	r3, #64	; 0x40
 8007a34:	d020      	beq.n	8007a78 <HAL_DMA_Init+0x450>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	2b80      	cmp	r3, #128	; 0x80
 8007a3c:	d102      	bne.n	8007a44 <HAL_DMA_Init+0x41c>
 8007a3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007a42:	e01a      	b.n	8007a7a <HAL_DMA_Init+0x452>
 8007a44:	2300      	movs	r3, #0
 8007a46:	e018      	b.n	8007a7a <HAL_DMA_Init+0x452>
 8007a48:	fe10803f 	.word	0xfe10803f
 8007a4c:	5c001000 	.word	0x5c001000
 8007a50:	ffff0000 	.word	0xffff0000
 8007a54:	58025408 	.word	0x58025408
 8007a58:	5802541c 	.word	0x5802541c
 8007a5c:	58025430 	.word	0x58025430
 8007a60:	58025444 	.word	0x58025444
 8007a64:	58025458 	.word	0x58025458
 8007a68:	5802546c 	.word	0x5802546c
 8007a6c:	58025480 	.word	0x58025480
 8007a70:	58025494 	.word	0x58025494
 8007a74:	fffe000f 	.word	0xfffe000f
 8007a78:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	68d2      	ldr	r2, [r2, #12]
 8007a7e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007a80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007a88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	695b      	ldr	r3, [r3, #20]
 8007a8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007a90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007a98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	69db      	ldr	r3, [r3, #28]
 8007a9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007aa0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007aa8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	461a      	mov	r2, r3
 8007abe:	4b6e      	ldr	r3, [pc, #440]	; (8007c78 <HAL_DMA_Init+0x650>)
 8007ac0:	4413      	add	r3, r2
 8007ac2:	4a6e      	ldr	r2, [pc, #440]	; (8007c7c <HAL_DMA_Init+0x654>)
 8007ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac8:	091b      	lsrs	r3, r3, #4
 8007aca:	009a      	lsls	r2, r3, #2
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f001 fe89 	bl	80097e8 <DMA_CalcBaseAndBitshift>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ade:	f003 031f 	and.w	r3, r3, #31
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	409a      	lsls	r2, r3
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	605a      	str	r2, [r3, #4]
 8007aea:	e008      	b.n	8007afe <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2240      	movs	r2, #64	; 0x40
 8007af0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2203      	movs	r2, #3
 8007af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e0b7      	b.n	8007c6e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a5f      	ldr	r2, [pc, #380]	; (8007c80 <HAL_DMA_Init+0x658>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d072      	beq.n	8007bee <HAL_DMA_Init+0x5c6>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a5d      	ldr	r2, [pc, #372]	; (8007c84 <HAL_DMA_Init+0x65c>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d06d      	beq.n	8007bee <HAL_DMA_Init+0x5c6>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a5c      	ldr	r2, [pc, #368]	; (8007c88 <HAL_DMA_Init+0x660>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d068      	beq.n	8007bee <HAL_DMA_Init+0x5c6>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a5a      	ldr	r2, [pc, #360]	; (8007c8c <HAL_DMA_Init+0x664>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d063      	beq.n	8007bee <HAL_DMA_Init+0x5c6>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a59      	ldr	r2, [pc, #356]	; (8007c90 <HAL_DMA_Init+0x668>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d05e      	beq.n	8007bee <HAL_DMA_Init+0x5c6>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a57      	ldr	r2, [pc, #348]	; (8007c94 <HAL_DMA_Init+0x66c>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d059      	beq.n	8007bee <HAL_DMA_Init+0x5c6>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a56      	ldr	r2, [pc, #344]	; (8007c98 <HAL_DMA_Init+0x670>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d054      	beq.n	8007bee <HAL_DMA_Init+0x5c6>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a54      	ldr	r2, [pc, #336]	; (8007c9c <HAL_DMA_Init+0x674>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d04f      	beq.n	8007bee <HAL_DMA_Init+0x5c6>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a53      	ldr	r2, [pc, #332]	; (8007ca0 <HAL_DMA_Init+0x678>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d04a      	beq.n	8007bee <HAL_DMA_Init+0x5c6>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a51      	ldr	r2, [pc, #324]	; (8007ca4 <HAL_DMA_Init+0x67c>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d045      	beq.n	8007bee <HAL_DMA_Init+0x5c6>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a50      	ldr	r2, [pc, #320]	; (8007ca8 <HAL_DMA_Init+0x680>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d040      	beq.n	8007bee <HAL_DMA_Init+0x5c6>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a4e      	ldr	r2, [pc, #312]	; (8007cac <HAL_DMA_Init+0x684>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d03b      	beq.n	8007bee <HAL_DMA_Init+0x5c6>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a4d      	ldr	r2, [pc, #308]	; (8007cb0 <HAL_DMA_Init+0x688>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d036      	beq.n	8007bee <HAL_DMA_Init+0x5c6>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a4b      	ldr	r2, [pc, #300]	; (8007cb4 <HAL_DMA_Init+0x68c>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d031      	beq.n	8007bee <HAL_DMA_Init+0x5c6>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a4a      	ldr	r2, [pc, #296]	; (8007cb8 <HAL_DMA_Init+0x690>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d02c      	beq.n	8007bee <HAL_DMA_Init+0x5c6>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a48      	ldr	r2, [pc, #288]	; (8007cbc <HAL_DMA_Init+0x694>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d027      	beq.n	8007bee <HAL_DMA_Init+0x5c6>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a47      	ldr	r2, [pc, #284]	; (8007cc0 <HAL_DMA_Init+0x698>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d022      	beq.n	8007bee <HAL_DMA_Init+0x5c6>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a45      	ldr	r2, [pc, #276]	; (8007cc4 <HAL_DMA_Init+0x69c>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d01d      	beq.n	8007bee <HAL_DMA_Init+0x5c6>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a44      	ldr	r2, [pc, #272]	; (8007cc8 <HAL_DMA_Init+0x6a0>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d018      	beq.n	8007bee <HAL_DMA_Init+0x5c6>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a42      	ldr	r2, [pc, #264]	; (8007ccc <HAL_DMA_Init+0x6a4>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d013      	beq.n	8007bee <HAL_DMA_Init+0x5c6>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a41      	ldr	r2, [pc, #260]	; (8007cd0 <HAL_DMA_Init+0x6a8>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d00e      	beq.n	8007bee <HAL_DMA_Init+0x5c6>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a3f      	ldr	r2, [pc, #252]	; (8007cd4 <HAL_DMA_Init+0x6ac>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d009      	beq.n	8007bee <HAL_DMA_Init+0x5c6>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a3e      	ldr	r2, [pc, #248]	; (8007cd8 <HAL_DMA_Init+0x6b0>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d004      	beq.n	8007bee <HAL_DMA_Init+0x5c6>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a3c      	ldr	r2, [pc, #240]	; (8007cdc <HAL_DMA_Init+0x6b4>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d101      	bne.n	8007bf2 <HAL_DMA_Init+0x5ca>
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e000      	b.n	8007bf4 <HAL_DMA_Init+0x5cc>
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d032      	beq.n	8007c5e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f001 ff23 	bl	8009a44 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	2b80      	cmp	r3, #128	; 0x80
 8007c04:	d102      	bne.n	8007c0c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685a      	ldr	r2, [r3, #4]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c14:	b2d2      	uxtb	r2, r2
 8007c16:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007c20:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d010      	beq.n	8007c4c <HAL_DMA_Init+0x624>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	2b08      	cmp	r3, #8
 8007c30:	d80c      	bhi.n	8007c4c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f001 ffa0 	bl	8009b78 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007c48:	605a      	str	r2, [r3, #4]
 8007c4a:	e008      	b.n	8007c5e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3718      	adds	r7, #24
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	a7fdabf8 	.word	0xa7fdabf8
 8007c7c:	cccccccd 	.word	0xcccccccd
 8007c80:	40020010 	.word	0x40020010
 8007c84:	40020028 	.word	0x40020028
 8007c88:	40020040 	.word	0x40020040
 8007c8c:	40020058 	.word	0x40020058
 8007c90:	40020070 	.word	0x40020070
 8007c94:	40020088 	.word	0x40020088
 8007c98:	400200a0 	.word	0x400200a0
 8007c9c:	400200b8 	.word	0x400200b8
 8007ca0:	40020410 	.word	0x40020410
 8007ca4:	40020428 	.word	0x40020428
 8007ca8:	40020440 	.word	0x40020440
 8007cac:	40020458 	.word	0x40020458
 8007cb0:	40020470 	.word	0x40020470
 8007cb4:	40020488 	.word	0x40020488
 8007cb8:	400204a0 	.word	0x400204a0
 8007cbc:	400204b8 	.word	0x400204b8
 8007cc0:	58025408 	.word	0x58025408
 8007cc4:	5802541c 	.word	0x5802541c
 8007cc8:	58025430 	.word	0x58025430
 8007ccc:	58025444 	.word	0x58025444
 8007cd0:	58025458 	.word	0x58025458
 8007cd4:	5802546c 	.word	0x5802546c
 8007cd8:	58025480 	.word	0x58025480
 8007cdc:	58025494 	.word	0x58025494

08007ce0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
 8007cec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d101      	bne.n	8007cfc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e226      	b.n	800814a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d101      	bne.n	8007d0a <HAL_DMA_Start_IT+0x2a>
 8007d06:	2302      	movs	r3, #2
 8007d08:	e21f      	b.n	800814a <HAL_DMA_Start_IT+0x46a>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	f040 820a 	bne.w	8008134 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2202      	movs	r2, #2
 8007d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a68      	ldr	r2, [pc, #416]	; (8007ed4 <HAL_DMA_Start_IT+0x1f4>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d04a      	beq.n	8007dce <HAL_DMA_Start_IT+0xee>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a66      	ldr	r2, [pc, #408]	; (8007ed8 <HAL_DMA_Start_IT+0x1f8>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d045      	beq.n	8007dce <HAL_DMA_Start_IT+0xee>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a65      	ldr	r2, [pc, #404]	; (8007edc <HAL_DMA_Start_IT+0x1fc>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d040      	beq.n	8007dce <HAL_DMA_Start_IT+0xee>
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a63      	ldr	r2, [pc, #396]	; (8007ee0 <HAL_DMA_Start_IT+0x200>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d03b      	beq.n	8007dce <HAL_DMA_Start_IT+0xee>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a62      	ldr	r2, [pc, #392]	; (8007ee4 <HAL_DMA_Start_IT+0x204>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d036      	beq.n	8007dce <HAL_DMA_Start_IT+0xee>
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a60      	ldr	r2, [pc, #384]	; (8007ee8 <HAL_DMA_Start_IT+0x208>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d031      	beq.n	8007dce <HAL_DMA_Start_IT+0xee>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a5f      	ldr	r2, [pc, #380]	; (8007eec <HAL_DMA_Start_IT+0x20c>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d02c      	beq.n	8007dce <HAL_DMA_Start_IT+0xee>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a5d      	ldr	r2, [pc, #372]	; (8007ef0 <HAL_DMA_Start_IT+0x210>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d027      	beq.n	8007dce <HAL_DMA_Start_IT+0xee>
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a5c      	ldr	r2, [pc, #368]	; (8007ef4 <HAL_DMA_Start_IT+0x214>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d022      	beq.n	8007dce <HAL_DMA_Start_IT+0xee>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a5a      	ldr	r2, [pc, #360]	; (8007ef8 <HAL_DMA_Start_IT+0x218>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d01d      	beq.n	8007dce <HAL_DMA_Start_IT+0xee>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a59      	ldr	r2, [pc, #356]	; (8007efc <HAL_DMA_Start_IT+0x21c>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d018      	beq.n	8007dce <HAL_DMA_Start_IT+0xee>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a57      	ldr	r2, [pc, #348]	; (8007f00 <HAL_DMA_Start_IT+0x220>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d013      	beq.n	8007dce <HAL_DMA_Start_IT+0xee>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a56      	ldr	r2, [pc, #344]	; (8007f04 <HAL_DMA_Start_IT+0x224>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d00e      	beq.n	8007dce <HAL_DMA_Start_IT+0xee>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a54      	ldr	r2, [pc, #336]	; (8007f08 <HAL_DMA_Start_IT+0x228>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d009      	beq.n	8007dce <HAL_DMA_Start_IT+0xee>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a53      	ldr	r2, [pc, #332]	; (8007f0c <HAL_DMA_Start_IT+0x22c>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d004      	beq.n	8007dce <HAL_DMA_Start_IT+0xee>
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a51      	ldr	r2, [pc, #324]	; (8007f10 <HAL_DMA_Start_IT+0x230>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d108      	bne.n	8007de0 <HAL_DMA_Start_IT+0x100>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f022 0201 	bic.w	r2, r2, #1
 8007ddc:	601a      	str	r2, [r3, #0]
 8007dde:	e007      	b.n	8007df0 <HAL_DMA_Start_IT+0x110>
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f022 0201 	bic.w	r2, r2, #1
 8007dee:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	68b9      	ldr	r1, [r7, #8]
 8007df6:	68f8      	ldr	r0, [r7, #12]
 8007df8:	f001 fb4a 	bl	8009490 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a34      	ldr	r2, [pc, #208]	; (8007ed4 <HAL_DMA_Start_IT+0x1f4>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d04a      	beq.n	8007e9c <HAL_DMA_Start_IT+0x1bc>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a33      	ldr	r2, [pc, #204]	; (8007ed8 <HAL_DMA_Start_IT+0x1f8>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d045      	beq.n	8007e9c <HAL_DMA_Start_IT+0x1bc>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a31      	ldr	r2, [pc, #196]	; (8007edc <HAL_DMA_Start_IT+0x1fc>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d040      	beq.n	8007e9c <HAL_DMA_Start_IT+0x1bc>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a30      	ldr	r2, [pc, #192]	; (8007ee0 <HAL_DMA_Start_IT+0x200>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d03b      	beq.n	8007e9c <HAL_DMA_Start_IT+0x1bc>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a2e      	ldr	r2, [pc, #184]	; (8007ee4 <HAL_DMA_Start_IT+0x204>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d036      	beq.n	8007e9c <HAL_DMA_Start_IT+0x1bc>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a2d      	ldr	r2, [pc, #180]	; (8007ee8 <HAL_DMA_Start_IT+0x208>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d031      	beq.n	8007e9c <HAL_DMA_Start_IT+0x1bc>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a2b      	ldr	r2, [pc, #172]	; (8007eec <HAL_DMA_Start_IT+0x20c>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d02c      	beq.n	8007e9c <HAL_DMA_Start_IT+0x1bc>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a2a      	ldr	r2, [pc, #168]	; (8007ef0 <HAL_DMA_Start_IT+0x210>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d027      	beq.n	8007e9c <HAL_DMA_Start_IT+0x1bc>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a28      	ldr	r2, [pc, #160]	; (8007ef4 <HAL_DMA_Start_IT+0x214>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d022      	beq.n	8007e9c <HAL_DMA_Start_IT+0x1bc>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a27      	ldr	r2, [pc, #156]	; (8007ef8 <HAL_DMA_Start_IT+0x218>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d01d      	beq.n	8007e9c <HAL_DMA_Start_IT+0x1bc>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a25      	ldr	r2, [pc, #148]	; (8007efc <HAL_DMA_Start_IT+0x21c>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d018      	beq.n	8007e9c <HAL_DMA_Start_IT+0x1bc>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a24      	ldr	r2, [pc, #144]	; (8007f00 <HAL_DMA_Start_IT+0x220>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d013      	beq.n	8007e9c <HAL_DMA_Start_IT+0x1bc>
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a22      	ldr	r2, [pc, #136]	; (8007f04 <HAL_DMA_Start_IT+0x224>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d00e      	beq.n	8007e9c <HAL_DMA_Start_IT+0x1bc>
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a21      	ldr	r2, [pc, #132]	; (8007f08 <HAL_DMA_Start_IT+0x228>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d009      	beq.n	8007e9c <HAL_DMA_Start_IT+0x1bc>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a1f      	ldr	r2, [pc, #124]	; (8007f0c <HAL_DMA_Start_IT+0x22c>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d004      	beq.n	8007e9c <HAL_DMA_Start_IT+0x1bc>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a1e      	ldr	r2, [pc, #120]	; (8007f10 <HAL_DMA_Start_IT+0x230>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d101      	bne.n	8007ea0 <HAL_DMA_Start_IT+0x1c0>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e000      	b.n	8007ea2 <HAL_DMA_Start_IT+0x1c2>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d036      	beq.n	8007f14 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f023 021e 	bic.w	r2, r3, #30
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f042 0216 	orr.w	r2, r2, #22
 8007eb8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d03e      	beq.n	8007f40 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f042 0208 	orr.w	r2, r2, #8
 8007ed0:	601a      	str	r2, [r3, #0]
 8007ed2:	e035      	b.n	8007f40 <HAL_DMA_Start_IT+0x260>
 8007ed4:	40020010 	.word	0x40020010
 8007ed8:	40020028 	.word	0x40020028
 8007edc:	40020040 	.word	0x40020040
 8007ee0:	40020058 	.word	0x40020058
 8007ee4:	40020070 	.word	0x40020070
 8007ee8:	40020088 	.word	0x40020088
 8007eec:	400200a0 	.word	0x400200a0
 8007ef0:	400200b8 	.word	0x400200b8
 8007ef4:	40020410 	.word	0x40020410
 8007ef8:	40020428 	.word	0x40020428
 8007efc:	40020440 	.word	0x40020440
 8007f00:	40020458 	.word	0x40020458
 8007f04:	40020470 	.word	0x40020470
 8007f08:	40020488 	.word	0x40020488
 8007f0c:	400204a0 	.word	0x400204a0
 8007f10:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f023 020e 	bic.w	r2, r3, #14
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f042 020a 	orr.w	r2, r2, #10
 8007f26:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d007      	beq.n	8007f40 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f042 0204 	orr.w	r2, r2, #4
 8007f3e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a83      	ldr	r2, [pc, #524]	; (8008154 <HAL_DMA_Start_IT+0x474>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d072      	beq.n	8008030 <HAL_DMA_Start_IT+0x350>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a82      	ldr	r2, [pc, #520]	; (8008158 <HAL_DMA_Start_IT+0x478>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d06d      	beq.n	8008030 <HAL_DMA_Start_IT+0x350>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a80      	ldr	r2, [pc, #512]	; (800815c <HAL_DMA_Start_IT+0x47c>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d068      	beq.n	8008030 <HAL_DMA_Start_IT+0x350>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a7f      	ldr	r2, [pc, #508]	; (8008160 <HAL_DMA_Start_IT+0x480>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d063      	beq.n	8008030 <HAL_DMA_Start_IT+0x350>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a7d      	ldr	r2, [pc, #500]	; (8008164 <HAL_DMA_Start_IT+0x484>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d05e      	beq.n	8008030 <HAL_DMA_Start_IT+0x350>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a7c      	ldr	r2, [pc, #496]	; (8008168 <HAL_DMA_Start_IT+0x488>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d059      	beq.n	8008030 <HAL_DMA_Start_IT+0x350>
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a7a      	ldr	r2, [pc, #488]	; (800816c <HAL_DMA_Start_IT+0x48c>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d054      	beq.n	8008030 <HAL_DMA_Start_IT+0x350>
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a79      	ldr	r2, [pc, #484]	; (8008170 <HAL_DMA_Start_IT+0x490>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d04f      	beq.n	8008030 <HAL_DMA_Start_IT+0x350>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a77      	ldr	r2, [pc, #476]	; (8008174 <HAL_DMA_Start_IT+0x494>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d04a      	beq.n	8008030 <HAL_DMA_Start_IT+0x350>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a76      	ldr	r2, [pc, #472]	; (8008178 <HAL_DMA_Start_IT+0x498>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d045      	beq.n	8008030 <HAL_DMA_Start_IT+0x350>
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a74      	ldr	r2, [pc, #464]	; (800817c <HAL_DMA_Start_IT+0x49c>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d040      	beq.n	8008030 <HAL_DMA_Start_IT+0x350>
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a73      	ldr	r2, [pc, #460]	; (8008180 <HAL_DMA_Start_IT+0x4a0>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d03b      	beq.n	8008030 <HAL_DMA_Start_IT+0x350>
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a71      	ldr	r2, [pc, #452]	; (8008184 <HAL_DMA_Start_IT+0x4a4>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d036      	beq.n	8008030 <HAL_DMA_Start_IT+0x350>
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a70      	ldr	r2, [pc, #448]	; (8008188 <HAL_DMA_Start_IT+0x4a8>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d031      	beq.n	8008030 <HAL_DMA_Start_IT+0x350>
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a6e      	ldr	r2, [pc, #440]	; (800818c <HAL_DMA_Start_IT+0x4ac>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d02c      	beq.n	8008030 <HAL_DMA_Start_IT+0x350>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a6d      	ldr	r2, [pc, #436]	; (8008190 <HAL_DMA_Start_IT+0x4b0>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d027      	beq.n	8008030 <HAL_DMA_Start_IT+0x350>
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a6b      	ldr	r2, [pc, #428]	; (8008194 <HAL_DMA_Start_IT+0x4b4>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d022      	beq.n	8008030 <HAL_DMA_Start_IT+0x350>
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a6a      	ldr	r2, [pc, #424]	; (8008198 <HAL_DMA_Start_IT+0x4b8>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d01d      	beq.n	8008030 <HAL_DMA_Start_IT+0x350>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a68      	ldr	r2, [pc, #416]	; (800819c <HAL_DMA_Start_IT+0x4bc>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d018      	beq.n	8008030 <HAL_DMA_Start_IT+0x350>
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a67      	ldr	r2, [pc, #412]	; (80081a0 <HAL_DMA_Start_IT+0x4c0>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d013      	beq.n	8008030 <HAL_DMA_Start_IT+0x350>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a65      	ldr	r2, [pc, #404]	; (80081a4 <HAL_DMA_Start_IT+0x4c4>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d00e      	beq.n	8008030 <HAL_DMA_Start_IT+0x350>
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a64      	ldr	r2, [pc, #400]	; (80081a8 <HAL_DMA_Start_IT+0x4c8>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d009      	beq.n	8008030 <HAL_DMA_Start_IT+0x350>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a62      	ldr	r2, [pc, #392]	; (80081ac <HAL_DMA_Start_IT+0x4cc>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d004      	beq.n	8008030 <HAL_DMA_Start_IT+0x350>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a61      	ldr	r2, [pc, #388]	; (80081b0 <HAL_DMA_Start_IT+0x4d0>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d101      	bne.n	8008034 <HAL_DMA_Start_IT+0x354>
 8008030:	2301      	movs	r3, #1
 8008032:	e000      	b.n	8008036 <HAL_DMA_Start_IT+0x356>
 8008034:	2300      	movs	r3, #0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d01a      	beq.n	8008070 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008044:	2b00      	cmp	r3, #0
 8008046:	d007      	beq.n	8008058 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008052:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008056:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800805c:	2b00      	cmp	r3, #0
 800805e:	d007      	beq.n	8008070 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800806a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800806e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a37      	ldr	r2, [pc, #220]	; (8008154 <HAL_DMA_Start_IT+0x474>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d04a      	beq.n	8008110 <HAL_DMA_Start_IT+0x430>
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a36      	ldr	r2, [pc, #216]	; (8008158 <HAL_DMA_Start_IT+0x478>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d045      	beq.n	8008110 <HAL_DMA_Start_IT+0x430>
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a34      	ldr	r2, [pc, #208]	; (800815c <HAL_DMA_Start_IT+0x47c>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d040      	beq.n	8008110 <HAL_DMA_Start_IT+0x430>
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a33      	ldr	r2, [pc, #204]	; (8008160 <HAL_DMA_Start_IT+0x480>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d03b      	beq.n	8008110 <HAL_DMA_Start_IT+0x430>
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a31      	ldr	r2, [pc, #196]	; (8008164 <HAL_DMA_Start_IT+0x484>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d036      	beq.n	8008110 <HAL_DMA_Start_IT+0x430>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a30      	ldr	r2, [pc, #192]	; (8008168 <HAL_DMA_Start_IT+0x488>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d031      	beq.n	8008110 <HAL_DMA_Start_IT+0x430>
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a2e      	ldr	r2, [pc, #184]	; (800816c <HAL_DMA_Start_IT+0x48c>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d02c      	beq.n	8008110 <HAL_DMA_Start_IT+0x430>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a2d      	ldr	r2, [pc, #180]	; (8008170 <HAL_DMA_Start_IT+0x490>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d027      	beq.n	8008110 <HAL_DMA_Start_IT+0x430>
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a2b      	ldr	r2, [pc, #172]	; (8008174 <HAL_DMA_Start_IT+0x494>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d022      	beq.n	8008110 <HAL_DMA_Start_IT+0x430>
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a2a      	ldr	r2, [pc, #168]	; (8008178 <HAL_DMA_Start_IT+0x498>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d01d      	beq.n	8008110 <HAL_DMA_Start_IT+0x430>
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a28      	ldr	r2, [pc, #160]	; (800817c <HAL_DMA_Start_IT+0x49c>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d018      	beq.n	8008110 <HAL_DMA_Start_IT+0x430>
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a27      	ldr	r2, [pc, #156]	; (8008180 <HAL_DMA_Start_IT+0x4a0>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d013      	beq.n	8008110 <HAL_DMA_Start_IT+0x430>
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a25      	ldr	r2, [pc, #148]	; (8008184 <HAL_DMA_Start_IT+0x4a4>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d00e      	beq.n	8008110 <HAL_DMA_Start_IT+0x430>
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a24      	ldr	r2, [pc, #144]	; (8008188 <HAL_DMA_Start_IT+0x4a8>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d009      	beq.n	8008110 <HAL_DMA_Start_IT+0x430>
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a22      	ldr	r2, [pc, #136]	; (800818c <HAL_DMA_Start_IT+0x4ac>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d004      	beq.n	8008110 <HAL_DMA_Start_IT+0x430>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a21      	ldr	r2, [pc, #132]	; (8008190 <HAL_DMA_Start_IT+0x4b0>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d108      	bne.n	8008122 <HAL_DMA_Start_IT+0x442>
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f042 0201 	orr.w	r2, r2, #1
 800811e:	601a      	str	r2, [r3, #0]
 8008120:	e012      	b.n	8008148 <HAL_DMA_Start_IT+0x468>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f042 0201 	orr.w	r2, r2, #1
 8008130:	601a      	str	r2, [r3, #0]
 8008132:	e009      	b.n	8008148 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008142:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008148:	7dfb      	ldrb	r3, [r7, #23]
}
 800814a:	4618      	mov	r0, r3
 800814c:	3718      	adds	r7, #24
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	40020010 	.word	0x40020010
 8008158:	40020028 	.word	0x40020028
 800815c:	40020040 	.word	0x40020040
 8008160:	40020058 	.word	0x40020058
 8008164:	40020070 	.word	0x40020070
 8008168:	40020088 	.word	0x40020088
 800816c:	400200a0 	.word	0x400200a0
 8008170:	400200b8 	.word	0x400200b8
 8008174:	40020410 	.word	0x40020410
 8008178:	40020428 	.word	0x40020428
 800817c:	40020440 	.word	0x40020440
 8008180:	40020458 	.word	0x40020458
 8008184:	40020470 	.word	0x40020470
 8008188:	40020488 	.word	0x40020488
 800818c:	400204a0 	.word	0x400204a0
 8008190:	400204b8 	.word	0x400204b8
 8008194:	58025408 	.word	0x58025408
 8008198:	5802541c 	.word	0x5802541c
 800819c:	58025430 	.word	0x58025430
 80081a0:	58025444 	.word	0x58025444
 80081a4:	58025458 	.word	0x58025458
 80081a8:	5802546c 	.word	0x5802546c
 80081ac:	58025480 	.word	0x58025480
 80081b0:	58025494 	.word	0x58025494

080081b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d101      	bne.n	80081c6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	e205      	b.n	80085d2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b02      	cmp	r3, #2
 80081d0:	d004      	beq.n	80081dc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2280      	movs	r2, #128	; 0x80
 80081d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	e1fa      	b.n	80085d2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a8c      	ldr	r2, [pc, #560]	; (8008414 <HAL_DMA_Abort_IT+0x260>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d04a      	beq.n	800827c <HAL_DMA_Abort_IT+0xc8>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a8b      	ldr	r2, [pc, #556]	; (8008418 <HAL_DMA_Abort_IT+0x264>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d045      	beq.n	800827c <HAL_DMA_Abort_IT+0xc8>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a89      	ldr	r2, [pc, #548]	; (800841c <HAL_DMA_Abort_IT+0x268>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d040      	beq.n	800827c <HAL_DMA_Abort_IT+0xc8>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a88      	ldr	r2, [pc, #544]	; (8008420 <HAL_DMA_Abort_IT+0x26c>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d03b      	beq.n	800827c <HAL_DMA_Abort_IT+0xc8>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a86      	ldr	r2, [pc, #536]	; (8008424 <HAL_DMA_Abort_IT+0x270>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d036      	beq.n	800827c <HAL_DMA_Abort_IT+0xc8>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a85      	ldr	r2, [pc, #532]	; (8008428 <HAL_DMA_Abort_IT+0x274>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d031      	beq.n	800827c <HAL_DMA_Abort_IT+0xc8>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a83      	ldr	r2, [pc, #524]	; (800842c <HAL_DMA_Abort_IT+0x278>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d02c      	beq.n	800827c <HAL_DMA_Abort_IT+0xc8>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a82      	ldr	r2, [pc, #520]	; (8008430 <HAL_DMA_Abort_IT+0x27c>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d027      	beq.n	800827c <HAL_DMA_Abort_IT+0xc8>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a80      	ldr	r2, [pc, #512]	; (8008434 <HAL_DMA_Abort_IT+0x280>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d022      	beq.n	800827c <HAL_DMA_Abort_IT+0xc8>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a7f      	ldr	r2, [pc, #508]	; (8008438 <HAL_DMA_Abort_IT+0x284>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d01d      	beq.n	800827c <HAL_DMA_Abort_IT+0xc8>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a7d      	ldr	r2, [pc, #500]	; (800843c <HAL_DMA_Abort_IT+0x288>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d018      	beq.n	800827c <HAL_DMA_Abort_IT+0xc8>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a7c      	ldr	r2, [pc, #496]	; (8008440 <HAL_DMA_Abort_IT+0x28c>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d013      	beq.n	800827c <HAL_DMA_Abort_IT+0xc8>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a7a      	ldr	r2, [pc, #488]	; (8008444 <HAL_DMA_Abort_IT+0x290>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d00e      	beq.n	800827c <HAL_DMA_Abort_IT+0xc8>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a79      	ldr	r2, [pc, #484]	; (8008448 <HAL_DMA_Abort_IT+0x294>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d009      	beq.n	800827c <HAL_DMA_Abort_IT+0xc8>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a77      	ldr	r2, [pc, #476]	; (800844c <HAL_DMA_Abort_IT+0x298>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d004      	beq.n	800827c <HAL_DMA_Abort_IT+0xc8>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a76      	ldr	r2, [pc, #472]	; (8008450 <HAL_DMA_Abort_IT+0x29c>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d101      	bne.n	8008280 <HAL_DMA_Abort_IT+0xcc>
 800827c:	2301      	movs	r3, #1
 800827e:	e000      	b.n	8008282 <HAL_DMA_Abort_IT+0xce>
 8008280:	2300      	movs	r3, #0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d065      	beq.n	8008352 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2204      	movs	r2, #4
 800828a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a60      	ldr	r2, [pc, #384]	; (8008414 <HAL_DMA_Abort_IT+0x260>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d04a      	beq.n	800832e <HAL_DMA_Abort_IT+0x17a>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a5e      	ldr	r2, [pc, #376]	; (8008418 <HAL_DMA_Abort_IT+0x264>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d045      	beq.n	800832e <HAL_DMA_Abort_IT+0x17a>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a5d      	ldr	r2, [pc, #372]	; (800841c <HAL_DMA_Abort_IT+0x268>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d040      	beq.n	800832e <HAL_DMA_Abort_IT+0x17a>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a5b      	ldr	r2, [pc, #364]	; (8008420 <HAL_DMA_Abort_IT+0x26c>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d03b      	beq.n	800832e <HAL_DMA_Abort_IT+0x17a>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a5a      	ldr	r2, [pc, #360]	; (8008424 <HAL_DMA_Abort_IT+0x270>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d036      	beq.n	800832e <HAL_DMA_Abort_IT+0x17a>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a58      	ldr	r2, [pc, #352]	; (8008428 <HAL_DMA_Abort_IT+0x274>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d031      	beq.n	800832e <HAL_DMA_Abort_IT+0x17a>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a57      	ldr	r2, [pc, #348]	; (800842c <HAL_DMA_Abort_IT+0x278>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d02c      	beq.n	800832e <HAL_DMA_Abort_IT+0x17a>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a55      	ldr	r2, [pc, #340]	; (8008430 <HAL_DMA_Abort_IT+0x27c>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d027      	beq.n	800832e <HAL_DMA_Abort_IT+0x17a>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a54      	ldr	r2, [pc, #336]	; (8008434 <HAL_DMA_Abort_IT+0x280>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d022      	beq.n	800832e <HAL_DMA_Abort_IT+0x17a>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a52      	ldr	r2, [pc, #328]	; (8008438 <HAL_DMA_Abort_IT+0x284>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d01d      	beq.n	800832e <HAL_DMA_Abort_IT+0x17a>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a51      	ldr	r2, [pc, #324]	; (800843c <HAL_DMA_Abort_IT+0x288>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d018      	beq.n	800832e <HAL_DMA_Abort_IT+0x17a>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a4f      	ldr	r2, [pc, #316]	; (8008440 <HAL_DMA_Abort_IT+0x28c>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d013      	beq.n	800832e <HAL_DMA_Abort_IT+0x17a>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a4e      	ldr	r2, [pc, #312]	; (8008444 <HAL_DMA_Abort_IT+0x290>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d00e      	beq.n	800832e <HAL_DMA_Abort_IT+0x17a>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a4c      	ldr	r2, [pc, #304]	; (8008448 <HAL_DMA_Abort_IT+0x294>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d009      	beq.n	800832e <HAL_DMA_Abort_IT+0x17a>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a4b      	ldr	r2, [pc, #300]	; (800844c <HAL_DMA_Abort_IT+0x298>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d004      	beq.n	800832e <HAL_DMA_Abort_IT+0x17a>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a49      	ldr	r2, [pc, #292]	; (8008450 <HAL_DMA_Abort_IT+0x29c>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d108      	bne.n	8008340 <HAL_DMA_Abort_IT+0x18c>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f022 0201 	bic.w	r2, r2, #1
 800833c:	601a      	str	r2, [r3, #0]
 800833e:	e147      	b.n	80085d0 <HAL_DMA_Abort_IT+0x41c>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f022 0201 	bic.w	r2, r2, #1
 800834e:	601a      	str	r2, [r3, #0]
 8008350:	e13e      	b.n	80085d0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f022 020e 	bic.w	r2, r2, #14
 8008360:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a2b      	ldr	r2, [pc, #172]	; (8008414 <HAL_DMA_Abort_IT+0x260>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d04a      	beq.n	8008402 <HAL_DMA_Abort_IT+0x24e>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a29      	ldr	r2, [pc, #164]	; (8008418 <HAL_DMA_Abort_IT+0x264>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d045      	beq.n	8008402 <HAL_DMA_Abort_IT+0x24e>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a28      	ldr	r2, [pc, #160]	; (800841c <HAL_DMA_Abort_IT+0x268>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d040      	beq.n	8008402 <HAL_DMA_Abort_IT+0x24e>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a26      	ldr	r2, [pc, #152]	; (8008420 <HAL_DMA_Abort_IT+0x26c>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d03b      	beq.n	8008402 <HAL_DMA_Abort_IT+0x24e>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a25      	ldr	r2, [pc, #148]	; (8008424 <HAL_DMA_Abort_IT+0x270>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d036      	beq.n	8008402 <HAL_DMA_Abort_IT+0x24e>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a23      	ldr	r2, [pc, #140]	; (8008428 <HAL_DMA_Abort_IT+0x274>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d031      	beq.n	8008402 <HAL_DMA_Abort_IT+0x24e>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a22      	ldr	r2, [pc, #136]	; (800842c <HAL_DMA_Abort_IT+0x278>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d02c      	beq.n	8008402 <HAL_DMA_Abort_IT+0x24e>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a20      	ldr	r2, [pc, #128]	; (8008430 <HAL_DMA_Abort_IT+0x27c>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d027      	beq.n	8008402 <HAL_DMA_Abort_IT+0x24e>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a1f      	ldr	r2, [pc, #124]	; (8008434 <HAL_DMA_Abort_IT+0x280>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d022      	beq.n	8008402 <HAL_DMA_Abort_IT+0x24e>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a1d      	ldr	r2, [pc, #116]	; (8008438 <HAL_DMA_Abort_IT+0x284>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d01d      	beq.n	8008402 <HAL_DMA_Abort_IT+0x24e>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a1c      	ldr	r2, [pc, #112]	; (800843c <HAL_DMA_Abort_IT+0x288>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d018      	beq.n	8008402 <HAL_DMA_Abort_IT+0x24e>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a1a      	ldr	r2, [pc, #104]	; (8008440 <HAL_DMA_Abort_IT+0x28c>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d013      	beq.n	8008402 <HAL_DMA_Abort_IT+0x24e>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a19      	ldr	r2, [pc, #100]	; (8008444 <HAL_DMA_Abort_IT+0x290>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d00e      	beq.n	8008402 <HAL_DMA_Abort_IT+0x24e>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a17      	ldr	r2, [pc, #92]	; (8008448 <HAL_DMA_Abort_IT+0x294>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d009      	beq.n	8008402 <HAL_DMA_Abort_IT+0x24e>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a16      	ldr	r2, [pc, #88]	; (800844c <HAL_DMA_Abort_IT+0x298>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d004      	beq.n	8008402 <HAL_DMA_Abort_IT+0x24e>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a14      	ldr	r2, [pc, #80]	; (8008450 <HAL_DMA_Abort_IT+0x29c>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d128      	bne.n	8008454 <HAL_DMA_Abort_IT+0x2a0>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f022 0201 	bic.w	r2, r2, #1
 8008410:	601a      	str	r2, [r3, #0]
 8008412:	e027      	b.n	8008464 <HAL_DMA_Abort_IT+0x2b0>
 8008414:	40020010 	.word	0x40020010
 8008418:	40020028 	.word	0x40020028
 800841c:	40020040 	.word	0x40020040
 8008420:	40020058 	.word	0x40020058
 8008424:	40020070 	.word	0x40020070
 8008428:	40020088 	.word	0x40020088
 800842c:	400200a0 	.word	0x400200a0
 8008430:	400200b8 	.word	0x400200b8
 8008434:	40020410 	.word	0x40020410
 8008438:	40020428 	.word	0x40020428
 800843c:	40020440 	.word	0x40020440
 8008440:	40020458 	.word	0x40020458
 8008444:	40020470 	.word	0x40020470
 8008448:	40020488 	.word	0x40020488
 800844c:	400204a0 	.word	0x400204a0
 8008450:	400204b8 	.word	0x400204b8
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f022 0201 	bic.w	r2, r2, #1
 8008462:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a5c      	ldr	r2, [pc, #368]	; (80085dc <HAL_DMA_Abort_IT+0x428>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d072      	beq.n	8008554 <HAL_DMA_Abort_IT+0x3a0>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a5b      	ldr	r2, [pc, #364]	; (80085e0 <HAL_DMA_Abort_IT+0x42c>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d06d      	beq.n	8008554 <HAL_DMA_Abort_IT+0x3a0>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a59      	ldr	r2, [pc, #356]	; (80085e4 <HAL_DMA_Abort_IT+0x430>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d068      	beq.n	8008554 <HAL_DMA_Abort_IT+0x3a0>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a58      	ldr	r2, [pc, #352]	; (80085e8 <HAL_DMA_Abort_IT+0x434>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d063      	beq.n	8008554 <HAL_DMA_Abort_IT+0x3a0>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a56      	ldr	r2, [pc, #344]	; (80085ec <HAL_DMA_Abort_IT+0x438>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d05e      	beq.n	8008554 <HAL_DMA_Abort_IT+0x3a0>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a55      	ldr	r2, [pc, #340]	; (80085f0 <HAL_DMA_Abort_IT+0x43c>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d059      	beq.n	8008554 <HAL_DMA_Abort_IT+0x3a0>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a53      	ldr	r2, [pc, #332]	; (80085f4 <HAL_DMA_Abort_IT+0x440>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d054      	beq.n	8008554 <HAL_DMA_Abort_IT+0x3a0>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a52      	ldr	r2, [pc, #328]	; (80085f8 <HAL_DMA_Abort_IT+0x444>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d04f      	beq.n	8008554 <HAL_DMA_Abort_IT+0x3a0>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a50      	ldr	r2, [pc, #320]	; (80085fc <HAL_DMA_Abort_IT+0x448>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d04a      	beq.n	8008554 <HAL_DMA_Abort_IT+0x3a0>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a4f      	ldr	r2, [pc, #316]	; (8008600 <HAL_DMA_Abort_IT+0x44c>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d045      	beq.n	8008554 <HAL_DMA_Abort_IT+0x3a0>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a4d      	ldr	r2, [pc, #308]	; (8008604 <HAL_DMA_Abort_IT+0x450>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d040      	beq.n	8008554 <HAL_DMA_Abort_IT+0x3a0>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a4c      	ldr	r2, [pc, #304]	; (8008608 <HAL_DMA_Abort_IT+0x454>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d03b      	beq.n	8008554 <HAL_DMA_Abort_IT+0x3a0>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a4a      	ldr	r2, [pc, #296]	; (800860c <HAL_DMA_Abort_IT+0x458>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d036      	beq.n	8008554 <HAL_DMA_Abort_IT+0x3a0>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a49      	ldr	r2, [pc, #292]	; (8008610 <HAL_DMA_Abort_IT+0x45c>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d031      	beq.n	8008554 <HAL_DMA_Abort_IT+0x3a0>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a47      	ldr	r2, [pc, #284]	; (8008614 <HAL_DMA_Abort_IT+0x460>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d02c      	beq.n	8008554 <HAL_DMA_Abort_IT+0x3a0>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a46      	ldr	r2, [pc, #280]	; (8008618 <HAL_DMA_Abort_IT+0x464>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d027      	beq.n	8008554 <HAL_DMA_Abort_IT+0x3a0>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a44      	ldr	r2, [pc, #272]	; (800861c <HAL_DMA_Abort_IT+0x468>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d022      	beq.n	8008554 <HAL_DMA_Abort_IT+0x3a0>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a43      	ldr	r2, [pc, #268]	; (8008620 <HAL_DMA_Abort_IT+0x46c>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d01d      	beq.n	8008554 <HAL_DMA_Abort_IT+0x3a0>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a41      	ldr	r2, [pc, #260]	; (8008624 <HAL_DMA_Abort_IT+0x470>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d018      	beq.n	8008554 <HAL_DMA_Abort_IT+0x3a0>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a40      	ldr	r2, [pc, #256]	; (8008628 <HAL_DMA_Abort_IT+0x474>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d013      	beq.n	8008554 <HAL_DMA_Abort_IT+0x3a0>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a3e      	ldr	r2, [pc, #248]	; (800862c <HAL_DMA_Abort_IT+0x478>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d00e      	beq.n	8008554 <HAL_DMA_Abort_IT+0x3a0>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a3d      	ldr	r2, [pc, #244]	; (8008630 <HAL_DMA_Abort_IT+0x47c>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d009      	beq.n	8008554 <HAL_DMA_Abort_IT+0x3a0>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a3b      	ldr	r2, [pc, #236]	; (8008634 <HAL_DMA_Abort_IT+0x480>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d004      	beq.n	8008554 <HAL_DMA_Abort_IT+0x3a0>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a3a      	ldr	r2, [pc, #232]	; (8008638 <HAL_DMA_Abort_IT+0x484>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d101      	bne.n	8008558 <HAL_DMA_Abort_IT+0x3a4>
 8008554:	2301      	movs	r3, #1
 8008556:	e000      	b.n	800855a <HAL_DMA_Abort_IT+0x3a6>
 8008558:	2300      	movs	r3, #0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d028      	beq.n	80085b0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008568:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800856c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008572:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008578:	f003 031f 	and.w	r3, r3, #31
 800857c:	2201      	movs	r2, #1
 800857e:	409a      	lsls	r2, r3
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800858c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00c      	beq.n	80085b0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085a4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80085ae:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d003      	beq.n	80085d0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3710      	adds	r7, #16
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	40020010 	.word	0x40020010
 80085e0:	40020028 	.word	0x40020028
 80085e4:	40020040 	.word	0x40020040
 80085e8:	40020058 	.word	0x40020058
 80085ec:	40020070 	.word	0x40020070
 80085f0:	40020088 	.word	0x40020088
 80085f4:	400200a0 	.word	0x400200a0
 80085f8:	400200b8 	.word	0x400200b8
 80085fc:	40020410 	.word	0x40020410
 8008600:	40020428 	.word	0x40020428
 8008604:	40020440 	.word	0x40020440
 8008608:	40020458 	.word	0x40020458
 800860c:	40020470 	.word	0x40020470
 8008610:	40020488 	.word	0x40020488
 8008614:	400204a0 	.word	0x400204a0
 8008618:	400204b8 	.word	0x400204b8
 800861c:	58025408 	.word	0x58025408
 8008620:	5802541c 	.word	0x5802541c
 8008624:	58025430 	.word	0x58025430
 8008628:	58025444 	.word	0x58025444
 800862c:	58025458 	.word	0x58025458
 8008630:	5802546c 	.word	0x5802546c
 8008634:	58025480 	.word	0x58025480
 8008638:	58025494 	.word	0x58025494

0800863c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b08a      	sub	sp, #40	; 0x28
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008644:	2300      	movs	r3, #0
 8008646:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008648:	4b67      	ldr	r3, [pc, #412]	; (80087e8 <HAL_DMA_IRQHandler+0x1ac>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a67      	ldr	r2, [pc, #412]	; (80087ec <HAL_DMA_IRQHandler+0x1b0>)
 800864e:	fba2 2303 	umull	r2, r3, r2, r3
 8008652:	0a9b      	lsrs	r3, r3, #10
 8008654:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800865a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008660:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008662:	6a3b      	ldr	r3, [r7, #32]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a5f      	ldr	r2, [pc, #380]	; (80087f0 <HAL_DMA_IRQHandler+0x1b4>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d04a      	beq.n	800870e <HAL_DMA_IRQHandler+0xd2>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a5d      	ldr	r2, [pc, #372]	; (80087f4 <HAL_DMA_IRQHandler+0x1b8>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d045      	beq.n	800870e <HAL_DMA_IRQHandler+0xd2>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a5c      	ldr	r2, [pc, #368]	; (80087f8 <HAL_DMA_IRQHandler+0x1bc>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d040      	beq.n	800870e <HAL_DMA_IRQHandler+0xd2>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a5a      	ldr	r2, [pc, #360]	; (80087fc <HAL_DMA_IRQHandler+0x1c0>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d03b      	beq.n	800870e <HAL_DMA_IRQHandler+0xd2>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a59      	ldr	r2, [pc, #356]	; (8008800 <HAL_DMA_IRQHandler+0x1c4>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d036      	beq.n	800870e <HAL_DMA_IRQHandler+0xd2>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a57      	ldr	r2, [pc, #348]	; (8008804 <HAL_DMA_IRQHandler+0x1c8>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d031      	beq.n	800870e <HAL_DMA_IRQHandler+0xd2>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a56      	ldr	r2, [pc, #344]	; (8008808 <HAL_DMA_IRQHandler+0x1cc>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d02c      	beq.n	800870e <HAL_DMA_IRQHandler+0xd2>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a54      	ldr	r2, [pc, #336]	; (800880c <HAL_DMA_IRQHandler+0x1d0>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d027      	beq.n	800870e <HAL_DMA_IRQHandler+0xd2>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a53      	ldr	r2, [pc, #332]	; (8008810 <HAL_DMA_IRQHandler+0x1d4>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d022      	beq.n	800870e <HAL_DMA_IRQHandler+0xd2>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a51      	ldr	r2, [pc, #324]	; (8008814 <HAL_DMA_IRQHandler+0x1d8>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d01d      	beq.n	800870e <HAL_DMA_IRQHandler+0xd2>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a50      	ldr	r2, [pc, #320]	; (8008818 <HAL_DMA_IRQHandler+0x1dc>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d018      	beq.n	800870e <HAL_DMA_IRQHandler+0xd2>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a4e      	ldr	r2, [pc, #312]	; (800881c <HAL_DMA_IRQHandler+0x1e0>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d013      	beq.n	800870e <HAL_DMA_IRQHandler+0xd2>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a4d      	ldr	r2, [pc, #308]	; (8008820 <HAL_DMA_IRQHandler+0x1e4>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d00e      	beq.n	800870e <HAL_DMA_IRQHandler+0xd2>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a4b      	ldr	r2, [pc, #300]	; (8008824 <HAL_DMA_IRQHandler+0x1e8>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d009      	beq.n	800870e <HAL_DMA_IRQHandler+0xd2>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a4a      	ldr	r2, [pc, #296]	; (8008828 <HAL_DMA_IRQHandler+0x1ec>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d004      	beq.n	800870e <HAL_DMA_IRQHandler+0xd2>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a48      	ldr	r2, [pc, #288]	; (800882c <HAL_DMA_IRQHandler+0x1f0>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d101      	bne.n	8008712 <HAL_DMA_IRQHandler+0xd6>
 800870e:	2301      	movs	r3, #1
 8008710:	e000      	b.n	8008714 <HAL_DMA_IRQHandler+0xd8>
 8008712:	2300      	movs	r3, #0
 8008714:	2b00      	cmp	r3, #0
 8008716:	f000 842b 	beq.w	8008f70 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800871e:	f003 031f 	and.w	r3, r3, #31
 8008722:	2208      	movs	r2, #8
 8008724:	409a      	lsls	r2, r3
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	4013      	ands	r3, r2
 800872a:	2b00      	cmp	r3, #0
 800872c:	f000 80a2 	beq.w	8008874 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a2e      	ldr	r2, [pc, #184]	; (80087f0 <HAL_DMA_IRQHandler+0x1b4>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d04a      	beq.n	80087d0 <HAL_DMA_IRQHandler+0x194>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a2d      	ldr	r2, [pc, #180]	; (80087f4 <HAL_DMA_IRQHandler+0x1b8>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d045      	beq.n	80087d0 <HAL_DMA_IRQHandler+0x194>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a2b      	ldr	r2, [pc, #172]	; (80087f8 <HAL_DMA_IRQHandler+0x1bc>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d040      	beq.n	80087d0 <HAL_DMA_IRQHandler+0x194>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a2a      	ldr	r2, [pc, #168]	; (80087fc <HAL_DMA_IRQHandler+0x1c0>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d03b      	beq.n	80087d0 <HAL_DMA_IRQHandler+0x194>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a28      	ldr	r2, [pc, #160]	; (8008800 <HAL_DMA_IRQHandler+0x1c4>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d036      	beq.n	80087d0 <HAL_DMA_IRQHandler+0x194>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a27      	ldr	r2, [pc, #156]	; (8008804 <HAL_DMA_IRQHandler+0x1c8>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d031      	beq.n	80087d0 <HAL_DMA_IRQHandler+0x194>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a25      	ldr	r2, [pc, #148]	; (8008808 <HAL_DMA_IRQHandler+0x1cc>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d02c      	beq.n	80087d0 <HAL_DMA_IRQHandler+0x194>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a24      	ldr	r2, [pc, #144]	; (800880c <HAL_DMA_IRQHandler+0x1d0>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d027      	beq.n	80087d0 <HAL_DMA_IRQHandler+0x194>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a22      	ldr	r2, [pc, #136]	; (8008810 <HAL_DMA_IRQHandler+0x1d4>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d022      	beq.n	80087d0 <HAL_DMA_IRQHandler+0x194>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a21      	ldr	r2, [pc, #132]	; (8008814 <HAL_DMA_IRQHandler+0x1d8>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d01d      	beq.n	80087d0 <HAL_DMA_IRQHandler+0x194>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a1f      	ldr	r2, [pc, #124]	; (8008818 <HAL_DMA_IRQHandler+0x1dc>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d018      	beq.n	80087d0 <HAL_DMA_IRQHandler+0x194>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a1e      	ldr	r2, [pc, #120]	; (800881c <HAL_DMA_IRQHandler+0x1e0>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d013      	beq.n	80087d0 <HAL_DMA_IRQHandler+0x194>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a1c      	ldr	r2, [pc, #112]	; (8008820 <HAL_DMA_IRQHandler+0x1e4>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d00e      	beq.n	80087d0 <HAL_DMA_IRQHandler+0x194>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a1b      	ldr	r2, [pc, #108]	; (8008824 <HAL_DMA_IRQHandler+0x1e8>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d009      	beq.n	80087d0 <HAL_DMA_IRQHandler+0x194>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a19      	ldr	r2, [pc, #100]	; (8008828 <HAL_DMA_IRQHandler+0x1ec>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d004      	beq.n	80087d0 <HAL_DMA_IRQHandler+0x194>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a18      	ldr	r2, [pc, #96]	; (800882c <HAL_DMA_IRQHandler+0x1f0>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d12f      	bne.n	8008830 <HAL_DMA_IRQHandler+0x1f4>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 0304 	and.w	r3, r3, #4
 80087da:	2b00      	cmp	r3, #0
 80087dc:	bf14      	ite	ne
 80087de:	2301      	movne	r3, #1
 80087e0:	2300      	moveq	r3, #0
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	e02e      	b.n	8008844 <HAL_DMA_IRQHandler+0x208>
 80087e6:	bf00      	nop
 80087e8:	24000010 	.word	0x24000010
 80087ec:	1b4e81b5 	.word	0x1b4e81b5
 80087f0:	40020010 	.word	0x40020010
 80087f4:	40020028 	.word	0x40020028
 80087f8:	40020040 	.word	0x40020040
 80087fc:	40020058 	.word	0x40020058
 8008800:	40020070 	.word	0x40020070
 8008804:	40020088 	.word	0x40020088
 8008808:	400200a0 	.word	0x400200a0
 800880c:	400200b8 	.word	0x400200b8
 8008810:	40020410 	.word	0x40020410
 8008814:	40020428 	.word	0x40020428
 8008818:	40020440 	.word	0x40020440
 800881c:	40020458 	.word	0x40020458
 8008820:	40020470 	.word	0x40020470
 8008824:	40020488 	.word	0x40020488
 8008828:	400204a0 	.word	0x400204a0
 800882c:	400204b8 	.word	0x400204b8
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 0308 	and.w	r3, r3, #8
 800883a:	2b00      	cmp	r3, #0
 800883c:	bf14      	ite	ne
 800883e:	2301      	movne	r3, #1
 8008840:	2300      	moveq	r3, #0
 8008842:	b2db      	uxtb	r3, r3
 8008844:	2b00      	cmp	r3, #0
 8008846:	d015      	beq.n	8008874 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f022 0204 	bic.w	r2, r2, #4
 8008856:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800885c:	f003 031f 	and.w	r3, r3, #31
 8008860:	2208      	movs	r2, #8
 8008862:	409a      	lsls	r2, r3
 8008864:	6a3b      	ldr	r3, [r7, #32]
 8008866:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800886c:	f043 0201 	orr.w	r2, r3, #1
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008878:	f003 031f 	and.w	r3, r3, #31
 800887c:	69ba      	ldr	r2, [r7, #24]
 800887e:	fa22 f303 	lsr.w	r3, r2, r3
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	2b00      	cmp	r3, #0
 8008888:	d06e      	beq.n	8008968 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a69      	ldr	r2, [pc, #420]	; (8008a34 <HAL_DMA_IRQHandler+0x3f8>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d04a      	beq.n	800892a <HAL_DMA_IRQHandler+0x2ee>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a67      	ldr	r2, [pc, #412]	; (8008a38 <HAL_DMA_IRQHandler+0x3fc>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d045      	beq.n	800892a <HAL_DMA_IRQHandler+0x2ee>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a66      	ldr	r2, [pc, #408]	; (8008a3c <HAL_DMA_IRQHandler+0x400>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d040      	beq.n	800892a <HAL_DMA_IRQHandler+0x2ee>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a64      	ldr	r2, [pc, #400]	; (8008a40 <HAL_DMA_IRQHandler+0x404>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d03b      	beq.n	800892a <HAL_DMA_IRQHandler+0x2ee>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a63      	ldr	r2, [pc, #396]	; (8008a44 <HAL_DMA_IRQHandler+0x408>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d036      	beq.n	800892a <HAL_DMA_IRQHandler+0x2ee>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a61      	ldr	r2, [pc, #388]	; (8008a48 <HAL_DMA_IRQHandler+0x40c>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d031      	beq.n	800892a <HAL_DMA_IRQHandler+0x2ee>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a60      	ldr	r2, [pc, #384]	; (8008a4c <HAL_DMA_IRQHandler+0x410>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d02c      	beq.n	800892a <HAL_DMA_IRQHandler+0x2ee>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a5e      	ldr	r2, [pc, #376]	; (8008a50 <HAL_DMA_IRQHandler+0x414>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d027      	beq.n	800892a <HAL_DMA_IRQHandler+0x2ee>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a5d      	ldr	r2, [pc, #372]	; (8008a54 <HAL_DMA_IRQHandler+0x418>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d022      	beq.n	800892a <HAL_DMA_IRQHandler+0x2ee>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a5b      	ldr	r2, [pc, #364]	; (8008a58 <HAL_DMA_IRQHandler+0x41c>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d01d      	beq.n	800892a <HAL_DMA_IRQHandler+0x2ee>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a5a      	ldr	r2, [pc, #360]	; (8008a5c <HAL_DMA_IRQHandler+0x420>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d018      	beq.n	800892a <HAL_DMA_IRQHandler+0x2ee>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a58      	ldr	r2, [pc, #352]	; (8008a60 <HAL_DMA_IRQHandler+0x424>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d013      	beq.n	800892a <HAL_DMA_IRQHandler+0x2ee>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a57      	ldr	r2, [pc, #348]	; (8008a64 <HAL_DMA_IRQHandler+0x428>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d00e      	beq.n	800892a <HAL_DMA_IRQHandler+0x2ee>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a55      	ldr	r2, [pc, #340]	; (8008a68 <HAL_DMA_IRQHandler+0x42c>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d009      	beq.n	800892a <HAL_DMA_IRQHandler+0x2ee>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a54      	ldr	r2, [pc, #336]	; (8008a6c <HAL_DMA_IRQHandler+0x430>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d004      	beq.n	800892a <HAL_DMA_IRQHandler+0x2ee>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a52      	ldr	r2, [pc, #328]	; (8008a70 <HAL_DMA_IRQHandler+0x434>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d10a      	bne.n	8008940 <HAL_DMA_IRQHandler+0x304>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	695b      	ldr	r3, [r3, #20]
 8008930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008934:	2b00      	cmp	r3, #0
 8008936:	bf14      	ite	ne
 8008938:	2301      	movne	r3, #1
 800893a:	2300      	moveq	r3, #0
 800893c:	b2db      	uxtb	r3, r3
 800893e:	e003      	b.n	8008948 <HAL_DMA_IRQHandler+0x30c>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	2300      	movs	r3, #0
 8008948:	2b00      	cmp	r3, #0
 800894a:	d00d      	beq.n	8008968 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008950:	f003 031f 	and.w	r3, r3, #31
 8008954:	2201      	movs	r2, #1
 8008956:	409a      	lsls	r2, r3
 8008958:	6a3b      	ldr	r3, [r7, #32]
 800895a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008960:	f043 0202 	orr.w	r2, r3, #2
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800896c:	f003 031f 	and.w	r3, r3, #31
 8008970:	2204      	movs	r2, #4
 8008972:	409a      	lsls	r2, r3
 8008974:	69bb      	ldr	r3, [r7, #24]
 8008976:	4013      	ands	r3, r2
 8008978:	2b00      	cmp	r3, #0
 800897a:	f000 808f 	beq.w	8008a9c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a2c      	ldr	r2, [pc, #176]	; (8008a34 <HAL_DMA_IRQHandler+0x3f8>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d04a      	beq.n	8008a1e <HAL_DMA_IRQHandler+0x3e2>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a2a      	ldr	r2, [pc, #168]	; (8008a38 <HAL_DMA_IRQHandler+0x3fc>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d045      	beq.n	8008a1e <HAL_DMA_IRQHandler+0x3e2>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a29      	ldr	r2, [pc, #164]	; (8008a3c <HAL_DMA_IRQHandler+0x400>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d040      	beq.n	8008a1e <HAL_DMA_IRQHandler+0x3e2>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a27      	ldr	r2, [pc, #156]	; (8008a40 <HAL_DMA_IRQHandler+0x404>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d03b      	beq.n	8008a1e <HAL_DMA_IRQHandler+0x3e2>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a26      	ldr	r2, [pc, #152]	; (8008a44 <HAL_DMA_IRQHandler+0x408>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d036      	beq.n	8008a1e <HAL_DMA_IRQHandler+0x3e2>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a24      	ldr	r2, [pc, #144]	; (8008a48 <HAL_DMA_IRQHandler+0x40c>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d031      	beq.n	8008a1e <HAL_DMA_IRQHandler+0x3e2>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a23      	ldr	r2, [pc, #140]	; (8008a4c <HAL_DMA_IRQHandler+0x410>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d02c      	beq.n	8008a1e <HAL_DMA_IRQHandler+0x3e2>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a21      	ldr	r2, [pc, #132]	; (8008a50 <HAL_DMA_IRQHandler+0x414>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d027      	beq.n	8008a1e <HAL_DMA_IRQHandler+0x3e2>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a20      	ldr	r2, [pc, #128]	; (8008a54 <HAL_DMA_IRQHandler+0x418>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d022      	beq.n	8008a1e <HAL_DMA_IRQHandler+0x3e2>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a1e      	ldr	r2, [pc, #120]	; (8008a58 <HAL_DMA_IRQHandler+0x41c>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d01d      	beq.n	8008a1e <HAL_DMA_IRQHandler+0x3e2>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a1d      	ldr	r2, [pc, #116]	; (8008a5c <HAL_DMA_IRQHandler+0x420>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d018      	beq.n	8008a1e <HAL_DMA_IRQHandler+0x3e2>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a1b      	ldr	r2, [pc, #108]	; (8008a60 <HAL_DMA_IRQHandler+0x424>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d013      	beq.n	8008a1e <HAL_DMA_IRQHandler+0x3e2>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a1a      	ldr	r2, [pc, #104]	; (8008a64 <HAL_DMA_IRQHandler+0x428>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d00e      	beq.n	8008a1e <HAL_DMA_IRQHandler+0x3e2>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a18      	ldr	r2, [pc, #96]	; (8008a68 <HAL_DMA_IRQHandler+0x42c>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d009      	beq.n	8008a1e <HAL_DMA_IRQHandler+0x3e2>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a17      	ldr	r2, [pc, #92]	; (8008a6c <HAL_DMA_IRQHandler+0x430>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d004      	beq.n	8008a1e <HAL_DMA_IRQHandler+0x3e2>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a15      	ldr	r2, [pc, #84]	; (8008a70 <HAL_DMA_IRQHandler+0x434>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d12a      	bne.n	8008a74 <HAL_DMA_IRQHandler+0x438>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f003 0302 	and.w	r3, r3, #2
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	bf14      	ite	ne
 8008a2c:	2301      	movne	r3, #1
 8008a2e:	2300      	moveq	r3, #0
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	e023      	b.n	8008a7c <HAL_DMA_IRQHandler+0x440>
 8008a34:	40020010 	.word	0x40020010
 8008a38:	40020028 	.word	0x40020028
 8008a3c:	40020040 	.word	0x40020040
 8008a40:	40020058 	.word	0x40020058
 8008a44:	40020070 	.word	0x40020070
 8008a48:	40020088 	.word	0x40020088
 8008a4c:	400200a0 	.word	0x400200a0
 8008a50:	400200b8 	.word	0x400200b8
 8008a54:	40020410 	.word	0x40020410
 8008a58:	40020428 	.word	0x40020428
 8008a5c:	40020440 	.word	0x40020440
 8008a60:	40020458 	.word	0x40020458
 8008a64:	40020470 	.word	0x40020470
 8008a68:	40020488 	.word	0x40020488
 8008a6c:	400204a0 	.word	0x400204a0
 8008a70:	400204b8 	.word	0x400204b8
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00d      	beq.n	8008a9c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a84:	f003 031f 	and.w	r3, r3, #31
 8008a88:	2204      	movs	r2, #4
 8008a8a:	409a      	lsls	r2, r3
 8008a8c:	6a3b      	ldr	r3, [r7, #32]
 8008a8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a94:	f043 0204 	orr.w	r2, r3, #4
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008aa0:	f003 031f 	and.w	r3, r3, #31
 8008aa4:	2210      	movs	r2, #16
 8008aa6:	409a      	lsls	r2, r3
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	4013      	ands	r3, r2
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	f000 80a6 	beq.w	8008bfe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a85      	ldr	r2, [pc, #532]	; (8008ccc <HAL_DMA_IRQHandler+0x690>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d04a      	beq.n	8008b52 <HAL_DMA_IRQHandler+0x516>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a83      	ldr	r2, [pc, #524]	; (8008cd0 <HAL_DMA_IRQHandler+0x694>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d045      	beq.n	8008b52 <HAL_DMA_IRQHandler+0x516>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a82      	ldr	r2, [pc, #520]	; (8008cd4 <HAL_DMA_IRQHandler+0x698>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d040      	beq.n	8008b52 <HAL_DMA_IRQHandler+0x516>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a80      	ldr	r2, [pc, #512]	; (8008cd8 <HAL_DMA_IRQHandler+0x69c>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d03b      	beq.n	8008b52 <HAL_DMA_IRQHandler+0x516>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a7f      	ldr	r2, [pc, #508]	; (8008cdc <HAL_DMA_IRQHandler+0x6a0>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d036      	beq.n	8008b52 <HAL_DMA_IRQHandler+0x516>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a7d      	ldr	r2, [pc, #500]	; (8008ce0 <HAL_DMA_IRQHandler+0x6a4>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d031      	beq.n	8008b52 <HAL_DMA_IRQHandler+0x516>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a7c      	ldr	r2, [pc, #496]	; (8008ce4 <HAL_DMA_IRQHandler+0x6a8>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d02c      	beq.n	8008b52 <HAL_DMA_IRQHandler+0x516>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a7a      	ldr	r2, [pc, #488]	; (8008ce8 <HAL_DMA_IRQHandler+0x6ac>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d027      	beq.n	8008b52 <HAL_DMA_IRQHandler+0x516>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a79      	ldr	r2, [pc, #484]	; (8008cec <HAL_DMA_IRQHandler+0x6b0>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d022      	beq.n	8008b52 <HAL_DMA_IRQHandler+0x516>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a77      	ldr	r2, [pc, #476]	; (8008cf0 <HAL_DMA_IRQHandler+0x6b4>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d01d      	beq.n	8008b52 <HAL_DMA_IRQHandler+0x516>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a76      	ldr	r2, [pc, #472]	; (8008cf4 <HAL_DMA_IRQHandler+0x6b8>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d018      	beq.n	8008b52 <HAL_DMA_IRQHandler+0x516>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a74      	ldr	r2, [pc, #464]	; (8008cf8 <HAL_DMA_IRQHandler+0x6bc>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d013      	beq.n	8008b52 <HAL_DMA_IRQHandler+0x516>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a73      	ldr	r2, [pc, #460]	; (8008cfc <HAL_DMA_IRQHandler+0x6c0>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d00e      	beq.n	8008b52 <HAL_DMA_IRQHandler+0x516>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a71      	ldr	r2, [pc, #452]	; (8008d00 <HAL_DMA_IRQHandler+0x6c4>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d009      	beq.n	8008b52 <HAL_DMA_IRQHandler+0x516>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a70      	ldr	r2, [pc, #448]	; (8008d04 <HAL_DMA_IRQHandler+0x6c8>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d004      	beq.n	8008b52 <HAL_DMA_IRQHandler+0x516>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a6e      	ldr	r2, [pc, #440]	; (8008d08 <HAL_DMA_IRQHandler+0x6cc>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d10a      	bne.n	8008b68 <HAL_DMA_IRQHandler+0x52c>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 0308 	and.w	r3, r3, #8
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	bf14      	ite	ne
 8008b60:	2301      	movne	r3, #1
 8008b62:	2300      	moveq	r3, #0
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	e009      	b.n	8008b7c <HAL_DMA_IRQHandler+0x540>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f003 0304 	and.w	r3, r3, #4
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	bf14      	ite	ne
 8008b76:	2301      	movne	r3, #1
 8008b78:	2300      	moveq	r3, #0
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d03e      	beq.n	8008bfe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b84:	f003 031f 	and.w	r3, r3, #31
 8008b88:	2210      	movs	r2, #16
 8008b8a:	409a      	lsls	r2, r3
 8008b8c:	6a3b      	ldr	r3, [r7, #32]
 8008b8e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d018      	beq.n	8008bd0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d108      	bne.n	8008bbe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d024      	beq.n	8008bfe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	4798      	blx	r3
 8008bbc:	e01f      	b.n	8008bfe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d01b      	beq.n	8008bfe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	4798      	blx	r3
 8008bce:	e016      	b.n	8008bfe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d107      	bne.n	8008bee <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f022 0208 	bic.w	r2, r2, #8
 8008bec:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d003      	beq.n	8008bfe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c02:	f003 031f 	and.w	r3, r3, #31
 8008c06:	2220      	movs	r2, #32
 8008c08:	409a      	lsls	r2, r3
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	4013      	ands	r3, r2
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f000 8110 	beq.w	8008e34 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a2c      	ldr	r2, [pc, #176]	; (8008ccc <HAL_DMA_IRQHandler+0x690>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d04a      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x678>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a2b      	ldr	r2, [pc, #172]	; (8008cd0 <HAL_DMA_IRQHandler+0x694>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d045      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x678>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a29      	ldr	r2, [pc, #164]	; (8008cd4 <HAL_DMA_IRQHandler+0x698>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d040      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x678>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a28      	ldr	r2, [pc, #160]	; (8008cd8 <HAL_DMA_IRQHandler+0x69c>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d03b      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x678>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a26      	ldr	r2, [pc, #152]	; (8008cdc <HAL_DMA_IRQHandler+0x6a0>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d036      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x678>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a25      	ldr	r2, [pc, #148]	; (8008ce0 <HAL_DMA_IRQHandler+0x6a4>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d031      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x678>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a23      	ldr	r2, [pc, #140]	; (8008ce4 <HAL_DMA_IRQHandler+0x6a8>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d02c      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x678>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a22      	ldr	r2, [pc, #136]	; (8008ce8 <HAL_DMA_IRQHandler+0x6ac>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d027      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x678>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a20      	ldr	r2, [pc, #128]	; (8008cec <HAL_DMA_IRQHandler+0x6b0>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d022      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x678>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a1f      	ldr	r2, [pc, #124]	; (8008cf0 <HAL_DMA_IRQHandler+0x6b4>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d01d      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x678>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a1d      	ldr	r2, [pc, #116]	; (8008cf4 <HAL_DMA_IRQHandler+0x6b8>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d018      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x678>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a1c      	ldr	r2, [pc, #112]	; (8008cf8 <HAL_DMA_IRQHandler+0x6bc>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d013      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x678>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a1a      	ldr	r2, [pc, #104]	; (8008cfc <HAL_DMA_IRQHandler+0x6c0>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d00e      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x678>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a19      	ldr	r2, [pc, #100]	; (8008d00 <HAL_DMA_IRQHandler+0x6c4>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d009      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x678>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a17      	ldr	r2, [pc, #92]	; (8008d04 <HAL_DMA_IRQHandler+0x6c8>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d004      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x678>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a16      	ldr	r2, [pc, #88]	; (8008d08 <HAL_DMA_IRQHandler+0x6cc>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d12b      	bne.n	8008d0c <HAL_DMA_IRQHandler+0x6d0>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f003 0310 	and.w	r3, r3, #16
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	bf14      	ite	ne
 8008cc2:	2301      	movne	r3, #1
 8008cc4:	2300      	moveq	r3, #0
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	e02a      	b.n	8008d20 <HAL_DMA_IRQHandler+0x6e4>
 8008cca:	bf00      	nop
 8008ccc:	40020010 	.word	0x40020010
 8008cd0:	40020028 	.word	0x40020028
 8008cd4:	40020040 	.word	0x40020040
 8008cd8:	40020058 	.word	0x40020058
 8008cdc:	40020070 	.word	0x40020070
 8008ce0:	40020088 	.word	0x40020088
 8008ce4:	400200a0 	.word	0x400200a0
 8008ce8:	400200b8 	.word	0x400200b8
 8008cec:	40020410 	.word	0x40020410
 8008cf0:	40020428 	.word	0x40020428
 8008cf4:	40020440 	.word	0x40020440
 8008cf8:	40020458 	.word	0x40020458
 8008cfc:	40020470 	.word	0x40020470
 8008d00:	40020488 	.word	0x40020488
 8008d04:	400204a0 	.word	0x400204a0
 8008d08:	400204b8 	.word	0x400204b8
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f003 0302 	and.w	r3, r3, #2
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	bf14      	ite	ne
 8008d1a:	2301      	movne	r3, #1
 8008d1c:	2300      	moveq	r3, #0
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f000 8087 	beq.w	8008e34 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d2a:	f003 031f 	and.w	r3, r3, #31
 8008d2e:	2220      	movs	r2, #32
 8008d30:	409a      	lsls	r2, r3
 8008d32:	6a3b      	ldr	r3, [r7, #32]
 8008d34:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	2b04      	cmp	r3, #4
 8008d40:	d139      	bne.n	8008db6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f022 0216 	bic.w	r2, r2, #22
 8008d50:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	695a      	ldr	r2, [r3, #20]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d60:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d103      	bne.n	8008d72 <HAL_DMA_IRQHandler+0x736>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d007      	beq.n	8008d82 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f022 0208 	bic.w	r2, r2, #8
 8008d80:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d86:	f003 031f 	and.w	r3, r3, #31
 8008d8a:	223f      	movs	r2, #63	; 0x3f
 8008d8c:	409a      	lsls	r2, r3
 8008d8e:	6a3b      	ldr	r3, [r7, #32]
 8008d90:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f000 834a 	beq.w	8009440 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	4798      	blx	r3
          }
          return;
 8008db4:	e344      	b.n	8009440 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d018      	beq.n	8008df6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d108      	bne.n	8008de4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d02c      	beq.n	8008e34 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	4798      	blx	r3
 8008de2:	e027      	b.n	8008e34 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d023      	beq.n	8008e34 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	4798      	blx	r3
 8008df4:	e01e      	b.n	8008e34 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d10f      	bne.n	8008e24 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f022 0210 	bic.w	r2, r2, #16
 8008e12:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d003      	beq.n	8008e34 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	f000 8306 	beq.w	800944a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e42:	f003 0301 	and.w	r3, r3, #1
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	f000 8088 	beq.w	8008f5c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2204      	movs	r2, #4
 8008e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a7a      	ldr	r2, [pc, #488]	; (8009044 <HAL_DMA_IRQHandler+0xa08>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d04a      	beq.n	8008ef4 <HAL_DMA_IRQHandler+0x8b8>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a79      	ldr	r2, [pc, #484]	; (8009048 <HAL_DMA_IRQHandler+0xa0c>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d045      	beq.n	8008ef4 <HAL_DMA_IRQHandler+0x8b8>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a77      	ldr	r2, [pc, #476]	; (800904c <HAL_DMA_IRQHandler+0xa10>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d040      	beq.n	8008ef4 <HAL_DMA_IRQHandler+0x8b8>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a76      	ldr	r2, [pc, #472]	; (8009050 <HAL_DMA_IRQHandler+0xa14>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d03b      	beq.n	8008ef4 <HAL_DMA_IRQHandler+0x8b8>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a74      	ldr	r2, [pc, #464]	; (8009054 <HAL_DMA_IRQHandler+0xa18>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d036      	beq.n	8008ef4 <HAL_DMA_IRQHandler+0x8b8>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a73      	ldr	r2, [pc, #460]	; (8009058 <HAL_DMA_IRQHandler+0xa1c>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d031      	beq.n	8008ef4 <HAL_DMA_IRQHandler+0x8b8>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a71      	ldr	r2, [pc, #452]	; (800905c <HAL_DMA_IRQHandler+0xa20>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d02c      	beq.n	8008ef4 <HAL_DMA_IRQHandler+0x8b8>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a70      	ldr	r2, [pc, #448]	; (8009060 <HAL_DMA_IRQHandler+0xa24>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d027      	beq.n	8008ef4 <HAL_DMA_IRQHandler+0x8b8>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a6e      	ldr	r2, [pc, #440]	; (8009064 <HAL_DMA_IRQHandler+0xa28>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d022      	beq.n	8008ef4 <HAL_DMA_IRQHandler+0x8b8>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a6d      	ldr	r2, [pc, #436]	; (8009068 <HAL_DMA_IRQHandler+0xa2c>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d01d      	beq.n	8008ef4 <HAL_DMA_IRQHandler+0x8b8>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a6b      	ldr	r2, [pc, #428]	; (800906c <HAL_DMA_IRQHandler+0xa30>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d018      	beq.n	8008ef4 <HAL_DMA_IRQHandler+0x8b8>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a6a      	ldr	r2, [pc, #424]	; (8009070 <HAL_DMA_IRQHandler+0xa34>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d013      	beq.n	8008ef4 <HAL_DMA_IRQHandler+0x8b8>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a68      	ldr	r2, [pc, #416]	; (8009074 <HAL_DMA_IRQHandler+0xa38>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d00e      	beq.n	8008ef4 <HAL_DMA_IRQHandler+0x8b8>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a67      	ldr	r2, [pc, #412]	; (8009078 <HAL_DMA_IRQHandler+0xa3c>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d009      	beq.n	8008ef4 <HAL_DMA_IRQHandler+0x8b8>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a65      	ldr	r2, [pc, #404]	; (800907c <HAL_DMA_IRQHandler+0xa40>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d004      	beq.n	8008ef4 <HAL_DMA_IRQHandler+0x8b8>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a64      	ldr	r2, [pc, #400]	; (8009080 <HAL_DMA_IRQHandler+0xa44>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d108      	bne.n	8008f06 <HAL_DMA_IRQHandler+0x8ca>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f022 0201 	bic.w	r2, r2, #1
 8008f02:	601a      	str	r2, [r3, #0]
 8008f04:	e007      	b.n	8008f16 <HAL_DMA_IRQHandler+0x8da>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f022 0201 	bic.w	r2, r2, #1
 8008f14:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	60fb      	str	r3, [r7, #12]
 8008f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d307      	bcc.n	8008f32 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f003 0301 	and.w	r3, r3, #1
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d1f2      	bne.n	8008f16 <HAL_DMA_IRQHandler+0x8da>
 8008f30:	e000      	b.n	8008f34 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008f32:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f003 0301 	and.w	r3, r3, #1
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d004      	beq.n	8008f54 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2203      	movs	r2, #3
 8008f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8008f52:	e003      	b.n	8008f5c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	f000 8272 	beq.w	800944a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	4798      	blx	r3
 8008f6e:	e26c      	b.n	800944a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a43      	ldr	r2, [pc, #268]	; (8009084 <HAL_DMA_IRQHandler+0xa48>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d022      	beq.n	8008fc0 <HAL_DMA_IRQHandler+0x984>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a42      	ldr	r2, [pc, #264]	; (8009088 <HAL_DMA_IRQHandler+0xa4c>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d01d      	beq.n	8008fc0 <HAL_DMA_IRQHandler+0x984>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a40      	ldr	r2, [pc, #256]	; (800908c <HAL_DMA_IRQHandler+0xa50>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d018      	beq.n	8008fc0 <HAL_DMA_IRQHandler+0x984>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a3f      	ldr	r2, [pc, #252]	; (8009090 <HAL_DMA_IRQHandler+0xa54>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d013      	beq.n	8008fc0 <HAL_DMA_IRQHandler+0x984>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a3d      	ldr	r2, [pc, #244]	; (8009094 <HAL_DMA_IRQHandler+0xa58>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d00e      	beq.n	8008fc0 <HAL_DMA_IRQHandler+0x984>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a3c      	ldr	r2, [pc, #240]	; (8009098 <HAL_DMA_IRQHandler+0xa5c>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d009      	beq.n	8008fc0 <HAL_DMA_IRQHandler+0x984>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a3a      	ldr	r2, [pc, #232]	; (800909c <HAL_DMA_IRQHandler+0xa60>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d004      	beq.n	8008fc0 <HAL_DMA_IRQHandler+0x984>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a39      	ldr	r2, [pc, #228]	; (80090a0 <HAL_DMA_IRQHandler+0xa64>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d101      	bne.n	8008fc4 <HAL_DMA_IRQHandler+0x988>
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e000      	b.n	8008fc6 <HAL_DMA_IRQHandler+0x98a>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	f000 823f 	beq.w	800944a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fd8:	f003 031f 	and.w	r3, r3, #31
 8008fdc:	2204      	movs	r2, #4
 8008fde:	409a      	lsls	r2, r3
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	4013      	ands	r3, r2
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	f000 80cd 	beq.w	8009184 <HAL_DMA_IRQHandler+0xb48>
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	f003 0304 	and.w	r3, r3, #4
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f000 80c7 	beq.w	8009184 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ffa:	f003 031f 	and.w	r3, r3, #31
 8008ffe:	2204      	movs	r2, #4
 8009000:	409a      	lsls	r2, r3
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800900c:	2b00      	cmp	r3, #0
 800900e:	d049      	beq.n	80090a4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009016:	2b00      	cmp	r3, #0
 8009018:	d109      	bne.n	800902e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800901e:	2b00      	cmp	r3, #0
 8009020:	f000 8210 	beq.w	8009444 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800902c:	e20a      	b.n	8009444 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009032:	2b00      	cmp	r3, #0
 8009034:	f000 8206 	beq.w	8009444 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009040:	e200      	b.n	8009444 <HAL_DMA_IRQHandler+0xe08>
 8009042:	bf00      	nop
 8009044:	40020010 	.word	0x40020010
 8009048:	40020028 	.word	0x40020028
 800904c:	40020040 	.word	0x40020040
 8009050:	40020058 	.word	0x40020058
 8009054:	40020070 	.word	0x40020070
 8009058:	40020088 	.word	0x40020088
 800905c:	400200a0 	.word	0x400200a0
 8009060:	400200b8 	.word	0x400200b8
 8009064:	40020410 	.word	0x40020410
 8009068:	40020428 	.word	0x40020428
 800906c:	40020440 	.word	0x40020440
 8009070:	40020458 	.word	0x40020458
 8009074:	40020470 	.word	0x40020470
 8009078:	40020488 	.word	0x40020488
 800907c:	400204a0 	.word	0x400204a0
 8009080:	400204b8 	.word	0x400204b8
 8009084:	58025408 	.word	0x58025408
 8009088:	5802541c 	.word	0x5802541c
 800908c:	58025430 	.word	0x58025430
 8009090:	58025444 	.word	0x58025444
 8009094:	58025458 	.word	0x58025458
 8009098:	5802546c 	.word	0x5802546c
 800909c:	58025480 	.word	0x58025480
 80090a0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	f003 0320 	and.w	r3, r3, #32
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d160      	bne.n	8009170 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a8c      	ldr	r2, [pc, #560]	; (80092e4 <HAL_DMA_IRQHandler+0xca8>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d04a      	beq.n	800914e <HAL_DMA_IRQHandler+0xb12>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a8a      	ldr	r2, [pc, #552]	; (80092e8 <HAL_DMA_IRQHandler+0xcac>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d045      	beq.n	800914e <HAL_DMA_IRQHandler+0xb12>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a89      	ldr	r2, [pc, #548]	; (80092ec <HAL_DMA_IRQHandler+0xcb0>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d040      	beq.n	800914e <HAL_DMA_IRQHandler+0xb12>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a87      	ldr	r2, [pc, #540]	; (80092f0 <HAL_DMA_IRQHandler+0xcb4>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d03b      	beq.n	800914e <HAL_DMA_IRQHandler+0xb12>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a86      	ldr	r2, [pc, #536]	; (80092f4 <HAL_DMA_IRQHandler+0xcb8>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d036      	beq.n	800914e <HAL_DMA_IRQHandler+0xb12>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a84      	ldr	r2, [pc, #528]	; (80092f8 <HAL_DMA_IRQHandler+0xcbc>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d031      	beq.n	800914e <HAL_DMA_IRQHandler+0xb12>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a83      	ldr	r2, [pc, #524]	; (80092fc <HAL_DMA_IRQHandler+0xcc0>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d02c      	beq.n	800914e <HAL_DMA_IRQHandler+0xb12>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a81      	ldr	r2, [pc, #516]	; (8009300 <HAL_DMA_IRQHandler+0xcc4>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d027      	beq.n	800914e <HAL_DMA_IRQHandler+0xb12>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a80      	ldr	r2, [pc, #512]	; (8009304 <HAL_DMA_IRQHandler+0xcc8>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d022      	beq.n	800914e <HAL_DMA_IRQHandler+0xb12>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a7e      	ldr	r2, [pc, #504]	; (8009308 <HAL_DMA_IRQHandler+0xccc>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d01d      	beq.n	800914e <HAL_DMA_IRQHandler+0xb12>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a7d      	ldr	r2, [pc, #500]	; (800930c <HAL_DMA_IRQHandler+0xcd0>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d018      	beq.n	800914e <HAL_DMA_IRQHandler+0xb12>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a7b      	ldr	r2, [pc, #492]	; (8009310 <HAL_DMA_IRQHandler+0xcd4>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d013      	beq.n	800914e <HAL_DMA_IRQHandler+0xb12>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a7a      	ldr	r2, [pc, #488]	; (8009314 <HAL_DMA_IRQHandler+0xcd8>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d00e      	beq.n	800914e <HAL_DMA_IRQHandler+0xb12>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a78      	ldr	r2, [pc, #480]	; (8009318 <HAL_DMA_IRQHandler+0xcdc>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d009      	beq.n	800914e <HAL_DMA_IRQHandler+0xb12>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a77      	ldr	r2, [pc, #476]	; (800931c <HAL_DMA_IRQHandler+0xce0>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d004      	beq.n	800914e <HAL_DMA_IRQHandler+0xb12>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a75      	ldr	r2, [pc, #468]	; (8009320 <HAL_DMA_IRQHandler+0xce4>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d108      	bne.n	8009160 <HAL_DMA_IRQHandler+0xb24>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f022 0208 	bic.w	r2, r2, #8
 800915c:	601a      	str	r2, [r3, #0]
 800915e:	e007      	b.n	8009170 <HAL_DMA_IRQHandler+0xb34>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f022 0204 	bic.w	r2, r2, #4
 800916e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009174:	2b00      	cmp	r3, #0
 8009176:	f000 8165 	beq.w	8009444 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009182:	e15f      	b.n	8009444 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009188:	f003 031f 	and.w	r3, r3, #31
 800918c:	2202      	movs	r2, #2
 800918e:	409a      	lsls	r2, r3
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	4013      	ands	r3, r2
 8009194:	2b00      	cmp	r3, #0
 8009196:	f000 80c5 	beq.w	8009324 <HAL_DMA_IRQHandler+0xce8>
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	f003 0302 	and.w	r3, r3, #2
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f000 80bf 	beq.w	8009324 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091aa:	f003 031f 	and.w	r3, r3, #31
 80091ae:	2202      	movs	r2, #2
 80091b0:	409a      	lsls	r2, r3
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d018      	beq.n	80091f2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d109      	bne.n	80091de <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	f000 813a 	beq.w	8009448 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80091dc:	e134      	b.n	8009448 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	f000 8130 	beq.w	8009448 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80091f0:	e12a      	b.n	8009448 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	f003 0320 	and.w	r3, r3, #32
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d168      	bne.n	80092ce <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a38      	ldr	r2, [pc, #224]	; (80092e4 <HAL_DMA_IRQHandler+0xca8>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d04a      	beq.n	800929c <HAL_DMA_IRQHandler+0xc60>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a37      	ldr	r2, [pc, #220]	; (80092e8 <HAL_DMA_IRQHandler+0xcac>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d045      	beq.n	800929c <HAL_DMA_IRQHandler+0xc60>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a35      	ldr	r2, [pc, #212]	; (80092ec <HAL_DMA_IRQHandler+0xcb0>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d040      	beq.n	800929c <HAL_DMA_IRQHandler+0xc60>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a34      	ldr	r2, [pc, #208]	; (80092f0 <HAL_DMA_IRQHandler+0xcb4>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d03b      	beq.n	800929c <HAL_DMA_IRQHandler+0xc60>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a32      	ldr	r2, [pc, #200]	; (80092f4 <HAL_DMA_IRQHandler+0xcb8>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d036      	beq.n	800929c <HAL_DMA_IRQHandler+0xc60>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a31      	ldr	r2, [pc, #196]	; (80092f8 <HAL_DMA_IRQHandler+0xcbc>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d031      	beq.n	800929c <HAL_DMA_IRQHandler+0xc60>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a2f      	ldr	r2, [pc, #188]	; (80092fc <HAL_DMA_IRQHandler+0xcc0>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d02c      	beq.n	800929c <HAL_DMA_IRQHandler+0xc60>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a2e      	ldr	r2, [pc, #184]	; (8009300 <HAL_DMA_IRQHandler+0xcc4>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d027      	beq.n	800929c <HAL_DMA_IRQHandler+0xc60>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a2c      	ldr	r2, [pc, #176]	; (8009304 <HAL_DMA_IRQHandler+0xcc8>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d022      	beq.n	800929c <HAL_DMA_IRQHandler+0xc60>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a2b      	ldr	r2, [pc, #172]	; (8009308 <HAL_DMA_IRQHandler+0xccc>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d01d      	beq.n	800929c <HAL_DMA_IRQHandler+0xc60>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a29      	ldr	r2, [pc, #164]	; (800930c <HAL_DMA_IRQHandler+0xcd0>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d018      	beq.n	800929c <HAL_DMA_IRQHandler+0xc60>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a28      	ldr	r2, [pc, #160]	; (8009310 <HAL_DMA_IRQHandler+0xcd4>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d013      	beq.n	800929c <HAL_DMA_IRQHandler+0xc60>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a26      	ldr	r2, [pc, #152]	; (8009314 <HAL_DMA_IRQHandler+0xcd8>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d00e      	beq.n	800929c <HAL_DMA_IRQHandler+0xc60>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a25      	ldr	r2, [pc, #148]	; (8009318 <HAL_DMA_IRQHandler+0xcdc>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d009      	beq.n	800929c <HAL_DMA_IRQHandler+0xc60>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a23      	ldr	r2, [pc, #140]	; (800931c <HAL_DMA_IRQHandler+0xce0>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d004      	beq.n	800929c <HAL_DMA_IRQHandler+0xc60>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a22      	ldr	r2, [pc, #136]	; (8009320 <HAL_DMA_IRQHandler+0xce4>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d108      	bne.n	80092ae <HAL_DMA_IRQHandler+0xc72>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f022 0214 	bic.w	r2, r2, #20
 80092aa:	601a      	str	r2, [r3, #0]
 80092ac:	e007      	b.n	80092be <HAL_DMA_IRQHandler+0xc82>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f022 020a 	bic.w	r2, r2, #10
 80092bc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2201      	movs	r2, #1
 80092ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	f000 80b8 	beq.w	8009448 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80092e0:	e0b2      	b.n	8009448 <HAL_DMA_IRQHandler+0xe0c>
 80092e2:	bf00      	nop
 80092e4:	40020010 	.word	0x40020010
 80092e8:	40020028 	.word	0x40020028
 80092ec:	40020040 	.word	0x40020040
 80092f0:	40020058 	.word	0x40020058
 80092f4:	40020070 	.word	0x40020070
 80092f8:	40020088 	.word	0x40020088
 80092fc:	400200a0 	.word	0x400200a0
 8009300:	400200b8 	.word	0x400200b8
 8009304:	40020410 	.word	0x40020410
 8009308:	40020428 	.word	0x40020428
 800930c:	40020440 	.word	0x40020440
 8009310:	40020458 	.word	0x40020458
 8009314:	40020470 	.word	0x40020470
 8009318:	40020488 	.word	0x40020488
 800931c:	400204a0 	.word	0x400204a0
 8009320:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009328:	f003 031f 	and.w	r3, r3, #31
 800932c:	2208      	movs	r2, #8
 800932e:	409a      	lsls	r2, r3
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	4013      	ands	r3, r2
 8009334:	2b00      	cmp	r3, #0
 8009336:	f000 8088 	beq.w	800944a <HAL_DMA_IRQHandler+0xe0e>
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	f003 0308 	and.w	r3, r3, #8
 8009340:	2b00      	cmp	r3, #0
 8009342:	f000 8082 	beq.w	800944a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a41      	ldr	r2, [pc, #260]	; (8009450 <HAL_DMA_IRQHandler+0xe14>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d04a      	beq.n	80093e6 <HAL_DMA_IRQHandler+0xdaa>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a3f      	ldr	r2, [pc, #252]	; (8009454 <HAL_DMA_IRQHandler+0xe18>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d045      	beq.n	80093e6 <HAL_DMA_IRQHandler+0xdaa>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a3e      	ldr	r2, [pc, #248]	; (8009458 <HAL_DMA_IRQHandler+0xe1c>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d040      	beq.n	80093e6 <HAL_DMA_IRQHandler+0xdaa>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a3c      	ldr	r2, [pc, #240]	; (800945c <HAL_DMA_IRQHandler+0xe20>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d03b      	beq.n	80093e6 <HAL_DMA_IRQHandler+0xdaa>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a3b      	ldr	r2, [pc, #236]	; (8009460 <HAL_DMA_IRQHandler+0xe24>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d036      	beq.n	80093e6 <HAL_DMA_IRQHandler+0xdaa>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a39      	ldr	r2, [pc, #228]	; (8009464 <HAL_DMA_IRQHandler+0xe28>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d031      	beq.n	80093e6 <HAL_DMA_IRQHandler+0xdaa>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a38      	ldr	r2, [pc, #224]	; (8009468 <HAL_DMA_IRQHandler+0xe2c>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d02c      	beq.n	80093e6 <HAL_DMA_IRQHandler+0xdaa>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a36      	ldr	r2, [pc, #216]	; (800946c <HAL_DMA_IRQHandler+0xe30>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d027      	beq.n	80093e6 <HAL_DMA_IRQHandler+0xdaa>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a35      	ldr	r2, [pc, #212]	; (8009470 <HAL_DMA_IRQHandler+0xe34>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d022      	beq.n	80093e6 <HAL_DMA_IRQHandler+0xdaa>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a33      	ldr	r2, [pc, #204]	; (8009474 <HAL_DMA_IRQHandler+0xe38>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d01d      	beq.n	80093e6 <HAL_DMA_IRQHandler+0xdaa>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a32      	ldr	r2, [pc, #200]	; (8009478 <HAL_DMA_IRQHandler+0xe3c>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d018      	beq.n	80093e6 <HAL_DMA_IRQHandler+0xdaa>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a30      	ldr	r2, [pc, #192]	; (800947c <HAL_DMA_IRQHandler+0xe40>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d013      	beq.n	80093e6 <HAL_DMA_IRQHandler+0xdaa>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a2f      	ldr	r2, [pc, #188]	; (8009480 <HAL_DMA_IRQHandler+0xe44>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d00e      	beq.n	80093e6 <HAL_DMA_IRQHandler+0xdaa>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a2d      	ldr	r2, [pc, #180]	; (8009484 <HAL_DMA_IRQHandler+0xe48>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d009      	beq.n	80093e6 <HAL_DMA_IRQHandler+0xdaa>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a2c      	ldr	r2, [pc, #176]	; (8009488 <HAL_DMA_IRQHandler+0xe4c>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d004      	beq.n	80093e6 <HAL_DMA_IRQHandler+0xdaa>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a2a      	ldr	r2, [pc, #168]	; (800948c <HAL_DMA_IRQHandler+0xe50>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d108      	bne.n	80093f8 <HAL_DMA_IRQHandler+0xdbc>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f022 021c 	bic.w	r2, r2, #28
 80093f4:	601a      	str	r2, [r3, #0]
 80093f6:	e007      	b.n	8009408 <HAL_DMA_IRQHandler+0xdcc>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f022 020e 	bic.w	r2, r2, #14
 8009406:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800940c:	f003 031f 	and.w	r3, r3, #31
 8009410:	2201      	movs	r2, #1
 8009412:	409a      	lsls	r2, r3
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2201      	movs	r2, #1
 800941c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2201      	movs	r2, #1
 800942a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009432:	2b00      	cmp	r3, #0
 8009434:	d009      	beq.n	800944a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	4798      	blx	r3
 800943e:	e004      	b.n	800944a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009440:	bf00      	nop
 8009442:	e002      	b.n	800944a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009444:	bf00      	nop
 8009446:	e000      	b.n	800944a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009448:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800944a:	3728      	adds	r7, #40	; 0x28
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}
 8009450:	40020010 	.word	0x40020010
 8009454:	40020028 	.word	0x40020028
 8009458:	40020040 	.word	0x40020040
 800945c:	40020058 	.word	0x40020058
 8009460:	40020070 	.word	0x40020070
 8009464:	40020088 	.word	0x40020088
 8009468:	400200a0 	.word	0x400200a0
 800946c:	400200b8 	.word	0x400200b8
 8009470:	40020410 	.word	0x40020410
 8009474:	40020428 	.word	0x40020428
 8009478:	40020440 	.word	0x40020440
 800947c:	40020458 	.word	0x40020458
 8009480:	40020470 	.word	0x40020470
 8009484:	40020488 	.word	0x40020488
 8009488:	400204a0 	.word	0x400204a0
 800948c:	400204b8 	.word	0x400204b8

08009490 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009490:	b480      	push	{r7}
 8009492:	b087      	sub	sp, #28
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
 800949c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094a2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094a8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a84      	ldr	r2, [pc, #528]	; (80096c0 <DMA_SetConfig+0x230>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d072      	beq.n	800959a <DMA_SetConfig+0x10a>
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a82      	ldr	r2, [pc, #520]	; (80096c4 <DMA_SetConfig+0x234>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d06d      	beq.n	800959a <DMA_SetConfig+0x10a>
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a81      	ldr	r2, [pc, #516]	; (80096c8 <DMA_SetConfig+0x238>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d068      	beq.n	800959a <DMA_SetConfig+0x10a>
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a7f      	ldr	r2, [pc, #508]	; (80096cc <DMA_SetConfig+0x23c>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d063      	beq.n	800959a <DMA_SetConfig+0x10a>
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a7e      	ldr	r2, [pc, #504]	; (80096d0 <DMA_SetConfig+0x240>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d05e      	beq.n	800959a <DMA_SetConfig+0x10a>
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a7c      	ldr	r2, [pc, #496]	; (80096d4 <DMA_SetConfig+0x244>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d059      	beq.n	800959a <DMA_SetConfig+0x10a>
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a7b      	ldr	r2, [pc, #492]	; (80096d8 <DMA_SetConfig+0x248>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d054      	beq.n	800959a <DMA_SetConfig+0x10a>
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a79      	ldr	r2, [pc, #484]	; (80096dc <DMA_SetConfig+0x24c>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d04f      	beq.n	800959a <DMA_SetConfig+0x10a>
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a78      	ldr	r2, [pc, #480]	; (80096e0 <DMA_SetConfig+0x250>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d04a      	beq.n	800959a <DMA_SetConfig+0x10a>
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a76      	ldr	r2, [pc, #472]	; (80096e4 <DMA_SetConfig+0x254>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d045      	beq.n	800959a <DMA_SetConfig+0x10a>
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a75      	ldr	r2, [pc, #468]	; (80096e8 <DMA_SetConfig+0x258>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d040      	beq.n	800959a <DMA_SetConfig+0x10a>
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a73      	ldr	r2, [pc, #460]	; (80096ec <DMA_SetConfig+0x25c>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d03b      	beq.n	800959a <DMA_SetConfig+0x10a>
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a72      	ldr	r2, [pc, #456]	; (80096f0 <DMA_SetConfig+0x260>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d036      	beq.n	800959a <DMA_SetConfig+0x10a>
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a70      	ldr	r2, [pc, #448]	; (80096f4 <DMA_SetConfig+0x264>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d031      	beq.n	800959a <DMA_SetConfig+0x10a>
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a6f      	ldr	r2, [pc, #444]	; (80096f8 <DMA_SetConfig+0x268>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d02c      	beq.n	800959a <DMA_SetConfig+0x10a>
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a6d      	ldr	r2, [pc, #436]	; (80096fc <DMA_SetConfig+0x26c>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d027      	beq.n	800959a <DMA_SetConfig+0x10a>
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a6c      	ldr	r2, [pc, #432]	; (8009700 <DMA_SetConfig+0x270>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d022      	beq.n	800959a <DMA_SetConfig+0x10a>
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a6a      	ldr	r2, [pc, #424]	; (8009704 <DMA_SetConfig+0x274>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d01d      	beq.n	800959a <DMA_SetConfig+0x10a>
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a69      	ldr	r2, [pc, #420]	; (8009708 <DMA_SetConfig+0x278>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d018      	beq.n	800959a <DMA_SetConfig+0x10a>
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a67      	ldr	r2, [pc, #412]	; (800970c <DMA_SetConfig+0x27c>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d013      	beq.n	800959a <DMA_SetConfig+0x10a>
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a66      	ldr	r2, [pc, #408]	; (8009710 <DMA_SetConfig+0x280>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d00e      	beq.n	800959a <DMA_SetConfig+0x10a>
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a64      	ldr	r2, [pc, #400]	; (8009714 <DMA_SetConfig+0x284>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d009      	beq.n	800959a <DMA_SetConfig+0x10a>
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a63      	ldr	r2, [pc, #396]	; (8009718 <DMA_SetConfig+0x288>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d004      	beq.n	800959a <DMA_SetConfig+0x10a>
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a61      	ldr	r2, [pc, #388]	; (800971c <DMA_SetConfig+0x28c>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d101      	bne.n	800959e <DMA_SetConfig+0x10e>
 800959a:	2301      	movs	r3, #1
 800959c:	e000      	b.n	80095a0 <DMA_SetConfig+0x110>
 800959e:	2300      	movs	r3, #0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d00d      	beq.n	80095c0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095a8:	68fa      	ldr	r2, [r7, #12]
 80095aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80095ac:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d004      	beq.n	80095c0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ba:	68fa      	ldr	r2, [r7, #12]
 80095bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80095be:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a3e      	ldr	r2, [pc, #248]	; (80096c0 <DMA_SetConfig+0x230>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d04a      	beq.n	8009660 <DMA_SetConfig+0x1d0>
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a3d      	ldr	r2, [pc, #244]	; (80096c4 <DMA_SetConfig+0x234>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d045      	beq.n	8009660 <DMA_SetConfig+0x1d0>
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a3b      	ldr	r2, [pc, #236]	; (80096c8 <DMA_SetConfig+0x238>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d040      	beq.n	8009660 <DMA_SetConfig+0x1d0>
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a3a      	ldr	r2, [pc, #232]	; (80096cc <DMA_SetConfig+0x23c>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d03b      	beq.n	8009660 <DMA_SetConfig+0x1d0>
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a38      	ldr	r2, [pc, #224]	; (80096d0 <DMA_SetConfig+0x240>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d036      	beq.n	8009660 <DMA_SetConfig+0x1d0>
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a37      	ldr	r2, [pc, #220]	; (80096d4 <DMA_SetConfig+0x244>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d031      	beq.n	8009660 <DMA_SetConfig+0x1d0>
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a35      	ldr	r2, [pc, #212]	; (80096d8 <DMA_SetConfig+0x248>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d02c      	beq.n	8009660 <DMA_SetConfig+0x1d0>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a34      	ldr	r2, [pc, #208]	; (80096dc <DMA_SetConfig+0x24c>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d027      	beq.n	8009660 <DMA_SetConfig+0x1d0>
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a32      	ldr	r2, [pc, #200]	; (80096e0 <DMA_SetConfig+0x250>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d022      	beq.n	8009660 <DMA_SetConfig+0x1d0>
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a31      	ldr	r2, [pc, #196]	; (80096e4 <DMA_SetConfig+0x254>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d01d      	beq.n	8009660 <DMA_SetConfig+0x1d0>
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a2f      	ldr	r2, [pc, #188]	; (80096e8 <DMA_SetConfig+0x258>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d018      	beq.n	8009660 <DMA_SetConfig+0x1d0>
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a2e      	ldr	r2, [pc, #184]	; (80096ec <DMA_SetConfig+0x25c>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d013      	beq.n	8009660 <DMA_SetConfig+0x1d0>
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a2c      	ldr	r2, [pc, #176]	; (80096f0 <DMA_SetConfig+0x260>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d00e      	beq.n	8009660 <DMA_SetConfig+0x1d0>
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a2b      	ldr	r2, [pc, #172]	; (80096f4 <DMA_SetConfig+0x264>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d009      	beq.n	8009660 <DMA_SetConfig+0x1d0>
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a29      	ldr	r2, [pc, #164]	; (80096f8 <DMA_SetConfig+0x268>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d004      	beq.n	8009660 <DMA_SetConfig+0x1d0>
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a28      	ldr	r2, [pc, #160]	; (80096fc <DMA_SetConfig+0x26c>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d101      	bne.n	8009664 <DMA_SetConfig+0x1d4>
 8009660:	2301      	movs	r3, #1
 8009662:	e000      	b.n	8009666 <DMA_SetConfig+0x1d6>
 8009664:	2300      	movs	r3, #0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d05a      	beq.n	8009720 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800966e:	f003 031f 	and.w	r3, r3, #31
 8009672:	223f      	movs	r2, #63	; 0x3f
 8009674:	409a      	lsls	r2, r3
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009688:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	683a      	ldr	r2, [r7, #0]
 8009690:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	2b40      	cmp	r3, #64	; 0x40
 8009698:	d108      	bne.n	80096ac <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	68ba      	ldr	r2, [r7, #8]
 80096a8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80096aa:	e087      	b.n	80097bc <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	68ba      	ldr	r2, [r7, #8]
 80096b2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	60da      	str	r2, [r3, #12]
}
 80096bc:	e07e      	b.n	80097bc <DMA_SetConfig+0x32c>
 80096be:	bf00      	nop
 80096c0:	40020010 	.word	0x40020010
 80096c4:	40020028 	.word	0x40020028
 80096c8:	40020040 	.word	0x40020040
 80096cc:	40020058 	.word	0x40020058
 80096d0:	40020070 	.word	0x40020070
 80096d4:	40020088 	.word	0x40020088
 80096d8:	400200a0 	.word	0x400200a0
 80096dc:	400200b8 	.word	0x400200b8
 80096e0:	40020410 	.word	0x40020410
 80096e4:	40020428 	.word	0x40020428
 80096e8:	40020440 	.word	0x40020440
 80096ec:	40020458 	.word	0x40020458
 80096f0:	40020470 	.word	0x40020470
 80096f4:	40020488 	.word	0x40020488
 80096f8:	400204a0 	.word	0x400204a0
 80096fc:	400204b8 	.word	0x400204b8
 8009700:	58025408 	.word	0x58025408
 8009704:	5802541c 	.word	0x5802541c
 8009708:	58025430 	.word	0x58025430
 800970c:	58025444 	.word	0x58025444
 8009710:	58025458 	.word	0x58025458
 8009714:	5802546c 	.word	0x5802546c
 8009718:	58025480 	.word	0x58025480
 800971c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a28      	ldr	r2, [pc, #160]	; (80097c8 <DMA_SetConfig+0x338>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d022      	beq.n	8009770 <DMA_SetConfig+0x2e0>
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a27      	ldr	r2, [pc, #156]	; (80097cc <DMA_SetConfig+0x33c>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d01d      	beq.n	8009770 <DMA_SetConfig+0x2e0>
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a25      	ldr	r2, [pc, #148]	; (80097d0 <DMA_SetConfig+0x340>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d018      	beq.n	8009770 <DMA_SetConfig+0x2e0>
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a24      	ldr	r2, [pc, #144]	; (80097d4 <DMA_SetConfig+0x344>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d013      	beq.n	8009770 <DMA_SetConfig+0x2e0>
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a22      	ldr	r2, [pc, #136]	; (80097d8 <DMA_SetConfig+0x348>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d00e      	beq.n	8009770 <DMA_SetConfig+0x2e0>
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a21      	ldr	r2, [pc, #132]	; (80097dc <DMA_SetConfig+0x34c>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d009      	beq.n	8009770 <DMA_SetConfig+0x2e0>
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a1f      	ldr	r2, [pc, #124]	; (80097e0 <DMA_SetConfig+0x350>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d004      	beq.n	8009770 <DMA_SetConfig+0x2e0>
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a1e      	ldr	r2, [pc, #120]	; (80097e4 <DMA_SetConfig+0x354>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d101      	bne.n	8009774 <DMA_SetConfig+0x2e4>
 8009770:	2301      	movs	r3, #1
 8009772:	e000      	b.n	8009776 <DMA_SetConfig+0x2e6>
 8009774:	2300      	movs	r3, #0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d020      	beq.n	80097bc <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800977e:	f003 031f 	and.w	r3, r3, #31
 8009782:	2201      	movs	r2, #1
 8009784:	409a      	lsls	r2, r3
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	683a      	ldr	r2, [r7, #0]
 8009790:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	2b40      	cmp	r3, #64	; 0x40
 8009798:	d108      	bne.n	80097ac <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	68ba      	ldr	r2, [r7, #8]
 80097a8:	60da      	str	r2, [r3, #12]
}
 80097aa:	e007      	b.n	80097bc <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	68ba      	ldr	r2, [r7, #8]
 80097b2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	60da      	str	r2, [r3, #12]
}
 80097bc:	bf00      	nop
 80097be:	371c      	adds	r7, #28
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr
 80097c8:	58025408 	.word	0x58025408
 80097cc:	5802541c 	.word	0x5802541c
 80097d0:	58025430 	.word	0x58025430
 80097d4:	58025444 	.word	0x58025444
 80097d8:	58025458 	.word	0x58025458
 80097dc:	5802546c 	.word	0x5802546c
 80097e0:	58025480 	.word	0x58025480
 80097e4:	58025494 	.word	0x58025494

080097e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b085      	sub	sp, #20
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a42      	ldr	r2, [pc, #264]	; (8009900 <DMA_CalcBaseAndBitshift+0x118>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d04a      	beq.n	8009890 <DMA_CalcBaseAndBitshift+0xa8>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a41      	ldr	r2, [pc, #260]	; (8009904 <DMA_CalcBaseAndBitshift+0x11c>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d045      	beq.n	8009890 <DMA_CalcBaseAndBitshift+0xa8>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a3f      	ldr	r2, [pc, #252]	; (8009908 <DMA_CalcBaseAndBitshift+0x120>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d040      	beq.n	8009890 <DMA_CalcBaseAndBitshift+0xa8>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a3e      	ldr	r2, [pc, #248]	; (800990c <DMA_CalcBaseAndBitshift+0x124>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d03b      	beq.n	8009890 <DMA_CalcBaseAndBitshift+0xa8>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a3c      	ldr	r2, [pc, #240]	; (8009910 <DMA_CalcBaseAndBitshift+0x128>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d036      	beq.n	8009890 <DMA_CalcBaseAndBitshift+0xa8>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a3b      	ldr	r2, [pc, #236]	; (8009914 <DMA_CalcBaseAndBitshift+0x12c>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d031      	beq.n	8009890 <DMA_CalcBaseAndBitshift+0xa8>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a39      	ldr	r2, [pc, #228]	; (8009918 <DMA_CalcBaseAndBitshift+0x130>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d02c      	beq.n	8009890 <DMA_CalcBaseAndBitshift+0xa8>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a38      	ldr	r2, [pc, #224]	; (800991c <DMA_CalcBaseAndBitshift+0x134>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d027      	beq.n	8009890 <DMA_CalcBaseAndBitshift+0xa8>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a36      	ldr	r2, [pc, #216]	; (8009920 <DMA_CalcBaseAndBitshift+0x138>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d022      	beq.n	8009890 <DMA_CalcBaseAndBitshift+0xa8>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a35      	ldr	r2, [pc, #212]	; (8009924 <DMA_CalcBaseAndBitshift+0x13c>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d01d      	beq.n	8009890 <DMA_CalcBaseAndBitshift+0xa8>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a33      	ldr	r2, [pc, #204]	; (8009928 <DMA_CalcBaseAndBitshift+0x140>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d018      	beq.n	8009890 <DMA_CalcBaseAndBitshift+0xa8>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a32      	ldr	r2, [pc, #200]	; (800992c <DMA_CalcBaseAndBitshift+0x144>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d013      	beq.n	8009890 <DMA_CalcBaseAndBitshift+0xa8>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a30      	ldr	r2, [pc, #192]	; (8009930 <DMA_CalcBaseAndBitshift+0x148>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d00e      	beq.n	8009890 <DMA_CalcBaseAndBitshift+0xa8>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a2f      	ldr	r2, [pc, #188]	; (8009934 <DMA_CalcBaseAndBitshift+0x14c>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d009      	beq.n	8009890 <DMA_CalcBaseAndBitshift+0xa8>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a2d      	ldr	r2, [pc, #180]	; (8009938 <DMA_CalcBaseAndBitshift+0x150>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d004      	beq.n	8009890 <DMA_CalcBaseAndBitshift+0xa8>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a2c      	ldr	r2, [pc, #176]	; (800993c <DMA_CalcBaseAndBitshift+0x154>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d101      	bne.n	8009894 <DMA_CalcBaseAndBitshift+0xac>
 8009890:	2301      	movs	r3, #1
 8009892:	e000      	b.n	8009896 <DMA_CalcBaseAndBitshift+0xae>
 8009894:	2300      	movs	r3, #0
 8009896:	2b00      	cmp	r3, #0
 8009898:	d024      	beq.n	80098e4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	3b10      	subs	r3, #16
 80098a2:	4a27      	ldr	r2, [pc, #156]	; (8009940 <DMA_CalcBaseAndBitshift+0x158>)
 80098a4:	fba2 2303 	umull	r2, r3, r2, r3
 80098a8:	091b      	lsrs	r3, r3, #4
 80098aa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f003 0307 	and.w	r3, r3, #7
 80098b2:	4a24      	ldr	r2, [pc, #144]	; (8009944 <DMA_CalcBaseAndBitshift+0x15c>)
 80098b4:	5cd3      	ldrb	r3, [r2, r3]
 80098b6:	461a      	mov	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2b03      	cmp	r3, #3
 80098c0:	d908      	bls.n	80098d4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	461a      	mov	r2, r3
 80098c8:	4b1f      	ldr	r3, [pc, #124]	; (8009948 <DMA_CalcBaseAndBitshift+0x160>)
 80098ca:	4013      	ands	r3, r2
 80098cc:	1d1a      	adds	r2, r3, #4
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	659a      	str	r2, [r3, #88]	; 0x58
 80098d2:	e00d      	b.n	80098f0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	461a      	mov	r2, r3
 80098da:	4b1b      	ldr	r3, [pc, #108]	; (8009948 <DMA_CalcBaseAndBitshift+0x160>)
 80098dc:	4013      	ands	r3, r2
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	6593      	str	r3, [r2, #88]	; 0x58
 80098e2:	e005      	b.n	80098f0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3714      	adds	r7, #20
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr
 8009900:	40020010 	.word	0x40020010
 8009904:	40020028 	.word	0x40020028
 8009908:	40020040 	.word	0x40020040
 800990c:	40020058 	.word	0x40020058
 8009910:	40020070 	.word	0x40020070
 8009914:	40020088 	.word	0x40020088
 8009918:	400200a0 	.word	0x400200a0
 800991c:	400200b8 	.word	0x400200b8
 8009920:	40020410 	.word	0x40020410
 8009924:	40020428 	.word	0x40020428
 8009928:	40020440 	.word	0x40020440
 800992c:	40020458 	.word	0x40020458
 8009930:	40020470 	.word	0x40020470
 8009934:	40020488 	.word	0x40020488
 8009938:	400204a0 	.word	0x400204a0
 800993c:	400204b8 	.word	0x400204b8
 8009940:	aaaaaaab 	.word	0xaaaaaaab
 8009944:	080194f8 	.word	0x080194f8
 8009948:	fffffc00 	.word	0xfffffc00

0800994c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009954:	2300      	movs	r3, #0
 8009956:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	699b      	ldr	r3, [r3, #24]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d120      	bne.n	80099a2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009964:	2b03      	cmp	r3, #3
 8009966:	d858      	bhi.n	8009a1a <DMA_CheckFifoParam+0xce>
 8009968:	a201      	add	r2, pc, #4	; (adr r2, 8009970 <DMA_CheckFifoParam+0x24>)
 800996a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800996e:	bf00      	nop
 8009970:	08009981 	.word	0x08009981
 8009974:	08009993 	.word	0x08009993
 8009978:	08009981 	.word	0x08009981
 800997c:	08009a1b 	.word	0x08009a1b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009984:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009988:	2b00      	cmp	r3, #0
 800998a:	d048      	beq.n	8009a1e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800998c:	2301      	movs	r3, #1
 800998e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009990:	e045      	b.n	8009a1e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009996:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800999a:	d142      	bne.n	8009a22 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800999c:	2301      	movs	r3, #1
 800999e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80099a0:	e03f      	b.n	8009a22 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	699b      	ldr	r3, [r3, #24]
 80099a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099aa:	d123      	bne.n	80099f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b0:	2b03      	cmp	r3, #3
 80099b2:	d838      	bhi.n	8009a26 <DMA_CheckFifoParam+0xda>
 80099b4:	a201      	add	r2, pc, #4	; (adr r2, 80099bc <DMA_CheckFifoParam+0x70>)
 80099b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ba:	bf00      	nop
 80099bc:	080099cd 	.word	0x080099cd
 80099c0:	080099d3 	.word	0x080099d3
 80099c4:	080099cd 	.word	0x080099cd
 80099c8:	080099e5 	.word	0x080099e5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80099cc:	2301      	movs	r3, #1
 80099ce:	73fb      	strb	r3, [r7, #15]
        break;
 80099d0:	e030      	b.n	8009a34 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d025      	beq.n	8009a2a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80099e2:	e022      	b.n	8009a2a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80099ec:	d11f      	bne.n	8009a2e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80099ee:	2301      	movs	r3, #1
 80099f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80099f2:	e01c      	b.n	8009a2e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	d902      	bls.n	8009a02 <DMA_CheckFifoParam+0xb6>
 80099fc:	2b03      	cmp	r3, #3
 80099fe:	d003      	beq.n	8009a08 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009a00:	e018      	b.n	8009a34 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	73fb      	strb	r3, [r7, #15]
        break;
 8009a06:	e015      	b.n	8009a34 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d00e      	beq.n	8009a32 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009a14:	2301      	movs	r3, #1
 8009a16:	73fb      	strb	r3, [r7, #15]
    break;
 8009a18:	e00b      	b.n	8009a32 <DMA_CheckFifoParam+0xe6>
        break;
 8009a1a:	bf00      	nop
 8009a1c:	e00a      	b.n	8009a34 <DMA_CheckFifoParam+0xe8>
        break;
 8009a1e:	bf00      	nop
 8009a20:	e008      	b.n	8009a34 <DMA_CheckFifoParam+0xe8>
        break;
 8009a22:	bf00      	nop
 8009a24:	e006      	b.n	8009a34 <DMA_CheckFifoParam+0xe8>
        break;
 8009a26:	bf00      	nop
 8009a28:	e004      	b.n	8009a34 <DMA_CheckFifoParam+0xe8>
        break;
 8009a2a:	bf00      	nop
 8009a2c:	e002      	b.n	8009a34 <DMA_CheckFifoParam+0xe8>
        break;
 8009a2e:	bf00      	nop
 8009a30:	e000      	b.n	8009a34 <DMA_CheckFifoParam+0xe8>
    break;
 8009a32:	bf00      	nop
    }
  }

  return status;
 8009a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3714      	adds	r7, #20
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr
 8009a42:	bf00      	nop

08009a44 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b085      	sub	sp, #20
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a38      	ldr	r2, [pc, #224]	; (8009b38 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d022      	beq.n	8009aa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a36      	ldr	r2, [pc, #216]	; (8009b3c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d01d      	beq.n	8009aa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a35      	ldr	r2, [pc, #212]	; (8009b40 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d018      	beq.n	8009aa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a33      	ldr	r2, [pc, #204]	; (8009b44 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d013      	beq.n	8009aa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a32      	ldr	r2, [pc, #200]	; (8009b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d00e      	beq.n	8009aa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a30      	ldr	r2, [pc, #192]	; (8009b4c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d009      	beq.n	8009aa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a2f      	ldr	r2, [pc, #188]	; (8009b50 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d004      	beq.n	8009aa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a2d      	ldr	r2, [pc, #180]	; (8009b54 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d101      	bne.n	8009aa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e000      	b.n	8009aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d01a      	beq.n	8009ae2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	3b08      	subs	r3, #8
 8009ab4:	4a28      	ldr	r2, [pc, #160]	; (8009b58 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8009aba:	091b      	lsrs	r3, r3, #4
 8009abc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	4b26      	ldr	r3, [pc, #152]	; (8009b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009ac2:	4413      	add	r3, r2
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	4a24      	ldr	r2, [pc, #144]	; (8009b60 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009ad0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f003 031f 	and.w	r3, r3, #31
 8009ad8:	2201      	movs	r2, #1
 8009ada:	409a      	lsls	r2, r3
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009ae0:	e024      	b.n	8009b2c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	3b10      	subs	r3, #16
 8009aea:	4a1e      	ldr	r2, [pc, #120]	; (8009b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009aec:	fba2 2303 	umull	r2, r3, r2, r3
 8009af0:	091b      	lsrs	r3, r3, #4
 8009af2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	4a1c      	ldr	r2, [pc, #112]	; (8009b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d806      	bhi.n	8009b0a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	4a1b      	ldr	r2, [pc, #108]	; (8009b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d902      	bls.n	8009b0a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	3308      	adds	r3, #8
 8009b08:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009b0a:	68fa      	ldr	r2, [r7, #12]
 8009b0c:	4b18      	ldr	r3, [pc, #96]	; (8009b70 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009b0e:	4413      	add	r3, r2
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	461a      	mov	r2, r3
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	4a16      	ldr	r2, [pc, #88]	; (8009b74 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009b1c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f003 031f 	and.w	r3, r3, #31
 8009b24:	2201      	movs	r2, #1
 8009b26:	409a      	lsls	r2, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009b2c:	bf00      	nop
 8009b2e:	3714      	adds	r7, #20
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr
 8009b38:	58025408 	.word	0x58025408
 8009b3c:	5802541c 	.word	0x5802541c
 8009b40:	58025430 	.word	0x58025430
 8009b44:	58025444 	.word	0x58025444
 8009b48:	58025458 	.word	0x58025458
 8009b4c:	5802546c 	.word	0x5802546c
 8009b50:	58025480 	.word	0x58025480
 8009b54:	58025494 	.word	0x58025494
 8009b58:	cccccccd 	.word	0xcccccccd
 8009b5c:	16009600 	.word	0x16009600
 8009b60:	58025880 	.word	0x58025880
 8009b64:	aaaaaaab 	.word	0xaaaaaaab
 8009b68:	400204b8 	.word	0x400204b8
 8009b6c:	4002040f 	.word	0x4002040f
 8009b70:	10008200 	.word	0x10008200
 8009b74:	40020880 	.word	0x40020880

08009b78 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b085      	sub	sp, #20
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d04a      	beq.n	8009c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2b08      	cmp	r3, #8
 8009b92:	d847      	bhi.n	8009c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a25      	ldr	r2, [pc, #148]	; (8009c30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d022      	beq.n	8009be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a24      	ldr	r2, [pc, #144]	; (8009c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d01d      	beq.n	8009be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a22      	ldr	r2, [pc, #136]	; (8009c38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d018      	beq.n	8009be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a21      	ldr	r2, [pc, #132]	; (8009c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d013      	beq.n	8009be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a1f      	ldr	r2, [pc, #124]	; (8009c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d00e      	beq.n	8009be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a1e      	ldr	r2, [pc, #120]	; (8009c44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d009      	beq.n	8009be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a1c      	ldr	r2, [pc, #112]	; (8009c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d004      	beq.n	8009be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a1b      	ldr	r2, [pc, #108]	; (8009c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d101      	bne.n	8009be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009be4:	2301      	movs	r3, #1
 8009be6:	e000      	b.n	8009bea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009be8:	2300      	movs	r3, #0
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d00a      	beq.n	8009c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009bee:	68fa      	ldr	r2, [r7, #12]
 8009bf0:	4b17      	ldr	r3, [pc, #92]	; (8009c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009bf2:	4413      	add	r3, r2
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	4a15      	ldr	r2, [pc, #84]	; (8009c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009c00:	671a      	str	r2, [r3, #112]	; 0x70
 8009c02:	e009      	b.n	8009c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	4b14      	ldr	r3, [pc, #80]	; (8009c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009c08:	4413      	add	r3, r2
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	4a11      	ldr	r2, [pc, #68]	; (8009c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009c16:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	3b01      	subs	r3, #1
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	409a      	lsls	r2, r3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8009c24:	bf00      	nop
 8009c26:	3714      	adds	r7, #20
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr
 8009c30:	58025408 	.word	0x58025408
 8009c34:	5802541c 	.word	0x5802541c
 8009c38:	58025430 	.word	0x58025430
 8009c3c:	58025444 	.word	0x58025444
 8009c40:	58025458 	.word	0x58025458
 8009c44:	5802546c 	.word	0x5802546c
 8009c48:	58025480 	.word	0x58025480
 8009c4c:	58025494 	.word	0x58025494
 8009c50:	1600963f 	.word	0x1600963f
 8009c54:	58025940 	.word	0x58025940
 8009c58:	1000823f 	.word	0x1000823f
 8009c5c:	40020940 	.word	0x40020940

08009c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b089      	sub	sp, #36	; 0x24
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009c6e:	4b89      	ldr	r3, [pc, #548]	; (8009e94 <HAL_GPIO_Init+0x234>)
 8009c70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009c72:	e194      	b.n	8009f9e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	2101      	movs	r1, #1
 8009c7a:	69fb      	ldr	r3, [r7, #28]
 8009c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8009c80:	4013      	ands	r3, r2
 8009c82:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f000 8186 	beq.w	8009f98 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d00b      	beq.n	8009cac <HAL_GPIO_Init+0x4c>
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	2b02      	cmp	r3, #2
 8009c9a:	d007      	beq.n	8009cac <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009ca0:	2b11      	cmp	r3, #17
 8009ca2:	d003      	beq.n	8009cac <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	2b12      	cmp	r3, #18
 8009caa:	d130      	bne.n	8009d0e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	005b      	lsls	r3, r3, #1
 8009cb6:	2203      	movs	r2, #3
 8009cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8009cbc:	43db      	mvns	r3, r3
 8009cbe:	69ba      	ldr	r2, [r7, #24]
 8009cc0:	4013      	ands	r3, r2
 8009cc2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	68da      	ldr	r2, [r3, #12]
 8009cc8:	69fb      	ldr	r3, [r7, #28]
 8009cca:	005b      	lsls	r3, r3, #1
 8009ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8009cd0:	69ba      	ldr	r2, [r7, #24]
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	69ba      	ldr	r2, [r7, #24]
 8009cda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8009cea:	43db      	mvns	r3, r3
 8009cec:	69ba      	ldr	r2, [r7, #24]
 8009cee:	4013      	ands	r3, r2
 8009cf0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	091b      	lsrs	r3, r3, #4
 8009cf8:	f003 0201 	and.w	r2, r3, #1
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8009d02:	69ba      	ldr	r2, [r7, #24]
 8009d04:	4313      	orrs	r3, r2
 8009d06:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	69ba      	ldr	r2, [r7, #24]
 8009d0c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009d14:	69fb      	ldr	r3, [r7, #28]
 8009d16:	005b      	lsls	r3, r3, #1
 8009d18:	2203      	movs	r2, #3
 8009d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d1e:	43db      	mvns	r3, r3
 8009d20:	69ba      	ldr	r2, [r7, #24]
 8009d22:	4013      	ands	r3, r2
 8009d24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	689a      	ldr	r2, [r3, #8]
 8009d2a:	69fb      	ldr	r3, [r7, #28]
 8009d2c:	005b      	lsls	r3, r3, #1
 8009d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8009d32:	69ba      	ldr	r2, [r7, #24]
 8009d34:	4313      	orrs	r3, r2
 8009d36:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	69ba      	ldr	r2, [r7, #24]
 8009d3c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	d003      	beq.n	8009d4e <HAL_GPIO_Init+0xee>
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	2b12      	cmp	r3, #18
 8009d4c:	d123      	bne.n	8009d96 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	08da      	lsrs	r2, r3, #3
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	3208      	adds	r2, #8
 8009d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	f003 0307 	and.w	r3, r3, #7
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	220f      	movs	r2, #15
 8009d66:	fa02 f303 	lsl.w	r3, r2, r3
 8009d6a:	43db      	mvns	r3, r3
 8009d6c:	69ba      	ldr	r2, [r7, #24]
 8009d6e:	4013      	ands	r3, r2
 8009d70:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	691a      	ldr	r2, [r3, #16]
 8009d76:	69fb      	ldr	r3, [r7, #28]
 8009d78:	f003 0307 	and.w	r3, r3, #7
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8009d82:	69ba      	ldr	r2, [r7, #24]
 8009d84:	4313      	orrs	r3, r2
 8009d86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	08da      	lsrs	r2, r3, #3
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	3208      	adds	r2, #8
 8009d90:	69b9      	ldr	r1, [r7, #24]
 8009d92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009d9c:	69fb      	ldr	r3, [r7, #28]
 8009d9e:	005b      	lsls	r3, r3, #1
 8009da0:	2203      	movs	r2, #3
 8009da2:	fa02 f303 	lsl.w	r3, r2, r3
 8009da6:	43db      	mvns	r3, r3
 8009da8:	69ba      	ldr	r2, [r7, #24]
 8009daa:	4013      	ands	r3, r2
 8009dac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	f003 0203 	and.w	r2, r3, #3
 8009db6:	69fb      	ldr	r3, [r7, #28]
 8009db8:	005b      	lsls	r3, r3, #1
 8009dba:	fa02 f303 	lsl.w	r3, r2, r3
 8009dbe:	69ba      	ldr	r2, [r7, #24]
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	69ba      	ldr	r2, [r7, #24]
 8009dc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	f000 80e0 	beq.w	8009f98 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009dd8:	4b2f      	ldr	r3, [pc, #188]	; (8009e98 <HAL_GPIO_Init+0x238>)
 8009dda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009dde:	4a2e      	ldr	r2, [pc, #184]	; (8009e98 <HAL_GPIO_Init+0x238>)
 8009de0:	f043 0302 	orr.w	r3, r3, #2
 8009de4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009de8:	4b2b      	ldr	r3, [pc, #172]	; (8009e98 <HAL_GPIO_Init+0x238>)
 8009dea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009dee:	f003 0302 	and.w	r3, r3, #2
 8009df2:	60fb      	str	r3, [r7, #12]
 8009df4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009df6:	4a29      	ldr	r2, [pc, #164]	; (8009e9c <HAL_GPIO_Init+0x23c>)
 8009df8:	69fb      	ldr	r3, [r7, #28]
 8009dfa:	089b      	lsrs	r3, r3, #2
 8009dfc:	3302      	adds	r3, #2
 8009dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009e04:	69fb      	ldr	r3, [r7, #28]
 8009e06:	f003 0303 	and.w	r3, r3, #3
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	220f      	movs	r2, #15
 8009e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e12:	43db      	mvns	r3, r3
 8009e14:	69ba      	ldr	r2, [r7, #24]
 8009e16:	4013      	ands	r3, r2
 8009e18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4a20      	ldr	r2, [pc, #128]	; (8009ea0 <HAL_GPIO_Init+0x240>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d052      	beq.n	8009ec8 <HAL_GPIO_Init+0x268>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	4a1f      	ldr	r2, [pc, #124]	; (8009ea4 <HAL_GPIO_Init+0x244>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d031      	beq.n	8009e8e <HAL_GPIO_Init+0x22e>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4a1e      	ldr	r2, [pc, #120]	; (8009ea8 <HAL_GPIO_Init+0x248>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d02b      	beq.n	8009e8a <HAL_GPIO_Init+0x22a>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	4a1d      	ldr	r2, [pc, #116]	; (8009eac <HAL_GPIO_Init+0x24c>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d025      	beq.n	8009e86 <HAL_GPIO_Init+0x226>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	4a1c      	ldr	r2, [pc, #112]	; (8009eb0 <HAL_GPIO_Init+0x250>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d01f      	beq.n	8009e82 <HAL_GPIO_Init+0x222>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	4a1b      	ldr	r2, [pc, #108]	; (8009eb4 <HAL_GPIO_Init+0x254>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d019      	beq.n	8009e7e <HAL_GPIO_Init+0x21e>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4a1a      	ldr	r2, [pc, #104]	; (8009eb8 <HAL_GPIO_Init+0x258>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d013      	beq.n	8009e7a <HAL_GPIO_Init+0x21a>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4a19      	ldr	r2, [pc, #100]	; (8009ebc <HAL_GPIO_Init+0x25c>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d00d      	beq.n	8009e76 <HAL_GPIO_Init+0x216>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4a18      	ldr	r2, [pc, #96]	; (8009ec0 <HAL_GPIO_Init+0x260>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d007      	beq.n	8009e72 <HAL_GPIO_Init+0x212>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	4a17      	ldr	r2, [pc, #92]	; (8009ec4 <HAL_GPIO_Init+0x264>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d101      	bne.n	8009e6e <HAL_GPIO_Init+0x20e>
 8009e6a:	2309      	movs	r3, #9
 8009e6c:	e02d      	b.n	8009eca <HAL_GPIO_Init+0x26a>
 8009e6e:	230a      	movs	r3, #10
 8009e70:	e02b      	b.n	8009eca <HAL_GPIO_Init+0x26a>
 8009e72:	2308      	movs	r3, #8
 8009e74:	e029      	b.n	8009eca <HAL_GPIO_Init+0x26a>
 8009e76:	2307      	movs	r3, #7
 8009e78:	e027      	b.n	8009eca <HAL_GPIO_Init+0x26a>
 8009e7a:	2306      	movs	r3, #6
 8009e7c:	e025      	b.n	8009eca <HAL_GPIO_Init+0x26a>
 8009e7e:	2305      	movs	r3, #5
 8009e80:	e023      	b.n	8009eca <HAL_GPIO_Init+0x26a>
 8009e82:	2304      	movs	r3, #4
 8009e84:	e021      	b.n	8009eca <HAL_GPIO_Init+0x26a>
 8009e86:	2303      	movs	r3, #3
 8009e88:	e01f      	b.n	8009eca <HAL_GPIO_Init+0x26a>
 8009e8a:	2302      	movs	r3, #2
 8009e8c:	e01d      	b.n	8009eca <HAL_GPIO_Init+0x26a>
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e01b      	b.n	8009eca <HAL_GPIO_Init+0x26a>
 8009e92:	bf00      	nop
 8009e94:	58000080 	.word	0x58000080
 8009e98:	58024400 	.word	0x58024400
 8009e9c:	58000400 	.word	0x58000400
 8009ea0:	58020000 	.word	0x58020000
 8009ea4:	58020400 	.word	0x58020400
 8009ea8:	58020800 	.word	0x58020800
 8009eac:	58020c00 	.word	0x58020c00
 8009eb0:	58021000 	.word	0x58021000
 8009eb4:	58021400 	.word	0x58021400
 8009eb8:	58021800 	.word	0x58021800
 8009ebc:	58021c00 	.word	0x58021c00
 8009ec0:	58022000 	.word	0x58022000
 8009ec4:	58022400 	.word	0x58022400
 8009ec8:	2300      	movs	r3, #0
 8009eca:	69fa      	ldr	r2, [r7, #28]
 8009ecc:	f002 0203 	and.w	r2, r2, #3
 8009ed0:	0092      	lsls	r2, r2, #2
 8009ed2:	4093      	lsls	r3, r2
 8009ed4:	69ba      	ldr	r2, [r7, #24]
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009eda:	4938      	ldr	r1, [pc, #224]	; (8009fbc <HAL_GPIO_Init+0x35c>)
 8009edc:	69fb      	ldr	r3, [r7, #28]
 8009ede:	089b      	lsrs	r3, r3, #2
 8009ee0:	3302      	adds	r3, #2
 8009ee2:	69ba      	ldr	r2, [r7, #24]
 8009ee4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	43db      	mvns	r3, r3
 8009ef2:	69ba      	ldr	r2, [r7, #24]
 8009ef4:	4013      	ands	r3, r2
 8009ef6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d003      	beq.n	8009f0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009f04:	69ba      	ldr	r2, [r7, #24]
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	69ba      	ldr	r2, [r7, #24]
 8009f10:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	43db      	mvns	r3, r3
 8009f1c:	69ba      	ldr	r2, [r7, #24]
 8009f1e:	4013      	ands	r3, r2
 8009f20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d003      	beq.n	8009f36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009f2e:	69ba      	ldr	r2, [r7, #24]
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	4313      	orrs	r3, r2
 8009f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	69ba      	ldr	r2, [r7, #24]
 8009f3a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	43db      	mvns	r3, r3
 8009f48:	69ba      	ldr	r2, [r7, #24]
 8009f4a:	4013      	ands	r3, r2
 8009f4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d003      	beq.n	8009f62 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8009f5a:	69ba      	ldr	r2, [r7, #24]
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009f62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f66:	69bb      	ldr	r3, [r7, #24]
 8009f68:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	43db      	mvns	r3, r3
 8009f76:	69ba      	ldr	r2, [r7, #24]
 8009f78:	4013      	ands	r3, r2
 8009f7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d003      	beq.n	8009f90 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8009f88:	69ba      	ldr	r2, [r7, #24]
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009f90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	69fb      	ldr	r3, [r7, #28]
 8009fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	f47f ae63 	bne.w	8009c74 <HAL_GPIO_Init+0x14>
  }
}
 8009fae:	bf00      	nop
 8009fb0:	bf00      	nop
 8009fb2:	3724      	adds	r7, #36	; 0x24
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr
 8009fbc:	58000400 	.word	0x58000400

08009fc0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b087      	sub	sp, #28
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009fce:	4b75      	ldr	r3, [pc, #468]	; (800a1a4 <HAL_GPIO_DeInit+0x1e4>)
 8009fd0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8009fd2:	e0d9      	b.n	800a188 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8009fdc:	683a      	ldr	r2, [r7, #0]
 8009fde:	4013      	ands	r3, r2
 8009fe0:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	f000 80cc 	beq.w	800a182 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8009fea:	4a6f      	ldr	r2, [pc, #444]	; (800a1a8 <HAL_GPIO_DeInit+0x1e8>)
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	089b      	lsrs	r3, r3, #2
 8009ff0:	3302      	adds	r3, #2
 8009ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ff6:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	f003 0303 	and.w	r3, r3, #3
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	220f      	movs	r2, #15
 800a002:	fa02 f303 	lsl.w	r3, r2, r3
 800a006:	68ba      	ldr	r2, [r7, #8]
 800a008:	4013      	ands	r3, r2
 800a00a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4a67      	ldr	r2, [pc, #412]	; (800a1ac <HAL_GPIO_DeInit+0x1ec>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d037      	beq.n	800a084 <HAL_GPIO_DeInit+0xc4>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a66      	ldr	r2, [pc, #408]	; (800a1b0 <HAL_GPIO_DeInit+0x1f0>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d031      	beq.n	800a080 <HAL_GPIO_DeInit+0xc0>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	4a65      	ldr	r2, [pc, #404]	; (800a1b4 <HAL_GPIO_DeInit+0x1f4>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d02b      	beq.n	800a07c <HAL_GPIO_DeInit+0xbc>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	4a64      	ldr	r2, [pc, #400]	; (800a1b8 <HAL_GPIO_DeInit+0x1f8>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d025      	beq.n	800a078 <HAL_GPIO_DeInit+0xb8>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	4a63      	ldr	r2, [pc, #396]	; (800a1bc <HAL_GPIO_DeInit+0x1fc>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d01f      	beq.n	800a074 <HAL_GPIO_DeInit+0xb4>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	4a62      	ldr	r2, [pc, #392]	; (800a1c0 <HAL_GPIO_DeInit+0x200>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d019      	beq.n	800a070 <HAL_GPIO_DeInit+0xb0>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	4a61      	ldr	r2, [pc, #388]	; (800a1c4 <HAL_GPIO_DeInit+0x204>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d013      	beq.n	800a06c <HAL_GPIO_DeInit+0xac>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	4a60      	ldr	r2, [pc, #384]	; (800a1c8 <HAL_GPIO_DeInit+0x208>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d00d      	beq.n	800a068 <HAL_GPIO_DeInit+0xa8>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	4a5f      	ldr	r2, [pc, #380]	; (800a1cc <HAL_GPIO_DeInit+0x20c>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d007      	beq.n	800a064 <HAL_GPIO_DeInit+0xa4>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	4a5e      	ldr	r2, [pc, #376]	; (800a1d0 <HAL_GPIO_DeInit+0x210>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d101      	bne.n	800a060 <HAL_GPIO_DeInit+0xa0>
 800a05c:	2309      	movs	r3, #9
 800a05e:	e012      	b.n	800a086 <HAL_GPIO_DeInit+0xc6>
 800a060:	230a      	movs	r3, #10
 800a062:	e010      	b.n	800a086 <HAL_GPIO_DeInit+0xc6>
 800a064:	2308      	movs	r3, #8
 800a066:	e00e      	b.n	800a086 <HAL_GPIO_DeInit+0xc6>
 800a068:	2307      	movs	r3, #7
 800a06a:	e00c      	b.n	800a086 <HAL_GPIO_DeInit+0xc6>
 800a06c:	2306      	movs	r3, #6
 800a06e:	e00a      	b.n	800a086 <HAL_GPIO_DeInit+0xc6>
 800a070:	2305      	movs	r3, #5
 800a072:	e008      	b.n	800a086 <HAL_GPIO_DeInit+0xc6>
 800a074:	2304      	movs	r3, #4
 800a076:	e006      	b.n	800a086 <HAL_GPIO_DeInit+0xc6>
 800a078:	2303      	movs	r3, #3
 800a07a:	e004      	b.n	800a086 <HAL_GPIO_DeInit+0xc6>
 800a07c:	2302      	movs	r3, #2
 800a07e:	e002      	b.n	800a086 <HAL_GPIO_DeInit+0xc6>
 800a080:	2301      	movs	r3, #1
 800a082:	e000      	b.n	800a086 <HAL_GPIO_DeInit+0xc6>
 800a084:	2300      	movs	r3, #0
 800a086:	697a      	ldr	r2, [r7, #20]
 800a088:	f002 0203 	and.w	r2, r2, #3
 800a08c:	0092      	lsls	r2, r2, #2
 800a08e:	4093      	lsls	r3, r2
 800a090:	68ba      	ldr	r2, [r7, #8]
 800a092:	429a      	cmp	r2, r3
 800a094:	d136      	bne.n	800a104 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	43db      	mvns	r3, r3
 800a09e:	401a      	ands	r2, r3
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	685a      	ldr	r2, [r3, #4]
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	43db      	mvns	r3, r3
 800a0ac:	401a      	ands	r2, r3
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800a0b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	43db      	mvns	r3, r3
 800a0bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a0c0:	4013      	ands	r3, r2
 800a0c2:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800a0c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a0c8:	685a      	ldr	r2, [r3, #4]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	43db      	mvns	r3, r3
 800a0ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a0d2:	4013      	ands	r3, r2
 800a0d4:	604b      	str	r3, [r1, #4]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	f003 0303 	and.w	r3, r3, #3
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	220f      	movs	r2, #15
 800a0e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a0e4:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800a0e6:	4a30      	ldr	r2, [pc, #192]	; (800a1a8 <HAL_GPIO_DeInit+0x1e8>)
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	089b      	lsrs	r3, r3, #2
 800a0ec:	3302      	adds	r3, #2
 800a0ee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	43da      	mvns	r2, r3
 800a0f6:	482c      	ldr	r0, [pc, #176]	; (800a1a8 <HAL_GPIO_DeInit+0x1e8>)
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	089b      	lsrs	r3, r3, #2
 800a0fc:	400a      	ands	r2, r1
 800a0fe:	3302      	adds	r3, #2
 800a100:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	005b      	lsls	r3, r3, #1
 800a10c:	2103      	movs	r1, #3
 800a10e:	fa01 f303 	lsl.w	r3, r1, r3
 800a112:	431a      	orrs	r2, r3
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	08da      	lsrs	r2, r3, #3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	3208      	adds	r2, #8
 800a120:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	f003 0307 	and.w	r3, r3, #7
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	220f      	movs	r2, #15
 800a12e:	fa02 f303 	lsl.w	r3, r2, r3
 800a132:	43db      	mvns	r3, r3
 800a134:	697a      	ldr	r2, [r7, #20]
 800a136:	08d2      	lsrs	r2, r2, #3
 800a138:	4019      	ands	r1, r3
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	3208      	adds	r2, #8
 800a13e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	68da      	ldr	r2, [r3, #12]
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	005b      	lsls	r3, r3, #1
 800a14a:	2103      	movs	r1, #3
 800a14c:	fa01 f303 	lsl.w	r3, r1, r3
 800a150:	43db      	mvns	r3, r3
 800a152:	401a      	ands	r2, r3
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	685a      	ldr	r2, [r3, #4]
 800a15c:	2101      	movs	r1, #1
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	fa01 f303 	lsl.w	r3, r1, r3
 800a164:	43db      	mvns	r3, r3
 800a166:	401a      	ands	r2, r3
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	689a      	ldr	r2, [r3, #8]
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	005b      	lsls	r3, r3, #1
 800a174:	2103      	movs	r1, #3
 800a176:	fa01 f303 	lsl.w	r3, r1, r3
 800a17a:	43db      	mvns	r3, r3
 800a17c:	401a      	ands	r2, r3
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	609a      	str	r2, [r3, #8]
    }

    position++;
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	3301      	adds	r3, #1
 800a186:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800a188:	683a      	ldr	r2, [r7, #0]
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	fa22 f303 	lsr.w	r3, r2, r3
 800a190:	2b00      	cmp	r3, #0
 800a192:	f47f af1f 	bne.w	8009fd4 <HAL_GPIO_DeInit+0x14>
  }
}
 800a196:	bf00      	nop
 800a198:	bf00      	nop
 800a19a:	371c      	adds	r7, #28
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr
 800a1a4:	58000080 	.word	0x58000080
 800a1a8:	58000400 	.word	0x58000400
 800a1ac:	58020000 	.word	0x58020000
 800a1b0:	58020400 	.word	0x58020400
 800a1b4:	58020800 	.word	0x58020800
 800a1b8:	58020c00 	.word	0x58020c00
 800a1bc:	58021000 	.word	0x58021000
 800a1c0:	58021400 	.word	0x58021400
 800a1c4:	58021800 	.word	0x58021800
 800a1c8:	58021c00 	.word	0x58021c00
 800a1cc:	58022000 	.word	0x58022000
 800a1d0:	58022400 	.word	0x58022400

0800a1d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	460b      	mov	r3, r1
 800a1de:	807b      	strh	r3, [r7, #2]
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a1e4:	787b      	ldrb	r3, [r7, #1]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d003      	beq.n	800a1f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a1ea:	887a      	ldrh	r2, [r7, #2]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a1f0:	e003      	b.n	800a1fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a1f2:	887b      	ldrh	r3, [r7, #2]
 800a1f4:	041a      	lsls	r2, r3, #16
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	619a      	str	r2, [r3, #24]
}
 800a1fa:	bf00      	nop
 800a1fc:	370c      	adds	r7, #12
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr

0800a206 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a206:	b480      	push	{r7}
 800a208:	b083      	sub	sp, #12
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
 800a20e:	460b      	mov	r3, r1
 800a210:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	695a      	ldr	r2, [r3, #20]
 800a216:	887b      	ldrh	r3, [r7, #2]
 800a218:	401a      	ands	r2, r3
 800a21a:	887b      	ldrh	r3, [r7, #2]
 800a21c:	429a      	cmp	r2, r3
 800a21e:	d104      	bne.n	800a22a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a220:	887b      	ldrh	r3, [r7, #2]
 800a222:	041a      	lsls	r2, r3, #16
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800a228:	e002      	b.n	800a230 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800a22a:	887a      	ldrh	r2, [r7, #2]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	619a      	str	r2, [r3, #24]
}
 800a230:	bf00      	nop
 800a232:	370c      	adds	r7, #12
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr

0800a23c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	4603      	mov	r3, r0
 800a244:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800a246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a24a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a24e:	88fb      	ldrh	r3, [r7, #6]
 800a250:	4013      	ands	r3, r2
 800a252:	2b00      	cmp	r3, #0
 800a254:	d008      	beq.n	800a268 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a256:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a25a:	88fb      	ldrh	r3, [r7, #6]
 800a25c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a260:	88fb      	ldrh	r3, [r7, #6]
 800a262:	4618      	mov	r0, r3
 800a264:	f7f7 f880 	bl	8001368 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800a268:	bf00      	nop
 800a26a:	3708      	adds	r7, #8
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d101      	bne.n	800a282 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	e07f      	b.n	800a382 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d106      	bne.n	800a29c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2200      	movs	r2, #0
 800a292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f7fa fb94 	bl	80049c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2224      	movs	r2, #36	; 0x24
 800a2a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f022 0201 	bic.w	r2, r2, #1
 800a2b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	685a      	ldr	r2, [r3, #4]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a2c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	689a      	ldr	r2, [r3, #8]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a2d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	68db      	ldr	r3, [r3, #12]
 800a2d6:	2b01      	cmp	r3, #1
 800a2d8:	d107      	bne.n	800a2ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	689a      	ldr	r2, [r3, #8]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a2e6:	609a      	str	r2, [r3, #8]
 800a2e8:	e006      	b.n	800a2f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	689a      	ldr	r2, [r3, #8]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a2f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	2b02      	cmp	r3, #2
 800a2fe:	d104      	bne.n	800a30a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a308:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	6859      	ldr	r1, [r3, #4]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	4b1d      	ldr	r3, [pc, #116]	; (800a38c <HAL_I2C_Init+0x11c>)
 800a316:	430b      	orrs	r3, r1
 800a318:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	68da      	ldr	r2, [r3, #12]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a328:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	691a      	ldr	r2, [r3, #16]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	695b      	ldr	r3, [r3, #20]
 800a332:	ea42 0103 	orr.w	r1, r2, r3
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	699b      	ldr	r3, [r3, #24]
 800a33a:	021a      	lsls	r2, r3, #8
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	430a      	orrs	r2, r1
 800a342:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	69d9      	ldr	r1, [r3, #28]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6a1a      	ldr	r2, [r3, #32]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	430a      	orrs	r2, r1
 800a352:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f042 0201 	orr.w	r2, r2, #1
 800a362:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2200      	movs	r2, #0
 800a368:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2220      	movs	r2, #32
 800a36e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2200      	movs	r2, #0
 800a376:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a380:	2300      	movs	r3, #0
}
 800a382:	4618      	mov	r0, r3
 800a384:	3708      	adds	r7, #8
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
 800a38a:	bf00      	nop
 800a38c:	02008000 	.word	0x02008000

0800a390 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d101      	bne.n	800a3a2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	e021      	b.n	800a3e6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2224      	movs	r2, #36	; 0x24
 800a3a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f022 0201 	bic.w	r2, r2, #1
 800a3b8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f7fa fb86 	bl	8004acc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3708      	adds	r7, #8
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
	...

0800a3f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b088      	sub	sp, #32
 800a3f4:	af02      	add	r7, sp, #8
 800a3f6:	60f8      	str	r0, [r7, #12]
 800a3f8:	4608      	mov	r0, r1
 800a3fa:	4611      	mov	r1, r2
 800a3fc:	461a      	mov	r2, r3
 800a3fe:	4603      	mov	r3, r0
 800a400:	817b      	strh	r3, [r7, #10]
 800a402:	460b      	mov	r3, r1
 800a404:	813b      	strh	r3, [r7, #8]
 800a406:	4613      	mov	r3, r2
 800a408:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a410:	b2db      	uxtb	r3, r3
 800a412:	2b20      	cmp	r3, #32
 800a414:	f040 80f9 	bne.w	800a60a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a418:	6a3b      	ldr	r3, [r7, #32]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d002      	beq.n	800a424 <HAL_I2C_Mem_Write+0x34>
 800a41e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a420:	2b00      	cmp	r3, #0
 800a422:	d105      	bne.n	800a430 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a42a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	e0ed      	b.n	800a60c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a436:	2b01      	cmp	r3, #1
 800a438:	d101      	bne.n	800a43e <HAL_I2C_Mem_Write+0x4e>
 800a43a:	2302      	movs	r3, #2
 800a43c:	e0e6      	b.n	800a60c <HAL_I2C_Mem_Write+0x21c>
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2201      	movs	r2, #1
 800a442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a446:	f7fb fcf5 	bl	8005e34 <HAL_GetTick>
 800a44a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	9300      	str	r3, [sp, #0]
 800a450:	2319      	movs	r3, #25
 800a452:	2201      	movs	r2, #1
 800a454:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a458:	68f8      	ldr	r0, [r7, #12]
 800a45a:	f000 fac3 	bl	800a9e4 <I2C_WaitOnFlagUntilTimeout>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d001      	beq.n	800a468 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a464:	2301      	movs	r3, #1
 800a466:	e0d1      	b.n	800a60c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2221      	movs	r2, #33	; 0x21
 800a46c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2240      	movs	r2, #64	; 0x40
 800a474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2200      	movs	r2, #0
 800a47c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	6a3a      	ldr	r2, [r7, #32]
 800a482:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a488:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2200      	movs	r2, #0
 800a48e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a490:	88f8      	ldrh	r0, [r7, #6]
 800a492:	893a      	ldrh	r2, [r7, #8]
 800a494:	8979      	ldrh	r1, [r7, #10]
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	9301      	str	r3, [sp, #4]
 800a49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49c:	9300      	str	r3, [sp, #0]
 800a49e:	4603      	mov	r3, r0
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f000 f9d3 	bl	800a84c <I2C_RequestMemoryWrite>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d005      	beq.n	800a4b8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e0a9      	b.n	800a60c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	2bff      	cmp	r3, #255	; 0xff
 800a4c0:	d90e      	bls.n	800a4e0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	22ff      	movs	r2, #255	; 0xff
 800a4c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4cc:	b2da      	uxtb	r2, r3
 800a4ce:	8979      	ldrh	r1, [r7, #10]
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	9300      	str	r3, [sp, #0]
 800a4d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a4d8:	68f8      	ldr	r0, [r7, #12]
 800a4da:	f000 fba5 	bl	800ac28 <I2C_TransferConfig>
 800a4de:	e00f      	b.n	800a500 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4e4:	b29a      	uxth	r2, r3
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4ee:	b2da      	uxtb	r2, r3
 800a4f0:	8979      	ldrh	r1, [r7, #10]
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	9300      	str	r3, [sp, #0]
 800a4f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a4fa:	68f8      	ldr	r0, [r7, #12]
 800a4fc:	f000 fb94 	bl	800ac28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a500:	697a      	ldr	r2, [r7, #20]
 800a502:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a504:	68f8      	ldr	r0, [r7, #12]
 800a506:	f000 faad 	bl	800aa64 <I2C_WaitOnTXISFlagUntilTimeout>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d001      	beq.n	800a514 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a510:	2301      	movs	r3, #1
 800a512:	e07b      	b.n	800a60c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a518:	781a      	ldrb	r2, [r3, #0]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a524:	1c5a      	adds	r2, r3, #1
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a52e:	b29b      	uxth	r3, r3
 800a530:	3b01      	subs	r3, #1
 800a532:	b29a      	uxth	r2, r3
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a53c:	3b01      	subs	r3, #1
 800a53e:	b29a      	uxth	r2, r3
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a548:	b29b      	uxth	r3, r3
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d034      	beq.n	800a5b8 <HAL_I2C_Mem_Write+0x1c8>
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a552:	2b00      	cmp	r3, #0
 800a554:	d130      	bne.n	800a5b8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	9300      	str	r3, [sp, #0]
 800a55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55c:	2200      	movs	r2, #0
 800a55e:	2180      	movs	r1, #128	; 0x80
 800a560:	68f8      	ldr	r0, [r7, #12]
 800a562:	f000 fa3f 	bl	800a9e4 <I2C_WaitOnFlagUntilTimeout>
 800a566:	4603      	mov	r3, r0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d001      	beq.n	800a570 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a56c:	2301      	movs	r3, #1
 800a56e:	e04d      	b.n	800a60c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a574:	b29b      	uxth	r3, r3
 800a576:	2bff      	cmp	r3, #255	; 0xff
 800a578:	d90e      	bls.n	800a598 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	22ff      	movs	r2, #255	; 0xff
 800a57e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a584:	b2da      	uxtb	r2, r3
 800a586:	8979      	ldrh	r1, [r7, #10]
 800a588:	2300      	movs	r3, #0
 800a58a:	9300      	str	r3, [sp, #0]
 800a58c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f000 fb49 	bl	800ac28 <I2C_TransferConfig>
 800a596:	e00f      	b.n	800a5b8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a59c:	b29a      	uxth	r2, r3
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5a6:	b2da      	uxtb	r2, r3
 800a5a8:	8979      	ldrh	r1, [r7, #10]
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	9300      	str	r3, [sp, #0]
 800a5ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a5b2:	68f8      	ldr	r0, [r7, #12]
 800a5b4:	f000 fb38 	bl	800ac28 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d19e      	bne.n	800a500 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a5c2:	697a      	ldr	r2, [r7, #20]
 800a5c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5c6:	68f8      	ldr	r0, [r7, #12]
 800a5c8:	f000 fa8c 	bl	800aae4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d001      	beq.n	800a5d6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	e01a      	b.n	800a60c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2220      	movs	r2, #32
 800a5dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	6859      	ldr	r1, [r3, #4]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681a      	ldr	r2, [r3, #0]
 800a5e8:	4b0a      	ldr	r3, [pc, #40]	; (800a614 <HAL_I2C_Mem_Write+0x224>)
 800a5ea:	400b      	ands	r3, r1
 800a5ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2220      	movs	r2, #32
 800a5f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2200      	movs	r2, #0
 800a602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a606:	2300      	movs	r3, #0
 800a608:	e000      	b.n	800a60c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a60a:	2302      	movs	r3, #2
  }
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3718      	adds	r7, #24
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	fe00e800 	.word	0xfe00e800

0800a618 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b088      	sub	sp, #32
 800a61c:	af02      	add	r7, sp, #8
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	4608      	mov	r0, r1
 800a622:	4611      	mov	r1, r2
 800a624:	461a      	mov	r2, r3
 800a626:	4603      	mov	r3, r0
 800a628:	817b      	strh	r3, [r7, #10]
 800a62a:	460b      	mov	r3, r1
 800a62c:	813b      	strh	r3, [r7, #8]
 800a62e:	4613      	mov	r3, r2
 800a630:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	2b20      	cmp	r3, #32
 800a63c:	f040 80fd 	bne.w	800a83a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a640:	6a3b      	ldr	r3, [r7, #32]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d002      	beq.n	800a64c <HAL_I2C_Mem_Read+0x34>
 800a646:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d105      	bne.n	800a658 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a652:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	e0f1      	b.n	800a83c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d101      	bne.n	800a666 <HAL_I2C_Mem_Read+0x4e>
 800a662:	2302      	movs	r3, #2
 800a664:	e0ea      	b.n	800a83c <HAL_I2C_Mem_Read+0x224>
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2201      	movs	r2, #1
 800a66a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a66e:	f7fb fbe1 	bl	8005e34 <HAL_GetTick>
 800a672:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	9300      	str	r3, [sp, #0]
 800a678:	2319      	movs	r3, #25
 800a67a:	2201      	movs	r2, #1
 800a67c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a680:	68f8      	ldr	r0, [r7, #12]
 800a682:	f000 f9af 	bl	800a9e4 <I2C_WaitOnFlagUntilTimeout>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d001      	beq.n	800a690 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a68c:	2301      	movs	r3, #1
 800a68e:	e0d5      	b.n	800a83c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2222      	movs	r2, #34	; 0x22
 800a694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2240      	movs	r2, #64	; 0x40
 800a69c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	6a3a      	ldr	r2, [r7, #32]
 800a6aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a6b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a6b8:	88f8      	ldrh	r0, [r7, #6]
 800a6ba:	893a      	ldrh	r2, [r7, #8]
 800a6bc:	8979      	ldrh	r1, [r7, #10]
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	9301      	str	r3, [sp, #4]
 800a6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c4:	9300      	str	r3, [sp, #0]
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	68f8      	ldr	r0, [r7, #12]
 800a6ca:	f000 f913 	bl	800a8f4 <I2C_RequestMemoryRead>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d005      	beq.n	800a6e0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	e0ad      	b.n	800a83c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	2bff      	cmp	r3, #255	; 0xff
 800a6e8:	d90e      	bls.n	800a708 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	22ff      	movs	r2, #255	; 0xff
 800a6ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6f4:	b2da      	uxtb	r2, r3
 800a6f6:	8979      	ldrh	r1, [r7, #10]
 800a6f8:	4b52      	ldr	r3, [pc, #328]	; (800a844 <HAL_I2C_Mem_Read+0x22c>)
 800a6fa:	9300      	str	r3, [sp, #0]
 800a6fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a700:	68f8      	ldr	r0, [r7, #12]
 800a702:	f000 fa91 	bl	800ac28 <I2C_TransferConfig>
 800a706:	e00f      	b.n	800a728 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a70c:	b29a      	uxth	r2, r3
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a716:	b2da      	uxtb	r2, r3
 800a718:	8979      	ldrh	r1, [r7, #10]
 800a71a:	4b4a      	ldr	r3, [pc, #296]	; (800a844 <HAL_I2C_Mem_Read+0x22c>)
 800a71c:	9300      	str	r3, [sp, #0]
 800a71e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a722:	68f8      	ldr	r0, [r7, #12]
 800a724:	f000 fa80 	bl	800ac28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	9300      	str	r3, [sp, #0]
 800a72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a72e:	2200      	movs	r2, #0
 800a730:	2104      	movs	r1, #4
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f000 f956 	bl	800a9e4 <I2C_WaitOnFlagUntilTimeout>
 800a738:	4603      	mov	r3, r0
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d001      	beq.n	800a742 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a73e:	2301      	movs	r3, #1
 800a740:	e07c      	b.n	800a83c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74c:	b2d2      	uxtb	r2, r2
 800a74e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a754:	1c5a      	adds	r2, r3, #1
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a75e:	3b01      	subs	r3, #1
 800a760:	b29a      	uxth	r2, r3
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	3b01      	subs	r3, #1
 800a76e:	b29a      	uxth	r2, r3
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a778:	b29b      	uxth	r3, r3
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d034      	beq.n	800a7e8 <HAL_I2C_Mem_Read+0x1d0>
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a782:	2b00      	cmp	r3, #0
 800a784:	d130      	bne.n	800a7e8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	9300      	str	r3, [sp, #0]
 800a78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78c:	2200      	movs	r2, #0
 800a78e:	2180      	movs	r1, #128	; 0x80
 800a790:	68f8      	ldr	r0, [r7, #12]
 800a792:	f000 f927 	bl	800a9e4 <I2C_WaitOnFlagUntilTimeout>
 800a796:	4603      	mov	r3, r0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d001      	beq.n	800a7a0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a79c:	2301      	movs	r3, #1
 800a79e:	e04d      	b.n	800a83c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	2bff      	cmp	r3, #255	; 0xff
 800a7a8:	d90e      	bls.n	800a7c8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	22ff      	movs	r2, #255	; 0xff
 800a7ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7b4:	b2da      	uxtb	r2, r3
 800a7b6:	8979      	ldrh	r1, [r7, #10]
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	9300      	str	r3, [sp, #0]
 800a7bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a7c0:	68f8      	ldr	r0, [r7, #12]
 800a7c2:	f000 fa31 	bl	800ac28 <I2C_TransferConfig>
 800a7c6:	e00f      	b.n	800a7e8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7cc:	b29a      	uxth	r2, r3
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7d6:	b2da      	uxtb	r2, r3
 800a7d8:	8979      	ldrh	r1, [r7, #10]
 800a7da:	2300      	movs	r3, #0
 800a7dc:	9300      	str	r3, [sp, #0]
 800a7de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a7e2:	68f8      	ldr	r0, [r7, #12]
 800a7e4:	f000 fa20 	bl	800ac28 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d19a      	bne.n	800a728 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a7f2:	697a      	ldr	r2, [r7, #20]
 800a7f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a7f6:	68f8      	ldr	r0, [r7, #12]
 800a7f8:	f000 f974 	bl	800aae4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d001      	beq.n	800a806 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a802:	2301      	movs	r3, #1
 800a804:	e01a      	b.n	800a83c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	2220      	movs	r2, #32
 800a80c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	6859      	ldr	r1, [r3, #4]
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	4b0b      	ldr	r3, [pc, #44]	; (800a848 <HAL_I2C_Mem_Read+0x230>)
 800a81a:	400b      	ands	r3, r1
 800a81c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2220      	movs	r2, #32
 800a822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2200      	movs	r2, #0
 800a82a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2200      	movs	r2, #0
 800a832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a836:	2300      	movs	r3, #0
 800a838:	e000      	b.n	800a83c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a83a:	2302      	movs	r3, #2
  }
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3718      	adds	r7, #24
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}
 800a844:	80002400 	.word	0x80002400
 800a848:	fe00e800 	.word	0xfe00e800

0800a84c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b086      	sub	sp, #24
 800a850:	af02      	add	r7, sp, #8
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	4608      	mov	r0, r1
 800a856:	4611      	mov	r1, r2
 800a858:	461a      	mov	r2, r3
 800a85a:	4603      	mov	r3, r0
 800a85c:	817b      	strh	r3, [r7, #10]
 800a85e:	460b      	mov	r3, r1
 800a860:	813b      	strh	r3, [r7, #8]
 800a862:	4613      	mov	r3, r2
 800a864:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a866:	88fb      	ldrh	r3, [r7, #6]
 800a868:	b2da      	uxtb	r2, r3
 800a86a:	8979      	ldrh	r1, [r7, #10]
 800a86c:	4b20      	ldr	r3, [pc, #128]	; (800a8f0 <I2C_RequestMemoryWrite+0xa4>)
 800a86e:	9300      	str	r3, [sp, #0]
 800a870:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a874:	68f8      	ldr	r0, [r7, #12]
 800a876:	f000 f9d7 	bl	800ac28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a87a:	69fa      	ldr	r2, [r7, #28]
 800a87c:	69b9      	ldr	r1, [r7, #24]
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	f000 f8f0 	bl	800aa64 <I2C_WaitOnTXISFlagUntilTimeout>
 800a884:	4603      	mov	r3, r0
 800a886:	2b00      	cmp	r3, #0
 800a888:	d001      	beq.n	800a88e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a88a:	2301      	movs	r3, #1
 800a88c:	e02c      	b.n	800a8e8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a88e:	88fb      	ldrh	r3, [r7, #6]
 800a890:	2b01      	cmp	r3, #1
 800a892:	d105      	bne.n	800a8a0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a894:	893b      	ldrh	r3, [r7, #8]
 800a896:	b2da      	uxtb	r2, r3
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	629a      	str	r2, [r3, #40]	; 0x28
 800a89e:	e015      	b.n	800a8cc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a8a0:	893b      	ldrh	r3, [r7, #8]
 800a8a2:	0a1b      	lsrs	r3, r3, #8
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	b2da      	uxtb	r2, r3
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a8ae:	69fa      	ldr	r2, [r7, #28]
 800a8b0:	69b9      	ldr	r1, [r7, #24]
 800a8b2:	68f8      	ldr	r0, [r7, #12]
 800a8b4:	f000 f8d6 	bl	800aa64 <I2C_WaitOnTXISFlagUntilTimeout>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d001      	beq.n	800a8c2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e012      	b.n	800a8e8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a8c2:	893b      	ldrh	r3, [r7, #8]
 800a8c4:	b2da      	uxtb	r2, r3
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a8cc:	69fb      	ldr	r3, [r7, #28]
 800a8ce:	9300      	str	r3, [sp, #0]
 800a8d0:	69bb      	ldr	r3, [r7, #24]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	2180      	movs	r1, #128	; 0x80
 800a8d6:	68f8      	ldr	r0, [r7, #12]
 800a8d8:	f000 f884 	bl	800a9e4 <I2C_WaitOnFlagUntilTimeout>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d001      	beq.n	800a8e6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e000      	b.n	800a8e8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a8e6:	2300      	movs	r3, #0
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3710      	adds	r7, #16
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}
 800a8f0:	80002000 	.word	0x80002000

0800a8f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b086      	sub	sp, #24
 800a8f8:	af02      	add	r7, sp, #8
 800a8fa:	60f8      	str	r0, [r7, #12]
 800a8fc:	4608      	mov	r0, r1
 800a8fe:	4611      	mov	r1, r2
 800a900:	461a      	mov	r2, r3
 800a902:	4603      	mov	r3, r0
 800a904:	817b      	strh	r3, [r7, #10]
 800a906:	460b      	mov	r3, r1
 800a908:	813b      	strh	r3, [r7, #8]
 800a90a:	4613      	mov	r3, r2
 800a90c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a90e:	88fb      	ldrh	r3, [r7, #6]
 800a910:	b2da      	uxtb	r2, r3
 800a912:	8979      	ldrh	r1, [r7, #10]
 800a914:	4b20      	ldr	r3, [pc, #128]	; (800a998 <I2C_RequestMemoryRead+0xa4>)
 800a916:	9300      	str	r3, [sp, #0]
 800a918:	2300      	movs	r3, #0
 800a91a:	68f8      	ldr	r0, [r7, #12]
 800a91c:	f000 f984 	bl	800ac28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a920:	69fa      	ldr	r2, [r7, #28]
 800a922:	69b9      	ldr	r1, [r7, #24]
 800a924:	68f8      	ldr	r0, [r7, #12]
 800a926:	f000 f89d 	bl	800aa64 <I2C_WaitOnTXISFlagUntilTimeout>
 800a92a:	4603      	mov	r3, r0
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d001      	beq.n	800a934 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a930:	2301      	movs	r3, #1
 800a932:	e02c      	b.n	800a98e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a934:	88fb      	ldrh	r3, [r7, #6]
 800a936:	2b01      	cmp	r3, #1
 800a938:	d105      	bne.n	800a946 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a93a:	893b      	ldrh	r3, [r7, #8]
 800a93c:	b2da      	uxtb	r2, r3
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	629a      	str	r2, [r3, #40]	; 0x28
 800a944:	e015      	b.n	800a972 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a946:	893b      	ldrh	r3, [r7, #8]
 800a948:	0a1b      	lsrs	r3, r3, #8
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	b2da      	uxtb	r2, r3
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a954:	69fa      	ldr	r2, [r7, #28]
 800a956:	69b9      	ldr	r1, [r7, #24]
 800a958:	68f8      	ldr	r0, [r7, #12]
 800a95a:	f000 f883 	bl	800aa64 <I2C_WaitOnTXISFlagUntilTimeout>
 800a95e:	4603      	mov	r3, r0
 800a960:	2b00      	cmp	r3, #0
 800a962:	d001      	beq.n	800a968 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a964:	2301      	movs	r3, #1
 800a966:	e012      	b.n	800a98e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a968:	893b      	ldrh	r3, [r7, #8]
 800a96a:	b2da      	uxtb	r2, r3
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a972:	69fb      	ldr	r3, [r7, #28]
 800a974:	9300      	str	r3, [sp, #0]
 800a976:	69bb      	ldr	r3, [r7, #24]
 800a978:	2200      	movs	r2, #0
 800a97a:	2140      	movs	r1, #64	; 0x40
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f000 f831 	bl	800a9e4 <I2C_WaitOnFlagUntilTimeout>
 800a982:	4603      	mov	r3, r0
 800a984:	2b00      	cmp	r3, #0
 800a986:	d001      	beq.n	800a98c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a988:	2301      	movs	r3, #1
 800a98a:	e000      	b.n	800a98e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a98c:	2300      	movs	r3, #0
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3710      	adds	r7, #16
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
 800a996:	bf00      	nop
 800a998:	80002000 	.word	0x80002000

0800a99c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b083      	sub	sp, #12
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	699b      	ldr	r3, [r3, #24]
 800a9aa:	f003 0302 	and.w	r3, r3, #2
 800a9ae:	2b02      	cmp	r3, #2
 800a9b0:	d103      	bne.n	800a9ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	699b      	ldr	r3, [r3, #24]
 800a9c0:	f003 0301 	and.w	r3, r3, #1
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d007      	beq.n	800a9d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	699a      	ldr	r2, [r3, #24]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f042 0201 	orr.w	r2, r2, #1
 800a9d6:	619a      	str	r2, [r3, #24]
  }
}
 800a9d8:	bf00      	nop
 800a9da:	370c      	adds	r7, #12
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	60f8      	str	r0, [r7, #12]
 800a9ec:	60b9      	str	r1, [r7, #8]
 800a9ee:	603b      	str	r3, [r7, #0]
 800a9f0:	4613      	mov	r3, r2
 800a9f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a9f4:	e022      	b.n	800aa3c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9fc:	d01e      	beq.n	800aa3c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9fe:	f7fb fa19 	bl	8005e34 <HAL_GetTick>
 800aa02:	4602      	mov	r2, r0
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	1ad3      	subs	r3, r2, r3
 800aa08:	683a      	ldr	r2, [r7, #0]
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d302      	bcc.n	800aa14 <I2C_WaitOnFlagUntilTimeout+0x30>
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d113      	bne.n	800aa3c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa18:	f043 0220 	orr.w	r2, r3, #32
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2220      	movs	r2, #32
 800aa24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2200      	movs	r2, #0
 800aa34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	e00f      	b.n	800aa5c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	699a      	ldr	r2, [r3, #24]
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	4013      	ands	r3, r2
 800aa46:	68ba      	ldr	r2, [r7, #8]
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	bf0c      	ite	eq
 800aa4c:	2301      	moveq	r3, #1
 800aa4e:	2300      	movne	r3, #0
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	461a      	mov	r2, r3
 800aa54:	79fb      	ldrb	r3, [r7, #7]
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d0cd      	beq.n	800a9f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aa5a:	2300      	movs	r3, #0
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3710      	adds	r7, #16
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	60b9      	str	r1, [r7, #8]
 800aa6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800aa70:	e02c      	b.n	800aacc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	68b9      	ldr	r1, [r7, #8]
 800aa76:	68f8      	ldr	r0, [r7, #12]
 800aa78:	f000 f870 	bl	800ab5c <I2C_IsAcknowledgeFailed>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d001      	beq.n	800aa86 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800aa82:	2301      	movs	r3, #1
 800aa84:	e02a      	b.n	800aadc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa8c:	d01e      	beq.n	800aacc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa8e:	f7fb f9d1 	bl	8005e34 <HAL_GetTick>
 800aa92:	4602      	mov	r2, r0
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	1ad3      	subs	r3, r2, r3
 800aa98:	68ba      	ldr	r2, [r7, #8]
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d302      	bcc.n	800aaa4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d113      	bne.n	800aacc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaa8:	f043 0220 	orr.w	r2, r3, #32
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2220      	movs	r2, #32
 800aab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2200      	movs	r2, #0
 800aabc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2200      	movs	r2, #0
 800aac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800aac8:	2301      	movs	r3, #1
 800aaca:	e007      	b.n	800aadc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	699b      	ldr	r3, [r3, #24]
 800aad2:	f003 0302 	and.w	r3, r3, #2
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	d1cb      	bne.n	800aa72 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800aada:	2300      	movs	r3, #0
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3710      	adds	r7, #16
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b084      	sub	sp, #16
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	60b9      	str	r1, [r7, #8]
 800aaee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aaf0:	e028      	b.n	800ab44 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	68b9      	ldr	r1, [r7, #8]
 800aaf6:	68f8      	ldr	r0, [r7, #12]
 800aaf8:	f000 f830 	bl	800ab5c <I2C_IsAcknowledgeFailed>
 800aafc:	4603      	mov	r3, r0
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d001      	beq.n	800ab06 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ab02:	2301      	movs	r3, #1
 800ab04:	e026      	b.n	800ab54 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab06:	f7fb f995 	bl	8005e34 <HAL_GetTick>
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	1ad3      	subs	r3, r2, r3
 800ab10:	68ba      	ldr	r2, [r7, #8]
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d302      	bcc.n	800ab1c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d113      	bne.n	800ab44 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab20:	f043 0220 	orr.w	r2, r3, #32
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2220      	movs	r2, #32
 800ab2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	2200      	movs	r2, #0
 800ab34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800ab40:	2301      	movs	r3, #1
 800ab42:	e007      	b.n	800ab54 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	699b      	ldr	r3, [r3, #24]
 800ab4a:	f003 0320 	and.w	r3, r3, #32
 800ab4e:	2b20      	cmp	r3, #32
 800ab50:	d1cf      	bne.n	800aaf2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ab52:	2300      	movs	r3, #0
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3710      	adds	r7, #16
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b084      	sub	sp, #16
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	60f8      	str	r0, [r7, #12]
 800ab64:	60b9      	str	r1, [r7, #8]
 800ab66:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	699b      	ldr	r3, [r3, #24]
 800ab6e:	f003 0310 	and.w	r3, r3, #16
 800ab72:	2b10      	cmp	r3, #16
 800ab74:	d151      	bne.n	800ac1a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ab76:	e022      	b.n	800abbe <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab7e:	d01e      	beq.n	800abbe <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab80:	f7fb f958 	bl	8005e34 <HAL_GetTick>
 800ab84:	4602      	mov	r2, r0
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	1ad3      	subs	r3, r2, r3
 800ab8a:	68ba      	ldr	r2, [r7, #8]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d302      	bcc.n	800ab96 <I2C_IsAcknowledgeFailed+0x3a>
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d113      	bne.n	800abbe <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab9a:	f043 0220 	orr.w	r2, r3, #32
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2220      	movs	r2, #32
 800aba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2200      	movs	r2, #0
 800abae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2200      	movs	r2, #0
 800abb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800abba:	2301      	movs	r3, #1
 800abbc:	e02e      	b.n	800ac1c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	699b      	ldr	r3, [r3, #24]
 800abc4:	f003 0320 	and.w	r3, r3, #32
 800abc8:	2b20      	cmp	r3, #32
 800abca:	d1d5      	bne.n	800ab78 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	2210      	movs	r2, #16
 800abd2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	2220      	movs	r2, #32
 800abda:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	f7ff fedd 	bl	800a99c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	6859      	ldr	r1, [r3, #4]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	4b0d      	ldr	r3, [pc, #52]	; (800ac24 <I2C_IsAcknowledgeFailed+0xc8>)
 800abee:	400b      	ands	r3, r1
 800abf0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abf6:	f043 0204 	orr.w	r2, r3, #4
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2220      	movs	r2, #32
 800ac02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2200      	movs	r2, #0
 800ac12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800ac16:	2301      	movs	r3, #1
 800ac18:	e000      	b.n	800ac1c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800ac1a:	2300      	movs	r3, #0
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3710      	adds	r7, #16
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}
 800ac24:	fe00e800 	.word	0xfe00e800

0800ac28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b085      	sub	sp, #20
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	60f8      	str	r0, [r7, #12]
 800ac30:	607b      	str	r3, [r7, #4]
 800ac32:	460b      	mov	r3, r1
 800ac34:	817b      	strh	r3, [r7, #10]
 800ac36:	4613      	mov	r3, r2
 800ac38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	685a      	ldr	r2, [r3, #4]
 800ac40:	69bb      	ldr	r3, [r7, #24]
 800ac42:	0d5b      	lsrs	r3, r3, #21
 800ac44:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800ac48:	4b0d      	ldr	r3, [pc, #52]	; (800ac80 <I2C_TransferConfig+0x58>)
 800ac4a:	430b      	orrs	r3, r1
 800ac4c:	43db      	mvns	r3, r3
 800ac4e:	ea02 0103 	and.w	r1, r2, r3
 800ac52:	897b      	ldrh	r3, [r7, #10]
 800ac54:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ac58:	7a7b      	ldrb	r3, [r7, #9]
 800ac5a:	041b      	lsls	r3, r3, #16
 800ac5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ac60:	431a      	orrs	r2, r3
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	431a      	orrs	r2, r3
 800ac66:	69bb      	ldr	r3, [r7, #24]
 800ac68:	431a      	orrs	r2, r3
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	430a      	orrs	r2, r1
 800ac70:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800ac72:	bf00      	nop
 800ac74:	3714      	adds	r7, #20
 800ac76:	46bd      	mov	sp, r7
 800ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7c:	4770      	bx	lr
 800ac7e:	bf00      	nop
 800ac80:	03ff63ff 	.word	0x03ff63ff

0800ac84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b083      	sub	sp, #12
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac94:	b2db      	uxtb	r3, r3
 800ac96:	2b20      	cmp	r3, #32
 800ac98:	d138      	bne.n	800ad0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d101      	bne.n	800aca8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800aca4:	2302      	movs	r3, #2
 800aca6:	e032      	b.n	800ad0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2201      	movs	r2, #1
 800acac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2224      	movs	r2, #36	; 0x24
 800acb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	681a      	ldr	r2, [r3, #0]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f022 0201 	bic.w	r2, r2, #1
 800acc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	681a      	ldr	r2, [r3, #0]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800acd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	6819      	ldr	r1, [r3, #0]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	683a      	ldr	r2, [r7, #0]
 800ace4:	430a      	orrs	r2, r1
 800ace6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	681a      	ldr	r2, [r3, #0]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f042 0201 	orr.w	r2, r2, #1
 800acf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2220      	movs	r2, #32
 800acfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	e000      	b.n	800ad0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ad0c:	2302      	movs	r3, #2
  }
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	370c      	adds	r7, #12
 800ad12:	46bd      	mov	sp, r7
 800ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad18:	4770      	bx	lr

0800ad1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ad1a:	b480      	push	{r7}
 800ad1c:	b085      	sub	sp, #20
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	6078      	str	r0, [r7, #4]
 800ad22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	2b20      	cmp	r3, #32
 800ad2e:	d139      	bne.n	800ada4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad36:	2b01      	cmp	r3, #1
 800ad38:	d101      	bne.n	800ad3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ad3a:	2302      	movs	r3, #2
 800ad3c:	e033      	b.n	800ada6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2201      	movs	r2, #1
 800ad42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2224      	movs	r2, #36	; 0x24
 800ad4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	681a      	ldr	r2, [r3, #0]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f022 0201 	bic.w	r2, r2, #1
 800ad5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ad6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	021b      	lsls	r3, r3, #8
 800ad72:	68fa      	ldr	r2, [r7, #12]
 800ad74:	4313      	orrs	r3, r2
 800ad76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	681a      	ldr	r2, [r3, #0]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f042 0201 	orr.w	r2, r2, #1
 800ad8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2220      	movs	r2, #32
 800ad94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ada0:	2300      	movs	r3, #0
 800ada2:	e000      	b.n	800ada6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ada4:	2302      	movs	r3, #2
  }
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3714      	adds	r7, #20
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr
	...

0800adb4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b084      	sub	sp, #16
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800adbc:	4b19      	ldr	r3, [pc, #100]	; (800ae24 <HAL_PWREx_ConfigSupply+0x70>)
 800adbe:	68db      	ldr	r3, [r3, #12]
 800adc0:	f003 0304 	and.w	r3, r3, #4
 800adc4:	2b04      	cmp	r3, #4
 800adc6:	d00a      	beq.n	800adde <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800adc8:	4b16      	ldr	r3, [pc, #88]	; (800ae24 <HAL_PWREx_ConfigSupply+0x70>)
 800adca:	68db      	ldr	r3, [r3, #12]
 800adcc:	f003 0307 	and.w	r3, r3, #7
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	429a      	cmp	r2, r3
 800add4:	d001      	beq.n	800adda <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800add6:	2301      	movs	r3, #1
 800add8:	e01f      	b.n	800ae1a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800adda:	2300      	movs	r3, #0
 800addc:	e01d      	b.n	800ae1a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800adde:	4b11      	ldr	r3, [pc, #68]	; (800ae24 <HAL_PWREx_ConfigSupply+0x70>)
 800ade0:	68db      	ldr	r3, [r3, #12]
 800ade2:	f023 0207 	bic.w	r2, r3, #7
 800ade6:	490f      	ldr	r1, [pc, #60]	; (800ae24 <HAL_PWREx_ConfigSupply+0x70>)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	4313      	orrs	r3, r2
 800adec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800adee:	f7fb f821 	bl	8005e34 <HAL_GetTick>
 800adf2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800adf4:	e009      	b.n	800ae0a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800adf6:	f7fb f81d 	bl	8005e34 <HAL_GetTick>
 800adfa:	4602      	mov	r2, r0
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	1ad3      	subs	r3, r2, r3
 800ae00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae04:	d901      	bls.n	800ae0a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800ae06:	2301      	movs	r3, #1
 800ae08:	e007      	b.n	800ae1a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ae0a:	4b06      	ldr	r3, [pc, #24]	; (800ae24 <HAL_PWREx_ConfigSupply+0x70>)
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ae12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae16:	d1ee      	bne.n	800adf6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800ae18:	2300      	movs	r3, #0
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3710      	adds	r7, #16
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
 800ae22:	bf00      	nop
 800ae24:	58024800 	.word	0x58024800

0800ae28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b08c      	sub	sp, #48	; 0x30
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d101      	bne.n	800ae3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ae36:	2301      	movs	r3, #1
 800ae38:	e3c4      	b.n	800b5c4 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f003 0301 	and.w	r3, r3, #1
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	f000 8087 	beq.w	800af56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ae48:	4ba2      	ldr	r3, [pc, #648]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800ae4a:	691b      	ldr	r3, [r3, #16]
 800ae4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ae50:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ae52:	4ba0      	ldr	r3, [pc, #640]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800ae54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae56:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800ae58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae5a:	2b10      	cmp	r3, #16
 800ae5c:	d007      	beq.n	800ae6e <HAL_RCC_OscConfig+0x46>
 800ae5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae60:	2b18      	cmp	r3, #24
 800ae62:	d110      	bne.n	800ae86 <HAL_RCC_OscConfig+0x5e>
 800ae64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae66:	f003 0303 	and.w	r3, r3, #3
 800ae6a:	2b02      	cmp	r3, #2
 800ae6c:	d10b      	bne.n	800ae86 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ae6e:	4b99      	ldr	r3, [pc, #612]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d06c      	beq.n	800af54 <HAL_RCC_OscConfig+0x12c>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d168      	bne.n	800af54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800ae82:	2301      	movs	r3, #1
 800ae84:	e39e      	b.n	800b5c4 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae8e:	d106      	bne.n	800ae9e <HAL_RCC_OscConfig+0x76>
 800ae90:	4b90      	ldr	r3, [pc, #576]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4a8f      	ldr	r2, [pc, #572]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800ae96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae9a:	6013      	str	r3, [r2, #0]
 800ae9c:	e02e      	b.n	800aefc <HAL_RCC_OscConfig+0xd4>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d10c      	bne.n	800aec0 <HAL_RCC_OscConfig+0x98>
 800aea6:	4b8b      	ldr	r3, [pc, #556]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4a8a      	ldr	r2, [pc, #552]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800aeac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aeb0:	6013      	str	r3, [r2, #0]
 800aeb2:	4b88      	ldr	r3, [pc, #544]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	4a87      	ldr	r2, [pc, #540]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800aeb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aebc:	6013      	str	r3, [r2, #0]
 800aebe:	e01d      	b.n	800aefc <HAL_RCC_OscConfig+0xd4>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aec8:	d10c      	bne.n	800aee4 <HAL_RCC_OscConfig+0xbc>
 800aeca:	4b82      	ldr	r3, [pc, #520]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a81      	ldr	r2, [pc, #516]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800aed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aed4:	6013      	str	r3, [r2, #0]
 800aed6:	4b7f      	ldr	r3, [pc, #508]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4a7e      	ldr	r2, [pc, #504]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800aedc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aee0:	6013      	str	r3, [r2, #0]
 800aee2:	e00b      	b.n	800aefc <HAL_RCC_OscConfig+0xd4>
 800aee4:	4b7b      	ldr	r3, [pc, #492]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	4a7a      	ldr	r2, [pc, #488]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800aeea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aeee:	6013      	str	r3, [r2, #0]
 800aef0:	4b78      	ldr	r3, [pc, #480]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4a77      	ldr	r2, [pc, #476]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800aef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aefa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d013      	beq.n	800af2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af04:	f7fa ff96 	bl	8005e34 <HAL_GetTick>
 800af08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800af0a:	e008      	b.n	800af1e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800af0c:	f7fa ff92 	bl	8005e34 <HAL_GetTick>
 800af10:	4602      	mov	r2, r0
 800af12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af14:	1ad3      	subs	r3, r2, r3
 800af16:	2b64      	cmp	r3, #100	; 0x64
 800af18:	d901      	bls.n	800af1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800af1a:	2303      	movs	r3, #3
 800af1c:	e352      	b.n	800b5c4 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800af1e:	4b6d      	ldr	r3, [pc, #436]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af26:	2b00      	cmp	r3, #0
 800af28:	d0f0      	beq.n	800af0c <HAL_RCC_OscConfig+0xe4>
 800af2a:	e014      	b.n	800af56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af2c:	f7fa ff82 	bl	8005e34 <HAL_GetTick>
 800af30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800af32:	e008      	b.n	800af46 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800af34:	f7fa ff7e 	bl	8005e34 <HAL_GetTick>
 800af38:	4602      	mov	r2, r0
 800af3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af3c:	1ad3      	subs	r3, r2, r3
 800af3e:	2b64      	cmp	r3, #100	; 0x64
 800af40:	d901      	bls.n	800af46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800af42:	2303      	movs	r3, #3
 800af44:	e33e      	b.n	800b5c4 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800af46:	4b63      	ldr	r3, [pc, #396]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d1f0      	bne.n	800af34 <HAL_RCC_OscConfig+0x10c>
 800af52:	e000      	b.n	800af56 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f003 0302 	and.w	r3, r3, #2
 800af5e:	2b00      	cmp	r3, #0
 800af60:	f000 8092 	beq.w	800b088 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800af64:	4b5b      	ldr	r3, [pc, #364]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800af66:	691b      	ldr	r3, [r3, #16]
 800af68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af6c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800af6e:	4b59      	ldr	r3, [pc, #356]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800af70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af72:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800af74:	6a3b      	ldr	r3, [r7, #32]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d007      	beq.n	800af8a <HAL_RCC_OscConfig+0x162>
 800af7a:	6a3b      	ldr	r3, [r7, #32]
 800af7c:	2b18      	cmp	r3, #24
 800af7e:	d12d      	bne.n	800afdc <HAL_RCC_OscConfig+0x1b4>
 800af80:	69fb      	ldr	r3, [r7, #28]
 800af82:	f003 0303 	and.w	r3, r3, #3
 800af86:	2b00      	cmp	r3, #0
 800af88:	d128      	bne.n	800afdc <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800af8a:	4b52      	ldr	r3, [pc, #328]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f003 0304 	and.w	r3, r3, #4
 800af92:	2b00      	cmp	r3, #0
 800af94:	d005      	beq.n	800afa2 <HAL_RCC_OscConfig+0x17a>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	68db      	ldr	r3, [r3, #12]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d101      	bne.n	800afa2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800af9e:	2301      	movs	r3, #1
 800afa0:	e310      	b.n	800b5c4 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800afa2:	f7fa ff77 	bl	8005e94 <HAL_GetREVID>
 800afa6:	4603      	mov	r3, r0
 800afa8:	f241 0203 	movw	r2, #4099	; 0x1003
 800afac:	4293      	cmp	r3, r2
 800afae:	d80a      	bhi.n	800afc6 <HAL_RCC_OscConfig+0x19e>
 800afb0:	4b48      	ldr	r3, [pc, #288]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	691b      	ldr	r3, [r3, #16]
 800afbc:	031b      	lsls	r3, r3, #12
 800afbe:	4945      	ldr	r1, [pc, #276]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800afc0:	4313      	orrs	r3, r2
 800afc2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800afc4:	e060      	b.n	800b088 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800afc6:	4b43      	ldr	r3, [pc, #268]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	691b      	ldr	r3, [r3, #16]
 800afd2:	061b      	lsls	r3, r3, #24
 800afd4:	493f      	ldr	r1, [pc, #252]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800afd6:	4313      	orrs	r3, r2
 800afd8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800afda:	e055      	b.n	800b088 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	68db      	ldr	r3, [r3, #12]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d038      	beq.n	800b056 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800afe4:	4b3b      	ldr	r3, [pc, #236]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f023 0219 	bic.w	r2, r3, #25
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	68db      	ldr	r3, [r3, #12]
 800aff0:	4938      	ldr	r1, [pc, #224]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800aff2:	4313      	orrs	r3, r2
 800aff4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aff6:	f7fa ff1d 	bl	8005e34 <HAL_GetTick>
 800affa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800affc:	e008      	b.n	800b010 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800affe:	f7fa ff19 	bl	8005e34 <HAL_GetTick>
 800b002:	4602      	mov	r2, r0
 800b004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b006:	1ad3      	subs	r3, r2, r3
 800b008:	2b02      	cmp	r3, #2
 800b00a:	d901      	bls.n	800b010 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 800b00c:	2303      	movs	r3, #3
 800b00e:	e2d9      	b.n	800b5c4 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b010:	4b30      	ldr	r3, [pc, #192]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f003 0304 	and.w	r3, r3, #4
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d0f0      	beq.n	800affe <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b01c:	f7fa ff3a 	bl	8005e94 <HAL_GetREVID>
 800b020:	4603      	mov	r3, r0
 800b022:	f241 0203 	movw	r2, #4099	; 0x1003
 800b026:	4293      	cmp	r3, r2
 800b028:	d80a      	bhi.n	800b040 <HAL_RCC_OscConfig+0x218>
 800b02a:	4b2a      	ldr	r3, [pc, #168]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	691b      	ldr	r3, [r3, #16]
 800b036:	031b      	lsls	r3, r3, #12
 800b038:	4926      	ldr	r1, [pc, #152]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800b03a:	4313      	orrs	r3, r2
 800b03c:	604b      	str	r3, [r1, #4]
 800b03e:	e023      	b.n	800b088 <HAL_RCC_OscConfig+0x260>
 800b040:	4b24      	ldr	r3, [pc, #144]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	691b      	ldr	r3, [r3, #16]
 800b04c:	061b      	lsls	r3, r3, #24
 800b04e:	4921      	ldr	r1, [pc, #132]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800b050:	4313      	orrs	r3, r2
 800b052:	604b      	str	r3, [r1, #4]
 800b054:	e018      	b.n	800b088 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b056:	4b1f      	ldr	r3, [pc, #124]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4a1e      	ldr	r2, [pc, #120]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800b05c:	f023 0301 	bic.w	r3, r3, #1
 800b060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b062:	f7fa fee7 	bl	8005e34 <HAL_GetTick>
 800b066:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b068:	e008      	b.n	800b07c <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b06a:	f7fa fee3 	bl	8005e34 <HAL_GetTick>
 800b06e:	4602      	mov	r2, r0
 800b070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b072:	1ad3      	subs	r3, r2, r3
 800b074:	2b02      	cmp	r3, #2
 800b076:	d901      	bls.n	800b07c <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 800b078:	2303      	movs	r3, #3
 800b07a:	e2a3      	b.n	800b5c4 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b07c:	4b15      	ldr	r3, [pc, #84]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f003 0304 	and.w	r3, r3, #4
 800b084:	2b00      	cmp	r3, #0
 800b086:	d1f0      	bne.n	800b06a <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f003 0310 	and.w	r3, r3, #16
 800b090:	2b00      	cmp	r3, #0
 800b092:	f000 8091 	beq.w	800b1b8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b096:	4b0f      	ldr	r3, [pc, #60]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800b098:	691b      	ldr	r3, [r3, #16]
 800b09a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b09e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b0a0:	4b0c      	ldr	r3, [pc, #48]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800b0a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0a4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	2b08      	cmp	r3, #8
 800b0aa:	d007      	beq.n	800b0bc <HAL_RCC_OscConfig+0x294>
 800b0ac:	69bb      	ldr	r3, [r7, #24]
 800b0ae:	2b18      	cmp	r3, #24
 800b0b0:	d12f      	bne.n	800b112 <HAL_RCC_OscConfig+0x2ea>
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	f003 0303 	and.w	r3, r3, #3
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d12a      	bne.n	800b112 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b0bc:	4b05      	ldr	r3, [pc, #20]	; (800b0d4 <HAL_RCC_OscConfig+0x2ac>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d007      	beq.n	800b0d8 <HAL_RCC_OscConfig+0x2b0>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	69db      	ldr	r3, [r3, #28]
 800b0cc:	2b80      	cmp	r3, #128	; 0x80
 800b0ce:	d003      	beq.n	800b0d8 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	e277      	b.n	800b5c4 <HAL_RCC_OscConfig+0x79c>
 800b0d4:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b0d8:	f7fa fedc 	bl	8005e94 <HAL_GetREVID>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	f241 0203 	movw	r2, #4099	; 0x1003
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d80a      	bhi.n	800b0fc <HAL_RCC_OscConfig+0x2d4>
 800b0e6:	4ba2      	ldr	r3, [pc, #648]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6a1b      	ldr	r3, [r3, #32]
 800b0f2:	069b      	lsls	r3, r3, #26
 800b0f4:	499e      	ldr	r1, [pc, #632]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b0fa:	e05d      	b.n	800b1b8 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b0fc:	4b9c      	ldr	r3, [pc, #624]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b0fe:	68db      	ldr	r3, [r3, #12]
 800b100:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6a1b      	ldr	r3, [r3, #32]
 800b108:	061b      	lsls	r3, r3, #24
 800b10a:	4999      	ldr	r1, [pc, #612]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b10c:	4313      	orrs	r3, r2
 800b10e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b110:	e052      	b.n	800b1b8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	69db      	ldr	r3, [r3, #28]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d035      	beq.n	800b186 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b11a:	4b95      	ldr	r3, [pc, #596]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4a94      	ldr	r2, [pc, #592]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b126:	f7fa fe85 	bl	8005e34 <HAL_GetTick>
 800b12a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b12c:	e008      	b.n	800b140 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b12e:	f7fa fe81 	bl	8005e34 <HAL_GetTick>
 800b132:	4602      	mov	r2, r0
 800b134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b136:	1ad3      	subs	r3, r2, r3
 800b138:	2b02      	cmp	r3, #2
 800b13a:	d901      	bls.n	800b140 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 800b13c:	2303      	movs	r3, #3
 800b13e:	e241      	b.n	800b5c4 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b140:	4b8b      	ldr	r3, [pc, #556]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d0f0      	beq.n	800b12e <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b14c:	f7fa fea2 	bl	8005e94 <HAL_GetREVID>
 800b150:	4603      	mov	r3, r0
 800b152:	f241 0203 	movw	r2, #4099	; 0x1003
 800b156:	4293      	cmp	r3, r2
 800b158:	d80a      	bhi.n	800b170 <HAL_RCC_OscConfig+0x348>
 800b15a:	4b85      	ldr	r3, [pc, #532]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6a1b      	ldr	r3, [r3, #32]
 800b166:	069b      	lsls	r3, r3, #26
 800b168:	4981      	ldr	r1, [pc, #516]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b16a:	4313      	orrs	r3, r2
 800b16c:	604b      	str	r3, [r1, #4]
 800b16e:	e023      	b.n	800b1b8 <HAL_RCC_OscConfig+0x390>
 800b170:	4b7f      	ldr	r3, [pc, #508]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b172:	68db      	ldr	r3, [r3, #12]
 800b174:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6a1b      	ldr	r3, [r3, #32]
 800b17c:	061b      	lsls	r3, r3, #24
 800b17e:	497c      	ldr	r1, [pc, #496]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b180:	4313      	orrs	r3, r2
 800b182:	60cb      	str	r3, [r1, #12]
 800b184:	e018      	b.n	800b1b8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b186:	4b7a      	ldr	r3, [pc, #488]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	4a79      	ldr	r2, [pc, #484]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b18c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b192:	f7fa fe4f 	bl	8005e34 <HAL_GetTick>
 800b196:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b198:	e008      	b.n	800b1ac <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b19a:	f7fa fe4b 	bl	8005e34 <HAL_GetTick>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a2:	1ad3      	subs	r3, r2, r3
 800b1a4:	2b02      	cmp	r3, #2
 800b1a6:	d901      	bls.n	800b1ac <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800b1a8:	2303      	movs	r3, #3
 800b1aa:	e20b      	b.n	800b5c4 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b1ac:	4b70      	ldr	r3, [pc, #448]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d1f0      	bne.n	800b19a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f003 0308 	and.w	r3, r3, #8
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d036      	beq.n	800b232 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	695b      	ldr	r3, [r3, #20]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d019      	beq.n	800b200 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b1cc:	4b68      	ldr	r3, [pc, #416]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b1ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1d0:	4a67      	ldr	r2, [pc, #412]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b1d2:	f043 0301 	orr.w	r3, r3, #1
 800b1d6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1d8:	f7fa fe2c 	bl	8005e34 <HAL_GetTick>
 800b1dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b1de:	e008      	b.n	800b1f2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b1e0:	f7fa fe28 	bl	8005e34 <HAL_GetTick>
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e8:	1ad3      	subs	r3, r2, r3
 800b1ea:	2b02      	cmp	r3, #2
 800b1ec:	d901      	bls.n	800b1f2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800b1ee:	2303      	movs	r3, #3
 800b1f0:	e1e8      	b.n	800b5c4 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b1f2:	4b5f      	ldr	r3, [pc, #380]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b1f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1f6:	f003 0302 	and.w	r3, r3, #2
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d0f0      	beq.n	800b1e0 <HAL_RCC_OscConfig+0x3b8>
 800b1fe:	e018      	b.n	800b232 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b200:	4b5b      	ldr	r3, [pc, #364]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b204:	4a5a      	ldr	r2, [pc, #360]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b206:	f023 0301 	bic.w	r3, r3, #1
 800b20a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b20c:	f7fa fe12 	bl	8005e34 <HAL_GetTick>
 800b210:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b212:	e008      	b.n	800b226 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b214:	f7fa fe0e 	bl	8005e34 <HAL_GetTick>
 800b218:	4602      	mov	r2, r0
 800b21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21c:	1ad3      	subs	r3, r2, r3
 800b21e:	2b02      	cmp	r3, #2
 800b220:	d901      	bls.n	800b226 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800b222:	2303      	movs	r3, #3
 800b224:	e1ce      	b.n	800b5c4 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b226:	4b52      	ldr	r3, [pc, #328]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b22a:	f003 0302 	and.w	r3, r3, #2
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d1f0      	bne.n	800b214 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f003 0320 	and.w	r3, r3, #32
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d036      	beq.n	800b2ac <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	699b      	ldr	r3, [r3, #24]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d019      	beq.n	800b27a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b246:	4b4a      	ldr	r3, [pc, #296]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a49      	ldr	r2, [pc, #292]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b24c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b250:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b252:	f7fa fdef 	bl	8005e34 <HAL_GetTick>
 800b256:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b258:	e008      	b.n	800b26c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b25a:	f7fa fdeb 	bl	8005e34 <HAL_GetTick>
 800b25e:	4602      	mov	r2, r0
 800b260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b262:	1ad3      	subs	r3, r2, r3
 800b264:	2b02      	cmp	r3, #2
 800b266:	d901      	bls.n	800b26c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800b268:	2303      	movs	r3, #3
 800b26a:	e1ab      	b.n	800b5c4 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b26c:	4b40      	ldr	r3, [pc, #256]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b274:	2b00      	cmp	r3, #0
 800b276:	d0f0      	beq.n	800b25a <HAL_RCC_OscConfig+0x432>
 800b278:	e018      	b.n	800b2ac <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b27a:	4b3d      	ldr	r3, [pc, #244]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	4a3c      	ldr	r2, [pc, #240]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b280:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b284:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b286:	f7fa fdd5 	bl	8005e34 <HAL_GetTick>
 800b28a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b28c:	e008      	b.n	800b2a0 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b28e:	f7fa fdd1 	bl	8005e34 <HAL_GetTick>
 800b292:	4602      	mov	r2, r0
 800b294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b296:	1ad3      	subs	r3, r2, r3
 800b298:	2b02      	cmp	r3, #2
 800b29a:	d901      	bls.n	800b2a0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800b29c:	2303      	movs	r3, #3
 800b29e:	e191      	b.n	800b5c4 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b2a0:	4b33      	ldr	r3, [pc, #204]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d1f0      	bne.n	800b28e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f003 0304 	and.w	r3, r3, #4
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	f000 8086 	beq.w	800b3c6 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b2ba:	4b2e      	ldr	r3, [pc, #184]	; (800b374 <HAL_RCC_OscConfig+0x54c>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	4a2d      	ldr	r2, [pc, #180]	; (800b374 <HAL_RCC_OscConfig+0x54c>)
 800b2c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b2c6:	f7fa fdb5 	bl	8005e34 <HAL_GetTick>
 800b2ca:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b2cc:	e008      	b.n	800b2e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b2ce:	f7fa fdb1 	bl	8005e34 <HAL_GetTick>
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d6:	1ad3      	subs	r3, r2, r3
 800b2d8:	2b64      	cmp	r3, #100	; 0x64
 800b2da:	d901      	bls.n	800b2e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800b2dc:	2303      	movs	r3, #3
 800b2de:	e171      	b.n	800b5c4 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b2e0:	4b24      	ldr	r3, [pc, #144]	; (800b374 <HAL_RCC_OscConfig+0x54c>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d0f0      	beq.n	800b2ce <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	689b      	ldr	r3, [r3, #8]
 800b2f0:	2b01      	cmp	r3, #1
 800b2f2:	d106      	bne.n	800b302 <HAL_RCC_OscConfig+0x4da>
 800b2f4:	4b1e      	ldr	r3, [pc, #120]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b2f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2f8:	4a1d      	ldr	r2, [pc, #116]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b2fa:	f043 0301 	orr.w	r3, r3, #1
 800b2fe:	6713      	str	r3, [r2, #112]	; 0x70
 800b300:	e02d      	b.n	800b35e <HAL_RCC_OscConfig+0x536>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	689b      	ldr	r3, [r3, #8]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d10c      	bne.n	800b324 <HAL_RCC_OscConfig+0x4fc>
 800b30a:	4b19      	ldr	r3, [pc, #100]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b30c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b30e:	4a18      	ldr	r2, [pc, #96]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b310:	f023 0301 	bic.w	r3, r3, #1
 800b314:	6713      	str	r3, [r2, #112]	; 0x70
 800b316:	4b16      	ldr	r3, [pc, #88]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b31a:	4a15      	ldr	r2, [pc, #84]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b31c:	f023 0304 	bic.w	r3, r3, #4
 800b320:	6713      	str	r3, [r2, #112]	; 0x70
 800b322:	e01c      	b.n	800b35e <HAL_RCC_OscConfig+0x536>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	689b      	ldr	r3, [r3, #8]
 800b328:	2b05      	cmp	r3, #5
 800b32a:	d10c      	bne.n	800b346 <HAL_RCC_OscConfig+0x51e>
 800b32c:	4b10      	ldr	r3, [pc, #64]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b32e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b330:	4a0f      	ldr	r2, [pc, #60]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b332:	f043 0304 	orr.w	r3, r3, #4
 800b336:	6713      	str	r3, [r2, #112]	; 0x70
 800b338:	4b0d      	ldr	r3, [pc, #52]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b33a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b33c:	4a0c      	ldr	r2, [pc, #48]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b33e:	f043 0301 	orr.w	r3, r3, #1
 800b342:	6713      	str	r3, [r2, #112]	; 0x70
 800b344:	e00b      	b.n	800b35e <HAL_RCC_OscConfig+0x536>
 800b346:	4b0a      	ldr	r3, [pc, #40]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b34a:	4a09      	ldr	r2, [pc, #36]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b34c:	f023 0301 	bic.w	r3, r3, #1
 800b350:	6713      	str	r3, [r2, #112]	; 0x70
 800b352:	4b07      	ldr	r3, [pc, #28]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b356:	4a06      	ldr	r2, [pc, #24]	; (800b370 <HAL_RCC_OscConfig+0x548>)
 800b358:	f023 0304 	bic.w	r3, r3, #4
 800b35c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	689b      	ldr	r3, [r3, #8]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d01a      	beq.n	800b39c <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b366:	f7fa fd65 	bl	8005e34 <HAL_GetTick>
 800b36a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b36c:	e00f      	b.n	800b38e <HAL_RCC_OscConfig+0x566>
 800b36e:	bf00      	nop
 800b370:	58024400 	.word	0x58024400
 800b374:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b378:	f7fa fd5c 	bl	8005e34 <HAL_GetTick>
 800b37c:	4602      	mov	r2, r0
 800b37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b380:	1ad3      	subs	r3, r2, r3
 800b382:	f241 3288 	movw	r2, #5000	; 0x1388
 800b386:	4293      	cmp	r3, r2
 800b388:	d901      	bls.n	800b38e <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 800b38a:	2303      	movs	r3, #3
 800b38c:	e11a      	b.n	800b5c4 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b38e:	4b8f      	ldr	r3, [pc, #572]	; (800b5cc <HAL_RCC_OscConfig+0x7a4>)
 800b390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b392:	f003 0302 	and.w	r3, r3, #2
 800b396:	2b00      	cmp	r3, #0
 800b398:	d0ee      	beq.n	800b378 <HAL_RCC_OscConfig+0x550>
 800b39a:	e014      	b.n	800b3c6 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b39c:	f7fa fd4a 	bl	8005e34 <HAL_GetTick>
 800b3a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b3a2:	e00a      	b.n	800b3ba <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b3a4:	f7fa fd46 	bl	8005e34 <HAL_GetTick>
 800b3a8:	4602      	mov	r2, r0
 800b3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ac:	1ad3      	subs	r3, r2, r3
 800b3ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d901      	bls.n	800b3ba <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 800b3b6:	2303      	movs	r3, #3
 800b3b8:	e104      	b.n	800b5c4 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b3ba:	4b84      	ldr	r3, [pc, #528]	; (800b5cc <HAL_RCC_OscConfig+0x7a4>)
 800b3bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3be:	f003 0302 	and.w	r3, r3, #2
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d1ee      	bne.n	800b3a4 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	f000 80f9 	beq.w	800b5c2 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b3d0:	4b7e      	ldr	r3, [pc, #504]	; (800b5cc <HAL_RCC_OscConfig+0x7a4>)
 800b3d2:	691b      	ldr	r3, [r3, #16]
 800b3d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b3d8:	2b18      	cmp	r3, #24
 800b3da:	f000 80b4 	beq.w	800b546 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3e2:	2b02      	cmp	r3, #2
 800b3e4:	f040 8095 	bne.w	800b512 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b3e8:	4b78      	ldr	r3, [pc, #480]	; (800b5cc <HAL_RCC_OscConfig+0x7a4>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4a77      	ldr	r2, [pc, #476]	; (800b5cc <HAL_RCC_OscConfig+0x7a4>)
 800b3ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b3f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3f4:	f7fa fd1e 	bl	8005e34 <HAL_GetTick>
 800b3f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b3fa:	e008      	b.n	800b40e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b3fc:	f7fa fd1a 	bl	8005e34 <HAL_GetTick>
 800b400:	4602      	mov	r2, r0
 800b402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b404:	1ad3      	subs	r3, r2, r3
 800b406:	2b02      	cmp	r3, #2
 800b408:	d901      	bls.n	800b40e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800b40a:	2303      	movs	r3, #3
 800b40c:	e0da      	b.n	800b5c4 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b40e:	4b6f      	ldr	r3, [pc, #444]	; (800b5cc <HAL_RCC_OscConfig+0x7a4>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b416:	2b00      	cmp	r3, #0
 800b418:	d1f0      	bne.n	800b3fc <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b41a:	4b6c      	ldr	r3, [pc, #432]	; (800b5cc <HAL_RCC_OscConfig+0x7a4>)
 800b41c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b41e:	4b6c      	ldr	r3, [pc, #432]	; (800b5d0 <HAL_RCC_OscConfig+0x7a8>)
 800b420:	4013      	ands	r3, r2
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800b426:	687a      	ldr	r2, [r7, #4]
 800b428:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b42a:	0112      	lsls	r2, r2, #4
 800b42c:	430a      	orrs	r2, r1
 800b42e:	4967      	ldr	r1, [pc, #412]	; (800b5cc <HAL_RCC_OscConfig+0x7a4>)
 800b430:	4313      	orrs	r3, r2
 800b432:	628b      	str	r3, [r1, #40]	; 0x28
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b438:	3b01      	subs	r3, #1
 800b43a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b442:	3b01      	subs	r3, #1
 800b444:	025b      	lsls	r3, r3, #9
 800b446:	b29b      	uxth	r3, r3
 800b448:	431a      	orrs	r2, r3
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b44e:	3b01      	subs	r3, #1
 800b450:	041b      	lsls	r3, r3, #16
 800b452:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b456:	431a      	orrs	r2, r3
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b45c:	3b01      	subs	r3, #1
 800b45e:	061b      	lsls	r3, r3, #24
 800b460:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b464:	4959      	ldr	r1, [pc, #356]	; (800b5cc <HAL_RCC_OscConfig+0x7a4>)
 800b466:	4313      	orrs	r3, r2
 800b468:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800b46a:	4b58      	ldr	r3, [pc, #352]	; (800b5cc <HAL_RCC_OscConfig+0x7a4>)
 800b46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b46e:	4a57      	ldr	r2, [pc, #348]	; (800b5cc <HAL_RCC_OscConfig+0x7a4>)
 800b470:	f023 0301 	bic.w	r3, r3, #1
 800b474:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b476:	4b55      	ldr	r3, [pc, #340]	; (800b5cc <HAL_RCC_OscConfig+0x7a4>)
 800b478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b47a:	4b56      	ldr	r3, [pc, #344]	; (800b5d4 <HAL_RCC_OscConfig+0x7ac>)
 800b47c:	4013      	ands	r3, r2
 800b47e:	687a      	ldr	r2, [r7, #4]
 800b480:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b482:	00d2      	lsls	r2, r2, #3
 800b484:	4951      	ldr	r1, [pc, #324]	; (800b5cc <HAL_RCC_OscConfig+0x7a4>)
 800b486:	4313      	orrs	r3, r2
 800b488:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b48a:	4b50      	ldr	r3, [pc, #320]	; (800b5cc <HAL_RCC_OscConfig+0x7a4>)
 800b48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b48e:	f023 020c 	bic.w	r2, r3, #12
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b496:	494d      	ldr	r1, [pc, #308]	; (800b5cc <HAL_RCC_OscConfig+0x7a4>)
 800b498:	4313      	orrs	r3, r2
 800b49a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b49c:	4b4b      	ldr	r3, [pc, #300]	; (800b5cc <HAL_RCC_OscConfig+0x7a4>)
 800b49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4a0:	f023 0202 	bic.w	r2, r3, #2
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4a8:	4948      	ldr	r1, [pc, #288]	; (800b5cc <HAL_RCC_OscConfig+0x7a4>)
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b4ae:	4b47      	ldr	r3, [pc, #284]	; (800b5cc <HAL_RCC_OscConfig+0x7a4>)
 800b4b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4b2:	4a46      	ldr	r2, [pc, #280]	; (800b5cc <HAL_RCC_OscConfig+0x7a4>)
 800b4b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b4b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4ba:	4b44      	ldr	r3, [pc, #272]	; (800b5cc <HAL_RCC_OscConfig+0x7a4>)
 800b4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4be:	4a43      	ldr	r2, [pc, #268]	; (800b5cc <HAL_RCC_OscConfig+0x7a4>)
 800b4c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b4c6:	4b41      	ldr	r3, [pc, #260]	; (800b5cc <HAL_RCC_OscConfig+0x7a4>)
 800b4c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ca:	4a40      	ldr	r2, [pc, #256]	; (800b5cc <HAL_RCC_OscConfig+0x7a4>)
 800b4cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b4d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800b4d2:	4b3e      	ldr	r3, [pc, #248]	; (800b5cc <HAL_RCC_OscConfig+0x7a4>)
 800b4d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4d6:	4a3d      	ldr	r2, [pc, #244]	; (800b5cc <HAL_RCC_OscConfig+0x7a4>)
 800b4d8:	f043 0301 	orr.w	r3, r3, #1
 800b4dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b4de:	4b3b      	ldr	r3, [pc, #236]	; (800b5cc <HAL_RCC_OscConfig+0x7a4>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4a3a      	ldr	r2, [pc, #232]	; (800b5cc <HAL_RCC_OscConfig+0x7a4>)
 800b4e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b4e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4ea:	f7fa fca3 	bl	8005e34 <HAL_GetTick>
 800b4ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b4f0:	e008      	b.n	800b504 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b4f2:	f7fa fc9f 	bl	8005e34 <HAL_GetTick>
 800b4f6:	4602      	mov	r2, r0
 800b4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fa:	1ad3      	subs	r3, r2, r3
 800b4fc:	2b02      	cmp	r3, #2
 800b4fe:	d901      	bls.n	800b504 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 800b500:	2303      	movs	r3, #3
 800b502:	e05f      	b.n	800b5c4 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b504:	4b31      	ldr	r3, [pc, #196]	; (800b5cc <HAL_RCC_OscConfig+0x7a4>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d0f0      	beq.n	800b4f2 <HAL_RCC_OscConfig+0x6ca>
 800b510:	e057      	b.n	800b5c2 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b512:	4b2e      	ldr	r3, [pc, #184]	; (800b5cc <HAL_RCC_OscConfig+0x7a4>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4a2d      	ldr	r2, [pc, #180]	; (800b5cc <HAL_RCC_OscConfig+0x7a4>)
 800b518:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b51c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b51e:	f7fa fc89 	bl	8005e34 <HAL_GetTick>
 800b522:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b524:	e008      	b.n	800b538 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b526:	f7fa fc85 	bl	8005e34 <HAL_GetTick>
 800b52a:	4602      	mov	r2, r0
 800b52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b52e:	1ad3      	subs	r3, r2, r3
 800b530:	2b02      	cmp	r3, #2
 800b532:	d901      	bls.n	800b538 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 800b534:	2303      	movs	r3, #3
 800b536:	e045      	b.n	800b5c4 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b538:	4b24      	ldr	r3, [pc, #144]	; (800b5cc <HAL_RCC_OscConfig+0x7a4>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b540:	2b00      	cmp	r3, #0
 800b542:	d1f0      	bne.n	800b526 <HAL_RCC_OscConfig+0x6fe>
 800b544:	e03d      	b.n	800b5c2 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b546:	4b21      	ldr	r3, [pc, #132]	; (800b5cc <HAL_RCC_OscConfig+0x7a4>)
 800b548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b54a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b54c:	4b1f      	ldr	r3, [pc, #124]	; (800b5cc <HAL_RCC_OscConfig+0x7a4>)
 800b54e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b550:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b556:	2b01      	cmp	r3, #1
 800b558:	d031      	beq.n	800b5be <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	f003 0203 	and.w	r2, r3, #3
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b564:	429a      	cmp	r2, r3
 800b566:	d12a      	bne.n	800b5be <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	091b      	lsrs	r3, r3, #4
 800b56c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b574:	429a      	cmp	r2, r3
 800b576:	d122      	bne.n	800b5be <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b582:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b584:	429a      	cmp	r2, r3
 800b586:	d11a      	bne.n	800b5be <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	0a5b      	lsrs	r3, r3, #9
 800b58c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b594:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b596:	429a      	cmp	r2, r3
 800b598:	d111      	bne.n	800b5be <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	0c1b      	lsrs	r3, r3, #16
 800b59e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5a6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d108      	bne.n	800b5be <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	0e1b      	lsrs	r3, r3, #24
 800b5b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5b8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d001      	beq.n	800b5c2 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 800b5be:	2301      	movs	r3, #1
 800b5c0:	e000      	b.n	800b5c4 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 800b5c2:	2300      	movs	r3, #0
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3730      	adds	r7, #48	; 0x30
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}
 800b5cc:	58024400 	.word	0x58024400
 800b5d0:	fffffc0c 	.word	0xfffffc0c
 800b5d4:	ffff0007 	.word	0xffff0007

0800b5d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b086      	sub	sp, #24
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d101      	bne.n	800b5ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	e19c      	b.n	800b926 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b5ec:	4b8a      	ldr	r3, [pc, #552]	; (800b818 <HAL_RCC_ClockConfig+0x240>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f003 030f 	and.w	r3, r3, #15
 800b5f4:	683a      	ldr	r2, [r7, #0]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d910      	bls.n	800b61c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b5fa:	4b87      	ldr	r3, [pc, #540]	; (800b818 <HAL_RCC_ClockConfig+0x240>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f023 020f 	bic.w	r2, r3, #15
 800b602:	4985      	ldr	r1, [pc, #532]	; (800b818 <HAL_RCC_ClockConfig+0x240>)
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	4313      	orrs	r3, r2
 800b608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b60a:	4b83      	ldr	r3, [pc, #524]	; (800b818 <HAL_RCC_ClockConfig+0x240>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f003 030f 	and.w	r3, r3, #15
 800b612:	683a      	ldr	r2, [r7, #0]
 800b614:	429a      	cmp	r2, r3
 800b616:	d001      	beq.n	800b61c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b618:	2301      	movs	r3, #1
 800b61a:	e184      	b.n	800b926 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f003 0304 	and.w	r3, r3, #4
 800b624:	2b00      	cmp	r3, #0
 800b626:	d010      	beq.n	800b64a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	691a      	ldr	r2, [r3, #16]
 800b62c:	4b7b      	ldr	r3, [pc, #492]	; (800b81c <HAL_RCC_ClockConfig+0x244>)
 800b62e:	699b      	ldr	r3, [r3, #24]
 800b630:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b634:	429a      	cmp	r2, r3
 800b636:	d908      	bls.n	800b64a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b638:	4b78      	ldr	r3, [pc, #480]	; (800b81c <HAL_RCC_ClockConfig+0x244>)
 800b63a:	699b      	ldr	r3, [r3, #24]
 800b63c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	691b      	ldr	r3, [r3, #16]
 800b644:	4975      	ldr	r1, [pc, #468]	; (800b81c <HAL_RCC_ClockConfig+0x244>)
 800b646:	4313      	orrs	r3, r2
 800b648:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f003 0308 	and.w	r3, r3, #8
 800b652:	2b00      	cmp	r3, #0
 800b654:	d010      	beq.n	800b678 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	695a      	ldr	r2, [r3, #20]
 800b65a:	4b70      	ldr	r3, [pc, #448]	; (800b81c <HAL_RCC_ClockConfig+0x244>)
 800b65c:	69db      	ldr	r3, [r3, #28]
 800b65e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b662:	429a      	cmp	r2, r3
 800b664:	d908      	bls.n	800b678 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b666:	4b6d      	ldr	r3, [pc, #436]	; (800b81c <HAL_RCC_ClockConfig+0x244>)
 800b668:	69db      	ldr	r3, [r3, #28]
 800b66a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	695b      	ldr	r3, [r3, #20]
 800b672:	496a      	ldr	r1, [pc, #424]	; (800b81c <HAL_RCC_ClockConfig+0x244>)
 800b674:	4313      	orrs	r3, r2
 800b676:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f003 0310 	and.w	r3, r3, #16
 800b680:	2b00      	cmp	r3, #0
 800b682:	d010      	beq.n	800b6a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	699a      	ldr	r2, [r3, #24]
 800b688:	4b64      	ldr	r3, [pc, #400]	; (800b81c <HAL_RCC_ClockConfig+0x244>)
 800b68a:	69db      	ldr	r3, [r3, #28]
 800b68c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b690:	429a      	cmp	r2, r3
 800b692:	d908      	bls.n	800b6a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b694:	4b61      	ldr	r3, [pc, #388]	; (800b81c <HAL_RCC_ClockConfig+0x244>)
 800b696:	69db      	ldr	r3, [r3, #28]
 800b698:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	699b      	ldr	r3, [r3, #24]
 800b6a0:	495e      	ldr	r1, [pc, #376]	; (800b81c <HAL_RCC_ClockConfig+0x244>)
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f003 0320 	and.w	r3, r3, #32
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d010      	beq.n	800b6d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	69da      	ldr	r2, [r3, #28]
 800b6b6:	4b59      	ldr	r3, [pc, #356]	; (800b81c <HAL_RCC_ClockConfig+0x244>)
 800b6b8:	6a1b      	ldr	r3, [r3, #32]
 800b6ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d908      	bls.n	800b6d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b6c2:	4b56      	ldr	r3, [pc, #344]	; (800b81c <HAL_RCC_ClockConfig+0x244>)
 800b6c4:	6a1b      	ldr	r3, [r3, #32]
 800b6c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	69db      	ldr	r3, [r3, #28]
 800b6ce:	4953      	ldr	r1, [pc, #332]	; (800b81c <HAL_RCC_ClockConfig+0x244>)
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f003 0302 	and.w	r3, r3, #2
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d010      	beq.n	800b702 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	68da      	ldr	r2, [r3, #12]
 800b6e4:	4b4d      	ldr	r3, [pc, #308]	; (800b81c <HAL_RCC_ClockConfig+0x244>)
 800b6e6:	699b      	ldr	r3, [r3, #24]
 800b6e8:	f003 030f 	and.w	r3, r3, #15
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d908      	bls.n	800b702 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b6f0:	4b4a      	ldr	r3, [pc, #296]	; (800b81c <HAL_RCC_ClockConfig+0x244>)
 800b6f2:	699b      	ldr	r3, [r3, #24]
 800b6f4:	f023 020f 	bic.w	r2, r3, #15
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	4947      	ldr	r1, [pc, #284]	; (800b81c <HAL_RCC_ClockConfig+0x244>)
 800b6fe:	4313      	orrs	r3, r2
 800b700:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f003 0301 	and.w	r3, r3, #1
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d055      	beq.n	800b7ba <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b70e:	4b43      	ldr	r3, [pc, #268]	; (800b81c <HAL_RCC_ClockConfig+0x244>)
 800b710:	699b      	ldr	r3, [r3, #24]
 800b712:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	689b      	ldr	r3, [r3, #8]
 800b71a:	4940      	ldr	r1, [pc, #256]	; (800b81c <HAL_RCC_ClockConfig+0x244>)
 800b71c:	4313      	orrs	r3, r2
 800b71e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	2b02      	cmp	r3, #2
 800b726:	d107      	bne.n	800b738 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b728:	4b3c      	ldr	r3, [pc, #240]	; (800b81c <HAL_RCC_ClockConfig+0x244>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b730:	2b00      	cmp	r3, #0
 800b732:	d121      	bne.n	800b778 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b734:	2301      	movs	r3, #1
 800b736:	e0f6      	b.n	800b926 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	2b03      	cmp	r3, #3
 800b73e:	d107      	bne.n	800b750 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b740:	4b36      	ldr	r3, [pc, #216]	; (800b81c <HAL_RCC_ClockConfig+0x244>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d115      	bne.n	800b778 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b74c:	2301      	movs	r3, #1
 800b74e:	e0ea      	b.n	800b926 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	2b01      	cmp	r3, #1
 800b756:	d107      	bne.n	800b768 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b758:	4b30      	ldr	r3, [pc, #192]	; (800b81c <HAL_RCC_ClockConfig+0x244>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b760:	2b00      	cmp	r3, #0
 800b762:	d109      	bne.n	800b778 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b764:	2301      	movs	r3, #1
 800b766:	e0de      	b.n	800b926 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b768:	4b2c      	ldr	r3, [pc, #176]	; (800b81c <HAL_RCC_ClockConfig+0x244>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f003 0304 	and.w	r3, r3, #4
 800b770:	2b00      	cmp	r3, #0
 800b772:	d101      	bne.n	800b778 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b774:	2301      	movs	r3, #1
 800b776:	e0d6      	b.n	800b926 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b778:	4b28      	ldr	r3, [pc, #160]	; (800b81c <HAL_RCC_ClockConfig+0x244>)
 800b77a:	691b      	ldr	r3, [r3, #16]
 800b77c:	f023 0207 	bic.w	r2, r3, #7
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	4925      	ldr	r1, [pc, #148]	; (800b81c <HAL_RCC_ClockConfig+0x244>)
 800b786:	4313      	orrs	r3, r2
 800b788:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b78a:	f7fa fb53 	bl	8005e34 <HAL_GetTick>
 800b78e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b790:	e00a      	b.n	800b7a8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b792:	f7fa fb4f 	bl	8005e34 <HAL_GetTick>
 800b796:	4602      	mov	r2, r0
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	1ad3      	subs	r3, r2, r3
 800b79c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d901      	bls.n	800b7a8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800b7a4:	2303      	movs	r3, #3
 800b7a6:	e0be      	b.n	800b926 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b7a8:	4b1c      	ldr	r3, [pc, #112]	; (800b81c <HAL_RCC_ClockConfig+0x244>)
 800b7aa:	691b      	ldr	r3, [r3, #16]
 800b7ac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	00db      	lsls	r3, r3, #3
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d1eb      	bne.n	800b792 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f003 0302 	and.w	r3, r3, #2
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d010      	beq.n	800b7e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	68da      	ldr	r2, [r3, #12]
 800b7ca:	4b14      	ldr	r3, [pc, #80]	; (800b81c <HAL_RCC_ClockConfig+0x244>)
 800b7cc:	699b      	ldr	r3, [r3, #24]
 800b7ce:	f003 030f 	and.w	r3, r3, #15
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d208      	bcs.n	800b7e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b7d6:	4b11      	ldr	r3, [pc, #68]	; (800b81c <HAL_RCC_ClockConfig+0x244>)
 800b7d8:	699b      	ldr	r3, [r3, #24]
 800b7da:	f023 020f 	bic.w	r2, r3, #15
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	68db      	ldr	r3, [r3, #12]
 800b7e2:	490e      	ldr	r1, [pc, #56]	; (800b81c <HAL_RCC_ClockConfig+0x244>)
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b7e8:	4b0b      	ldr	r3, [pc, #44]	; (800b818 <HAL_RCC_ClockConfig+0x240>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f003 030f 	and.w	r3, r3, #15
 800b7f0:	683a      	ldr	r2, [r7, #0]
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d214      	bcs.n	800b820 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b7f6:	4b08      	ldr	r3, [pc, #32]	; (800b818 <HAL_RCC_ClockConfig+0x240>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f023 020f 	bic.w	r2, r3, #15
 800b7fe:	4906      	ldr	r1, [pc, #24]	; (800b818 <HAL_RCC_ClockConfig+0x240>)
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	4313      	orrs	r3, r2
 800b804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b806:	4b04      	ldr	r3, [pc, #16]	; (800b818 <HAL_RCC_ClockConfig+0x240>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f003 030f 	and.w	r3, r3, #15
 800b80e:	683a      	ldr	r2, [r7, #0]
 800b810:	429a      	cmp	r2, r3
 800b812:	d005      	beq.n	800b820 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b814:	2301      	movs	r3, #1
 800b816:	e086      	b.n	800b926 <HAL_RCC_ClockConfig+0x34e>
 800b818:	52002000 	.word	0x52002000
 800b81c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f003 0304 	and.w	r3, r3, #4
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d010      	beq.n	800b84e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	691a      	ldr	r2, [r3, #16]
 800b830:	4b3f      	ldr	r3, [pc, #252]	; (800b930 <HAL_RCC_ClockConfig+0x358>)
 800b832:	699b      	ldr	r3, [r3, #24]
 800b834:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b838:	429a      	cmp	r2, r3
 800b83a:	d208      	bcs.n	800b84e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b83c:	4b3c      	ldr	r3, [pc, #240]	; (800b930 <HAL_RCC_ClockConfig+0x358>)
 800b83e:	699b      	ldr	r3, [r3, #24]
 800b840:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	691b      	ldr	r3, [r3, #16]
 800b848:	4939      	ldr	r1, [pc, #228]	; (800b930 <HAL_RCC_ClockConfig+0x358>)
 800b84a:	4313      	orrs	r3, r2
 800b84c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f003 0308 	and.w	r3, r3, #8
 800b856:	2b00      	cmp	r3, #0
 800b858:	d010      	beq.n	800b87c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	695a      	ldr	r2, [r3, #20]
 800b85e:	4b34      	ldr	r3, [pc, #208]	; (800b930 <HAL_RCC_ClockConfig+0x358>)
 800b860:	69db      	ldr	r3, [r3, #28]
 800b862:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b866:	429a      	cmp	r2, r3
 800b868:	d208      	bcs.n	800b87c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b86a:	4b31      	ldr	r3, [pc, #196]	; (800b930 <HAL_RCC_ClockConfig+0x358>)
 800b86c:	69db      	ldr	r3, [r3, #28]
 800b86e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	695b      	ldr	r3, [r3, #20]
 800b876:	492e      	ldr	r1, [pc, #184]	; (800b930 <HAL_RCC_ClockConfig+0x358>)
 800b878:	4313      	orrs	r3, r2
 800b87a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f003 0310 	and.w	r3, r3, #16
 800b884:	2b00      	cmp	r3, #0
 800b886:	d010      	beq.n	800b8aa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	699a      	ldr	r2, [r3, #24]
 800b88c:	4b28      	ldr	r3, [pc, #160]	; (800b930 <HAL_RCC_ClockConfig+0x358>)
 800b88e:	69db      	ldr	r3, [r3, #28]
 800b890:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b894:	429a      	cmp	r2, r3
 800b896:	d208      	bcs.n	800b8aa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b898:	4b25      	ldr	r3, [pc, #148]	; (800b930 <HAL_RCC_ClockConfig+0x358>)
 800b89a:	69db      	ldr	r3, [r3, #28]
 800b89c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	699b      	ldr	r3, [r3, #24]
 800b8a4:	4922      	ldr	r1, [pc, #136]	; (800b930 <HAL_RCC_ClockConfig+0x358>)
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f003 0320 	and.w	r3, r3, #32
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d010      	beq.n	800b8d8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	69da      	ldr	r2, [r3, #28]
 800b8ba:	4b1d      	ldr	r3, [pc, #116]	; (800b930 <HAL_RCC_ClockConfig+0x358>)
 800b8bc:	6a1b      	ldr	r3, [r3, #32]
 800b8be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d208      	bcs.n	800b8d8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b8c6:	4b1a      	ldr	r3, [pc, #104]	; (800b930 <HAL_RCC_ClockConfig+0x358>)
 800b8c8:	6a1b      	ldr	r3, [r3, #32]
 800b8ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	69db      	ldr	r3, [r3, #28]
 800b8d2:	4917      	ldr	r1, [pc, #92]	; (800b930 <HAL_RCC_ClockConfig+0x358>)
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b8d8:	f000 f834 	bl	800b944 <HAL_RCC_GetSysClockFreq>
 800b8dc:	4602      	mov	r2, r0
 800b8de:	4b14      	ldr	r3, [pc, #80]	; (800b930 <HAL_RCC_ClockConfig+0x358>)
 800b8e0:	699b      	ldr	r3, [r3, #24]
 800b8e2:	0a1b      	lsrs	r3, r3, #8
 800b8e4:	f003 030f 	and.w	r3, r3, #15
 800b8e8:	4912      	ldr	r1, [pc, #72]	; (800b934 <HAL_RCC_ClockConfig+0x35c>)
 800b8ea:	5ccb      	ldrb	r3, [r1, r3]
 800b8ec:	f003 031f 	and.w	r3, r3, #31
 800b8f0:	fa22 f303 	lsr.w	r3, r2, r3
 800b8f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b8f6:	4b0e      	ldr	r3, [pc, #56]	; (800b930 <HAL_RCC_ClockConfig+0x358>)
 800b8f8:	699b      	ldr	r3, [r3, #24]
 800b8fa:	f003 030f 	and.w	r3, r3, #15
 800b8fe:	4a0d      	ldr	r2, [pc, #52]	; (800b934 <HAL_RCC_ClockConfig+0x35c>)
 800b900:	5cd3      	ldrb	r3, [r2, r3]
 800b902:	f003 031f 	and.w	r3, r3, #31
 800b906:	693a      	ldr	r2, [r7, #16]
 800b908:	fa22 f303 	lsr.w	r3, r2, r3
 800b90c:	4a0a      	ldr	r2, [pc, #40]	; (800b938 <HAL_RCC_ClockConfig+0x360>)
 800b90e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b910:	4a0a      	ldr	r2, [pc, #40]	; (800b93c <HAL_RCC_ClockConfig+0x364>)
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800b916:	4b0a      	ldr	r3, [pc, #40]	; (800b940 <HAL_RCC_ClockConfig+0x368>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7fa fa40 	bl	8005da0 <HAL_InitTick>
 800b920:	4603      	mov	r3, r0
 800b922:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b924:	7bfb      	ldrb	r3, [r7, #15]
}
 800b926:	4618      	mov	r0, r3
 800b928:	3718      	adds	r7, #24
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}
 800b92e:	bf00      	nop
 800b930:	58024400 	.word	0x58024400
 800b934:	080194e8 	.word	0x080194e8
 800b938:	24000014 	.word	0x24000014
 800b93c:	24000010 	.word	0x24000010
 800b940:	24000018 	.word	0x24000018

0800b944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b944:	b480      	push	{r7}
 800b946:	b089      	sub	sp, #36	; 0x24
 800b948:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b94a:	4bb3      	ldr	r3, [pc, #716]	; (800bc18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b94c:	691b      	ldr	r3, [r3, #16]
 800b94e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b952:	2b18      	cmp	r3, #24
 800b954:	f200 8155 	bhi.w	800bc02 <HAL_RCC_GetSysClockFreq+0x2be>
 800b958:	a201      	add	r2, pc, #4	; (adr r2, 800b960 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b95a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b95e:	bf00      	nop
 800b960:	0800b9c5 	.word	0x0800b9c5
 800b964:	0800bc03 	.word	0x0800bc03
 800b968:	0800bc03 	.word	0x0800bc03
 800b96c:	0800bc03 	.word	0x0800bc03
 800b970:	0800bc03 	.word	0x0800bc03
 800b974:	0800bc03 	.word	0x0800bc03
 800b978:	0800bc03 	.word	0x0800bc03
 800b97c:	0800bc03 	.word	0x0800bc03
 800b980:	0800b9eb 	.word	0x0800b9eb
 800b984:	0800bc03 	.word	0x0800bc03
 800b988:	0800bc03 	.word	0x0800bc03
 800b98c:	0800bc03 	.word	0x0800bc03
 800b990:	0800bc03 	.word	0x0800bc03
 800b994:	0800bc03 	.word	0x0800bc03
 800b998:	0800bc03 	.word	0x0800bc03
 800b99c:	0800bc03 	.word	0x0800bc03
 800b9a0:	0800b9f1 	.word	0x0800b9f1
 800b9a4:	0800bc03 	.word	0x0800bc03
 800b9a8:	0800bc03 	.word	0x0800bc03
 800b9ac:	0800bc03 	.word	0x0800bc03
 800b9b0:	0800bc03 	.word	0x0800bc03
 800b9b4:	0800bc03 	.word	0x0800bc03
 800b9b8:	0800bc03 	.word	0x0800bc03
 800b9bc:	0800bc03 	.word	0x0800bc03
 800b9c0:	0800b9f7 	.word	0x0800b9f7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b9c4:	4b94      	ldr	r3, [pc, #592]	; (800bc18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f003 0320 	and.w	r3, r3, #32
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d009      	beq.n	800b9e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b9d0:	4b91      	ldr	r3, [pc, #580]	; (800bc18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	08db      	lsrs	r3, r3, #3
 800b9d6:	f003 0303 	and.w	r3, r3, #3
 800b9da:	4a90      	ldr	r2, [pc, #576]	; (800bc1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b9dc:	fa22 f303 	lsr.w	r3, r2, r3
 800b9e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800b9e2:	e111      	b.n	800bc08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b9e4:	4b8d      	ldr	r3, [pc, #564]	; (800bc1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b9e6:	61bb      	str	r3, [r7, #24]
    break;
 800b9e8:	e10e      	b.n	800bc08 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800b9ea:	4b8d      	ldr	r3, [pc, #564]	; (800bc20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b9ec:	61bb      	str	r3, [r7, #24]
    break;
 800b9ee:	e10b      	b.n	800bc08 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800b9f0:	4b8c      	ldr	r3, [pc, #560]	; (800bc24 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b9f2:	61bb      	str	r3, [r7, #24]
    break;
 800b9f4:	e108      	b.n	800bc08 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b9f6:	4b88      	ldr	r3, [pc, #544]	; (800bc18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b9f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9fa:	f003 0303 	and.w	r3, r3, #3
 800b9fe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800ba00:	4b85      	ldr	r3, [pc, #532]	; (800bc18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba04:	091b      	lsrs	r3, r3, #4
 800ba06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba0a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ba0c:	4b82      	ldr	r3, [pc, #520]	; (800bc18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba10:	f003 0301 	and.w	r3, r3, #1
 800ba14:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800ba16:	4b80      	ldr	r3, [pc, #512]	; (800bc18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba1a:	08db      	lsrs	r3, r3, #3
 800ba1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba20:	68fa      	ldr	r2, [r7, #12]
 800ba22:	fb02 f303 	mul.w	r3, r2, r3
 800ba26:	ee07 3a90 	vmov	s15, r3
 800ba2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba2e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	f000 80e1 	beq.w	800bbfc <HAL_RCC_GetSysClockFreq+0x2b8>
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	2b02      	cmp	r3, #2
 800ba3e:	f000 8083 	beq.w	800bb48 <HAL_RCC_GetSysClockFreq+0x204>
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	2b02      	cmp	r3, #2
 800ba46:	f200 80a1 	bhi.w	800bb8c <HAL_RCC_GetSysClockFreq+0x248>
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d003      	beq.n	800ba58 <HAL_RCC_GetSysClockFreq+0x114>
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	2b01      	cmp	r3, #1
 800ba54:	d056      	beq.n	800bb04 <HAL_RCC_GetSysClockFreq+0x1c0>
 800ba56:	e099      	b.n	800bb8c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba58:	4b6f      	ldr	r3, [pc, #444]	; (800bc18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f003 0320 	and.w	r3, r3, #32
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d02d      	beq.n	800bac0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ba64:	4b6c      	ldr	r3, [pc, #432]	; (800bc18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	08db      	lsrs	r3, r3, #3
 800ba6a:	f003 0303 	and.w	r3, r3, #3
 800ba6e:	4a6b      	ldr	r2, [pc, #428]	; (800bc1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ba70:	fa22 f303 	lsr.w	r3, r2, r3
 800ba74:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	ee07 3a90 	vmov	s15, r3
 800ba7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	ee07 3a90 	vmov	s15, r3
 800ba86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba8e:	4b62      	ldr	r3, [pc, #392]	; (800bc18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba96:	ee07 3a90 	vmov	s15, r3
 800ba9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba9e:	ed97 6a02 	vldr	s12, [r7, #8]
 800baa2:	eddf 5a61 	vldr	s11, [pc, #388]	; 800bc28 <HAL_RCC_GetSysClockFreq+0x2e4>
 800baa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800babe:	e087      	b.n	800bbd0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	ee07 3a90 	vmov	s15, r3
 800bac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baca:	eddf 6a58 	vldr	s13, [pc, #352]	; 800bc2c <HAL_RCC_GetSysClockFreq+0x2e8>
 800bace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bad2:	4b51      	ldr	r3, [pc, #324]	; (800bc18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bada:	ee07 3a90 	vmov	s15, r3
 800bade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bae2:	ed97 6a02 	vldr	s12, [r7, #8]
 800bae6:	eddf 5a50 	vldr	s11, [pc, #320]	; 800bc28 <HAL_RCC_GetSysClockFreq+0x2e4>
 800baea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800baf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bafa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bafe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb02:	e065      	b.n	800bbd0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	ee07 3a90 	vmov	s15, r3
 800bb0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb0e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800bc30 <HAL_RCC_GetSysClockFreq+0x2ec>
 800bb12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb16:	4b40      	ldr	r3, [pc, #256]	; (800bc18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb1e:	ee07 3a90 	vmov	s15, r3
 800bb22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb26:	ed97 6a02 	vldr	s12, [r7, #8]
 800bb2a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800bc28 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bb2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb46:	e043      	b.n	800bbd0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	ee07 3a90 	vmov	s15, r3
 800bb4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb52:	eddf 6a38 	vldr	s13, [pc, #224]	; 800bc34 <HAL_RCC_GetSysClockFreq+0x2f0>
 800bb56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb5a:	4b2f      	ldr	r3, [pc, #188]	; (800bc18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb62:	ee07 3a90 	vmov	s15, r3
 800bb66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb6a:	ed97 6a02 	vldr	s12, [r7, #8]
 800bb6e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800bc28 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bb72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb8a:	e021      	b.n	800bbd0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	ee07 3a90 	vmov	s15, r3
 800bb92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb96:	eddf 6a26 	vldr	s13, [pc, #152]	; 800bc30 <HAL_RCC_GetSysClockFreq+0x2ec>
 800bb9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb9e:	4b1e      	ldr	r3, [pc, #120]	; (800bc18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bba6:	ee07 3a90 	vmov	s15, r3
 800bbaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbae:	ed97 6a02 	vldr	s12, [r7, #8]
 800bbb2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800bc28 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bbb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbce:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800bbd0:	4b11      	ldr	r3, [pc, #68]	; (800bc18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bbd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbd4:	0a5b      	lsrs	r3, r3, #9
 800bbd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbda:	3301      	adds	r3, #1
 800bbdc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	ee07 3a90 	vmov	s15, r3
 800bbe4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bbe8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbf4:	ee17 3a90 	vmov	r3, s15
 800bbf8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800bbfa:	e005      	b.n	800bc08 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	61bb      	str	r3, [r7, #24]
    break;
 800bc00:	e002      	b.n	800bc08 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800bc02:	4b07      	ldr	r3, [pc, #28]	; (800bc20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800bc04:	61bb      	str	r3, [r7, #24]
    break;
 800bc06:	bf00      	nop
  }

  return sysclockfreq;
 800bc08:	69bb      	ldr	r3, [r7, #24]
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3724      	adds	r7, #36	; 0x24
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr
 800bc16:	bf00      	nop
 800bc18:	58024400 	.word	0x58024400
 800bc1c:	03d09000 	.word	0x03d09000
 800bc20:	003d0900 	.word	0x003d0900
 800bc24:	00f42400 	.word	0x00f42400
 800bc28:	46000000 	.word	0x46000000
 800bc2c:	4c742400 	.word	0x4c742400
 800bc30:	4a742400 	.word	0x4a742400
 800bc34:	4b742400 	.word	0x4b742400

0800bc38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800bc3e:	f7ff fe81 	bl	800b944 <HAL_RCC_GetSysClockFreq>
 800bc42:	4602      	mov	r2, r0
 800bc44:	4b10      	ldr	r3, [pc, #64]	; (800bc88 <HAL_RCC_GetHCLKFreq+0x50>)
 800bc46:	699b      	ldr	r3, [r3, #24]
 800bc48:	0a1b      	lsrs	r3, r3, #8
 800bc4a:	f003 030f 	and.w	r3, r3, #15
 800bc4e:	490f      	ldr	r1, [pc, #60]	; (800bc8c <HAL_RCC_GetHCLKFreq+0x54>)
 800bc50:	5ccb      	ldrb	r3, [r1, r3]
 800bc52:	f003 031f 	and.w	r3, r3, #31
 800bc56:	fa22 f303 	lsr.w	r3, r2, r3
 800bc5a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bc5c:	4b0a      	ldr	r3, [pc, #40]	; (800bc88 <HAL_RCC_GetHCLKFreq+0x50>)
 800bc5e:	699b      	ldr	r3, [r3, #24]
 800bc60:	f003 030f 	and.w	r3, r3, #15
 800bc64:	4a09      	ldr	r2, [pc, #36]	; (800bc8c <HAL_RCC_GetHCLKFreq+0x54>)
 800bc66:	5cd3      	ldrb	r3, [r2, r3]
 800bc68:	f003 031f 	and.w	r3, r3, #31
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	fa22 f303 	lsr.w	r3, r2, r3
 800bc72:	4a07      	ldr	r2, [pc, #28]	; (800bc90 <HAL_RCC_GetHCLKFreq+0x58>)
 800bc74:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bc76:	4a07      	ldr	r2, [pc, #28]	; (800bc94 <HAL_RCC_GetHCLKFreq+0x5c>)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800bc7c:	4b04      	ldr	r3, [pc, #16]	; (800bc90 <HAL_RCC_GetHCLKFreq+0x58>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3708      	adds	r7, #8
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	58024400 	.word	0x58024400
 800bc8c:	080194e8 	.word	0x080194e8
 800bc90:	24000014 	.word	0x24000014
 800bc94:	24000010 	.word	0x24000010

0800bc98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800bc9c:	f7ff ffcc 	bl	800bc38 <HAL_RCC_GetHCLKFreq>
 800bca0:	4602      	mov	r2, r0
 800bca2:	4b06      	ldr	r3, [pc, #24]	; (800bcbc <HAL_RCC_GetPCLK1Freq+0x24>)
 800bca4:	69db      	ldr	r3, [r3, #28]
 800bca6:	091b      	lsrs	r3, r3, #4
 800bca8:	f003 0307 	and.w	r3, r3, #7
 800bcac:	4904      	ldr	r1, [pc, #16]	; (800bcc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800bcae:	5ccb      	ldrb	r3, [r1, r3]
 800bcb0:	f003 031f 	and.w	r3, r3, #31
 800bcb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	bd80      	pop	{r7, pc}
 800bcbc:	58024400 	.word	0x58024400
 800bcc0:	080194e8 	.word	0x080194e8

0800bcc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800bcc8:	f7ff ffb6 	bl	800bc38 <HAL_RCC_GetHCLKFreq>
 800bccc:	4602      	mov	r2, r0
 800bcce:	4b06      	ldr	r3, [pc, #24]	; (800bce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bcd0:	69db      	ldr	r3, [r3, #28]
 800bcd2:	0a1b      	lsrs	r3, r3, #8
 800bcd4:	f003 0307 	and.w	r3, r3, #7
 800bcd8:	4904      	ldr	r1, [pc, #16]	; (800bcec <HAL_RCC_GetPCLK2Freq+0x28>)
 800bcda:	5ccb      	ldrb	r3, [r1, r3]
 800bcdc:	f003 031f 	and.w	r3, r3, #31
 800bce0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	58024400 	.word	0x58024400
 800bcec:	080194e8 	.word	0x080194e8

0800bcf0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b086      	sub	sp, #24
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d03f      	beq.n	800bd8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd10:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bd14:	d02a      	beq.n	800bd6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800bd16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bd1a:	d824      	bhi.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800bd1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd20:	d018      	beq.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800bd22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd26:	d81e      	bhi.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d003      	beq.n	800bd34 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800bd2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd30:	d007      	beq.n	800bd42 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800bd32:	e018      	b.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd34:	4bab      	ldr	r3, [pc, #684]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bd36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd38:	4aaa      	ldr	r2, [pc, #680]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bd3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800bd40:	e015      	b.n	800bd6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	3304      	adds	r3, #4
 800bd46:	2102      	movs	r1, #2
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f001 fdb9 	bl	800d8c0 <RCCEx_PLL2_Config>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800bd52:	e00c      	b.n	800bd6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	3324      	adds	r3, #36	; 0x24
 800bd58:	2102      	movs	r1, #2
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f001 fe62 	bl	800da24 <RCCEx_PLL3_Config>
 800bd60:	4603      	mov	r3, r0
 800bd62:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800bd64:	e003      	b.n	800bd6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bd66:	2301      	movs	r3, #1
 800bd68:	75fb      	strb	r3, [r7, #23]
      break;
 800bd6a:	e000      	b.n	800bd6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800bd6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bd6e:	7dfb      	ldrb	r3, [r7, #23]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d109      	bne.n	800bd88 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800bd74:	4b9b      	ldr	r3, [pc, #620]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bd76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd80:	4998      	ldr	r1, [pc, #608]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bd82:	4313      	orrs	r3, r2
 800bd84:	650b      	str	r3, [r1, #80]	; 0x50
 800bd86:	e001      	b.n	800bd8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd88:	7dfb      	ldrb	r3, [r7, #23]
 800bd8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d03d      	beq.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd9c:	2b04      	cmp	r3, #4
 800bd9e:	d826      	bhi.n	800bdee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800bda0:	a201      	add	r2, pc, #4	; (adr r2, 800bda8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800bda2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bda6:	bf00      	nop
 800bda8:	0800bdbd 	.word	0x0800bdbd
 800bdac:	0800bdcb 	.word	0x0800bdcb
 800bdb0:	0800bddd 	.word	0x0800bddd
 800bdb4:	0800bdf5 	.word	0x0800bdf5
 800bdb8:	0800bdf5 	.word	0x0800bdf5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdbc:	4b89      	ldr	r3, [pc, #548]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bdbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc0:	4a88      	ldr	r2, [pc, #544]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bdc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bdc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bdc8:	e015      	b.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	3304      	adds	r3, #4
 800bdce:	2100      	movs	r1, #0
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f001 fd75 	bl	800d8c0 <RCCEx_PLL2_Config>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bdda:	e00c      	b.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	3324      	adds	r3, #36	; 0x24
 800bde0:	2100      	movs	r1, #0
 800bde2:	4618      	mov	r0, r3
 800bde4:	f001 fe1e 	bl	800da24 <RCCEx_PLL3_Config>
 800bde8:	4603      	mov	r3, r0
 800bdea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bdec:	e003      	b.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bdee:	2301      	movs	r3, #1
 800bdf0:	75fb      	strb	r3, [r7, #23]
      break;
 800bdf2:	e000      	b.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800bdf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bdf6:	7dfb      	ldrb	r3, [r7, #23]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d109      	bne.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bdfc:	4b79      	ldr	r3, [pc, #484]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bdfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be00:	f023 0207 	bic.w	r2, r3, #7
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be08:	4976      	ldr	r1, [pc, #472]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800be0a:	4313      	orrs	r3, r2
 800be0c:	650b      	str	r3, [r1, #80]	; 0x50
 800be0e:	e001      	b.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be10:	7dfb      	ldrb	r3, [r7, #23]
 800be12:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d042      	beq.n	800bea6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be28:	d02b      	beq.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800be2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be2e:	d825      	bhi.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800be30:	2bc0      	cmp	r3, #192	; 0xc0
 800be32:	d028      	beq.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800be34:	2bc0      	cmp	r3, #192	; 0xc0
 800be36:	d821      	bhi.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800be38:	2b80      	cmp	r3, #128	; 0x80
 800be3a:	d016      	beq.n	800be6a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800be3c:	2b80      	cmp	r3, #128	; 0x80
 800be3e:	d81d      	bhi.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800be40:	2b00      	cmp	r3, #0
 800be42:	d002      	beq.n	800be4a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800be44:	2b40      	cmp	r3, #64	; 0x40
 800be46:	d007      	beq.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800be48:	e018      	b.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be4a:	4b66      	ldr	r3, [pc, #408]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800be4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be4e:	4a65      	ldr	r2, [pc, #404]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800be50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800be56:	e017      	b.n	800be88 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	3304      	adds	r3, #4
 800be5c:	2100      	movs	r1, #0
 800be5e:	4618      	mov	r0, r3
 800be60:	f001 fd2e 	bl	800d8c0 <RCCEx_PLL2_Config>
 800be64:	4603      	mov	r3, r0
 800be66:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800be68:	e00e      	b.n	800be88 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	3324      	adds	r3, #36	; 0x24
 800be6e:	2100      	movs	r1, #0
 800be70:	4618      	mov	r0, r3
 800be72:	f001 fdd7 	bl	800da24 <RCCEx_PLL3_Config>
 800be76:	4603      	mov	r3, r0
 800be78:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800be7a:	e005      	b.n	800be88 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800be7c:	2301      	movs	r3, #1
 800be7e:	75fb      	strb	r3, [r7, #23]
      break;
 800be80:	e002      	b.n	800be88 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800be82:	bf00      	nop
 800be84:	e000      	b.n	800be88 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800be86:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be88:	7dfb      	ldrb	r3, [r7, #23]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d109      	bne.n	800bea2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800be8e:	4b55      	ldr	r3, [pc, #340]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800be90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be92:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be9a:	4952      	ldr	r1, [pc, #328]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800be9c:	4313      	orrs	r3, r2
 800be9e:	650b      	str	r3, [r1, #80]	; 0x50
 800bea0:	e001      	b.n	800bea6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bea2:	7dfb      	ldrb	r3, [r7, #23]
 800bea4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d049      	beq.n	800bf46 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800beb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bebc:	d030      	beq.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800bebe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bec2:	d82a      	bhi.n	800bf1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bec4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bec8:	d02c      	beq.n	800bf24 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800beca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bece:	d824      	bhi.n	800bf1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bed0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bed4:	d018      	beq.n	800bf08 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800bed6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800beda:	d81e      	bhi.n	800bf1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d003      	beq.n	800bee8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800bee0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bee4:	d007      	beq.n	800bef6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800bee6:	e018      	b.n	800bf1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bee8:	4b3e      	ldr	r3, [pc, #248]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800beea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beec:	4a3d      	ldr	r2, [pc, #244]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800beee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bef2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bef4:	e017      	b.n	800bf26 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	3304      	adds	r3, #4
 800befa:	2100      	movs	r1, #0
 800befc:	4618      	mov	r0, r3
 800befe:	f001 fcdf 	bl	800d8c0 <RCCEx_PLL2_Config>
 800bf02:	4603      	mov	r3, r0
 800bf04:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800bf06:	e00e      	b.n	800bf26 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	3324      	adds	r3, #36	; 0x24
 800bf0c:	2100      	movs	r1, #0
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f001 fd88 	bl	800da24 <RCCEx_PLL3_Config>
 800bf14:	4603      	mov	r3, r0
 800bf16:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bf18:	e005      	b.n	800bf26 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	75fb      	strb	r3, [r7, #23]
      break;
 800bf1e:	e002      	b.n	800bf26 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800bf20:	bf00      	nop
 800bf22:	e000      	b.n	800bf26 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800bf24:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bf26:	7dfb      	ldrb	r3, [r7, #23]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d10a      	bne.n	800bf42 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800bf2c:	4b2d      	ldr	r3, [pc, #180]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bf2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf30:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bf3a:	492a      	ldr	r1, [pc, #168]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	658b      	str	r3, [r1, #88]	; 0x58
 800bf40:	e001      	b.n	800bf46 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf42:	7dfb      	ldrb	r3, [r7, #23]
 800bf44:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d04c      	beq.n	800bfec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bf58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bf5c:	d030      	beq.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800bf5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bf62:	d82a      	bhi.n	800bfba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bf64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bf68:	d02c      	beq.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800bf6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bf6e:	d824      	bhi.n	800bfba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bf70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf74:	d018      	beq.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800bf76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf7a:	d81e      	bhi.n	800bfba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d003      	beq.n	800bf88 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800bf80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bf84:	d007      	beq.n	800bf96 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800bf86:	e018      	b.n	800bfba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf88:	4b16      	ldr	r3, [pc, #88]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bf8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf8c:	4a15      	ldr	r2, [pc, #84]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bf8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bf94:	e017      	b.n	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	3304      	adds	r3, #4
 800bf9a:	2100      	movs	r1, #0
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f001 fc8f 	bl	800d8c0 <RCCEx_PLL2_Config>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800bfa6:	e00e      	b.n	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	3324      	adds	r3, #36	; 0x24
 800bfac:	2100      	movs	r1, #0
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f001 fd38 	bl	800da24 <RCCEx_PLL3_Config>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bfb8:	e005      	b.n	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bfba:	2301      	movs	r3, #1
 800bfbc:	75fb      	strb	r3, [r7, #23]
      break;
 800bfbe:	e002      	b.n	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800bfc0:	bf00      	nop
 800bfc2:	e000      	b.n	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800bfc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bfc6:	7dfb      	ldrb	r3, [r7, #23]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d10d      	bne.n	800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bfcc:	4b05      	ldr	r3, [pc, #20]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bfce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfd0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bfda:	4902      	ldr	r1, [pc, #8]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bfdc:	4313      	orrs	r3, r2
 800bfde:	658b      	str	r3, [r1, #88]	; 0x58
 800bfe0:	e004      	b.n	800bfec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800bfe2:	bf00      	nop
 800bfe4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfe8:	7dfb      	ldrb	r3, [r7, #23]
 800bfea:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d032      	beq.n	800c05e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bffc:	2b30      	cmp	r3, #48	; 0x30
 800bffe:	d01c      	beq.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800c000:	2b30      	cmp	r3, #48	; 0x30
 800c002:	d817      	bhi.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800c004:	2b20      	cmp	r3, #32
 800c006:	d00c      	beq.n	800c022 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800c008:	2b20      	cmp	r3, #32
 800c00a:	d813      	bhi.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d016      	beq.n	800c03e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800c010:	2b10      	cmp	r3, #16
 800c012:	d10f      	bne.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c014:	4baf      	ldr	r3, [pc, #700]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c018:	4aae      	ldr	r2, [pc, #696]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c01a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c01e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800c020:	e00e      	b.n	800c040 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	3304      	adds	r3, #4
 800c026:	2102      	movs	r1, #2
 800c028:	4618      	mov	r0, r3
 800c02a:	f001 fc49 	bl	800d8c0 <RCCEx_PLL2_Config>
 800c02e:	4603      	mov	r3, r0
 800c030:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800c032:	e005      	b.n	800c040 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c034:	2301      	movs	r3, #1
 800c036:	75fb      	strb	r3, [r7, #23]
      break;
 800c038:	e002      	b.n	800c040 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800c03a:	bf00      	nop
 800c03c:	e000      	b.n	800c040 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800c03e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c040:	7dfb      	ldrb	r3, [r7, #23]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d109      	bne.n	800c05a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c046:	4ba3      	ldr	r3, [pc, #652]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c04a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c052:	49a0      	ldr	r1, [pc, #640]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c054:	4313      	orrs	r3, r2
 800c056:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c058:	e001      	b.n	800c05e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c05a:	7dfb      	ldrb	r3, [r7, #23]
 800c05c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c066:	2b00      	cmp	r3, #0
 800c068:	d047      	beq.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c06e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c072:	d030      	beq.n	800c0d6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800c074:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c078:	d82a      	bhi.n	800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800c07a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c07e:	d02c      	beq.n	800c0da <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800c080:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c084:	d824      	bhi.n	800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800c086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c08a:	d018      	beq.n	800c0be <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800c08c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c090:	d81e      	bhi.n	800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800c092:	2b00      	cmp	r3, #0
 800c094:	d003      	beq.n	800c09e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800c096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c09a:	d007      	beq.n	800c0ac <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800c09c:	e018      	b.n	800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c09e:	4b8d      	ldr	r3, [pc, #564]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0a2:	4a8c      	ldr	r2, [pc, #560]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c0a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c0a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c0aa:	e017      	b.n	800c0dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	3304      	adds	r3, #4
 800c0b0:	2100      	movs	r1, #0
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f001 fc04 	bl	800d8c0 <RCCEx_PLL2_Config>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c0bc:	e00e      	b.n	800c0dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	3324      	adds	r3, #36	; 0x24
 800c0c2:	2100      	movs	r1, #0
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f001 fcad 	bl	800da24 <RCCEx_PLL3_Config>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c0ce:	e005      	b.n	800c0dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	75fb      	strb	r3, [r7, #23]
      break;
 800c0d4:	e002      	b.n	800c0dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800c0d6:	bf00      	nop
 800c0d8:	e000      	b.n	800c0dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800c0da:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c0dc:	7dfb      	ldrb	r3, [r7, #23]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d109      	bne.n	800c0f6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c0e2:	4b7c      	ldr	r3, [pc, #496]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c0e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0e6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0ee:	4979      	ldr	r1, [pc, #484]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c0f0:	4313      	orrs	r3, r2
 800c0f2:	650b      	str	r3, [r1, #80]	; 0x50
 800c0f4:	e001      	b.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0f6:	7dfb      	ldrb	r3, [r7, #23]
 800c0f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c102:	2b00      	cmp	r3, #0
 800c104:	d049      	beq.n	800c19a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c10a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c10e:	d02e      	beq.n	800c16e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800c110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c114:	d828      	bhi.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800c116:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c11a:	d02a      	beq.n	800c172 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800c11c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c120:	d822      	bhi.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800c122:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c126:	d026      	beq.n	800c176 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800c128:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c12c:	d81c      	bhi.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800c12e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c132:	d010      	beq.n	800c156 <HAL_RCCEx_PeriphCLKConfig+0x466>
 800c134:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c138:	d816      	bhi.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d01d      	beq.n	800c17a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800c13e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c142:	d111      	bne.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	3304      	adds	r3, #4
 800c148:	2101      	movs	r1, #1
 800c14a:	4618      	mov	r0, r3
 800c14c:	f001 fbb8 	bl	800d8c0 <RCCEx_PLL2_Config>
 800c150:	4603      	mov	r3, r0
 800c152:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c154:	e012      	b.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	3324      	adds	r3, #36	; 0x24
 800c15a:	2101      	movs	r1, #1
 800c15c:	4618      	mov	r0, r3
 800c15e:	f001 fc61 	bl	800da24 <RCCEx_PLL3_Config>
 800c162:	4603      	mov	r3, r0
 800c164:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c166:	e009      	b.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c168:	2301      	movs	r3, #1
 800c16a:	75fb      	strb	r3, [r7, #23]
      break;
 800c16c:	e006      	b.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800c16e:	bf00      	nop
 800c170:	e004      	b.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800c172:	bf00      	nop
 800c174:	e002      	b.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800c176:	bf00      	nop
 800c178:	e000      	b.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800c17a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c17c:	7dfb      	ldrb	r3, [r7, #23]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d109      	bne.n	800c196 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c182:	4b54      	ldr	r3, [pc, #336]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c186:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c18e:	4951      	ldr	r1, [pc, #324]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c190:	4313      	orrs	r3, r2
 800c192:	650b      	str	r3, [r1, #80]	; 0x50
 800c194:	e001      	b.n	800c19a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c196:	7dfb      	ldrb	r3, [r7, #23]
 800c198:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d04b      	beq.n	800c23e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c1ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c1b0:	d02e      	beq.n	800c210 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800c1b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c1b6:	d828      	bhi.n	800c20a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c1b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1bc:	d02a      	beq.n	800c214 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800c1be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1c2:	d822      	bhi.n	800c20a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c1c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c1c8:	d026      	beq.n	800c218 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800c1ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c1ce:	d81c      	bhi.n	800c20a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c1d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1d4:	d010      	beq.n	800c1f8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800c1d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1da:	d816      	bhi.n	800c20a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d01d      	beq.n	800c21c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800c1e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1e4:	d111      	bne.n	800c20a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	3304      	adds	r3, #4
 800c1ea:	2101      	movs	r1, #1
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f001 fb67 	bl	800d8c0 <RCCEx_PLL2_Config>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c1f6:	e012      	b.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	3324      	adds	r3, #36	; 0x24
 800c1fc:	2101      	movs	r1, #1
 800c1fe:	4618      	mov	r0, r3
 800c200:	f001 fc10 	bl	800da24 <RCCEx_PLL3_Config>
 800c204:	4603      	mov	r3, r0
 800c206:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c208:	e009      	b.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800c20a:	2301      	movs	r3, #1
 800c20c:	75fb      	strb	r3, [r7, #23]
      break;
 800c20e:	e006      	b.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800c210:	bf00      	nop
 800c212:	e004      	b.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800c214:	bf00      	nop
 800c216:	e002      	b.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800c218:	bf00      	nop
 800c21a:	e000      	b.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800c21c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c21e:	7dfb      	ldrb	r3, [r7, #23]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d10a      	bne.n	800c23a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c224:	4b2b      	ldr	r3, [pc, #172]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c228:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c232:	4928      	ldr	r1, [pc, #160]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c234:	4313      	orrs	r3, r2
 800c236:	658b      	str	r3, [r1, #88]	; 0x58
 800c238:	e001      	b.n	800c23e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c23a:	7dfb      	ldrb	r3, [r7, #23]
 800c23c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c246:	2b00      	cmp	r3, #0
 800c248:	d02f      	beq.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c24e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c252:	d00e      	beq.n	800c272 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800c254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c258:	d814      	bhi.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d015      	beq.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800c25e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c262:	d10f      	bne.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c264:	4b1b      	ldr	r3, [pc, #108]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c268:	4a1a      	ldr	r2, [pc, #104]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c26a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c26e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c270:	e00c      	b.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	3304      	adds	r3, #4
 800c276:	2101      	movs	r1, #1
 800c278:	4618      	mov	r0, r3
 800c27a:	f001 fb21 	bl	800d8c0 <RCCEx_PLL2_Config>
 800c27e:	4603      	mov	r3, r0
 800c280:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c282:	e003      	b.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c284:	2301      	movs	r3, #1
 800c286:	75fb      	strb	r3, [r7, #23]
      break;
 800c288:	e000      	b.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800c28a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c28c:	7dfb      	ldrb	r3, [r7, #23]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d109      	bne.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c292:	4b10      	ldr	r3, [pc, #64]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c296:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c29e:	490d      	ldr	r1, [pc, #52]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c2a0:	4313      	orrs	r3, r2
 800c2a2:	650b      	str	r3, [r1, #80]	; 0x50
 800c2a4:	e001      	b.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2a6:	7dfb      	ldrb	r3, [r7, #23]
 800c2a8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d033      	beq.n	800c31e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2ba:	2b03      	cmp	r3, #3
 800c2bc:	d81c      	bhi.n	800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800c2be:	a201      	add	r2, pc, #4	; (adr r2, 800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800c2c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2c4:	0800c2ff 	.word	0x0800c2ff
 800c2c8:	0800c2d9 	.word	0x0800c2d9
 800c2cc:	0800c2e7 	.word	0x0800c2e7
 800c2d0:	0800c2ff 	.word	0x0800c2ff
 800c2d4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c2d8:	4bb8      	ldr	r3, [pc, #736]	; (800c5bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2dc:	4ab7      	ldr	r2, [pc, #732]	; (800c5bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c2de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c2e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c2e4:	e00c      	b.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	3304      	adds	r3, #4
 800c2ea:	2102      	movs	r1, #2
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f001 fae7 	bl	800d8c0 <RCCEx_PLL2_Config>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c2f6:	e003      	b.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	75fb      	strb	r3, [r7, #23]
      break;
 800c2fc:	e000      	b.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800c2fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c300:	7dfb      	ldrb	r3, [r7, #23]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d109      	bne.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c306:	4bad      	ldr	r3, [pc, #692]	; (800c5bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c30a:	f023 0203 	bic.w	r2, r3, #3
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c312:	49aa      	ldr	r1, [pc, #680]	; (800c5bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c314:	4313      	orrs	r3, r2
 800c316:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c318:	e001      	b.n	800c31e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c31a:	7dfb      	ldrb	r3, [r7, #23]
 800c31c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c326:	2b00      	cmp	r3, #0
 800c328:	f000 8086 	beq.w	800c438 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c32c:	4ba4      	ldr	r3, [pc, #656]	; (800c5c0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	4aa3      	ldr	r2, [pc, #652]	; (800c5c0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800c332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c336:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c338:	f7f9 fd7c 	bl	8005e34 <HAL_GetTick>
 800c33c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c33e:	e009      	b.n	800c354 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c340:	f7f9 fd78 	bl	8005e34 <HAL_GetTick>
 800c344:	4602      	mov	r2, r0
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	1ad3      	subs	r3, r2, r3
 800c34a:	2b64      	cmp	r3, #100	; 0x64
 800c34c:	d902      	bls.n	800c354 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800c34e:	2303      	movs	r3, #3
 800c350:	75fb      	strb	r3, [r7, #23]
        break;
 800c352:	e005      	b.n	800c360 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c354:	4b9a      	ldr	r3, [pc, #616]	; (800c5c0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d0ef      	beq.n	800c340 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800c360:	7dfb      	ldrb	r3, [r7, #23]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d166      	bne.n	800c434 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c366:	4b95      	ldr	r3, [pc, #596]	; (800c5bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c368:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c370:	4053      	eors	r3, r2
 800c372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c376:	2b00      	cmp	r3, #0
 800c378:	d013      	beq.n	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c37a:	4b90      	ldr	r3, [pc, #576]	; (800c5bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c37c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c37e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c382:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c384:	4b8d      	ldr	r3, [pc, #564]	; (800c5bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c388:	4a8c      	ldr	r2, [pc, #560]	; (800c5bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c38a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c38e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c390:	4b8a      	ldr	r3, [pc, #552]	; (800c5bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c394:	4a89      	ldr	r2, [pc, #548]	; (800c5bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c39a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c39c:	4a87      	ldr	r2, [pc, #540]	; (800c5bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c3a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3ac:	d115      	bne.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3ae:	f7f9 fd41 	bl	8005e34 <HAL_GetTick>
 800c3b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c3b4:	e00b      	b.n	800c3ce <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c3b6:	f7f9 fd3d 	bl	8005e34 <HAL_GetTick>
 800c3ba:	4602      	mov	r2, r0
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	1ad3      	subs	r3, r2, r3
 800c3c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d902      	bls.n	800c3ce <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800c3c8:	2303      	movs	r3, #3
 800c3ca:	75fb      	strb	r3, [r7, #23]
            break;
 800c3cc:	e005      	b.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c3ce:	4b7b      	ldr	r3, [pc, #492]	; (800c5bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c3d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3d2:	f003 0302 	and.w	r3, r3, #2
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d0ed      	beq.n	800c3b6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800c3da:	7dfb      	ldrb	r3, [r7, #23]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d126      	bne.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c3e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c3ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c3ee:	d10d      	bne.n	800c40c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800c3f0:	4b72      	ldr	r3, [pc, #456]	; (800c5bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c3f2:	691b      	ldr	r3, [r3, #16]
 800c3f4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c3fe:	0919      	lsrs	r1, r3, #4
 800c400:	4b70      	ldr	r3, [pc, #448]	; (800c5c4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800c402:	400b      	ands	r3, r1
 800c404:	496d      	ldr	r1, [pc, #436]	; (800c5bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c406:	4313      	orrs	r3, r2
 800c408:	610b      	str	r3, [r1, #16]
 800c40a:	e005      	b.n	800c418 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800c40c:	4b6b      	ldr	r3, [pc, #428]	; (800c5bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c40e:	691b      	ldr	r3, [r3, #16]
 800c410:	4a6a      	ldr	r2, [pc, #424]	; (800c5bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c412:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c416:	6113      	str	r3, [r2, #16]
 800c418:	4b68      	ldr	r3, [pc, #416]	; (800c5bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c41a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c426:	4965      	ldr	r1, [pc, #404]	; (800c5bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c428:	4313      	orrs	r3, r2
 800c42a:	670b      	str	r3, [r1, #112]	; 0x70
 800c42c:	e004      	b.n	800c438 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c42e:	7dfb      	ldrb	r3, [r7, #23]
 800c430:	75bb      	strb	r3, [r7, #22]
 800c432:	e001      	b.n	800c438 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c434:	7dfb      	ldrb	r3, [r7, #23]
 800c436:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f003 0301 	and.w	r3, r3, #1
 800c440:	2b00      	cmp	r3, #0
 800c442:	d07e      	beq.n	800c542 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c448:	2b28      	cmp	r3, #40	; 0x28
 800c44a:	d867      	bhi.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800c44c:	a201      	add	r2, pc, #4	; (adr r2, 800c454 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800c44e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c452:	bf00      	nop
 800c454:	0800c523 	.word	0x0800c523
 800c458:	0800c51d 	.word	0x0800c51d
 800c45c:	0800c51d 	.word	0x0800c51d
 800c460:	0800c51d 	.word	0x0800c51d
 800c464:	0800c51d 	.word	0x0800c51d
 800c468:	0800c51d 	.word	0x0800c51d
 800c46c:	0800c51d 	.word	0x0800c51d
 800c470:	0800c51d 	.word	0x0800c51d
 800c474:	0800c4f9 	.word	0x0800c4f9
 800c478:	0800c51d 	.word	0x0800c51d
 800c47c:	0800c51d 	.word	0x0800c51d
 800c480:	0800c51d 	.word	0x0800c51d
 800c484:	0800c51d 	.word	0x0800c51d
 800c488:	0800c51d 	.word	0x0800c51d
 800c48c:	0800c51d 	.word	0x0800c51d
 800c490:	0800c51d 	.word	0x0800c51d
 800c494:	0800c50b 	.word	0x0800c50b
 800c498:	0800c51d 	.word	0x0800c51d
 800c49c:	0800c51d 	.word	0x0800c51d
 800c4a0:	0800c51d 	.word	0x0800c51d
 800c4a4:	0800c51d 	.word	0x0800c51d
 800c4a8:	0800c51d 	.word	0x0800c51d
 800c4ac:	0800c51d 	.word	0x0800c51d
 800c4b0:	0800c51d 	.word	0x0800c51d
 800c4b4:	0800c523 	.word	0x0800c523
 800c4b8:	0800c51d 	.word	0x0800c51d
 800c4bc:	0800c51d 	.word	0x0800c51d
 800c4c0:	0800c51d 	.word	0x0800c51d
 800c4c4:	0800c51d 	.word	0x0800c51d
 800c4c8:	0800c51d 	.word	0x0800c51d
 800c4cc:	0800c51d 	.word	0x0800c51d
 800c4d0:	0800c51d 	.word	0x0800c51d
 800c4d4:	0800c523 	.word	0x0800c523
 800c4d8:	0800c51d 	.word	0x0800c51d
 800c4dc:	0800c51d 	.word	0x0800c51d
 800c4e0:	0800c51d 	.word	0x0800c51d
 800c4e4:	0800c51d 	.word	0x0800c51d
 800c4e8:	0800c51d 	.word	0x0800c51d
 800c4ec:	0800c51d 	.word	0x0800c51d
 800c4f0:	0800c51d 	.word	0x0800c51d
 800c4f4:	0800c523 	.word	0x0800c523
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	3304      	adds	r3, #4
 800c4fc:	2101      	movs	r1, #1
 800c4fe:	4618      	mov	r0, r3
 800c500:	f001 f9de 	bl	800d8c0 <RCCEx_PLL2_Config>
 800c504:	4603      	mov	r3, r0
 800c506:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c508:	e00c      	b.n	800c524 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	3324      	adds	r3, #36	; 0x24
 800c50e:	2101      	movs	r1, #1
 800c510:	4618      	mov	r0, r3
 800c512:	f001 fa87 	bl	800da24 <RCCEx_PLL3_Config>
 800c516:	4603      	mov	r3, r0
 800c518:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c51a:	e003      	b.n	800c524 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c51c:	2301      	movs	r3, #1
 800c51e:	75fb      	strb	r3, [r7, #23]
      break;
 800c520:	e000      	b.n	800c524 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800c522:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c524:	7dfb      	ldrb	r3, [r7, #23]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d109      	bne.n	800c53e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c52a:	4b24      	ldr	r3, [pc, #144]	; (800c5bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c52c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c52e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c536:	4921      	ldr	r1, [pc, #132]	; (800c5bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c538:	4313      	orrs	r3, r2
 800c53a:	654b      	str	r3, [r1, #84]	; 0x54
 800c53c:	e001      	b.n	800c542 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c53e:	7dfb      	ldrb	r3, [r7, #23]
 800c540:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f003 0302 	and.w	r3, r3, #2
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d03e      	beq.n	800c5cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c552:	2b05      	cmp	r3, #5
 800c554:	d820      	bhi.n	800c598 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800c556:	a201      	add	r2, pc, #4	; (adr r2, 800c55c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800c558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c55c:	0800c59f 	.word	0x0800c59f
 800c560:	0800c575 	.word	0x0800c575
 800c564:	0800c587 	.word	0x0800c587
 800c568:	0800c59f 	.word	0x0800c59f
 800c56c:	0800c59f 	.word	0x0800c59f
 800c570:	0800c59f 	.word	0x0800c59f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	3304      	adds	r3, #4
 800c578:	2101      	movs	r1, #1
 800c57a:	4618      	mov	r0, r3
 800c57c:	f001 f9a0 	bl	800d8c0 <RCCEx_PLL2_Config>
 800c580:	4603      	mov	r3, r0
 800c582:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c584:	e00c      	b.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	3324      	adds	r3, #36	; 0x24
 800c58a:	2101      	movs	r1, #1
 800c58c:	4618      	mov	r0, r3
 800c58e:	f001 fa49 	bl	800da24 <RCCEx_PLL3_Config>
 800c592:	4603      	mov	r3, r0
 800c594:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c596:	e003      	b.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c598:	2301      	movs	r3, #1
 800c59a:	75fb      	strb	r3, [r7, #23]
      break;
 800c59c:	e000      	b.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800c59e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c5a0:	7dfb      	ldrb	r3, [r7, #23]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d110      	bne.n	800c5c8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c5a6:	4b05      	ldr	r3, [pc, #20]	; (800c5bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c5a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5aa:	f023 0207 	bic.w	r2, r3, #7
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5b2:	4902      	ldr	r1, [pc, #8]	; (800c5bc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c5b4:	4313      	orrs	r3, r2
 800c5b6:	654b      	str	r3, [r1, #84]	; 0x54
 800c5b8:	e008      	b.n	800c5cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800c5ba:	bf00      	nop
 800c5bc:	58024400 	.word	0x58024400
 800c5c0:	58024800 	.word	0x58024800
 800c5c4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5c8:	7dfb      	ldrb	r3, [r7, #23]
 800c5ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f003 0304 	and.w	r3, r3, #4
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d039      	beq.n	800c64c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5de:	2b05      	cmp	r3, #5
 800c5e0:	d820      	bhi.n	800c624 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800c5e2:	a201      	add	r2, pc, #4	; (adr r2, 800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800c5e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5e8:	0800c62b 	.word	0x0800c62b
 800c5ec:	0800c601 	.word	0x0800c601
 800c5f0:	0800c613 	.word	0x0800c613
 800c5f4:	0800c62b 	.word	0x0800c62b
 800c5f8:	0800c62b 	.word	0x0800c62b
 800c5fc:	0800c62b 	.word	0x0800c62b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	3304      	adds	r3, #4
 800c604:	2101      	movs	r1, #1
 800c606:	4618      	mov	r0, r3
 800c608:	f001 f95a 	bl	800d8c0 <RCCEx_PLL2_Config>
 800c60c:	4603      	mov	r3, r0
 800c60e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c610:	e00c      	b.n	800c62c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	3324      	adds	r3, #36	; 0x24
 800c616:	2101      	movs	r1, #1
 800c618:	4618      	mov	r0, r3
 800c61a:	f001 fa03 	bl	800da24 <RCCEx_PLL3_Config>
 800c61e:	4603      	mov	r3, r0
 800c620:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c622:	e003      	b.n	800c62c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c624:	2301      	movs	r3, #1
 800c626:	75fb      	strb	r3, [r7, #23]
      break;
 800c628:	e000      	b.n	800c62c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800c62a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c62c:	7dfb      	ldrb	r3, [r7, #23]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d10a      	bne.n	800c648 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c632:	4bb7      	ldr	r3, [pc, #732]	; (800c910 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c636:	f023 0207 	bic.w	r2, r3, #7
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c640:	49b3      	ldr	r1, [pc, #716]	; (800c910 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c642:	4313      	orrs	r3, r2
 800c644:	658b      	str	r3, [r1, #88]	; 0x58
 800c646:	e001      	b.n	800c64c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c648:	7dfb      	ldrb	r3, [r7, #23]
 800c64a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f003 0320 	and.w	r3, r3, #32
 800c654:	2b00      	cmp	r3, #0
 800c656:	d04b      	beq.n	800c6f0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c65e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c662:	d02e      	beq.n	800c6c2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800c664:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c668:	d828      	bhi.n	800c6bc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800c66a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c66e:	d02a      	beq.n	800c6c6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800c670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c674:	d822      	bhi.n	800c6bc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800c676:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c67a:	d026      	beq.n	800c6ca <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800c67c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c680:	d81c      	bhi.n	800c6bc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800c682:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c686:	d010      	beq.n	800c6aa <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800c688:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c68c:	d816      	bhi.n	800c6bc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d01d      	beq.n	800c6ce <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800c692:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c696:	d111      	bne.n	800c6bc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	3304      	adds	r3, #4
 800c69c:	2100      	movs	r1, #0
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f001 f90e 	bl	800d8c0 <RCCEx_PLL2_Config>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c6a8:	e012      	b.n	800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	3324      	adds	r3, #36	; 0x24
 800c6ae:	2102      	movs	r1, #2
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f001 f9b7 	bl	800da24 <RCCEx_PLL3_Config>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c6ba:	e009      	b.n	800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c6bc:	2301      	movs	r3, #1
 800c6be:	75fb      	strb	r3, [r7, #23]
      break;
 800c6c0:	e006      	b.n	800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800c6c2:	bf00      	nop
 800c6c4:	e004      	b.n	800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800c6c6:	bf00      	nop
 800c6c8:	e002      	b.n	800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800c6ca:	bf00      	nop
 800c6cc:	e000      	b.n	800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800c6ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c6d0:	7dfb      	ldrb	r3, [r7, #23]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d10a      	bne.n	800c6ec <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c6d6:	4b8e      	ldr	r3, [pc, #568]	; (800c910 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c6d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6da:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6e4:	498a      	ldr	r1, [pc, #552]	; (800c910 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c6e6:	4313      	orrs	r3, r2
 800c6e8:	654b      	str	r3, [r1, #84]	; 0x54
 800c6ea:	e001      	b.n	800c6f0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6ec:	7dfb      	ldrb	r3, [r7, #23]
 800c6ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d04b      	beq.n	800c794 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c702:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c706:	d02e      	beq.n	800c766 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800c708:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c70c:	d828      	bhi.n	800c760 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800c70e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c712:	d02a      	beq.n	800c76a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800c714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c718:	d822      	bhi.n	800c760 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800c71a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c71e:	d026      	beq.n	800c76e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800c720:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c724:	d81c      	bhi.n	800c760 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800c726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c72a:	d010      	beq.n	800c74e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800c72c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c730:	d816      	bhi.n	800c760 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800c732:	2b00      	cmp	r3, #0
 800c734:	d01d      	beq.n	800c772 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800c736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c73a:	d111      	bne.n	800c760 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	3304      	adds	r3, #4
 800c740:	2100      	movs	r1, #0
 800c742:	4618      	mov	r0, r3
 800c744:	f001 f8bc 	bl	800d8c0 <RCCEx_PLL2_Config>
 800c748:	4603      	mov	r3, r0
 800c74a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c74c:	e012      	b.n	800c774 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	3324      	adds	r3, #36	; 0x24
 800c752:	2102      	movs	r1, #2
 800c754:	4618      	mov	r0, r3
 800c756:	f001 f965 	bl	800da24 <RCCEx_PLL3_Config>
 800c75a:	4603      	mov	r3, r0
 800c75c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c75e:	e009      	b.n	800c774 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c760:	2301      	movs	r3, #1
 800c762:	75fb      	strb	r3, [r7, #23]
      break;
 800c764:	e006      	b.n	800c774 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800c766:	bf00      	nop
 800c768:	e004      	b.n	800c774 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800c76a:	bf00      	nop
 800c76c:	e002      	b.n	800c774 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800c76e:	bf00      	nop
 800c770:	e000      	b.n	800c774 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800c772:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c774:	7dfb      	ldrb	r3, [r7, #23]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d10a      	bne.n	800c790 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c77a:	4b65      	ldr	r3, [pc, #404]	; (800c910 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c77c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c77e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c788:	4961      	ldr	r1, [pc, #388]	; (800c910 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c78a:	4313      	orrs	r3, r2
 800c78c:	658b      	str	r3, [r1, #88]	; 0x58
 800c78e:	e001      	b.n	800c794 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c790:	7dfb      	ldrb	r3, [r7, #23]
 800c792:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d04b      	beq.n	800c838 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c7a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c7aa:	d02e      	beq.n	800c80a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800c7ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c7b0:	d828      	bhi.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800c7b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7b6:	d02a      	beq.n	800c80e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800c7b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7bc:	d822      	bhi.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800c7be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c7c2:	d026      	beq.n	800c812 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800c7c4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c7c8:	d81c      	bhi.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800c7ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c7ce:	d010      	beq.n	800c7f2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800c7d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c7d4:	d816      	bhi.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d01d      	beq.n	800c816 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800c7da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c7de:	d111      	bne.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	3304      	adds	r3, #4
 800c7e4:	2100      	movs	r1, #0
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f001 f86a 	bl	800d8c0 <RCCEx_PLL2_Config>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c7f0:	e012      	b.n	800c818 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	3324      	adds	r3, #36	; 0x24
 800c7f6:	2102      	movs	r1, #2
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f001 f913 	bl	800da24 <RCCEx_PLL3_Config>
 800c7fe:	4603      	mov	r3, r0
 800c800:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c802:	e009      	b.n	800c818 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c804:	2301      	movs	r3, #1
 800c806:	75fb      	strb	r3, [r7, #23]
      break;
 800c808:	e006      	b.n	800c818 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800c80a:	bf00      	nop
 800c80c:	e004      	b.n	800c818 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800c80e:	bf00      	nop
 800c810:	e002      	b.n	800c818 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800c812:	bf00      	nop
 800c814:	e000      	b.n	800c818 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800c816:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c818:	7dfb      	ldrb	r3, [r7, #23]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d10a      	bne.n	800c834 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c81e:	4b3c      	ldr	r3, [pc, #240]	; (800c910 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c822:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c82c:	4938      	ldr	r1, [pc, #224]	; (800c910 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c82e:	4313      	orrs	r3, r2
 800c830:	658b      	str	r3, [r1, #88]	; 0x58
 800c832:	e001      	b.n	800c838 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c834:	7dfb      	ldrb	r3, [r7, #23]
 800c836:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f003 0308 	and.w	r3, r3, #8
 800c840:	2b00      	cmp	r3, #0
 800c842:	d01a      	beq.n	800c87a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c84a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c84e:	d10a      	bne.n	800c866 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	3324      	adds	r3, #36	; 0x24
 800c854:	2102      	movs	r1, #2
 800c856:	4618      	mov	r0, r3
 800c858:	f001 f8e4 	bl	800da24 <RCCEx_PLL3_Config>
 800c85c:	4603      	mov	r3, r0
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d001      	beq.n	800c866 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800c862:	2301      	movs	r3, #1
 800c864:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c866:	4b2a      	ldr	r3, [pc, #168]	; (800c910 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c86a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c874:	4926      	ldr	r1, [pc, #152]	; (800c910 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c876:	4313      	orrs	r3, r2
 800c878:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f003 0310 	and.w	r3, r3, #16
 800c882:	2b00      	cmp	r3, #0
 800c884:	d01a      	beq.n	800c8bc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c88c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c890:	d10a      	bne.n	800c8a8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	3324      	adds	r3, #36	; 0x24
 800c896:	2102      	movs	r1, #2
 800c898:	4618      	mov	r0, r3
 800c89a:	f001 f8c3 	bl	800da24 <RCCEx_PLL3_Config>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d001      	beq.n	800c8a8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c8a8:	4b19      	ldr	r3, [pc, #100]	; (800c910 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c8aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c8b6:	4916      	ldr	r1, [pc, #88]	; (800c910 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c8b8:	4313      	orrs	r3, r2
 800c8ba:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d036      	beq.n	800c936 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c8ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8d2:	d01f      	beq.n	800c914 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800c8d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8d8:	d817      	bhi.n	800c90a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d003      	beq.n	800c8e6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800c8de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8e2:	d009      	beq.n	800c8f8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800c8e4:	e011      	b.n	800c90a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	3304      	adds	r3, #4
 800c8ea:	2100      	movs	r1, #0
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f000 ffe7 	bl	800d8c0 <RCCEx_PLL2_Config>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c8f6:	e00e      	b.n	800c916 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	3324      	adds	r3, #36	; 0x24
 800c8fc:	2102      	movs	r1, #2
 800c8fe:	4618      	mov	r0, r3
 800c900:	f001 f890 	bl	800da24 <RCCEx_PLL3_Config>
 800c904:	4603      	mov	r3, r0
 800c906:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c908:	e005      	b.n	800c916 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c90a:	2301      	movs	r3, #1
 800c90c:	75fb      	strb	r3, [r7, #23]
      break;
 800c90e:	e002      	b.n	800c916 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800c910:	58024400 	.word	0x58024400
      break;
 800c914:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c916:	7dfb      	ldrb	r3, [r7, #23]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d10a      	bne.n	800c932 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c91c:	4b83      	ldr	r3, [pc, #524]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0xe3c>)
 800c91e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c920:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c92a:	4980      	ldr	r1, [pc, #512]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0xe3c>)
 800c92c:	4313      	orrs	r3, r2
 800c92e:	658b      	str	r3, [r1, #88]	; 0x58
 800c930:	e001      	b.n	800c936 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c932:	7dfb      	ldrb	r3, [r7, #23]
 800c934:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d033      	beq.n	800c9aa <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c948:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c94c:	d01c      	beq.n	800c988 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800c94e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c952:	d816      	bhi.n	800c982 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800c954:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c958:	d003      	beq.n	800c962 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800c95a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c95e:	d007      	beq.n	800c970 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800c960:	e00f      	b.n	800c982 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c962:	4b72      	ldr	r3, [pc, #456]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0xe3c>)
 800c964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c966:	4a71      	ldr	r2, [pc, #452]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0xe3c>)
 800c968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c96c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800c96e:	e00c      	b.n	800c98a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	3324      	adds	r3, #36	; 0x24
 800c974:	2101      	movs	r1, #1
 800c976:	4618      	mov	r0, r3
 800c978:	f001 f854 	bl	800da24 <RCCEx_PLL3_Config>
 800c97c:	4603      	mov	r3, r0
 800c97e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800c980:	e003      	b.n	800c98a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c982:	2301      	movs	r3, #1
 800c984:	75fb      	strb	r3, [r7, #23]
      break;
 800c986:	e000      	b.n	800c98a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800c988:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c98a:	7dfb      	ldrb	r3, [r7, #23]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d10a      	bne.n	800c9a6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c990:	4b66      	ldr	r3, [pc, #408]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0xe3c>)
 800c992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c994:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c99e:	4963      	ldr	r1, [pc, #396]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0xe3c>)
 800c9a0:	4313      	orrs	r3, r2
 800c9a2:	654b      	str	r3, [r1, #84]	; 0x54
 800c9a4:	e001      	b.n	800c9aa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9a6:	7dfb      	ldrb	r3, [r7, #23]
 800c9a8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d029      	beq.n	800ca0a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d003      	beq.n	800c9c6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800c9be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9c2:	d007      	beq.n	800c9d4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800c9c4:	e00f      	b.n	800c9e6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c9c6:	4b59      	ldr	r3, [pc, #356]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0xe3c>)
 800c9c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ca:	4a58      	ldr	r2, [pc, #352]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0xe3c>)
 800c9cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c9d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c9d2:	e00b      	b.n	800c9ec <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	3304      	adds	r3, #4
 800c9d8:	2102      	movs	r1, #2
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f000 ff70 	bl	800d8c0 <RCCEx_PLL2_Config>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c9e4:	e002      	b.n	800c9ec <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	75fb      	strb	r3, [r7, #23]
      break;
 800c9ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c9ec:	7dfb      	ldrb	r3, [r7, #23]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d109      	bne.n	800ca06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c9f2:	4b4e      	ldr	r3, [pc, #312]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0xe3c>)
 800c9f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9fe:	494b      	ldr	r1, [pc, #300]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0xe3c>)
 800ca00:	4313      	orrs	r3, r2
 800ca02:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ca04:	e001      	b.n	800ca0a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca06:	7dfb      	ldrb	r3, [r7, #23]
 800ca08:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d00a      	beq.n	800ca2c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	3324      	adds	r3, #36	; 0x24
 800ca1a:	2102      	movs	r1, #2
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f001 f801 	bl	800da24 <RCCEx_PLL3_Config>
 800ca22:	4603      	mov	r3, r0
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d001      	beq.n	800ca2c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800ca28:	2301      	movs	r3, #1
 800ca2a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d030      	beq.n	800ca9a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca40:	d017      	beq.n	800ca72 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800ca42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca46:	d811      	bhi.n	800ca6c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800ca48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca4c:	d013      	beq.n	800ca76 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800ca4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca52:	d80b      	bhi.n	800ca6c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d010      	beq.n	800ca7a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800ca58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca5c:	d106      	bne.n	800ca6c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca5e:	4b33      	ldr	r3, [pc, #204]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0xe3c>)
 800ca60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca62:	4a32      	ldr	r2, [pc, #200]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0xe3c>)
 800ca64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ca68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800ca6a:	e007      	b.n	800ca7c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	75fb      	strb	r3, [r7, #23]
      break;
 800ca70:	e004      	b.n	800ca7c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800ca72:	bf00      	nop
 800ca74:	e002      	b.n	800ca7c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800ca76:	bf00      	nop
 800ca78:	e000      	b.n	800ca7c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800ca7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ca7c:	7dfb      	ldrb	r3, [r7, #23]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d109      	bne.n	800ca96 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ca82:	4b2a      	ldr	r3, [pc, #168]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0xe3c>)
 800ca84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca8e:	4927      	ldr	r1, [pc, #156]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0xe3c>)
 800ca90:	4313      	orrs	r3, r2
 800ca92:	654b      	str	r3, [r1, #84]	; 0x54
 800ca94:	e001      	b.n	800ca9a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca96:	7dfb      	ldrb	r3, [r7, #23]
 800ca98:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d008      	beq.n	800cab8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800caa6:	4b21      	ldr	r3, [pc, #132]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0xe3c>)
 800caa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800caaa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cab2:	491e      	ldr	r1, [pc, #120]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0xe3c>)
 800cab4:	4313      	orrs	r3, r2
 800cab6:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d008      	beq.n	800cad6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cac4:	4b19      	ldr	r3, [pc, #100]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0xe3c>)
 800cac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cac8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cad0:	4916      	ldr	r1, [pc, #88]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0xe3c>)
 800cad2:	4313      	orrs	r3, r2
 800cad4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d00d      	beq.n	800cafe <HAL_RCCEx_PeriphCLKConfig+0xe0e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cae2:	4b12      	ldr	r3, [pc, #72]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0xe3c>)
 800cae4:	691b      	ldr	r3, [r3, #16]
 800cae6:	4a11      	ldr	r2, [pc, #68]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0xe3c>)
 800cae8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800caec:	6113      	str	r3, [r2, #16]
 800caee:	4b0f      	ldr	r3, [pc, #60]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0xe3c>)
 800caf0:	691a      	ldr	r2, [r3, #16]
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800caf8:	490c      	ldr	r1, [pc, #48]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0xe3c>)
 800cafa:	4313      	orrs	r3, r2
 800cafc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	da08      	bge.n	800cb18 <HAL_RCCEx_PeriphCLKConfig+0xe28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800cb06:	4b09      	ldr	r3, [pc, #36]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0xe3c>)
 800cb08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb0a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb12:	4906      	ldr	r1, [pc, #24]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0xe3c>)
 800cb14:	4313      	orrs	r3, r2
 800cb16:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800cb18:	7dbb      	ldrb	r3, [r7, #22]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d101      	bne.n	800cb22 <HAL_RCCEx_PeriphCLKConfig+0xe32>
  {
    return HAL_OK;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	e000      	b.n	800cb24 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  }
  return HAL_ERROR;
 800cb22:	2301      	movs	r3, #1
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3718      	adds	r7, #24
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}
 800cb2c:	58024400 	.word	0x58024400

0800cb30 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b090      	sub	sp, #64	; 0x40
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb3e:	d14f      	bne.n	800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800cb40:	4ba0      	ldr	r3, [pc, #640]	; (800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cb42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb44:	f003 0307 	and.w	r3, r3, #7
 800cb48:	633b      	str	r3, [r7, #48]	; 0x30
 800cb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb4c:	2b04      	cmp	r3, #4
 800cb4e:	d844      	bhi.n	800cbda <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800cb50:	a201      	add	r2, pc, #4	; (adr r2, 800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800cb52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb56:	bf00      	nop
 800cb58:	0800cb6d 	.word	0x0800cb6d
 800cb5c:	0800cb7d 	.word	0x0800cb7d
 800cb60:	0800cb8d 	.word	0x0800cb8d
 800cb64:	0800cbd5 	.word	0x0800cbd5
 800cb68:	0800cb9d 	.word	0x0800cb9d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cb6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb70:	4618      	mov	r0, r3
 800cb72:	f000 fd53 	bl	800d61c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cb76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cb7a:	e28b      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb7c:	f107 0318 	add.w	r3, r7, #24
 800cb80:	4618      	mov	r0, r3
 800cb82:	f000 faa3 	bl	800d0cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cb86:	69bb      	ldr	r3, [r7, #24]
 800cb88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cb8a:	e283      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb8c:	f107 030c 	add.w	r3, r7, #12
 800cb90:	4618      	mov	r0, r3
 800cb92:	f000 fbef 	bl	800d374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cb9a:	e27b      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800cb9c:	4b89      	ldr	r3, [pc, #548]	; (800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cb9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cba0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cba4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800cba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d102      	bne.n	800cbb2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800cbac:	4b86      	ldr	r3, [pc, #536]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cbae:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800cbb0:	e270      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800cbb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cbb8:	d102      	bne.n	800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800cbba:	4b84      	ldr	r3, [pc, #528]	; (800cdcc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800cbbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cbbe:	e269      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800cbc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbc6:	d102      	bne.n	800cbce <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800cbc8:	4b81      	ldr	r3, [pc, #516]	; (800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800cbca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cbcc:	e262      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
            frequency = 0;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cbd2:	e25f      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800cbd4:	4b7f      	ldr	r3, [pc, #508]	; (800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800cbd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cbd8:	e25c      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      default :
        {
          frequency = 0;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cbde:	e259      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbe6:	d159      	bne.n	800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800cbe8:	4b76      	ldr	r3, [pc, #472]	; (800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cbea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbec:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800cbf0:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800cbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbf8:	d02e      	beq.n	800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 800cbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc00:	d849      	bhi.n	800cc96 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800cc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc04:	2bc0      	cmp	r3, #192	; 0xc0
 800cc06:	d043      	beq.n	800cc90 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800cc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc0a:	2bc0      	cmp	r3, #192	; 0xc0
 800cc0c:	d843      	bhi.n	800cc96 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800cc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc10:	2b80      	cmp	r3, #128	; 0x80
 800cc12:	d019      	beq.n	800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 800cc14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc16:	2b80      	cmp	r3, #128	; 0x80
 800cc18:	d83d      	bhi.n	800cc96 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800cc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d003      	beq.n	800cc28 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
 800cc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc22:	2b40      	cmp	r3, #64	; 0x40
 800cc24:	d008      	beq.n	800cc38 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800cc26:	e036      	b.n	800cc96 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f000 fcf5 	bl	800d61c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cc32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cc36:	e22d      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc38:	f107 0318 	add.w	r3, r7, #24
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f000 fa45 	bl	800d0cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cc42:	69bb      	ldr	r3, [r7, #24]
 800cc44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cc46:	e225      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc48:	f107 030c 	add.w	r3, r7, #12
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f000 fb91 	bl	800d374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cc56:	e21d      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800cc58:	4b5a      	ldr	r3, [pc, #360]	; (800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cc5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cc60:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800cc62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d102      	bne.n	800cc6e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800cc68:	4b57      	ldr	r3, [pc, #348]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cc6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800cc6c:	e212      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800cc6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc74:	d102      	bne.n	800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
            frequency = CSI_VALUE;
 800cc76:	4b55      	ldr	r3, [pc, #340]	; (800cdcc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800cc78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cc7a:	e20b      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800cc7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc82:	d102      	bne.n	800cc8a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
            frequency = HSE_VALUE;
 800cc84:	4b52      	ldr	r3, [pc, #328]	; (800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800cc86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cc88:	e204      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
            frequency = 0;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cc8e:	e201      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800cc90:	4b50      	ldr	r3, [pc, #320]	; (800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800cc92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cc94:	e1fe      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      default :
        {
          frequency = 0;
 800cc96:	2300      	movs	r3, #0
 800cc98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cc9a:	e1fb      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cca2:	d15e      	bne.n	800cd62 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800cca4:	4b47      	ldr	r3, [pc, #284]	; (800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cca8:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800ccac:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800ccae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ccb4:	d033      	beq.n	800cd1e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
 800ccb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ccbc:	d84e      	bhi.n	800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800ccbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ccc4:	d047      	beq.n	800cd56 <HAL_RCCEx_GetPeriphCLKFreq+0x226>
 800ccc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cccc:	d846      	bhi.n	800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800ccce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ccd4:	d01b      	beq.n	800cd0e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 800ccd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ccdc:	d83e      	bhi.n	800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800ccde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d004      	beq.n	800ccee <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800cce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ccea:	d008      	beq.n	800ccfe <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800ccec:	e036      	b.n	800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ccee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f000 fc92 	bl	800d61c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ccf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ccfc:	e1ca      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccfe:	f107 0318 	add.w	r3, r7, #24
 800cd02:	4618      	mov	r0, r3
 800cd04:	f000 f9e2 	bl	800d0cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cd08:	69bb      	ldr	r3, [r7, #24]
 800cd0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cd0c:	e1c2      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd0e:	f107 030c 	add.w	r3, r7, #12
 800cd12:	4618      	mov	r0, r3
 800cd14:	f000 fb2e 	bl	800d374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cd1c:	e1ba      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800cd1e:	4b29      	ldr	r3, [pc, #164]	; (800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cd20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cd26:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800cd28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d102      	bne.n	800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800cd2e:	4b26      	ldr	r3, [pc, #152]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cd30:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800cd32:	e1af      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800cd34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd3a:	d102      	bne.n	800cd42 <HAL_RCCEx_GetPeriphCLKFreq+0x212>
            frequency = CSI_VALUE;
 800cd3c:	4b23      	ldr	r3, [pc, #140]	; (800cdcc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800cd3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cd40:	e1a8      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800cd42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd48:	d102      	bne.n	800cd50 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
            frequency = HSE_VALUE;
 800cd4a:	4b21      	ldr	r3, [pc, #132]	; (800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800cd4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cd4e:	e1a1      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
            frequency = 0;
 800cd50:	2300      	movs	r3, #0
 800cd52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cd54:	e19e      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800cd56:	4b1f      	ldr	r3, [pc, #124]	; (800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800cd58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cd5a:	e19b      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      default :
        {
          frequency = 0;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cd60:	e198      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd68:	d168      	bne.n	800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800cd6a:	4b16      	ldr	r3, [pc, #88]	; (800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cd6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd6e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800cd72:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800cd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cd7a:	d03d      	beq.n	800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 800cd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cd82:	d858      	bhi.n	800ce36 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800cd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd86:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cd8a:	d051      	beq.n	800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 800cd8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cd92:	d850      	bhi.n	800ce36 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800cd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cd9a:	d025      	beq.n	800cde8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 800cd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cda2:	d848      	bhi.n	800ce36 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800cda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d004      	beq.n	800cdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
 800cdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cdb0:	d012      	beq.n	800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
 800cdb2:	e040      	b.n	800ce36 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cdb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f000 fc2f 	bl	800d61c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cdbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cdc2:	e167      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 800cdc4:	58024400 	.word	0x58024400
 800cdc8:	03d09000 	.word	0x03d09000
 800cdcc:	003d0900 	.word	0x003d0900
 800cdd0:	00f42400 	.word	0x00f42400
 800cdd4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cdd8:	f107 0318 	add.w	r3, r7, #24
 800cddc:	4618      	mov	r0, r3
 800cdde:	f000 f975 	bl	800d0cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cde2:	69bb      	ldr	r3, [r7, #24]
 800cde4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cde6:	e155      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cde8:	f107 030c 	add.w	r3, r7, #12
 800cdec:	4618      	mov	r0, r3
 800cdee:	f000 fac1 	bl	800d374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cdf6:	e14d      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800cdf8:	4ba0      	ldr	r3, [pc, #640]	; (800d07c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800cdfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cdfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ce00:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800ce02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d102      	bne.n	800ce0e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800ce08:	4b9d      	ldr	r3, [pc, #628]	; (800d080 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 800ce0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800ce0c:	e142      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800ce0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce14:	d102      	bne.n	800ce1c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
            frequency = CSI_VALUE;
 800ce16:	4b9b      	ldr	r3, [pc, #620]	; (800d084 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800ce18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ce1a:	e13b      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800ce1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce22:	d102      	bne.n	800ce2a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
            frequency = HSE_VALUE;
 800ce24:	4b98      	ldr	r3, [pc, #608]	; (800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800ce26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ce28:	e134      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
            frequency = 0;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ce2e:	e131      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ce30:	4b96      	ldr	r3, [pc, #600]	; (800d08c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 800ce32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ce34:	e12e      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      default :
        {
          frequency = 0;
 800ce36:	2300      	movs	r3, #0
 800ce38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ce3a:	e12b      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce42:	d15e      	bne.n	800cf02 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800ce44:	4b8d      	ldr	r3, [pc, #564]	; (800d07c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800ce46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce48:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ce4c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ce4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ce54:	d033      	beq.n	800cebe <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800ce56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ce5c:	d84e      	bhi.n	800cefc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800ce5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ce64:	d047      	beq.n	800cef6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 800ce66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ce6c:	d846      	bhi.n	800cefc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800ce6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce74:	d01b      	beq.n	800ceae <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 800ce76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce7c:	d83e      	bhi.n	800cefc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800ce7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d004      	beq.n	800ce8e <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 800ce84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce8a:	d008      	beq.n	800ce9e <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 800ce8c:	e036      	b.n	800cefc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce92:	4618      	mov	r0, r3
 800ce94:	f000 fbc2 	bl	800d61c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ce98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ce9c:	e0fa      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce9e:	f107 0318 	add.w	r3, r7, #24
 800cea2:	4618      	mov	r0, r3
 800cea4:	f000 f912 	bl	800d0cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cea8:	69bb      	ldr	r3, [r7, #24]
 800ceaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ceac:	e0f2      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ceae:	f107 030c 	add.w	r3, r7, #12
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f000 fa5e 	bl	800d374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cebc:	e0ea      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800cebe:	4b6f      	ldr	r3, [pc, #444]	; (800d07c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800cec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cec2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cec6:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800cec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d102      	bne.n	800ced4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800cece:	4b6c      	ldr	r3, [pc, #432]	; (800d080 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 800ced0:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800ced2:	e0df      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800ced4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ced6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ceda:	d102      	bne.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
            frequency = CSI_VALUE;
 800cedc:	4b69      	ldr	r3, [pc, #420]	; (800d084 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800cede:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cee0:	e0d8      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800cee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cee8:	d102      	bne.n	800cef0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
            frequency = HSE_VALUE;
 800ceea:	4b67      	ldr	r3, [pc, #412]	; (800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800ceec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ceee:	e0d1      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
            frequency = 0;
 800cef0:	2300      	movs	r3, #0
 800cef2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cef4:	e0ce      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800cef6:	4b65      	ldr	r3, [pc, #404]	; (800d08c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 800cef8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cefa:	e0cb      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      default :
        {
          frequency = 0;
 800cefc:	2300      	movs	r3, #0
 800cefe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cf00:	e0c8      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800cf08:	d143      	bne.n	800cf92 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800cf0a:	4b5c      	ldr	r3, [pc, #368]	; (800d07c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800cf0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cf12:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800cf14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf1a:	d01b      	beq.n	800cf54 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 800cf1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf22:	d833      	bhi.n	800cf8c <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
 800cf24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d004      	beq.n	800cf34 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 800cf2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf30:	d008      	beq.n	800cf44 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800cf32:	e02b      	b.n	800cf8c <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf34:	f107 0318 	add.w	r3, r7, #24
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f000 f8c7 	bl	800d0cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cf3e:	69bb      	ldr	r3, [r7, #24]
 800cf40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cf42:	e0a7      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf44:	f107 030c 	add.w	r3, r7, #12
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f000 fa13 	bl	800d374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cf52:	e09f      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800cf54:	4b49      	ldr	r3, [pc, #292]	; (800d07c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800cf56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cf5c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800cf5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d102      	bne.n	800cf6a <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800cf64:	4b46      	ldr	r3, [pc, #280]	; (800d080 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 800cf66:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800cf68:	e094      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800cf6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cf70:	d102      	bne.n	800cf78 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
            frequency = CSI_VALUE;
 800cf72:	4b44      	ldr	r3, [pc, #272]	; (800d084 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800cf74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cf76:	e08d      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800cf78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf7e:	d102      	bne.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            frequency = HSE_VALUE;
 800cf80:	4b41      	ldr	r3, [pc, #260]	; (800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800cf82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cf84:	e086      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
            frequency = 0;
 800cf86:	2300      	movs	r3, #0
 800cf88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cf8a:	e083      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      default :
        {
          frequency = 0;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cf90:	e080      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf98:	d11f      	bne.n	800cfda <HAL_RCCEx_GetPeriphCLKFreq+0x4aa>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800cf9a:	4b38      	ldr	r3, [pc, #224]	; (800d07c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800cf9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cfa2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800cfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d004      	beq.n	800cfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800cfaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfb0:	d008      	beq.n	800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
 800cfb2:	e00f      	b.n	800cfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cfb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f000 fb2f 	bl	800d61c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cfbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cfc2:	e067      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfc4:	f107 0318 	add.w	r3, r7, #24
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f000 f87f 	bl	800d0cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cfce:	6a3b      	ldr	r3, [r7, #32]
 800cfd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cfd2:	e05f      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }

      default :
        {
          frequency = 0;
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cfd8:	e05c      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cfe0:	d156      	bne.n	800d090 <HAL_RCCEx_GetPeriphCLKFreq+0x560>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800cfe2:	4b26      	ldr	r3, [pc, #152]	; (800d07c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800cfe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfe6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cfea:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800cfec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cff2:	d03d      	beq.n	800d070 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 800cff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cffa:	d83c      	bhi.n	800d076 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 800cffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d002:	d032      	beq.n	800d06a <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
 800d004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d00a:	d834      	bhi.n	800d076 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 800d00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d00e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d012:	d027      	beq.n	800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
 800d014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d016:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d01a:	d82c      	bhi.n	800d076 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 800d01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d01e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d022:	d017      	beq.n	800d054 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 800d024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d026:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d02a:	d824      	bhi.n	800d076 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 800d02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d004      	beq.n	800d03c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 800d032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d034:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d038:	d004      	beq.n	800d044 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
 800d03a:	e01c      	b.n	800d076 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d03c:	f000 f830 	bl	800d0a0 <HAL_RCCEx_GetD3PCLK1Freq>
 800d040:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800d042:	e027      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d044:	f107 0318 	add.w	r3, r7, #24
 800d048:	4618      	mov	r0, r3
 800d04a:	f000 f83f 	bl	800d0cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d04e:	69fb      	ldr	r3, [r7, #28]
 800d050:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d052:	e01f      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d054:	f107 030c 	add.w	r3, r7, #12
 800d058:	4618      	mov	r0, r3
 800d05a:	f000 f98b 	bl	800d374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d05e:	693b      	ldr	r3, [r7, #16]
 800d060:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d062:	e017      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800d064:	4b06      	ldr	r3, [pc, #24]	; (800d080 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 800d066:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d068:	e014      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800d06a:	4b06      	ldr	r3, [pc, #24]	; (800d084 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800d06c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d06e:	e011      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800d070:	4b05      	ldr	r3, [pc, #20]	; (800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800d072:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d074:	e00e      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800d076:	2300      	movs	r3, #0
 800d078:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d07a:	e00b      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 800d07c:	58024400 	.word	0x58024400
 800d080:	03d09000 	.word	0x03d09000
 800d084:	003d0900 	.word	0x003d0900
 800d088:	00f42400 	.word	0x00f42400
 800d08c:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else
    {
      frequency = 0;
 800d090:	2300      	movs	r3, #0
 800d092:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800d094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d096:	4618      	mov	r0, r3
 800d098:	3740      	adds	r7, #64	; 0x40
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}
 800d09e:	bf00      	nop

0800d0a0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d0a4:	f7fe fdc8 	bl	800bc38 <HAL_RCC_GetHCLKFreq>
 800d0a8:	4602      	mov	r2, r0
 800d0aa:	4b06      	ldr	r3, [pc, #24]	; (800d0c4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d0ac:	6a1b      	ldr	r3, [r3, #32]
 800d0ae:	091b      	lsrs	r3, r3, #4
 800d0b0:	f003 0307 	and.w	r3, r3, #7
 800d0b4:	4904      	ldr	r1, [pc, #16]	; (800d0c8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d0b6:	5ccb      	ldrb	r3, [r1, r3]
 800d0b8:	f003 031f 	and.w	r3, r3, #31
 800d0bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	bd80      	pop	{r7, pc}
 800d0c4:	58024400 	.word	0x58024400
 800d0c8:	080194e8 	.word	0x080194e8

0800d0cc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b089      	sub	sp, #36	; 0x24
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d0d4:	4ba1      	ldr	r3, [pc, #644]	; (800d35c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0d8:	f003 0303 	and.w	r3, r3, #3
 800d0dc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800d0de:	4b9f      	ldr	r3, [pc, #636]	; (800d35c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0e2:	0b1b      	lsrs	r3, r3, #12
 800d0e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d0e8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d0ea:	4b9c      	ldr	r3, [pc, #624]	; (800d35c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ee:	091b      	lsrs	r3, r3, #4
 800d0f0:	f003 0301 	and.w	r3, r3, #1
 800d0f4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800d0f6:	4b99      	ldr	r3, [pc, #612]	; (800d35c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0fa:	08db      	lsrs	r3, r3, #3
 800d0fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d100:	693a      	ldr	r2, [r7, #16]
 800d102:	fb02 f303 	mul.w	r3, r2, r3
 800d106:	ee07 3a90 	vmov	s15, r3
 800d10a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d10e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	2b00      	cmp	r3, #0
 800d116:	f000 8111 	beq.w	800d33c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d11a:	69bb      	ldr	r3, [r7, #24]
 800d11c:	2b02      	cmp	r3, #2
 800d11e:	f000 8083 	beq.w	800d228 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d122:	69bb      	ldr	r3, [r7, #24]
 800d124:	2b02      	cmp	r3, #2
 800d126:	f200 80a1 	bhi.w	800d26c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d12a:	69bb      	ldr	r3, [r7, #24]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d003      	beq.n	800d138 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d130:	69bb      	ldr	r3, [r7, #24]
 800d132:	2b01      	cmp	r3, #1
 800d134:	d056      	beq.n	800d1e4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d136:	e099      	b.n	800d26c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d138:	4b88      	ldr	r3, [pc, #544]	; (800d35c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f003 0320 	and.w	r3, r3, #32
 800d140:	2b00      	cmp	r3, #0
 800d142:	d02d      	beq.n	800d1a0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d144:	4b85      	ldr	r3, [pc, #532]	; (800d35c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	08db      	lsrs	r3, r3, #3
 800d14a:	f003 0303 	and.w	r3, r3, #3
 800d14e:	4a84      	ldr	r2, [pc, #528]	; (800d360 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d150:	fa22 f303 	lsr.w	r3, r2, r3
 800d154:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	ee07 3a90 	vmov	s15, r3
 800d15c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	ee07 3a90 	vmov	s15, r3
 800d166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d16a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d16e:	4b7b      	ldr	r3, [pc, #492]	; (800d35c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d176:	ee07 3a90 	vmov	s15, r3
 800d17a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d17e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d182:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d364 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d18a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d18e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d19a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d19e:	e087      	b.n	800d2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	ee07 3a90 	vmov	s15, r3
 800d1a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d368 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d1ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1b2:	4b6a      	ldr	r3, [pc, #424]	; (800d35c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1ba:	ee07 3a90 	vmov	s15, r3
 800d1be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d364 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d1ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d1e2:	e065      	b.n	800d2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	ee07 3a90 	vmov	s15, r3
 800d1ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d36c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d1f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1f6:	4b59      	ldr	r3, [pc, #356]	; (800d35c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1fe:	ee07 3a90 	vmov	s15, r3
 800d202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d206:	ed97 6a03 	vldr	s12, [r7, #12]
 800d20a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d364 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d20e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d216:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d21a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d21e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d222:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d226:	e043      	b.n	800d2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	ee07 3a90 	vmov	s15, r3
 800d22e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d232:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d370 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d23a:	4b48      	ldr	r3, [pc, #288]	; (800d35c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d23e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d242:	ee07 3a90 	vmov	s15, r3
 800d246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d24a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d24e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d364 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d25a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d25e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d262:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d266:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d26a:	e021      	b.n	800d2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	ee07 3a90 	vmov	s15, r3
 800d272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d276:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d36c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d27a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d27e:	4b37      	ldr	r3, [pc, #220]	; (800d35c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d286:	ee07 3a90 	vmov	s15, r3
 800d28a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d28e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d292:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d364 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d29a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d29e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d2ae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800d2b0:	4b2a      	ldr	r3, [pc, #168]	; (800d35c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2b4:	0a5b      	lsrs	r3, r3, #9
 800d2b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2ba:	ee07 3a90 	vmov	s15, r3
 800d2be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d2c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d2ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800d2ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d2d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2d6:	ee17 2a90 	vmov	r2, s15
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800d2de:	4b1f      	ldr	r3, [pc, #124]	; (800d35c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2e2:	0c1b      	lsrs	r3, r3, #16
 800d2e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2e8:	ee07 3a90 	vmov	s15, r3
 800d2ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d2f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d2f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d2fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d304:	ee17 2a90 	vmov	r2, s15
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800d30c:	4b13      	ldr	r3, [pc, #76]	; (800d35c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d30e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d310:	0e1b      	lsrs	r3, r3, #24
 800d312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d316:	ee07 3a90 	vmov	s15, r3
 800d31a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d31e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d322:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d326:	edd7 6a07 	vldr	s13, [r7, #28]
 800d32a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d32e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d332:	ee17 2a90 	vmov	r2, s15
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d33a:	e008      	b.n	800d34e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2200      	movs	r2, #0
 800d340:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2200      	movs	r2, #0
 800d346:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2200      	movs	r2, #0
 800d34c:	609a      	str	r2, [r3, #8]
}
 800d34e:	bf00      	nop
 800d350:	3724      	adds	r7, #36	; 0x24
 800d352:	46bd      	mov	sp, r7
 800d354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d358:	4770      	bx	lr
 800d35a:	bf00      	nop
 800d35c:	58024400 	.word	0x58024400
 800d360:	03d09000 	.word	0x03d09000
 800d364:	46000000 	.word	0x46000000
 800d368:	4c742400 	.word	0x4c742400
 800d36c:	4a742400 	.word	0x4a742400
 800d370:	4b742400 	.word	0x4b742400

0800d374 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800d374:	b480      	push	{r7}
 800d376:	b089      	sub	sp, #36	; 0x24
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d37c:	4ba1      	ldr	r3, [pc, #644]	; (800d604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d37e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d380:	f003 0303 	and.w	r3, r3, #3
 800d384:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800d386:	4b9f      	ldr	r3, [pc, #636]	; (800d604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d38a:	0d1b      	lsrs	r3, r3, #20
 800d38c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d390:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d392:	4b9c      	ldr	r3, [pc, #624]	; (800d604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d396:	0a1b      	lsrs	r3, r3, #8
 800d398:	f003 0301 	and.w	r3, r3, #1
 800d39c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800d39e:	4b99      	ldr	r3, [pc, #612]	; (800d604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3a2:	08db      	lsrs	r3, r3, #3
 800d3a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d3a8:	693a      	ldr	r2, [r7, #16]
 800d3aa:	fb02 f303 	mul.w	r3, r2, r3
 800d3ae:	ee07 3a90 	vmov	s15, r3
 800d3b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d3ba:	697b      	ldr	r3, [r7, #20]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	f000 8111 	beq.w	800d5e4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d3c2:	69bb      	ldr	r3, [r7, #24]
 800d3c4:	2b02      	cmp	r3, #2
 800d3c6:	f000 8083 	beq.w	800d4d0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d3ca:	69bb      	ldr	r3, [r7, #24]
 800d3cc:	2b02      	cmp	r3, #2
 800d3ce:	f200 80a1 	bhi.w	800d514 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d3d2:	69bb      	ldr	r3, [r7, #24]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d003      	beq.n	800d3e0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d3d8:	69bb      	ldr	r3, [r7, #24]
 800d3da:	2b01      	cmp	r3, #1
 800d3dc:	d056      	beq.n	800d48c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d3de:	e099      	b.n	800d514 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d3e0:	4b88      	ldr	r3, [pc, #544]	; (800d604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f003 0320 	and.w	r3, r3, #32
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d02d      	beq.n	800d448 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d3ec:	4b85      	ldr	r3, [pc, #532]	; (800d604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	08db      	lsrs	r3, r3, #3
 800d3f2:	f003 0303 	and.w	r3, r3, #3
 800d3f6:	4a84      	ldr	r2, [pc, #528]	; (800d608 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d3f8:	fa22 f303 	lsr.w	r3, r2, r3
 800d3fc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	ee07 3a90 	vmov	s15, r3
 800d404:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	ee07 3a90 	vmov	s15, r3
 800d40e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d416:	4b7b      	ldr	r3, [pc, #492]	; (800d604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d41a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d41e:	ee07 3a90 	vmov	s15, r3
 800d422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d426:	ed97 6a03 	vldr	s12, [r7, #12]
 800d42a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d60c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d42e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d43a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d43e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d442:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d446:	e087      	b.n	800d558 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	ee07 3a90 	vmov	s15, r3
 800d44e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d452:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d610 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d45a:	4b6a      	ldr	r3, [pc, #424]	; (800d604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d45c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d45e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d462:	ee07 3a90 	vmov	s15, r3
 800d466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d46a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d46e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d60c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d47a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d47e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d482:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d486:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d48a:	e065      	b.n	800d558 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	ee07 3a90 	vmov	s15, r3
 800d492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d496:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d614 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d49a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d49e:	4b59      	ldr	r3, [pc, #356]	; (800d604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4a6:	ee07 3a90 	vmov	s15, r3
 800d4aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d60c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d4b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d4ce:	e043      	b.n	800d558 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	ee07 3a90 	vmov	s15, r3
 800d4d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d618 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d4de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4e2:	4b48      	ldr	r3, [pc, #288]	; (800d604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4ea:	ee07 3a90 	vmov	s15, r3
 800d4ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d60c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d4fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d502:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d50a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d50e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d512:	e021      	b.n	800d558 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	ee07 3a90 	vmov	s15, r3
 800d51a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d51e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d614 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d526:	4b37      	ldr	r3, [pc, #220]	; (800d604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d52a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d52e:	ee07 3a90 	vmov	s15, r3
 800d532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d536:	ed97 6a03 	vldr	s12, [r7, #12]
 800d53a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d60c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d53e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d54a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d54e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d552:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d556:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800d558:	4b2a      	ldr	r3, [pc, #168]	; (800d604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d55a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d55c:	0a5b      	lsrs	r3, r3, #9
 800d55e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d562:	ee07 3a90 	vmov	s15, r3
 800d566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d56a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d56e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d572:	edd7 6a07 	vldr	s13, [r7, #28]
 800d576:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d57a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d57e:	ee17 2a90 	vmov	r2, s15
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800d586:	4b1f      	ldr	r3, [pc, #124]	; (800d604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d58a:	0c1b      	lsrs	r3, r3, #16
 800d58c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d590:	ee07 3a90 	vmov	s15, r3
 800d594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d598:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d59c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d5a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d5a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d5a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5ac:	ee17 2a90 	vmov	r2, s15
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800d5b4:	4b13      	ldr	r3, [pc, #76]	; (800d604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5b8:	0e1b      	lsrs	r3, r3, #24
 800d5ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5be:	ee07 3a90 	vmov	s15, r3
 800d5c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d5ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d5ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800d5d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d5d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5da:	ee17 2a90 	vmov	r2, s15
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d5e2:	e008      	b.n	800d5f6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	609a      	str	r2, [r3, #8]
}
 800d5f6:	bf00      	nop
 800d5f8:	3724      	adds	r7, #36	; 0x24
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d600:	4770      	bx	lr
 800d602:	bf00      	nop
 800d604:	58024400 	.word	0x58024400
 800d608:	03d09000 	.word	0x03d09000
 800d60c:	46000000 	.word	0x46000000
 800d610:	4c742400 	.word	0x4c742400
 800d614:	4a742400 	.word	0x4a742400
 800d618:	4b742400 	.word	0x4b742400

0800d61c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800d61c:	b480      	push	{r7}
 800d61e:	b089      	sub	sp, #36	; 0x24
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d624:	4ba0      	ldr	r3, [pc, #640]	; (800d8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d628:	f003 0303 	and.w	r3, r3, #3
 800d62c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800d62e:	4b9e      	ldr	r3, [pc, #632]	; (800d8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d632:	091b      	lsrs	r3, r3, #4
 800d634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d638:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d63a:	4b9b      	ldr	r3, [pc, #620]	; (800d8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d63e:	f003 0301 	and.w	r3, r3, #1
 800d642:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800d644:	4b98      	ldr	r3, [pc, #608]	; (800d8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d648:	08db      	lsrs	r3, r3, #3
 800d64a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d64e:	693a      	ldr	r2, [r7, #16]
 800d650:	fb02 f303 	mul.w	r3, r2, r3
 800d654:	ee07 3a90 	vmov	s15, r3
 800d658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d65c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	2b00      	cmp	r3, #0
 800d664:	f000 8111 	beq.w	800d88a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d668:	69bb      	ldr	r3, [r7, #24]
 800d66a:	2b02      	cmp	r3, #2
 800d66c:	f000 8083 	beq.w	800d776 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d670:	69bb      	ldr	r3, [r7, #24]
 800d672:	2b02      	cmp	r3, #2
 800d674:	f200 80a1 	bhi.w	800d7ba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d678:	69bb      	ldr	r3, [r7, #24]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d003      	beq.n	800d686 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d67e:	69bb      	ldr	r3, [r7, #24]
 800d680:	2b01      	cmp	r3, #1
 800d682:	d056      	beq.n	800d732 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d684:	e099      	b.n	800d7ba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d686:	4b88      	ldr	r3, [pc, #544]	; (800d8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f003 0320 	and.w	r3, r3, #32
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d02d      	beq.n	800d6ee <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d692:	4b85      	ldr	r3, [pc, #532]	; (800d8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	08db      	lsrs	r3, r3, #3
 800d698:	f003 0303 	and.w	r3, r3, #3
 800d69c:	4a83      	ldr	r2, [pc, #524]	; (800d8ac <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d69e:	fa22 f303 	lsr.w	r3, r2, r3
 800d6a2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	ee07 3a90 	vmov	s15, r3
 800d6aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	ee07 3a90 	vmov	s15, r3
 800d6b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6bc:	4b7a      	ldr	r3, [pc, #488]	; (800d8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6c4:	ee07 3a90 	vmov	s15, r3
 800d6c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6d0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d8b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d6d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6e8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d6ec:	e087      	b.n	800d7fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	ee07 3a90 	vmov	s15, r3
 800d6f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6f8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d8b4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d6fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d700:	4b69      	ldr	r3, [pc, #420]	; (800d8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d708:	ee07 3a90 	vmov	s15, r3
 800d70c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d710:	ed97 6a03 	vldr	s12, [r7, #12]
 800d714:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d8b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d718:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d71c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d720:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d724:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d72c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d730:	e065      	b.n	800d7fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d732:	697b      	ldr	r3, [r7, #20]
 800d734:	ee07 3a90 	vmov	s15, r3
 800d738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d73c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d8b8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d740:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d744:	4b58      	ldr	r3, [pc, #352]	; (800d8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d74c:	ee07 3a90 	vmov	s15, r3
 800d750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d754:	ed97 6a03 	vldr	s12, [r7, #12]
 800d758:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d8b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d75c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d760:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d764:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d768:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d76c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d770:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d774:	e043      	b.n	800d7fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	ee07 3a90 	vmov	s15, r3
 800d77c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d780:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d8bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d784:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d788:	4b47      	ldr	r3, [pc, #284]	; (800d8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d78a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d78c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d790:	ee07 3a90 	vmov	s15, r3
 800d794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d798:	ed97 6a03 	vldr	s12, [r7, #12]
 800d79c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d8b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d7a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d7ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d7b8:	e021      	b.n	800d7fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	ee07 3a90 	vmov	s15, r3
 800d7c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7c4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800d8b8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d7c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7cc:	4b36      	ldr	r3, [pc, #216]	; (800d8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d7ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7d4:	ee07 3a90 	vmov	s15, r3
 800d7d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800d7e0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d8b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d7e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d7f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d7fc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800d7fe:	4b2a      	ldr	r3, [pc, #168]	; (800d8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d802:	0a5b      	lsrs	r3, r3, #9
 800d804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d808:	ee07 3a90 	vmov	s15, r3
 800d80c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d810:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d814:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d818:	edd7 6a07 	vldr	s13, [r7, #28]
 800d81c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d824:	ee17 2a90 	vmov	r2, s15
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800d82c:	4b1e      	ldr	r3, [pc, #120]	; (800d8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d82e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d830:	0c1b      	lsrs	r3, r3, #16
 800d832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d836:	ee07 3a90 	vmov	s15, r3
 800d83a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d83e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d842:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d846:	edd7 6a07 	vldr	s13, [r7, #28]
 800d84a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d84e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d852:	ee17 2a90 	vmov	r2, s15
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800d85a:	4b13      	ldr	r3, [pc, #76]	; (800d8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d85c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d85e:	0e1b      	lsrs	r3, r3, #24
 800d860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d864:	ee07 3a90 	vmov	s15, r3
 800d868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d86c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d870:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d874:	edd7 6a07 	vldr	s13, [r7, #28]
 800d878:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d87c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d880:	ee17 2a90 	vmov	r2, s15
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d888:	e008      	b.n	800d89c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2200      	movs	r2, #0
 800d88e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2200      	movs	r2, #0
 800d894:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2200      	movs	r2, #0
 800d89a:	609a      	str	r2, [r3, #8]
}
 800d89c:	bf00      	nop
 800d89e:	3724      	adds	r7, #36	; 0x24
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a6:	4770      	bx	lr
 800d8a8:	58024400 	.word	0x58024400
 800d8ac:	03d09000 	.word	0x03d09000
 800d8b0:	46000000 	.word	0x46000000
 800d8b4:	4c742400 	.word	0x4c742400
 800d8b8:	4a742400 	.word	0x4a742400
 800d8bc:	4b742400 	.word	0x4b742400

0800d8c0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b084      	sub	sp, #16
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d8ce:	4b53      	ldr	r3, [pc, #332]	; (800da1c <RCCEx_PLL2_Config+0x15c>)
 800d8d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8d2:	f003 0303 	and.w	r3, r3, #3
 800d8d6:	2b03      	cmp	r3, #3
 800d8d8:	d101      	bne.n	800d8de <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d8da:	2301      	movs	r3, #1
 800d8dc:	e099      	b.n	800da12 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d8de:	4b4f      	ldr	r3, [pc, #316]	; (800da1c <RCCEx_PLL2_Config+0x15c>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	4a4e      	ldr	r2, [pc, #312]	; (800da1c <RCCEx_PLL2_Config+0x15c>)
 800d8e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d8e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d8ea:	f7f8 faa3 	bl	8005e34 <HAL_GetTick>
 800d8ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d8f0:	e008      	b.n	800d904 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d8f2:	f7f8 fa9f 	bl	8005e34 <HAL_GetTick>
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	1ad3      	subs	r3, r2, r3
 800d8fc:	2b02      	cmp	r3, #2
 800d8fe:	d901      	bls.n	800d904 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d900:	2303      	movs	r3, #3
 800d902:	e086      	b.n	800da12 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d904:	4b45      	ldr	r3, [pc, #276]	; (800da1c <RCCEx_PLL2_Config+0x15c>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d1f0      	bne.n	800d8f2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d910:	4b42      	ldr	r3, [pc, #264]	; (800da1c <RCCEx_PLL2_Config+0x15c>)
 800d912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d914:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	031b      	lsls	r3, r3, #12
 800d91e:	493f      	ldr	r1, [pc, #252]	; (800da1c <RCCEx_PLL2_Config+0x15c>)
 800d920:	4313      	orrs	r3, r2
 800d922:	628b      	str	r3, [r1, #40]	; 0x28
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	685b      	ldr	r3, [r3, #4]
 800d928:	3b01      	subs	r3, #1
 800d92a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	689b      	ldr	r3, [r3, #8]
 800d932:	3b01      	subs	r3, #1
 800d934:	025b      	lsls	r3, r3, #9
 800d936:	b29b      	uxth	r3, r3
 800d938:	431a      	orrs	r2, r3
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	68db      	ldr	r3, [r3, #12]
 800d93e:	3b01      	subs	r3, #1
 800d940:	041b      	lsls	r3, r3, #16
 800d942:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d946:	431a      	orrs	r2, r3
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	691b      	ldr	r3, [r3, #16]
 800d94c:	3b01      	subs	r3, #1
 800d94e:	061b      	lsls	r3, r3, #24
 800d950:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d954:	4931      	ldr	r1, [pc, #196]	; (800da1c <RCCEx_PLL2_Config+0x15c>)
 800d956:	4313      	orrs	r3, r2
 800d958:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d95a:	4b30      	ldr	r3, [pc, #192]	; (800da1c <RCCEx_PLL2_Config+0x15c>)
 800d95c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d95e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	695b      	ldr	r3, [r3, #20]
 800d966:	492d      	ldr	r1, [pc, #180]	; (800da1c <RCCEx_PLL2_Config+0x15c>)
 800d968:	4313      	orrs	r3, r2
 800d96a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d96c:	4b2b      	ldr	r3, [pc, #172]	; (800da1c <RCCEx_PLL2_Config+0x15c>)
 800d96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d970:	f023 0220 	bic.w	r2, r3, #32
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	699b      	ldr	r3, [r3, #24]
 800d978:	4928      	ldr	r1, [pc, #160]	; (800da1c <RCCEx_PLL2_Config+0x15c>)
 800d97a:	4313      	orrs	r3, r2
 800d97c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d97e:	4b27      	ldr	r3, [pc, #156]	; (800da1c <RCCEx_PLL2_Config+0x15c>)
 800d980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d982:	4a26      	ldr	r2, [pc, #152]	; (800da1c <RCCEx_PLL2_Config+0x15c>)
 800d984:	f023 0310 	bic.w	r3, r3, #16
 800d988:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d98a:	4b24      	ldr	r3, [pc, #144]	; (800da1c <RCCEx_PLL2_Config+0x15c>)
 800d98c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d98e:	4b24      	ldr	r3, [pc, #144]	; (800da20 <RCCEx_PLL2_Config+0x160>)
 800d990:	4013      	ands	r3, r2
 800d992:	687a      	ldr	r2, [r7, #4]
 800d994:	69d2      	ldr	r2, [r2, #28]
 800d996:	00d2      	lsls	r2, r2, #3
 800d998:	4920      	ldr	r1, [pc, #128]	; (800da1c <RCCEx_PLL2_Config+0x15c>)
 800d99a:	4313      	orrs	r3, r2
 800d99c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d99e:	4b1f      	ldr	r3, [pc, #124]	; (800da1c <RCCEx_PLL2_Config+0x15c>)
 800d9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9a2:	4a1e      	ldr	r2, [pc, #120]	; (800da1c <RCCEx_PLL2_Config+0x15c>)
 800d9a4:	f043 0310 	orr.w	r3, r3, #16
 800d9a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d106      	bne.n	800d9be <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d9b0:	4b1a      	ldr	r3, [pc, #104]	; (800da1c <RCCEx_PLL2_Config+0x15c>)
 800d9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9b4:	4a19      	ldr	r2, [pc, #100]	; (800da1c <RCCEx_PLL2_Config+0x15c>)
 800d9b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d9ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d9bc:	e00f      	b.n	800d9de <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	d106      	bne.n	800d9d2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d9c4:	4b15      	ldr	r3, [pc, #84]	; (800da1c <RCCEx_PLL2_Config+0x15c>)
 800d9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9c8:	4a14      	ldr	r2, [pc, #80]	; (800da1c <RCCEx_PLL2_Config+0x15c>)
 800d9ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d9ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d9d0:	e005      	b.n	800d9de <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d9d2:	4b12      	ldr	r3, [pc, #72]	; (800da1c <RCCEx_PLL2_Config+0x15c>)
 800d9d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9d6:	4a11      	ldr	r2, [pc, #68]	; (800da1c <RCCEx_PLL2_Config+0x15c>)
 800d9d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d9dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d9de:	4b0f      	ldr	r3, [pc, #60]	; (800da1c <RCCEx_PLL2_Config+0x15c>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	4a0e      	ldr	r2, [pc, #56]	; (800da1c <RCCEx_PLL2_Config+0x15c>)
 800d9e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d9e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d9ea:	f7f8 fa23 	bl	8005e34 <HAL_GetTick>
 800d9ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d9f0:	e008      	b.n	800da04 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d9f2:	f7f8 fa1f 	bl	8005e34 <HAL_GetTick>
 800d9f6:	4602      	mov	r2, r0
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	1ad3      	subs	r3, r2, r3
 800d9fc:	2b02      	cmp	r3, #2
 800d9fe:	d901      	bls.n	800da04 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800da00:	2303      	movs	r3, #3
 800da02:	e006      	b.n	800da12 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800da04:	4b05      	ldr	r3, [pc, #20]	; (800da1c <RCCEx_PLL2_Config+0x15c>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d0f0      	beq.n	800d9f2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800da10:	7bfb      	ldrb	r3, [r7, #15]
}
 800da12:	4618      	mov	r0, r3
 800da14:	3710      	adds	r7, #16
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}
 800da1a:	bf00      	nop
 800da1c:	58024400 	.word	0x58024400
 800da20:	ffff0007 	.word	0xffff0007

0800da24 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b084      	sub	sp, #16
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
 800da2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800da2e:	2300      	movs	r3, #0
 800da30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800da32:	4b53      	ldr	r3, [pc, #332]	; (800db80 <RCCEx_PLL3_Config+0x15c>)
 800da34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da36:	f003 0303 	and.w	r3, r3, #3
 800da3a:	2b03      	cmp	r3, #3
 800da3c:	d101      	bne.n	800da42 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800da3e:	2301      	movs	r3, #1
 800da40:	e099      	b.n	800db76 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800da42:	4b4f      	ldr	r3, [pc, #316]	; (800db80 <RCCEx_PLL3_Config+0x15c>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	4a4e      	ldr	r2, [pc, #312]	; (800db80 <RCCEx_PLL3_Config+0x15c>)
 800da48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800da4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da4e:	f7f8 f9f1 	bl	8005e34 <HAL_GetTick>
 800da52:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800da54:	e008      	b.n	800da68 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800da56:	f7f8 f9ed 	bl	8005e34 <HAL_GetTick>
 800da5a:	4602      	mov	r2, r0
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	1ad3      	subs	r3, r2, r3
 800da60:	2b02      	cmp	r3, #2
 800da62:	d901      	bls.n	800da68 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800da64:	2303      	movs	r3, #3
 800da66:	e086      	b.n	800db76 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800da68:	4b45      	ldr	r3, [pc, #276]	; (800db80 <RCCEx_PLL3_Config+0x15c>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800da70:	2b00      	cmp	r3, #0
 800da72:	d1f0      	bne.n	800da56 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800da74:	4b42      	ldr	r3, [pc, #264]	; (800db80 <RCCEx_PLL3_Config+0x15c>)
 800da76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da78:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	051b      	lsls	r3, r3, #20
 800da82:	493f      	ldr	r1, [pc, #252]	; (800db80 <RCCEx_PLL3_Config+0x15c>)
 800da84:	4313      	orrs	r3, r2
 800da86:	628b      	str	r3, [r1, #40]	; 0x28
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	685b      	ldr	r3, [r3, #4]
 800da8c:	3b01      	subs	r3, #1
 800da8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	689b      	ldr	r3, [r3, #8]
 800da96:	3b01      	subs	r3, #1
 800da98:	025b      	lsls	r3, r3, #9
 800da9a:	b29b      	uxth	r3, r3
 800da9c:	431a      	orrs	r2, r3
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	68db      	ldr	r3, [r3, #12]
 800daa2:	3b01      	subs	r3, #1
 800daa4:	041b      	lsls	r3, r3, #16
 800daa6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800daaa:	431a      	orrs	r2, r3
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	691b      	ldr	r3, [r3, #16]
 800dab0:	3b01      	subs	r3, #1
 800dab2:	061b      	lsls	r3, r3, #24
 800dab4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800dab8:	4931      	ldr	r1, [pc, #196]	; (800db80 <RCCEx_PLL3_Config+0x15c>)
 800daba:	4313      	orrs	r3, r2
 800dabc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800dabe:	4b30      	ldr	r3, [pc, #192]	; (800db80 <RCCEx_PLL3_Config+0x15c>)
 800dac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dac2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	695b      	ldr	r3, [r3, #20]
 800daca:	492d      	ldr	r1, [pc, #180]	; (800db80 <RCCEx_PLL3_Config+0x15c>)
 800dacc:	4313      	orrs	r3, r2
 800dace:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800dad0:	4b2b      	ldr	r3, [pc, #172]	; (800db80 <RCCEx_PLL3_Config+0x15c>)
 800dad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dad4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	699b      	ldr	r3, [r3, #24]
 800dadc:	4928      	ldr	r1, [pc, #160]	; (800db80 <RCCEx_PLL3_Config+0x15c>)
 800dade:	4313      	orrs	r3, r2
 800dae0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800dae2:	4b27      	ldr	r3, [pc, #156]	; (800db80 <RCCEx_PLL3_Config+0x15c>)
 800dae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dae6:	4a26      	ldr	r2, [pc, #152]	; (800db80 <RCCEx_PLL3_Config+0x15c>)
 800dae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800daec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800daee:	4b24      	ldr	r3, [pc, #144]	; (800db80 <RCCEx_PLL3_Config+0x15c>)
 800daf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800daf2:	4b24      	ldr	r3, [pc, #144]	; (800db84 <RCCEx_PLL3_Config+0x160>)
 800daf4:	4013      	ands	r3, r2
 800daf6:	687a      	ldr	r2, [r7, #4]
 800daf8:	69d2      	ldr	r2, [r2, #28]
 800dafa:	00d2      	lsls	r2, r2, #3
 800dafc:	4920      	ldr	r1, [pc, #128]	; (800db80 <RCCEx_PLL3_Config+0x15c>)
 800dafe:	4313      	orrs	r3, r2
 800db00:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800db02:	4b1f      	ldr	r3, [pc, #124]	; (800db80 <RCCEx_PLL3_Config+0x15c>)
 800db04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db06:	4a1e      	ldr	r2, [pc, #120]	; (800db80 <RCCEx_PLL3_Config+0x15c>)
 800db08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800db0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d106      	bne.n	800db22 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800db14:	4b1a      	ldr	r3, [pc, #104]	; (800db80 <RCCEx_PLL3_Config+0x15c>)
 800db16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db18:	4a19      	ldr	r2, [pc, #100]	; (800db80 <RCCEx_PLL3_Config+0x15c>)
 800db1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800db1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800db20:	e00f      	b.n	800db42 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	2b01      	cmp	r3, #1
 800db26:	d106      	bne.n	800db36 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800db28:	4b15      	ldr	r3, [pc, #84]	; (800db80 <RCCEx_PLL3_Config+0x15c>)
 800db2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db2c:	4a14      	ldr	r2, [pc, #80]	; (800db80 <RCCEx_PLL3_Config+0x15c>)
 800db2e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800db32:	62d3      	str	r3, [r2, #44]	; 0x2c
 800db34:	e005      	b.n	800db42 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800db36:	4b12      	ldr	r3, [pc, #72]	; (800db80 <RCCEx_PLL3_Config+0x15c>)
 800db38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db3a:	4a11      	ldr	r2, [pc, #68]	; (800db80 <RCCEx_PLL3_Config+0x15c>)
 800db3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800db40:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800db42:	4b0f      	ldr	r3, [pc, #60]	; (800db80 <RCCEx_PLL3_Config+0x15c>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	4a0e      	ldr	r2, [pc, #56]	; (800db80 <RCCEx_PLL3_Config+0x15c>)
 800db48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800db4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800db4e:	f7f8 f971 	bl	8005e34 <HAL_GetTick>
 800db52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800db54:	e008      	b.n	800db68 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800db56:	f7f8 f96d 	bl	8005e34 <HAL_GetTick>
 800db5a:	4602      	mov	r2, r0
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	1ad3      	subs	r3, r2, r3
 800db60:	2b02      	cmp	r3, #2
 800db62:	d901      	bls.n	800db68 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800db64:	2303      	movs	r3, #3
 800db66:	e006      	b.n	800db76 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800db68:	4b05      	ldr	r3, [pc, #20]	; (800db80 <RCCEx_PLL3_Config+0x15c>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800db70:	2b00      	cmp	r3, #0
 800db72:	d0f0      	beq.n	800db56 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800db74:	7bfb      	ldrb	r3, [r7, #15]
}
 800db76:	4618      	mov	r0, r3
 800db78:	3710      	adds	r7, #16
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
 800db7e:	bf00      	nop
 800db80:	58024400 	.word	0x58024400
 800db84:	ffff0007 	.word	0xffff0007

0800db88 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b08a      	sub	sp, #40	; 0x28
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d101      	bne.n	800db9a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800db96:	2301      	movs	r3, #1
 800db98:	e07c      	b.n	800dc94 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dba0:	b2db      	uxtb	r3, r3
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d10c      	bne.n	800dbc0 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	699b      	ldr	r3, [r3, #24]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d102      	bne.n	800dbba <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2202      	movs	r2, #2
 800dbb8:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f7f7 faa2 	bl	8005104 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2203      	movs	r2, #3
 800dbc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	f000 f867 	bl	800dc9c <HAL_SD_InitCard>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d001      	beq.n	800dbd8 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800dbd4:	2301      	movs	r3, #1
 800dbd6:	e05d      	b.n	800dc94 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800dbd8:	f107 0308 	add.w	r3, r7, #8
 800dbdc:	4619      	mov	r1, r3
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f000 faa0 	bl	800e124 <HAL_SD_GetCardStatus>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d001      	beq.n	800dbee <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800dbea:	2301      	movs	r3, #1
 800dbec:	e052      	b.n	800dc94 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800dbee:	7e3b      	ldrb	r3, [r7, #24]
 800dbf0:	b2db      	uxtb	r3, r3
 800dbf2:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800dbf4:	7e7b      	ldrb	r3, [r7, #25]
 800dbf6:	b2db      	uxtb	r3, r3
 800dbf8:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbfe:	2b01      	cmp	r3, #1
 800dc00:	d10a      	bne.n	800dc18 <HAL_SD_Init+0x90>
 800dc02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d102      	bne.n	800dc0e <HAL_SD_Init+0x86>
 800dc08:	6a3b      	ldr	r3, [r7, #32]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d004      	beq.n	800dc18 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dc14:	65da      	str	r2, [r3, #92]	; 0x5c
 800dc16:	e00b      	b.n	800dc30 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc1c:	2b01      	cmp	r3, #1
 800dc1e:	d104      	bne.n	800dc2a <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dc26:	65da      	str	r2, [r3, #92]	; 0x5c
 800dc28:	e002      	b.n	800dc30 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	68db      	ldr	r3, [r3, #12]
 800dc34:	4619      	mov	r1, r3
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f000 fb2a 	bl	800e290 <HAL_SD_ConfigWideBusOperation>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d001      	beq.n	800dc46 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800dc42:	2301      	movs	r3, #1
 800dc44:	e026      	b.n	800dc94 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800dc46:	f7f8 f8f5 	bl	8005e34 <HAL_GetTick>
 800dc4a:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800dc4c:	e011      	b.n	800dc72 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800dc4e:	f7f8 f8f1 	bl	8005e34 <HAL_GetTick>
 800dc52:	4602      	mov	r2, r0
 800dc54:	69fb      	ldr	r3, [r7, #28]
 800dc56:	1ad3      	subs	r3, r2, r3
 800dc58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc5c:	d109      	bne.n	800dc72 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dc64:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2201      	movs	r2, #1
 800dc6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800dc6e:	2303      	movs	r3, #3
 800dc70:	e010      	b.n	800dc94 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f000 fbb6 	bl	800e3e4 <HAL_SD_GetCardState>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	2b04      	cmp	r3, #4
 800dc7c:	d1e7      	bne.n	800dc4e <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2200      	movs	r2, #0
 800dc82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2200      	movs	r2, #0
 800dc88:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2201      	movs	r2, #1
 800dc8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800dc92:	2300      	movs	r3, #0
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	3728      	adds	r7, #40	; 0x28
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}

0800dc9c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dc9c:	b5b0      	push	{r4, r5, r7, lr}
 800dc9e:	b08e      	sub	sp, #56	; 0x38
 800dca0:	af04      	add	r7, sp, #16
 800dca2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800dca4:	2300      	movs	r3, #0
 800dca6:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800dca8:	2300      	movs	r3, #0
 800dcaa:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800dcac:	2300      	movs	r3, #0
 800dcae:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	617b      	str	r3, [r7, #20]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800dcb4:	23fa      	movs	r3, #250	; 0xfa
 800dcb6:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	699b      	ldr	r3, [r3, #24]
 800dcbc:	2b02      	cmp	r3, #2
 800dcbe:	d107      	bne.n	800dcd0 <HAL_SD_InitCard+0x34>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	681a      	ldr	r2, [r3, #0]
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	f042 0210 	orr.w	r2, r2, #16
 800dcce:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681d      	ldr	r5, [r3, #0]
 800dcd4:	466c      	mov	r4, sp
 800dcd6:	f107 0314 	add.w	r3, r7, #20
 800dcda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dcde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dce2:	f107 0308 	add.w	r3, r7, #8
 800dce6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dce8:	4628      	mov	r0, r5
 800dcea:	f005 fbff 	bl	80134ec <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f005 fc31 	bl	801355a <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting 
     the SD initialization sequence */
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 800dcf8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800dcfc:	f7fe ff18 	bl	800cb30 <HAL_RCCEx_GetPeriphCLKFreq>
 800dd00:	4603      	mov	r3, r0
 800dd02:	4a2d      	ldr	r2, [pc, #180]	; (800ddb8 <HAL_SD_InitCard+0x11c>)
 800dd04:	fba2 2303 	umull	r2, r3, r2, r3
 800dd08:	095b      	lsrs	r3, r3, #5
 800dd0a:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 800dd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d008      	beq.n	800dd24 <HAL_SD_InitCard+0x88>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800dd12:	4a2a      	ldr	r2, [pc, #168]	; (800ddbc <HAL_SD_InitCard+0x120>)
 800dd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd16:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f7f8 f895 	bl	8005e4c <HAL_Delay>
 800dd22:	e002      	b.n	800dd2a <HAL_SD_InitCard+0x8e>
  }
  else
  {
    HAL_Delay(2U);
 800dd24:	2002      	movs	r0, #2
 800dd26:	f7f8 f891 	bl	8005e4c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f000 fc38 	bl	800e5a0 <SD_PowerON>
 800dd30:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd32:	6a3b      	ldr	r3, [r7, #32]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d00b      	beq.n	800dd50 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2201      	movs	r2, #1
 800dd3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd44:	6a3b      	ldr	r3, [r7, #32]
 800dd46:	431a      	orrs	r2, r3
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	e02e      	b.n	800ddae <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800dd50:	6878      	ldr	r0, [r7, #4]
 800dd52:	f000 fb67 	bl	800e424 <SD_InitCard>
 800dd56:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd58:	6a3b      	ldr	r3, [r7, #32]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d00b      	beq.n	800dd76 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2201      	movs	r2, #1
 800dd62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd6a:	6a3b      	ldr	r3, [r7, #32]
 800dd6c:	431a      	orrs	r2, r3
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800dd72:	2301      	movs	r3, #1
 800dd74:	e01b      	b.n	800ddae <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f005 fc80 	bl	8013684 <SDMMC_CmdBlockLength>
 800dd84:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd86:	6a3b      	ldr	r3, [r7, #32]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d00f      	beq.n	800ddac <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	4a0b      	ldr	r2, [pc, #44]	; (800ddc0 <HAL_SD_InitCard+0x124>)
 800dd92:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd98:	6a3b      	ldr	r3, [r7, #32]
 800dd9a:	431a      	orrs	r2, r3
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2201      	movs	r2, #1
 800dda4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dda8:	2301      	movs	r3, #1
 800ddaa:	e000      	b.n	800ddae <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 800ddac:	2300      	movs	r3, #0
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	3728      	adds	r7, #40	; 0x28
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bdb0      	pop	{r4, r5, r7, pc}
 800ddb6:	bf00      	nop
 800ddb8:	10624dd3 	.word	0x10624dd3
 800ddbc:	00012110 	.word	0x00012110
 800ddc0:	1fe00fff 	.word	0x1fe00fff

0800ddc4 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800ddc4:	b480      	push	{r7}
 800ddc6:	b083      	sub	sp, #12
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	4603      	mov	r3, r0
 800ddcc:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800ddce:	bf00      	nop
 800ddd0:	370c      	adds	r7, #12
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd8:	4770      	bx	lr
	...

0800dddc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800dddc:	b480      	push	{r7}
 800ddde:	b083      	sub	sp, #12
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ddea:	0f9b      	lsrs	r3, r3, #30
 800ddec:	b2da      	uxtb	r2, r3
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ddf6:	0e9b      	lsrs	r3, r3, #26
 800ddf8:	b2db      	uxtb	r3, r3
 800ddfa:	f003 030f 	and.w	r3, r3, #15
 800ddfe:	b2da      	uxtb	r2, r3
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de08:	0e1b      	lsrs	r3, r3, #24
 800de0a:	b2db      	uxtb	r3, r3
 800de0c:	f003 0303 	and.w	r3, r3, #3
 800de10:	b2da      	uxtb	r2, r3
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de1a:	0c1b      	lsrs	r3, r3, #16
 800de1c:	b2da      	uxtb	r2, r3
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de26:	0a1b      	lsrs	r3, r3, #8
 800de28:	b2da      	uxtb	r2, r3
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de32:	b2da      	uxtb	r2, r3
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de3c:	0d1b      	lsrs	r3, r3, #20
 800de3e:	b29a      	uxth	r2, r3
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de48:	0c1b      	lsrs	r3, r3, #16
 800de4a:	b2db      	uxtb	r3, r3
 800de4c:	f003 030f 	and.w	r3, r3, #15
 800de50:	b2da      	uxtb	r2, r3
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de5a:	0bdb      	lsrs	r3, r3, #15
 800de5c:	b2db      	uxtb	r3, r3
 800de5e:	f003 0301 	and.w	r3, r3, #1
 800de62:	b2da      	uxtb	r2, r3
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de6c:	0b9b      	lsrs	r3, r3, #14
 800de6e:	b2db      	uxtb	r3, r3
 800de70:	f003 0301 	and.w	r3, r3, #1
 800de74:	b2da      	uxtb	r2, r3
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de7e:	0b5b      	lsrs	r3, r3, #13
 800de80:	b2db      	uxtb	r3, r3
 800de82:	f003 0301 	and.w	r3, r3, #1
 800de86:	b2da      	uxtb	r2, r3
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de90:	0b1b      	lsrs	r3, r3, #12
 800de92:	b2db      	uxtb	r3, r3
 800de94:	f003 0301 	and.w	r3, r3, #1
 800de98:	b2da      	uxtb	r2, r3
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	2200      	movs	r2, #0
 800dea2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d163      	bne.n	800df74 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800deb0:	009a      	lsls	r2, r3, #2
 800deb2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800deb6:	4013      	ands	r3, r2
 800deb8:	687a      	ldr	r2, [r7, #4]
 800deba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800debc:	0f92      	lsrs	r2, r2, #30
 800debe:	431a      	orrs	r2, r3
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dec8:	0edb      	lsrs	r3, r3, #27
 800deca:	b2db      	uxtb	r3, r3
 800decc:	f003 0307 	and.w	r3, r3, #7
 800ded0:	b2da      	uxtb	r2, r3
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800deda:	0e1b      	lsrs	r3, r3, #24
 800dedc:	b2db      	uxtb	r3, r3
 800dede:	f003 0307 	and.w	r3, r3, #7
 800dee2:	b2da      	uxtb	r2, r3
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800deec:	0d5b      	lsrs	r3, r3, #21
 800deee:	b2db      	uxtb	r3, r3
 800def0:	f003 0307 	and.w	r3, r3, #7
 800def4:	b2da      	uxtb	r2, r3
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800defe:	0c9b      	lsrs	r3, r3, #18
 800df00:	b2db      	uxtb	r3, r3
 800df02:	f003 0307 	and.w	r3, r3, #7
 800df06:	b2da      	uxtb	r2, r3
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df10:	0bdb      	lsrs	r3, r3, #15
 800df12:	b2db      	uxtb	r3, r3
 800df14:	f003 0307 	and.w	r3, r3, #7
 800df18:	b2da      	uxtb	r2, r3
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	691b      	ldr	r3, [r3, #16]
 800df22:	1c5a      	adds	r2, r3, #1
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	7e1b      	ldrb	r3, [r3, #24]
 800df2c:	b2db      	uxtb	r3, r3
 800df2e:	f003 0307 	and.w	r3, r3, #7
 800df32:	3302      	adds	r3, #2
 800df34:	2201      	movs	r2, #1
 800df36:	fa02 f303 	lsl.w	r3, r2, r3
 800df3a:	687a      	ldr	r2, [r7, #4]
 800df3c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800df3e:	fb02 f203 	mul.w	r2, r2, r3
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	7a1b      	ldrb	r3, [r3, #8]
 800df4a:	b2db      	uxtb	r3, r3
 800df4c:	f003 030f 	and.w	r3, r3, #15
 800df50:	2201      	movs	r2, #1
 800df52:	409a      	lsls	r2, r3
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df5c:	687a      	ldr	r2, [r7, #4]
 800df5e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800df60:	0a52      	lsrs	r2, r2, #9
 800df62:	fb02 f203 	mul.w	r2, r2, r3
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df70:	659a      	str	r2, [r3, #88]	; 0x58
 800df72:	e031      	b.n	800dfd8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df78:	2b01      	cmp	r3, #1
 800df7a:	d11d      	bne.n	800dfb8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df80:	041b      	lsls	r3, r3, #16
 800df82:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df8a:	0c1b      	lsrs	r3, r3, #16
 800df8c:	431a      	orrs	r2, r3
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	691b      	ldr	r3, [r3, #16]
 800df96:	3301      	adds	r3, #1
 800df98:	029a      	lsls	r2, r3, #10
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dfac:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	659a      	str	r2, [r3, #88]	; 0x58
 800dfb6:	e00f      	b.n	800dfd8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	4a58      	ldr	r2, [pc, #352]	; (800e120 <HAL_SD_GetCardCSD+0x344>)
 800dfbe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfc4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2201      	movs	r2, #1
 800dfd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	e09d      	b.n	800e114 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dfdc:	0b9b      	lsrs	r3, r3, #14
 800dfde:	b2db      	uxtb	r3, r3
 800dfe0:	f003 0301 	and.w	r3, r3, #1
 800dfe4:	b2da      	uxtb	r2, r3
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dfee:	09db      	lsrs	r3, r3, #7
 800dff0:	b2db      	uxtb	r3, r3
 800dff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dff6:	b2da      	uxtb	r2, r3
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e000:	b2db      	uxtb	r3, r3
 800e002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e006:	b2da      	uxtb	r2, r3
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e010:	0fdb      	lsrs	r3, r3, #31
 800e012:	b2da      	uxtb	r2, r3
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e01c:	0f5b      	lsrs	r3, r3, #29
 800e01e:	b2db      	uxtb	r3, r3
 800e020:	f003 0303 	and.w	r3, r3, #3
 800e024:	b2da      	uxtb	r2, r3
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e02e:	0e9b      	lsrs	r3, r3, #26
 800e030:	b2db      	uxtb	r3, r3
 800e032:	f003 0307 	and.w	r3, r3, #7
 800e036:	b2da      	uxtb	r2, r3
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e040:	0d9b      	lsrs	r3, r3, #22
 800e042:	b2db      	uxtb	r3, r3
 800e044:	f003 030f 	and.w	r3, r3, #15
 800e048:	b2da      	uxtb	r2, r3
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e052:	0d5b      	lsrs	r3, r3, #21
 800e054:	b2db      	uxtb	r3, r3
 800e056:	f003 0301 	and.w	r3, r3, #1
 800e05a:	b2da      	uxtb	r2, r3
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	2200      	movs	r2, #0
 800e066:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e06e:	0c1b      	lsrs	r3, r3, #16
 800e070:	b2db      	uxtb	r3, r3
 800e072:	f003 0301 	and.w	r3, r3, #1
 800e076:	b2da      	uxtb	r2, r3
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e082:	0bdb      	lsrs	r3, r3, #15
 800e084:	b2db      	uxtb	r3, r3
 800e086:	f003 0301 	and.w	r3, r3, #1
 800e08a:	b2da      	uxtb	r2, r3
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e096:	0b9b      	lsrs	r3, r3, #14
 800e098:	b2db      	uxtb	r3, r3
 800e09a:	f003 0301 	and.w	r3, r3, #1
 800e09e:	b2da      	uxtb	r2, r3
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0aa:	0b5b      	lsrs	r3, r3, #13
 800e0ac:	b2db      	uxtb	r3, r3
 800e0ae:	f003 0301 	and.w	r3, r3, #1
 800e0b2:	b2da      	uxtb	r2, r3
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0be:	0b1b      	lsrs	r3, r3, #12
 800e0c0:	b2db      	uxtb	r3, r3
 800e0c2:	f003 0301 	and.w	r3, r3, #1
 800e0c6:	b2da      	uxtb	r2, r3
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0d2:	0a9b      	lsrs	r3, r3, #10
 800e0d4:	b2db      	uxtb	r3, r3
 800e0d6:	f003 0303 	and.w	r3, r3, #3
 800e0da:	b2da      	uxtb	r2, r3
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0e6:	0a1b      	lsrs	r3, r3, #8
 800e0e8:	b2db      	uxtb	r3, r3
 800e0ea:	f003 0303 	and.w	r3, r3, #3
 800e0ee:	b2da      	uxtb	r2, r3
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0fa:	085b      	lsrs	r3, r3, #1
 800e0fc:	b2db      	uxtb	r3, r3
 800e0fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e102:	b2da      	uxtb	r2, r3
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	2201      	movs	r2, #1
 800e10e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e112:	2300      	movs	r3, #0
}
 800e114:	4618      	mov	r0, r3
 800e116:	370c      	adds	r7, #12
 800e118:	46bd      	mov	sp, r7
 800e11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11e:	4770      	bx	lr
 800e120:	1fe00fff 	.word	0x1fe00fff

0800e124 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that 
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b094      	sub	sp, #80	; 0x50
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e12e:	2300      	movs	r3, #0
 800e130:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800e134:	f107 0308 	add.w	r3, r7, #8
 800e138:	4619      	mov	r1, r3
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f000 fb38 	bl	800e7b0 <SD_SendSDStatus>
 800e140:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800e142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e144:	2b00      	cmp	r3, #0
 800e146:	d011      	beq.n	800e16c <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	4a4f      	ldr	r2, [pc, #316]	; (800e28c <HAL_SD_GetCardStatus+0x168>)
 800e14e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e156:	431a      	orrs	r2, r3
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2201      	movs	r2, #1
 800e160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e164:	2301      	movs	r3, #1
 800e166:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e16a:	e070      	b.n	800e24e <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	099b      	lsrs	r3, r3, #6
 800e170:	b2db      	uxtb	r3, r3
 800e172:	f003 0303 	and.w	r3, r3, #3
 800e176:	b2da      	uxtb	r2, r3
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	095b      	lsrs	r3, r3, #5
 800e180:	b2db      	uxtb	r3, r3
 800e182:	f003 0301 	and.w	r3, r3, #1
 800e186:	b2da      	uxtb	r2, r3
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800e18c:	68bb      	ldr	r3, [r7, #8]
 800e18e:	0a1b      	lsrs	r3, r3, #8
 800e190:	b29b      	uxth	r3, r3
 800e192:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e196:	b29a      	uxth	r2, r3
 800e198:	68bb      	ldr	r3, [r7, #8]
 800e19a:	0e1b      	lsrs	r3, r3, #24
 800e19c:	b29b      	uxth	r3, r3
 800e19e:	4313      	orrs	r3, r2
 800e1a0:	b29a      	uxth	r2, r3
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	061a      	lsls	r2, r3, #24
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	021b      	lsls	r3, r3, #8
 800e1ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e1b2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	0a1b      	lsrs	r3, r3, #8
 800e1b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e1bc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	0e1b      	lsrs	r3, r3, #24
 800e1c2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	b2da      	uxtb	r2, r3
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800e1d0:	693b      	ldr	r3, [r7, #16]
 800e1d2:	0a1b      	lsrs	r3, r3, #8
 800e1d4:	b2da      	uxtb	r2, r3
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800e1da:	693b      	ldr	r3, [r7, #16]
 800e1dc:	0d1b      	lsrs	r3, r3, #20
 800e1de:	b2db      	uxtb	r3, r3
 800e1e0:	f003 030f 	and.w	r3, r3, #15
 800e1e4:	b2da      	uxtb	r2, r3
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	0c1b      	lsrs	r3, r3, #16
 800e1ee:	b29b      	uxth	r3, r3
 800e1f0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e1f4:	b29a      	uxth	r2, r3
 800e1f6:	697b      	ldr	r3, [r7, #20]
 800e1f8:	b29b      	uxth	r3, r3
 800e1fa:	b2db      	uxtb	r3, r3
 800e1fc:	b29b      	uxth	r3, r3
 800e1fe:	4313      	orrs	r3, r2
 800e200:	b29a      	uxth	r2, r3
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	0a9b      	lsrs	r3, r3, #10
 800e20a:	b2db      	uxtb	r3, r3
 800e20c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e210:	b2da      	uxtb	r2, r3
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	0a1b      	lsrs	r3, r3, #8
 800e21a:	b2db      	uxtb	r3, r3
 800e21c:	f003 0303 	and.w	r3, r3, #3
 800e220:	b2da      	uxtb	r2, r3
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800e226:	697b      	ldr	r3, [r7, #20]
 800e228:	091b      	lsrs	r3, r3, #4
 800e22a:	b2db      	uxtb	r3, r3
 800e22c:	f003 030f 	and.w	r3, r3, #15
 800e230:	b2da      	uxtb	r2, r3
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	b2db      	uxtb	r3, r3
 800e23a:	f003 030f 	and.w	r3, r3, #15
 800e23e:	b2da      	uxtb	r2, r3
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800e244:	69bb      	ldr	r3, [r7, #24]
 800e246:	0e1b      	lsrs	r3, r3, #24
 800e248:	b2da      	uxtb	r2, r3
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e256:	4618      	mov	r0, r3
 800e258:	f005 fa14 	bl	8013684 <SDMMC_CmdBlockLength>
 800e25c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800e25e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e260:	2b00      	cmp	r3, #0
 800e262:	d00d      	beq.n	800e280 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	4a08      	ldr	r2, [pc, #32]	; (800e28c <HAL_SD_GetCardStatus+0x168>)
 800e26a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e270:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	2201      	movs	r2, #1
 800e276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e27a:	2301      	movs	r3, #1
 800e27c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800e280:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800e284:	4618      	mov	r0, r3
 800e286:	3750      	adds	r7, #80	; 0x50
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd80      	pop	{r7, pc}
 800e28c:	1fe00fff 	.word	0x1fe00fff

0800e290 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e290:	b5b0      	push	{r4, r5, r7, lr}
 800e292:	b08e      	sub	sp, #56	; 0x38
 800e294:	af04      	add	r7, sp, #16
 800e296:	6078      	str	r0, [r7, #4]
 800e298:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e29a:	2300      	movs	r3, #0
 800e29c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	2203      	movs	r2, #3
 800e2a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2ac:	2b03      	cmp	r3, #3
 800e2ae:	d02e      	beq.n	800e30e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e2b6:	d106      	bne.n	800e2c6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	639a      	str	r2, [r3, #56]	; 0x38
 800e2c4:	e029      	b.n	800e31a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e2cc:	d10a      	bne.n	800e2e4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e2ce:	6878      	ldr	r0, [r7, #4]
 800e2d0:	f000 fb66 	bl	800e9a0 <SD_WideBus_Enable>
 800e2d4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2da:	6a3b      	ldr	r3, [r7, #32]
 800e2dc:	431a      	orrs	r2, r3
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	639a      	str	r2, [r3, #56]	; 0x38
 800e2e2:	e01a      	b.n	800e31a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d10a      	bne.n	800e300 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f000 fba3 	bl	800ea36 <SD_WideBus_Disable>
 800e2f0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2f6:	6a3b      	ldr	r3, [r7, #32]
 800e2f8:	431a      	orrs	r2, r3
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	639a      	str	r2, [r3, #56]	; 0x38
 800e2fe:	e00c      	b.n	800e31a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e304:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	639a      	str	r2, [r3, #56]	; 0x38
 800e30c:	e005      	b.n	800e31a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e312:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d007      	beq.n	800e332 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	4a2e      	ldr	r2, [pc, #184]	; (800e3e0 <HAL_SD_ConfigWideBusOperation+0x150>)
 800e328:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e32a:	2301      	movs	r3, #1
 800e32c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e330:	e034      	b.n	800e39c <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	685b      	ldr	r3, [r3, #4]
 800e336:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	689b      	ldr	r3, [r3, #8]
 800e33c:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	691b      	ldr	r3, [r3, #16]
 800e346:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	695b      	ldr	r3, [r3, #20]
 800e34c:	2b03      	cmp	r3, #3
 800e34e:	d903      	bls.n	800e358 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	695b      	ldr	r3, [r3, #20]
 800e354:	61bb      	str	r3, [r7, #24]
 800e356:	e012      	b.n	800e37e <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e35c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e360:	d103      	bne.n	800e36a <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	695b      	ldr	r3, [r3, #20]
 800e366:	61bb      	str	r3, [r7, #24]
 800e368:	e009      	b.n	800e37e <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e36e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e372:	d102      	bne.n	800e37a <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800e374:	2302      	movs	r3, #2
 800e376:	61bb      	str	r3, [r7, #24]
 800e378:	e001      	b.n	800e37e <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800e37a:	2304      	movs	r3, #4
 800e37c:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681d      	ldr	r5, [r3, #0]
 800e382:	466c      	mov	r4, sp
 800e384:	f107 0314 	add.w	r3, r7, #20
 800e388:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e38c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e390:	f107 0308 	add.w	r3, r7, #8
 800e394:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e396:	4628      	mov	r0, r5
 800e398:	f005 f8a8 	bl	80134ec <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f005 f96d 	bl	8013684 <SDMMC_CmdBlockLength>
 800e3aa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e3ac:	6a3b      	ldr	r3, [r7, #32]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d00c      	beq.n	800e3cc <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	4a0a      	ldr	r2, [pc, #40]	; (800e3e0 <HAL_SD_ConfigWideBusOperation+0x150>)
 800e3b8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e3be:	6a3b      	ldr	r3, [r7, #32]
 800e3c0:	431a      	orrs	r2, r3
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e3c6:	2301      	movs	r3, #1
 800e3c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2201      	movs	r2, #1
 800e3d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800e3d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	3728      	adds	r7, #40	; 0x28
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bdb0      	pop	{r4, r5, r7, pc}
 800e3e0:	1fe00fff 	.word	0x1fe00fff

0800e3e4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b086      	sub	sp, #24
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e3f0:	f107 030c 	add.w	r3, r7, #12
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f000 faaa 	bl	800e950 <SD_SendStatus>
 800e3fc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d005      	beq.n	800e410 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e408:	697b      	ldr	r3, [r7, #20]
 800e40a:	431a      	orrs	r2, r3
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	0a5b      	lsrs	r3, r3, #9
 800e414:	f003 030f 	and.w	r3, r3, #15
 800e418:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e41a:	693b      	ldr	r3, [r7, #16]
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	3718      	adds	r7, #24
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}

0800e424 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b090      	sub	sp, #64	; 0x40
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800e42c:	2301      	movs	r3, #1
 800e42e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	4618      	mov	r0, r3
 800e436:	f005 f8a1 	bl	801357c <SDMMC_GetPowerState>
 800e43a:	4603      	mov	r3, r0
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d102      	bne.n	800e446 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e440:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e444:	e0a7      	b.n	800e596 <SD_InitCard+0x172>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e44a:	2b03      	cmp	r3, #3
 800e44c:	d02e      	beq.n	800e4ac <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	4618      	mov	r0, r3
 800e454:	f005 fa23 	bl	801389e <SDMMC_CmdSendCID>
 800e458:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e45a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d001      	beq.n	800e464 <SD_InitCard+0x40>
    {
      return errorstate;
 800e460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e462:	e098      	b.n	800e596 <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	2100      	movs	r1, #0
 800e46a:	4618      	mov	r0, r3
 800e46c:	f005 f8cb 	bl	8013606 <SDMMC_GetResponse>
 800e470:	4602      	mov	r2, r0
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	2104      	movs	r1, #4
 800e47c:	4618      	mov	r0, r3
 800e47e:	f005 f8c2 	bl	8013606 <SDMMC_GetResponse>
 800e482:	4602      	mov	r2, r0
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	2108      	movs	r1, #8
 800e48e:	4618      	mov	r0, r3
 800e490:	f005 f8b9 	bl	8013606 <SDMMC_GetResponse>
 800e494:	4602      	mov	r2, r0
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	210c      	movs	r1, #12
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f005 f8b0 	bl	8013606 <SDMMC_GetResponse>
 800e4a6:	4602      	mov	r2, r0
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4b0:	2b03      	cmp	r3, #3
 800e4b2:	d00d      	beq.n	800e4d0 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	f107 020e 	add.w	r2, r7, #14
 800e4bc:	4611      	mov	r1, r2
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f005 fa2c 	bl	801391c <SDMMC_CmdSetRelAdd>
 800e4c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e4c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d001      	beq.n	800e4d0 <SD_InitCard+0xac>
    {
      return errorstate;
 800e4cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4ce:	e062      	b.n	800e596 <SD_InitCard+0x172>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4d4:	2b03      	cmp	r3, #3
 800e4d6:	d036      	beq.n	800e546 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e4d8:	89fb      	ldrh	r3, [r7, #14]
 800e4da:	461a      	mov	r2, r3
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681a      	ldr	r2, [r3, #0]
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4e8:	041b      	lsls	r3, r3, #16
 800e4ea:	4619      	mov	r1, r3
 800e4ec:	4610      	mov	r0, r2
 800e4ee:	f005 f9f5 	bl	80138dc <SDMMC_CmdSendCSD>
 800e4f2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e4f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d001      	beq.n	800e4fe <SD_InitCard+0xda>
    {
      return errorstate;
 800e4fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4fc:	e04b      	b.n	800e596 <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	2100      	movs	r1, #0
 800e504:	4618      	mov	r0, r3
 800e506:	f005 f87e 	bl	8013606 <SDMMC_GetResponse>
 800e50a:	4602      	mov	r2, r0
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	2104      	movs	r1, #4
 800e516:	4618      	mov	r0, r3
 800e518:	f005 f875 	bl	8013606 <SDMMC_GetResponse>
 800e51c:	4602      	mov	r2, r0
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	2108      	movs	r1, #8
 800e528:	4618      	mov	r0, r3
 800e52a:	f005 f86c 	bl	8013606 <SDMMC_GetResponse>
 800e52e:	4602      	mov	r2, r0
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	210c      	movs	r1, #12
 800e53a:	4618      	mov	r0, r3
 800e53c:	f005 f863 	bl	8013606 <SDMMC_GetResponse>
 800e540:	4602      	mov	r2, r0
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	2104      	movs	r1, #4
 800e54c:	4618      	mov	r0, r3
 800e54e:	f005 f85a 	bl	8013606 <SDMMC_GetResponse>
 800e552:	4603      	mov	r3, r0
 800e554:	0d1a      	lsrs	r2, r3, #20
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e55a:	f107 0310 	add.w	r3, r7, #16
 800e55e:	4619      	mov	r1, r3
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f7ff fc3b 	bl	800dddc <HAL_SD_GetCardCSD>
 800e566:	4603      	mov	r3, r0
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d002      	beq.n	800e572 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e56c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e570:	e011      	b.n	800e596 <SD_InitCard+0x172>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	6819      	ldr	r1, [r3, #0]
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e57a:	041b      	lsls	r3, r3, #16
 800e57c:	461a      	mov	r2, r3
 800e57e:	f04f 0300 	mov.w	r3, #0
 800e582:	4608      	mov	r0, r1
 800e584:	f005 f8a1 	bl	80136ca <SDMMC_CmdSelDesel>
 800e588:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e58a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d001      	beq.n	800e594 <SD_InitCard+0x170>
  {
    return errorstate;
 800e590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e592:	e000      	b.n	800e596 <SD_InitCard+0x172>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e594:	2300      	movs	r3, #0
}
 800e596:	4618      	mov	r0, r3
 800e598:	3740      	adds	r7, #64	; 0x40
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}
	...

0800e5a0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b088      	sub	sp, #32
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	61fb      	str	r3, [r7, #28]
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800e5b4:	f7f7 fc3e 	bl	8005e34 <HAL_GetTick>
 800e5b8:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f005 f8a7 	bl	8013712 <SDMMC_CmdGoIdleState>
 800e5c4:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d001      	beq.n	800e5d0 <SD_PowerON+0x30>
  {
    return errorstate;
 800e5cc:	693b      	ldr	r3, [r7, #16]
 800e5ce:	e0e9      	b.n	800e7a4 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f005 f8ba 	bl	801374e <SDMMC_CmdOperCond>
 800e5da:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e5dc:	693b      	ldr	r3, [r7, #16]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d00d      	beq.n	800e5fe <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	f005 f890 	bl	8013712 <SDMMC_CmdGoIdleState>
 800e5f2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5f4:	693b      	ldr	r3, [r7, #16]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d004      	beq.n	800e604 <SD_PowerON+0x64>
    {
      return errorstate;
 800e5fa:	693b      	ldr	r3, [r7, #16]
 800e5fc:	e0d2      	b.n	800e7a4 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	2201      	movs	r2, #1
 800e602:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e608:	2b01      	cmp	r3, #1
 800e60a:	d137      	bne.n	800e67c <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	2100      	movs	r1, #0
 800e612:	4618      	mov	r0, r3
 800e614:	f005 f8bb 	bl	801378e <SDMMC_CmdAppCommand>
 800e618:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e61a:	693b      	ldr	r3, [r7, #16]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d02d      	beq.n	800e67c <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e620:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e624:	e0be      	b.n	800e7a4 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	2100      	movs	r1, #0
 800e62c:	4618      	mov	r0, r3
 800e62e:	f005 f8ae 	bl	801378e <SDMMC_CmdAppCommand>
 800e632:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e634:	693b      	ldr	r3, [r7, #16]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d001      	beq.n	800e63e <SD_PowerON+0x9e>
    {
      return errorstate;
 800e63a:	693b      	ldr	r3, [r7, #16]
 800e63c:	e0b2      	b.n	800e7a4 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	495a      	ldr	r1, [pc, #360]	; (800e7ac <SD_PowerON+0x20c>)
 800e644:	4618      	mov	r0, r3
 800e646:	f005 f8c5 	bl	80137d4 <SDMMC_CmdAppOperCommand>
 800e64a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e64c:	693b      	ldr	r3, [r7, #16]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d002      	beq.n	800e658 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e652:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e656:	e0a5      	b.n	800e7a4 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	2100      	movs	r1, #0
 800e65e:	4618      	mov	r0, r3
 800e660:	f004 ffd1 	bl	8013606 <SDMMC_GetResponse>
 800e664:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e666:	69fb      	ldr	r3, [r7, #28]
 800e668:	0fdb      	lsrs	r3, r3, #31
 800e66a:	2b01      	cmp	r3, #1
 800e66c:	d101      	bne.n	800e672 <SD_PowerON+0xd2>
 800e66e:	2301      	movs	r3, #1
 800e670:	e000      	b.n	800e674 <SD_PowerON+0xd4>
 800e672:	2300      	movs	r3, #0
 800e674:	61bb      	str	r3, [r7, #24]

    count++;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	3301      	adds	r3, #1
 800e67a:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e682:	4293      	cmp	r3, r2
 800e684:	d802      	bhi.n	800e68c <SD_PowerON+0xec>
 800e686:	69bb      	ldr	r3, [r7, #24]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d0cc      	beq.n	800e626 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e692:	4293      	cmp	r3, r2
 800e694:	d902      	bls.n	800e69c <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e696:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e69a:	e083      	b.n	800e7a4 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e69c:	69fb      	ldr	r3, [r7, #28]
 800e69e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d07d      	beq.n	800e7a2 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	2201      	movs	r2, #1
 800e6aa:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	699b      	ldr	r3, [r3, #24]
 800e6b0:	2b02      	cmp	r3, #2
 800e6b2:	d176      	bne.n	800e7a2 <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800e6b4:	69fb      	ldr	r3, [r7, #28]
 800e6b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d071      	beq.n	800e7a2 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e6c4:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	681a      	ldr	r2, [r3, #0]
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	f042 0208 	orr.w	r2, r2, #8
 800e6d4:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f005 f985 	bl	80139ea <SDMMC_CmdVoltageSwitch>
 800e6e0:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800e6e2:	693b      	ldr	r3, [r7, #16]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d00c      	beq.n	800e702 <SD_PowerON+0x162>
        {
          return errorstate;
 800e6e8:	693b      	ldr	r3, [r7, #16]
 800e6ea:	e05b      	b.n	800e7a4 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e6ec:	f7f7 fba2 	bl	8005e34 <HAL_GetTick>
 800e6f0:	4602      	mov	r2, r0
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	1ad3      	subs	r3, r2, r3
 800e6f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6fa:	d102      	bne.n	800e702 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800e6fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e700:	e050      	b.n	800e7a4 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e708:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e70c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e710:	d1ec      	bne.n	800e6ec <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800e71a:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e726:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e72a:	d002      	beq.n	800e732 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800e72c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e730:	e038      	b.n	800e7a4 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800e732:	2001      	movs	r0, #1
 800e734:	f7ff fb46 	bl	800ddc4 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	681a      	ldr	r2, [r3, #0]
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	f042 0204 	orr.w	r2, r2, #4
 800e746:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800e748:	e00a      	b.n	800e760 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e74a:	f7f7 fb73 	bl	8005e34 <HAL_GetTick>
 800e74e:	4602      	mov	r2, r0
 800e750:	697b      	ldr	r3, [r7, #20]
 800e752:	1ad3      	subs	r3, r2, r3
 800e754:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e758:	d102      	bne.n	800e760 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800e75a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e75e:	e021      	b.n	800e7a4 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e76a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e76e:	d1ec      	bne.n	800e74a <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e778:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e780:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e784:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e788:	d102      	bne.n	800e790 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e78a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e78e:	e009      	b.n	800e7a4 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	2213      	movs	r2, #19
 800e796:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	f04f 32ff 	mov.w	r2, #4294967295
 800e7a0:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e7a2:	2300      	movs	r3, #0
}
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	3720      	adds	r7, #32
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}
 800e7ac:	c1100000 	.word	0xc1100000

0800e7b0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b08c      	sub	sp, #48	; 0x30
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e7ba:	f7f7 fb3b 	bl	8005e34 <HAL_GetTick>
 800e7be:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	2100      	movs	r1, #0
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f004 ff1b 	bl	8013606 <SDMMC_GetResponse>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e7d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e7da:	d102      	bne.n	800e7e2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e7dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e7e0:	e0b0      	b.n	800e944 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	2140      	movs	r1, #64	; 0x40
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f004 ff4b 	bl	8013684 <SDMMC_CmdBlockLength>
 800e7ee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e7f0:	6a3b      	ldr	r3, [r7, #32]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d005      	beq.n	800e802 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800e7fe:	6a3b      	ldr	r3, [r7, #32]
 800e800:	e0a0      	b.n	800e944 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681a      	ldr	r2, [r3, #0]
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e80a:	041b      	lsls	r3, r3, #16
 800e80c:	4619      	mov	r1, r3
 800e80e:	4610      	mov	r0, r2
 800e810:	f004 ffbd 	bl	801378e <SDMMC_CmdAppCommand>
 800e814:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e816:	6a3b      	ldr	r3, [r7, #32]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d005      	beq.n	800e828 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800e824:	6a3b      	ldr	r3, [r7, #32]
 800e826:	e08d      	b.n	800e944 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e828:	f04f 33ff 	mov.w	r3, #4294967295
 800e82c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e82e:	2340      	movs	r3, #64	; 0x40
 800e830:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e832:	2360      	movs	r3, #96	; 0x60
 800e834:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e836:	2302      	movs	r3, #2
 800e838:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e83a:	2300      	movs	r3, #0
 800e83c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e83e:	2301      	movs	r3, #1
 800e840:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	f107 0208 	add.w	r2, r7, #8
 800e84a:	4611      	mov	r1, r2
 800e84c:	4618      	mov	r0, r3
 800e84e:	f004 feed 	bl	801362c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	4618      	mov	r0, r3
 800e858:	f005 f8a5 	bl	80139a6 <SDMMC_CmdStatusRegister>
 800e85c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e85e:	6a3b      	ldr	r3, [r7, #32]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d02b      	beq.n	800e8bc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800e86c:	6a3b      	ldr	r3, [r7, #32]
 800e86e:	e069      	b.n	800e944 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e876:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d013      	beq.n	800e8a6 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800e87e:	2300      	movs	r3, #0
 800e880:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e882:	e00d      	b.n	800e8a0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	4618      	mov	r0, r3
 800e88a:	f004 fe59 	bl	8013540 <SDMMC_ReadFIFO>
 800e88e:	4602      	mov	r2, r0
 800e890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e892:	601a      	str	r2, [r3, #0]
        pData++;
 800e894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e896:	3304      	adds	r3, #4
 800e898:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800e89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e89c:	3301      	adds	r3, #1
 800e89e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a2:	2b07      	cmp	r3, #7
 800e8a4:	d9ee      	bls.n	800e884 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e8a6:	f7f7 fac5 	bl	8005e34 <HAL_GetTick>
 800e8aa:	4602      	mov	r2, r0
 800e8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ae:	1ad3      	subs	r3, r2, r3
 800e8b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8b4:	d102      	bne.n	800e8bc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e8b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e8ba:	e043      	b.n	800e944 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8c2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d0d2      	beq.n	800e870 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8d0:	f003 0308 	and.w	r3, r3, #8
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d001      	beq.n	800e8dc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e8d8:	2308      	movs	r3, #8
 800e8da:	e033      	b.n	800e944 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8e2:	f003 0302 	and.w	r3, r3, #2
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d001      	beq.n	800e8ee <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e8ea:	2302      	movs	r3, #2
 800e8ec:	e02a      	b.n	800e944 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8f4:	f003 0320 	and.w	r3, r3, #32
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d017      	beq.n	800e92c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e8fc:	2320      	movs	r3, #32
 800e8fe:	e021      	b.n	800e944 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	4618      	mov	r0, r3
 800e906:	f004 fe1b 	bl	8013540 <SDMMC_ReadFIFO>
 800e90a:	4602      	mov	r2, r0
 800e90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e90e:	601a      	str	r2, [r3, #0]
    pData++;
 800e910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e912:	3304      	adds	r3, #4
 800e914:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e916:	f7f7 fa8d 	bl	8005e34 <HAL_GetTick>
 800e91a:	4602      	mov	r2, r0
 800e91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e91e:	1ad3      	subs	r3, r2, r3
 800e920:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e924:	d102      	bne.n	800e92c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e926:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e92a:	e00b      	b.n	800e944 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e932:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e936:	2b00      	cmp	r3, #0
 800e938:	d1e2      	bne.n	800e900 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	4a03      	ldr	r2, [pc, #12]	; (800e94c <SD_SendSDStatus+0x19c>)
 800e940:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e942:	2300      	movs	r3, #0
}
 800e944:	4618      	mov	r0, r3
 800e946:	3730      	adds	r7, #48	; 0x30
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}
 800e94c:	18000f3a 	.word	0x18000f3a

0800e950 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b084      	sub	sp, #16
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
 800e958:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d102      	bne.n	800e966 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e960:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e964:	e018      	b.n	800e998 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681a      	ldr	r2, [r3, #0]
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e96e:	041b      	lsls	r3, r3, #16
 800e970:	4619      	mov	r1, r3
 800e972:	4610      	mov	r0, r2
 800e974:	f004 fff4 	bl	8013960 <SDMMC_CmdSendStatus>
 800e978:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d001      	beq.n	800e984 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	e009      	b.n	800e998 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	2100      	movs	r1, #0
 800e98a:	4618      	mov	r0, r3
 800e98c:	f004 fe3b 	bl	8013606 <SDMMC_GetResponse>
 800e990:	4602      	mov	r2, r0
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e996:	2300      	movs	r3, #0
}
 800e998:	4618      	mov	r0, r3
 800e99a:	3710      	adds	r7, #16
 800e99c:	46bd      	mov	sp, r7
 800e99e:	bd80      	pop	{r7, pc}

0800e9a0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b086      	sub	sp, #24
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	60fb      	str	r3, [r7, #12]
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	2100      	movs	r1, #0
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f004 fe25 	bl	8013606 <SDMMC_GetResponse>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e9c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e9c6:	d102      	bne.n	800e9ce <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e9c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e9cc:	e02f      	b.n	800ea2e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e9ce:	f107 030c 	add.w	r3, r7, #12
 800e9d2:	4619      	mov	r1, r3
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f000 f879 	bl	800eacc <SD_FindSCR>
 800e9da:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e9dc:	697b      	ldr	r3, [r7, #20]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d001      	beq.n	800e9e6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e9e2:	697b      	ldr	r3, [r7, #20]
 800e9e4:	e023      	b.n	800ea2e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e9e6:	693b      	ldr	r3, [r7, #16]
 800e9e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d01c      	beq.n	800ea2a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681a      	ldr	r2, [r3, #0]
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9f8:	041b      	lsls	r3, r3, #16
 800e9fa:	4619      	mov	r1, r3
 800e9fc:	4610      	mov	r0, r2
 800e9fe:	f004 fec6 	bl	801378e <SDMMC_CmdAppCommand>
 800ea02:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d001      	beq.n	800ea0e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ea0a:	697b      	ldr	r3, [r7, #20]
 800ea0c:	e00f      	b.n	800ea2e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	2102      	movs	r1, #2
 800ea14:	4618      	mov	r0, r3
 800ea16:	f004 fefd 	bl	8013814 <SDMMC_CmdBusWidth>
 800ea1a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d001      	beq.n	800ea26 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	e003      	b.n	800ea2e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ea26:	2300      	movs	r3, #0
 800ea28:	e001      	b.n	800ea2e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ea2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3718      	adds	r7, #24
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}

0800ea36 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800ea36:	b580      	push	{r7, lr}
 800ea38:	b086      	sub	sp, #24
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ea3e:	2300      	movs	r3, #0
 800ea40:	60fb      	str	r3, [r7, #12]
 800ea42:	2300      	movs	r3, #0
 800ea44:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	2100      	movs	r1, #0
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f004 fdda 	bl	8013606 <SDMMC_GetResponse>
 800ea52:	4603      	mov	r3, r0
 800ea54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ea5c:	d102      	bne.n	800ea64 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ea5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ea62:	e02f      	b.n	800eac4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ea64:	f107 030c 	add.w	r3, r7, #12
 800ea68:	4619      	mov	r1, r3
 800ea6a:	6878      	ldr	r0, [r7, #4]
 800ea6c:	f000 f82e 	bl	800eacc <SD_FindSCR>
 800ea70:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d001      	beq.n	800ea7c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800ea78:	697b      	ldr	r3, [r7, #20]
 800ea7a:	e023      	b.n	800eac4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ea7c:	693b      	ldr	r3, [r7, #16]
 800ea7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d01c      	beq.n	800eac0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681a      	ldr	r2, [r3, #0]
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea8e:	041b      	lsls	r3, r3, #16
 800ea90:	4619      	mov	r1, r3
 800ea92:	4610      	mov	r0, r2
 800ea94:	f004 fe7b 	bl	801378e <SDMMC_CmdAppCommand>
 800ea98:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ea9a:	697b      	ldr	r3, [r7, #20]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d001      	beq.n	800eaa4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800eaa0:	697b      	ldr	r3, [r7, #20]
 800eaa2:	e00f      	b.n	800eac4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	2100      	movs	r1, #0
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f004 feb2 	bl	8013814 <SDMMC_CmdBusWidth>
 800eab0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800eab2:	697b      	ldr	r3, [r7, #20]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d001      	beq.n	800eabc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800eab8:	697b      	ldr	r3, [r7, #20]
 800eaba:	e003      	b.n	800eac4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800eabc:	2300      	movs	r3, #0
 800eabe:	e001      	b.n	800eac4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800eac0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800eac4:	4618      	mov	r0, r3
 800eac6:	3718      	adds	r7, #24
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd80      	pop	{r7, pc}

0800eacc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b08e      	sub	sp, #56	; 0x38
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
 800ead4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ead6:	f7f7 f9ad 	bl	8005e34 <HAL_GetTick>
 800eada:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800eadc:	2300      	movs	r3, #0
 800eade:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800eae0:	2300      	movs	r3, #0
 800eae2:	60bb      	str	r3, [r7, #8]
 800eae4:	2300      	movs	r3, #0
 800eae6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	2108      	movs	r1, #8
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f004 fdc6 	bl	8013684 <SDMMC_CmdBlockLength>
 800eaf8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800eafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d001      	beq.n	800eb04 <SD_FindSCR+0x38>
  {
    return errorstate;
 800eb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb02:	e0ad      	b.n	800ec60 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681a      	ldr	r2, [r3, #0]
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb0c:	041b      	lsls	r3, r3, #16
 800eb0e:	4619      	mov	r1, r3
 800eb10:	4610      	mov	r0, r2
 800eb12:	f004 fe3c 	bl	801378e <SDMMC_CmdAppCommand>
 800eb16:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800eb18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d001      	beq.n	800eb22 <SD_FindSCR+0x56>
  {
    return errorstate;
 800eb1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb20:	e09e      	b.n	800ec60 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800eb22:	f04f 33ff 	mov.w	r3, #4294967295
 800eb26:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800eb28:	2308      	movs	r3, #8
 800eb2a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800eb2c:	2330      	movs	r3, #48	; 0x30
 800eb2e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800eb30:	2302      	movs	r3, #2
 800eb32:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800eb34:	2300      	movs	r3, #0
 800eb36:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800eb38:	2301      	movs	r3, #1
 800eb3a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	f107 0210 	add.w	r2, r7, #16
 800eb44:	4611      	mov	r1, r2
 800eb46:	4618      	mov	r0, r3
 800eb48:	f004 fd70 	bl	801362c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	4618      	mov	r0, r3
 800eb52:	f004 fe82 	bl	801385a <SDMMC_CmdSendSCR>
 800eb56:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800eb58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d027      	beq.n	800ebae <SD_FindSCR+0xe2>
  {
    return errorstate;
 800eb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb60:	e07e      	b.n	800ec60 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d113      	bne.n	800eb98 <SD_FindSCR+0xcc>
 800eb70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d110      	bne.n	800eb98 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f004 fce0 	bl	8013540 <SDMMC_ReadFIFO>
 800eb80:	4603      	mov	r3, r0
 800eb82:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f004 fcd9 	bl	8013540 <SDMMC_ReadFIFO>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	60fb      	str	r3, [r7, #12]
      index++;
 800eb92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb94:	3301      	adds	r3, #1
 800eb96:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800eb98:	f7f7 f94c 	bl	8005e34 <HAL_GetTick>
 800eb9c:	4602      	mov	r2, r0
 800eb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eba0:	1ad3      	subs	r3, r2, r3
 800eba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eba6:	d102      	bne.n	800ebae <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800eba8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ebac:	e058      	b.n	800ec60 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ebb4:	f240 532a 	movw	r3, #1322	; 0x52a
 800ebb8:	4013      	ands	r3, r2
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d0d1      	beq.n	800eb62 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebc4:	f003 0308 	and.w	r3, r3, #8
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d005      	beq.n	800ebd8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	2208      	movs	r2, #8
 800ebd2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ebd4:	2308      	movs	r3, #8
 800ebd6:	e043      	b.n	800ec60 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebde:	f003 0302 	and.w	r3, r3, #2
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d005      	beq.n	800ebf2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	2202      	movs	r2, #2
 800ebec:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ebee:	2302      	movs	r3, #2
 800ebf0:	e036      	b.n	800ec60 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebf8:	f003 0320 	and.w	r3, r3, #32
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d005      	beq.n	800ec0c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	2220      	movs	r2, #32
 800ec06:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ec08:	2320      	movs	r3, #32
 800ec0a:	e029      	b.n	800ec60 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	4a15      	ldr	r2, [pc, #84]	; (800ec68 <SD_FindSCR+0x19c>)
 800ec12:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	061a      	lsls	r2, r3, #24
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	021b      	lsls	r3, r3, #8
 800ec1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ec20:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	0a1b      	lsrs	r3, r3, #8
 800ec26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ec2a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	0e1b      	lsrs	r3, r3, #24
 800ec30:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ec32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec34:	601a      	str	r2, [r3, #0]
    scr++;
 800ec36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec38:	3304      	adds	r3, #4
 800ec3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	061a      	lsls	r2, r3, #24
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	021b      	lsls	r3, r3, #8
 800ec44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ec48:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ec4a:	68bb      	ldr	r3, [r7, #8]
 800ec4c:	0a1b      	lsrs	r3, r3, #8
 800ec4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ec52:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	0e1b      	lsrs	r3, r3, #24
 800ec58:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ec5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec5c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ec5e:	2300      	movs	r3, #0
}
 800ec60:	4618      	mov	r0, r3
 800ec62:	3738      	adds	r7, #56	; 0x38
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}
 800ec68:	18000f3a 	.word	0x18000f3a

0800ec6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b082      	sub	sp, #8
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d101      	bne.n	800ec7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	e01d      	b.n	800ecba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec84:	b2db      	uxtb	r3, r3
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d106      	bne.n	800ec98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	f7f6 fe12 	bl	80058bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2202      	movs	r2, #2
 800ec9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681a      	ldr	r2, [r3, #0]
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	3304      	adds	r3, #4
 800eca8:	4619      	mov	r1, r3
 800ecaa:	4610      	mov	r0, r2
 800ecac:	f000 fc0c 	bl	800f4c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2201      	movs	r2, #1
 800ecb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ecb8:	2300      	movs	r3, #0
}
 800ecba:	4618      	mov	r0, r3
 800ecbc:	3708      	adds	r7, #8
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}
	...

0800ecc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b085      	sub	sp, #20
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	68da      	ldr	r2, [r3, #12]
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	f042 0201 	orr.w	r2, r2, #1
 800ecda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	689a      	ldr	r2, [r3, #8]
 800ece2:	4b0c      	ldr	r3, [pc, #48]	; (800ed14 <HAL_TIM_Base_Start_IT+0x50>)
 800ece4:	4013      	ands	r3, r2
 800ece6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	2b06      	cmp	r3, #6
 800ecec:	d00b      	beq.n	800ed06 <HAL_TIM_Base_Start_IT+0x42>
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecf4:	d007      	beq.n	800ed06 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	681a      	ldr	r2, [r3, #0]
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	f042 0201 	orr.w	r2, r2, #1
 800ed04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ed06:	2300      	movs	r3, #0
}
 800ed08:	4618      	mov	r0, r3
 800ed0a:	3714      	adds	r7, #20
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed12:	4770      	bx	lr
 800ed14:	00010007 	.word	0x00010007

0800ed18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b082      	sub	sp, #8
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d101      	bne.n	800ed2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ed26:	2301      	movs	r3, #1
 800ed28:	e01d      	b.n	800ed66 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed30:	b2db      	uxtb	r3, r3
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d106      	bne.n	800ed44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	2200      	movs	r2, #0
 800ed3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ed3e:	6878      	ldr	r0, [r7, #4]
 800ed40:	f7f6 fe18 	bl	8005974 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2202      	movs	r2, #2
 800ed48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681a      	ldr	r2, [r3, #0]
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	3304      	adds	r3, #4
 800ed54:	4619      	mov	r1, r3
 800ed56:	4610      	mov	r0, r2
 800ed58:	f000 fbb6 	bl	800f4c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2201      	movs	r2, #1
 800ed60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ed64:	2300      	movs	r3, #0
}
 800ed66:	4618      	mov	r0, r3
 800ed68:	3708      	adds	r7, #8
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd80      	pop	{r7, pc}
	...

0800ed70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b084      	sub	sp, #16
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
 800ed78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	2201      	movs	r2, #1
 800ed80:	6839      	ldr	r1, [r7, #0]
 800ed82:	4618      	mov	r0, r3
 800ed84:	f000 ffa6 	bl	800fcd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	4a1e      	ldr	r2, [pc, #120]	; (800ee08 <HAL_TIM_PWM_Start+0x98>)
 800ed8e:	4293      	cmp	r3, r2
 800ed90:	d013      	beq.n	800edba <HAL_TIM_PWM_Start+0x4a>
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	4a1d      	ldr	r2, [pc, #116]	; (800ee0c <HAL_TIM_PWM_Start+0x9c>)
 800ed98:	4293      	cmp	r3, r2
 800ed9a:	d00e      	beq.n	800edba <HAL_TIM_PWM_Start+0x4a>
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	4a1b      	ldr	r2, [pc, #108]	; (800ee10 <HAL_TIM_PWM_Start+0xa0>)
 800eda2:	4293      	cmp	r3, r2
 800eda4:	d009      	beq.n	800edba <HAL_TIM_PWM_Start+0x4a>
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	4a1a      	ldr	r2, [pc, #104]	; (800ee14 <HAL_TIM_PWM_Start+0xa4>)
 800edac:	4293      	cmp	r3, r2
 800edae:	d004      	beq.n	800edba <HAL_TIM_PWM_Start+0x4a>
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	4a18      	ldr	r2, [pc, #96]	; (800ee18 <HAL_TIM_PWM_Start+0xa8>)
 800edb6:	4293      	cmp	r3, r2
 800edb8:	d101      	bne.n	800edbe <HAL_TIM_PWM_Start+0x4e>
 800edba:	2301      	movs	r3, #1
 800edbc:	e000      	b.n	800edc0 <HAL_TIM_PWM_Start+0x50>
 800edbe:	2300      	movs	r3, #0
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d007      	beq.n	800edd4 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800edd2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	689a      	ldr	r2, [r3, #8]
 800edda:	4b10      	ldr	r3, [pc, #64]	; (800ee1c <HAL_TIM_PWM_Start+0xac>)
 800eddc:	4013      	ands	r3, r2
 800edde:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	2b06      	cmp	r3, #6
 800ede4:	d00b      	beq.n	800edfe <HAL_TIM_PWM_Start+0x8e>
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800edec:	d007      	beq.n	800edfe <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	681a      	ldr	r2, [r3, #0]
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	f042 0201 	orr.w	r2, r2, #1
 800edfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800edfe:	2300      	movs	r3, #0
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	3710      	adds	r7, #16
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}
 800ee08:	40010000 	.word	0x40010000
 800ee0c:	40010400 	.word	0x40010400
 800ee10:	40014000 	.word	0x40014000
 800ee14:	40014400 	.word	0x40014400
 800ee18:	40014800 	.word	0x40014800
 800ee1c:	00010007 	.word	0x00010007

0800ee20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b082      	sub	sp, #8
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	691b      	ldr	r3, [r3, #16]
 800ee2e:	f003 0302 	and.w	r3, r3, #2
 800ee32:	2b02      	cmp	r3, #2
 800ee34:	d122      	bne.n	800ee7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	68db      	ldr	r3, [r3, #12]
 800ee3c:	f003 0302 	and.w	r3, r3, #2
 800ee40:	2b02      	cmp	r3, #2
 800ee42:	d11b      	bne.n	800ee7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	f06f 0202 	mvn.w	r2, #2
 800ee4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	2201      	movs	r2, #1
 800ee52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	699b      	ldr	r3, [r3, #24]
 800ee5a:	f003 0303 	and.w	r3, r3, #3
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d003      	beq.n	800ee6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ee62:	6878      	ldr	r0, [r7, #4]
 800ee64:	f000 fb12 	bl	800f48c <HAL_TIM_IC_CaptureCallback>
 800ee68:	e005      	b.n	800ee76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f000 fb04 	bl	800f478 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee70:	6878      	ldr	r0, [r7, #4]
 800ee72:	f000 fb15 	bl	800f4a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	2200      	movs	r2, #0
 800ee7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	691b      	ldr	r3, [r3, #16]
 800ee82:	f003 0304 	and.w	r3, r3, #4
 800ee86:	2b04      	cmp	r3, #4
 800ee88:	d122      	bne.n	800eed0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	68db      	ldr	r3, [r3, #12]
 800ee90:	f003 0304 	and.w	r3, r3, #4
 800ee94:	2b04      	cmp	r3, #4
 800ee96:	d11b      	bne.n	800eed0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	f06f 0204 	mvn.w	r2, #4
 800eea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	2202      	movs	r2, #2
 800eea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	699b      	ldr	r3, [r3, #24]
 800eeae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d003      	beq.n	800eebe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eeb6:	6878      	ldr	r0, [r7, #4]
 800eeb8:	f000 fae8 	bl	800f48c <HAL_TIM_IC_CaptureCallback>
 800eebc:	e005      	b.n	800eeca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f000 fada 	bl	800f478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eec4:	6878      	ldr	r0, [r7, #4]
 800eec6:	f000 faeb 	bl	800f4a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	2200      	movs	r2, #0
 800eece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	691b      	ldr	r3, [r3, #16]
 800eed6:	f003 0308 	and.w	r3, r3, #8
 800eeda:	2b08      	cmp	r3, #8
 800eedc:	d122      	bne.n	800ef24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	68db      	ldr	r3, [r3, #12]
 800eee4:	f003 0308 	and.w	r3, r3, #8
 800eee8:	2b08      	cmp	r3, #8
 800eeea:	d11b      	bne.n	800ef24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	f06f 0208 	mvn.w	r2, #8
 800eef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	2204      	movs	r2, #4
 800eefa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	69db      	ldr	r3, [r3, #28]
 800ef02:	f003 0303 	and.w	r3, r3, #3
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d003      	beq.n	800ef12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f000 fabe 	bl	800f48c <HAL_TIM_IC_CaptureCallback>
 800ef10:	e005      	b.n	800ef1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef12:	6878      	ldr	r0, [r7, #4]
 800ef14:	f000 fab0 	bl	800f478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef18:	6878      	ldr	r0, [r7, #4]
 800ef1a:	f000 fac1 	bl	800f4a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	2200      	movs	r2, #0
 800ef22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	691b      	ldr	r3, [r3, #16]
 800ef2a:	f003 0310 	and.w	r3, r3, #16
 800ef2e:	2b10      	cmp	r3, #16
 800ef30:	d122      	bne.n	800ef78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	68db      	ldr	r3, [r3, #12]
 800ef38:	f003 0310 	and.w	r3, r3, #16
 800ef3c:	2b10      	cmp	r3, #16
 800ef3e:	d11b      	bne.n	800ef78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	f06f 0210 	mvn.w	r2, #16
 800ef48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2208      	movs	r2, #8
 800ef4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	69db      	ldr	r3, [r3, #28]
 800ef56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d003      	beq.n	800ef66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ef5e:	6878      	ldr	r0, [r7, #4]
 800ef60:	f000 fa94 	bl	800f48c <HAL_TIM_IC_CaptureCallback>
 800ef64:	e005      	b.n	800ef72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f000 fa86 	bl	800f478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	f000 fa97 	bl	800f4a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2200      	movs	r2, #0
 800ef76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	691b      	ldr	r3, [r3, #16]
 800ef7e:	f003 0301 	and.w	r3, r3, #1
 800ef82:	2b01      	cmp	r3, #1
 800ef84:	d10e      	bne.n	800efa4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	68db      	ldr	r3, [r3, #12]
 800ef8c:	f003 0301 	and.w	r3, r3, #1
 800ef90:	2b01      	cmp	r3, #1
 800ef92:	d107      	bne.n	800efa4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	f06f 0201 	mvn.w	r2, #1
 800ef9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ef9e:	6878      	ldr	r0, [r7, #4]
 800efa0:	f7f1 fd66 	bl	8000a70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	691b      	ldr	r3, [r3, #16]
 800efaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800efae:	2b80      	cmp	r3, #128	; 0x80
 800efb0:	d10e      	bne.n	800efd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	68db      	ldr	r3, [r3, #12]
 800efb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800efbc:	2b80      	cmp	r3, #128	; 0x80
 800efbe:	d107      	bne.n	800efd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800efc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800efca:	6878      	ldr	r0, [r7, #4]
 800efcc:	f000 ffb8 	bl	800ff40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	691b      	ldr	r3, [r3, #16]
 800efd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800efda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800efde:	d10e      	bne.n	800effe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	68db      	ldr	r3, [r3, #12]
 800efe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800efea:	2b80      	cmp	r3, #128	; 0x80
 800efec:	d107      	bne.n	800effe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800eff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800eff8:	6878      	ldr	r0, [r7, #4]
 800effa:	f000 ffab 	bl	800ff54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	691b      	ldr	r3, [r3, #16]
 800f004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f008:	2b40      	cmp	r3, #64	; 0x40
 800f00a:	d10e      	bne.n	800f02a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	68db      	ldr	r3, [r3, #12]
 800f012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f016:	2b40      	cmp	r3, #64	; 0x40
 800f018:	d107      	bne.n	800f02a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f000 fa45 	bl	800f4b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	691b      	ldr	r3, [r3, #16]
 800f030:	f003 0320 	and.w	r3, r3, #32
 800f034:	2b20      	cmp	r3, #32
 800f036:	d10e      	bne.n	800f056 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	68db      	ldr	r3, [r3, #12]
 800f03e:	f003 0320 	and.w	r3, r3, #32
 800f042:	2b20      	cmp	r3, #32
 800f044:	d107      	bne.n	800f056 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	f06f 0220 	mvn.w	r2, #32
 800f04e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f050:	6878      	ldr	r0, [r7, #4]
 800f052:	f000 ff6b 	bl	800ff2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f056:	bf00      	nop
 800f058:	3708      	adds	r7, #8
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}
	...

0800f060 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b084      	sub	sp, #16
 800f064:	af00      	add	r7, sp, #0
 800f066:	60f8      	str	r0, [r7, #12]
 800f068:	60b9      	str	r1, [r7, #8]
 800f06a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f072:	2b01      	cmp	r3, #1
 800f074:	d101      	bne.n	800f07a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f076:	2302      	movs	r3, #2
 800f078:	e105      	b.n	800f286 <HAL_TIM_PWM_ConfigChannel+0x226>
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	2201      	movs	r2, #1
 800f07e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	2202      	movs	r2, #2
 800f086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	2b14      	cmp	r3, #20
 800f08e:	f200 80f0 	bhi.w	800f272 <HAL_TIM_PWM_ConfigChannel+0x212>
 800f092:	a201      	add	r2, pc, #4	; (adr r2, 800f098 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800f094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f098:	0800f0ed 	.word	0x0800f0ed
 800f09c:	0800f273 	.word	0x0800f273
 800f0a0:	0800f273 	.word	0x0800f273
 800f0a4:	0800f273 	.word	0x0800f273
 800f0a8:	0800f12d 	.word	0x0800f12d
 800f0ac:	0800f273 	.word	0x0800f273
 800f0b0:	0800f273 	.word	0x0800f273
 800f0b4:	0800f273 	.word	0x0800f273
 800f0b8:	0800f16f 	.word	0x0800f16f
 800f0bc:	0800f273 	.word	0x0800f273
 800f0c0:	0800f273 	.word	0x0800f273
 800f0c4:	0800f273 	.word	0x0800f273
 800f0c8:	0800f1af 	.word	0x0800f1af
 800f0cc:	0800f273 	.word	0x0800f273
 800f0d0:	0800f273 	.word	0x0800f273
 800f0d4:	0800f273 	.word	0x0800f273
 800f0d8:	0800f1f1 	.word	0x0800f1f1
 800f0dc:	0800f273 	.word	0x0800f273
 800f0e0:	0800f273 	.word	0x0800f273
 800f0e4:	0800f273 	.word	0x0800f273
 800f0e8:	0800f231 	.word	0x0800f231
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	68b9      	ldr	r1, [r7, #8]
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f000 fa82 	bl	800f5fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	699a      	ldr	r2, [r3, #24]
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	f042 0208 	orr.w	r2, r2, #8
 800f106:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	699a      	ldr	r2, [r3, #24]
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	f022 0204 	bic.w	r2, r2, #4
 800f116:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	6999      	ldr	r1, [r3, #24]
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	691a      	ldr	r2, [r3, #16]
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	430a      	orrs	r2, r1
 800f128:	619a      	str	r2, [r3, #24]
      break;
 800f12a:	e0a3      	b.n	800f274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	68b9      	ldr	r1, [r7, #8]
 800f132:	4618      	mov	r0, r3
 800f134:	f000 faf2 	bl	800f71c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	699a      	ldr	r2, [r3, #24]
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f146:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	699a      	ldr	r2, [r3, #24]
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f156:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	6999      	ldr	r1, [r3, #24]
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	691b      	ldr	r3, [r3, #16]
 800f162:	021a      	lsls	r2, r3, #8
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	430a      	orrs	r2, r1
 800f16a:	619a      	str	r2, [r3, #24]
      break;
 800f16c:	e082      	b.n	800f274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	68b9      	ldr	r1, [r7, #8]
 800f174:	4618      	mov	r0, r3
 800f176:	f000 fb5b 	bl	800f830 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	69da      	ldr	r2, [r3, #28]
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	f042 0208 	orr.w	r2, r2, #8
 800f188:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	69da      	ldr	r2, [r3, #28]
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	f022 0204 	bic.w	r2, r2, #4
 800f198:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	69d9      	ldr	r1, [r3, #28]
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	691a      	ldr	r2, [r3, #16]
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	430a      	orrs	r2, r1
 800f1aa:	61da      	str	r2, [r3, #28]
      break;
 800f1ac:	e062      	b.n	800f274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	68b9      	ldr	r1, [r7, #8]
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f000 fbc1 	bl	800f93c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	69da      	ldr	r2, [r3, #28]
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f1c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	69da      	ldr	r2, [r3, #28]
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f1d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	69d9      	ldr	r1, [r3, #28]
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	691b      	ldr	r3, [r3, #16]
 800f1e4:	021a      	lsls	r2, r3, #8
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	430a      	orrs	r2, r1
 800f1ec:	61da      	str	r2, [r3, #28]
      break;
 800f1ee:	e041      	b.n	800f274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	68b9      	ldr	r1, [r7, #8]
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f000 fc08 	bl	800fa0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	f042 0208 	orr.w	r2, r2, #8
 800f20a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	f022 0204 	bic.w	r2, r2, #4
 800f21a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	691a      	ldr	r2, [r3, #16]
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	430a      	orrs	r2, r1
 800f22c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f22e:	e021      	b.n	800f274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	68b9      	ldr	r1, [r7, #8]
 800f236:	4618      	mov	r0, r3
 800f238:	f000 fc4a 	bl	800fad0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f24a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f25a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	691b      	ldr	r3, [r3, #16]
 800f266:	021a      	lsls	r2, r3, #8
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	430a      	orrs	r2, r1
 800f26e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f270:	e000      	b.n	800f274 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800f272:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	2201      	movs	r2, #1
 800f278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	2200      	movs	r2, #0
 800f280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f284:	2300      	movs	r3, #0
}
 800f286:	4618      	mov	r0, r3
 800f288:	3710      	adds	r7, #16
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}
 800f28e:	bf00      	nop

0800f290 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b084      	sub	sp, #16
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
 800f298:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f2a0:	2b01      	cmp	r3, #1
 800f2a2:	d101      	bne.n	800f2a8 <HAL_TIM_ConfigClockSource+0x18>
 800f2a4:	2302      	movs	r3, #2
 800f2a6:	e0db      	b.n	800f460 <HAL_TIM_ConfigClockSource+0x1d0>
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2201      	movs	r2, #1
 800f2ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2202      	movs	r2, #2
 800f2b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	689b      	ldr	r3, [r3, #8]
 800f2be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f2c0:	68fa      	ldr	r2, [r7, #12]
 800f2c2:	4b69      	ldr	r3, [pc, #420]	; (800f468 <HAL_TIM_ConfigClockSource+0x1d8>)
 800f2c4:	4013      	ands	r3, r2
 800f2c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f2ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	68fa      	ldr	r2, [r7, #12]
 800f2d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	4a63      	ldr	r2, [pc, #396]	; (800f46c <HAL_TIM_ConfigClockSource+0x1dc>)
 800f2de:	4293      	cmp	r3, r2
 800f2e0:	f000 80a9 	beq.w	800f436 <HAL_TIM_ConfigClockSource+0x1a6>
 800f2e4:	4a61      	ldr	r2, [pc, #388]	; (800f46c <HAL_TIM_ConfigClockSource+0x1dc>)
 800f2e6:	4293      	cmp	r3, r2
 800f2e8:	f200 80ae 	bhi.w	800f448 <HAL_TIM_ConfigClockSource+0x1b8>
 800f2ec:	4a60      	ldr	r2, [pc, #384]	; (800f470 <HAL_TIM_ConfigClockSource+0x1e0>)
 800f2ee:	4293      	cmp	r3, r2
 800f2f0:	f000 80a1 	beq.w	800f436 <HAL_TIM_ConfigClockSource+0x1a6>
 800f2f4:	4a5e      	ldr	r2, [pc, #376]	; (800f470 <HAL_TIM_ConfigClockSource+0x1e0>)
 800f2f6:	4293      	cmp	r3, r2
 800f2f8:	f200 80a6 	bhi.w	800f448 <HAL_TIM_ConfigClockSource+0x1b8>
 800f2fc:	4a5d      	ldr	r2, [pc, #372]	; (800f474 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f2fe:	4293      	cmp	r3, r2
 800f300:	f000 8099 	beq.w	800f436 <HAL_TIM_ConfigClockSource+0x1a6>
 800f304:	4a5b      	ldr	r2, [pc, #364]	; (800f474 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f306:	4293      	cmp	r3, r2
 800f308:	f200 809e 	bhi.w	800f448 <HAL_TIM_ConfigClockSource+0x1b8>
 800f30c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f310:	f000 8091 	beq.w	800f436 <HAL_TIM_ConfigClockSource+0x1a6>
 800f314:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f318:	f200 8096 	bhi.w	800f448 <HAL_TIM_ConfigClockSource+0x1b8>
 800f31c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f320:	f000 8089 	beq.w	800f436 <HAL_TIM_ConfigClockSource+0x1a6>
 800f324:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f328:	f200 808e 	bhi.w	800f448 <HAL_TIM_ConfigClockSource+0x1b8>
 800f32c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f330:	d03e      	beq.n	800f3b0 <HAL_TIM_ConfigClockSource+0x120>
 800f332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f336:	f200 8087 	bhi.w	800f448 <HAL_TIM_ConfigClockSource+0x1b8>
 800f33a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f33e:	f000 8085 	beq.w	800f44c <HAL_TIM_ConfigClockSource+0x1bc>
 800f342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f346:	d87f      	bhi.n	800f448 <HAL_TIM_ConfigClockSource+0x1b8>
 800f348:	2b70      	cmp	r3, #112	; 0x70
 800f34a:	d01a      	beq.n	800f382 <HAL_TIM_ConfigClockSource+0xf2>
 800f34c:	2b70      	cmp	r3, #112	; 0x70
 800f34e:	d87b      	bhi.n	800f448 <HAL_TIM_ConfigClockSource+0x1b8>
 800f350:	2b60      	cmp	r3, #96	; 0x60
 800f352:	d050      	beq.n	800f3f6 <HAL_TIM_ConfigClockSource+0x166>
 800f354:	2b60      	cmp	r3, #96	; 0x60
 800f356:	d877      	bhi.n	800f448 <HAL_TIM_ConfigClockSource+0x1b8>
 800f358:	2b50      	cmp	r3, #80	; 0x50
 800f35a:	d03c      	beq.n	800f3d6 <HAL_TIM_ConfigClockSource+0x146>
 800f35c:	2b50      	cmp	r3, #80	; 0x50
 800f35e:	d873      	bhi.n	800f448 <HAL_TIM_ConfigClockSource+0x1b8>
 800f360:	2b40      	cmp	r3, #64	; 0x40
 800f362:	d058      	beq.n	800f416 <HAL_TIM_ConfigClockSource+0x186>
 800f364:	2b40      	cmp	r3, #64	; 0x40
 800f366:	d86f      	bhi.n	800f448 <HAL_TIM_ConfigClockSource+0x1b8>
 800f368:	2b30      	cmp	r3, #48	; 0x30
 800f36a:	d064      	beq.n	800f436 <HAL_TIM_ConfigClockSource+0x1a6>
 800f36c:	2b30      	cmp	r3, #48	; 0x30
 800f36e:	d86b      	bhi.n	800f448 <HAL_TIM_ConfigClockSource+0x1b8>
 800f370:	2b20      	cmp	r3, #32
 800f372:	d060      	beq.n	800f436 <HAL_TIM_ConfigClockSource+0x1a6>
 800f374:	2b20      	cmp	r3, #32
 800f376:	d867      	bhi.n	800f448 <HAL_TIM_ConfigClockSource+0x1b8>
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d05c      	beq.n	800f436 <HAL_TIM_ConfigClockSource+0x1a6>
 800f37c:	2b10      	cmp	r3, #16
 800f37e:	d05a      	beq.n	800f436 <HAL_TIM_ConfigClockSource+0x1a6>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800f380:	e062      	b.n	800f448 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6818      	ldr	r0, [r3, #0]
 800f386:	683b      	ldr	r3, [r7, #0]
 800f388:	6899      	ldr	r1, [r3, #8]
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	685a      	ldr	r2, [r3, #4]
 800f38e:	683b      	ldr	r3, [r7, #0]
 800f390:	68db      	ldr	r3, [r3, #12]
 800f392:	f000 fc7f 	bl	800fc94 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	689b      	ldr	r3, [r3, #8]
 800f39c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f3a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	68fa      	ldr	r2, [r7, #12]
 800f3ac:	609a      	str	r2, [r3, #8]
      break;
 800f3ae:	e04e      	b.n	800f44e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	6818      	ldr	r0, [r3, #0]
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	6899      	ldr	r1, [r3, #8]
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	685a      	ldr	r2, [r3, #4]
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	68db      	ldr	r3, [r3, #12]
 800f3c0:	f000 fc68 	bl	800fc94 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	689a      	ldr	r2, [r3, #8]
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f3d2:	609a      	str	r2, [r3, #8]
      break;
 800f3d4:	e03b      	b.n	800f44e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	6818      	ldr	r0, [r3, #0]
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	6859      	ldr	r1, [r3, #4]
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	68db      	ldr	r3, [r3, #12]
 800f3e2:	461a      	mov	r2, r3
 800f3e4:	f000 fbd8 	bl	800fb98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	2150      	movs	r1, #80	; 0x50
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f000 fc32 	bl	800fc58 <TIM_ITRx_SetConfig>
      break;
 800f3f4:	e02b      	b.n	800f44e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6818      	ldr	r0, [r3, #0]
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	6859      	ldr	r1, [r3, #4]
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	68db      	ldr	r3, [r3, #12]
 800f402:	461a      	mov	r2, r3
 800f404:	f000 fbf7 	bl	800fbf6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	2160      	movs	r1, #96	; 0x60
 800f40e:	4618      	mov	r0, r3
 800f410:	f000 fc22 	bl	800fc58 <TIM_ITRx_SetConfig>
      break;
 800f414:	e01b      	b.n	800f44e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	6818      	ldr	r0, [r3, #0]
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	6859      	ldr	r1, [r3, #4]
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	68db      	ldr	r3, [r3, #12]
 800f422:	461a      	mov	r2, r3
 800f424:	f000 fbb8 	bl	800fb98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	2140      	movs	r1, #64	; 0x40
 800f42e:	4618      	mov	r0, r3
 800f430:	f000 fc12 	bl	800fc58 <TIM_ITRx_SetConfig>
      break;
 800f434:	e00b      	b.n	800f44e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	681a      	ldr	r2, [r3, #0]
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	4619      	mov	r1, r3
 800f440:	4610      	mov	r0, r2
 800f442:	f000 fc09 	bl	800fc58 <TIM_ITRx_SetConfig>
      break;
 800f446:	e002      	b.n	800f44e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800f448:	bf00      	nop
 800f44a:	e000      	b.n	800f44e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800f44c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	2201      	movs	r2, #1
 800f452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	2200      	movs	r2, #0
 800f45a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f45e:	2300      	movs	r3, #0
}
 800f460:	4618      	mov	r0, r3
 800f462:	3710      	adds	r7, #16
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}
 800f468:	ffceff88 	.word	0xffceff88
 800f46c:	00100040 	.word	0x00100040
 800f470:	00100030 	.word	0x00100030
 800f474:	00100020 	.word	0x00100020

0800f478 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f478:	b480      	push	{r7}
 800f47a:	b083      	sub	sp, #12
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f480:	bf00      	nop
 800f482:	370c      	adds	r7, #12
 800f484:	46bd      	mov	sp, r7
 800f486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48a:	4770      	bx	lr

0800f48c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f48c:	b480      	push	{r7}
 800f48e:	b083      	sub	sp, #12
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f494:	bf00      	nop
 800f496:	370c      	adds	r7, #12
 800f498:	46bd      	mov	sp, r7
 800f49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49e:	4770      	bx	lr

0800f4a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f4a0:	b480      	push	{r7}
 800f4a2:	b083      	sub	sp, #12
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f4a8:	bf00      	nop
 800f4aa:	370c      	adds	r7, #12
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b2:	4770      	bx	lr

0800f4b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f4b4:	b480      	push	{r7}
 800f4b6:	b083      	sub	sp, #12
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f4bc:	bf00      	nop
 800f4be:	370c      	adds	r7, #12
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c6:	4770      	bx	lr

0800f4c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f4c8:	b480      	push	{r7}
 800f4ca:	b085      	sub	sp, #20
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
 800f4d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	4a40      	ldr	r2, [pc, #256]	; (800f5dc <TIM_Base_SetConfig+0x114>)
 800f4dc:	4293      	cmp	r3, r2
 800f4de:	d013      	beq.n	800f508 <TIM_Base_SetConfig+0x40>
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4e6:	d00f      	beq.n	800f508 <TIM_Base_SetConfig+0x40>
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	4a3d      	ldr	r2, [pc, #244]	; (800f5e0 <TIM_Base_SetConfig+0x118>)
 800f4ec:	4293      	cmp	r3, r2
 800f4ee:	d00b      	beq.n	800f508 <TIM_Base_SetConfig+0x40>
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	4a3c      	ldr	r2, [pc, #240]	; (800f5e4 <TIM_Base_SetConfig+0x11c>)
 800f4f4:	4293      	cmp	r3, r2
 800f4f6:	d007      	beq.n	800f508 <TIM_Base_SetConfig+0x40>
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	4a3b      	ldr	r2, [pc, #236]	; (800f5e8 <TIM_Base_SetConfig+0x120>)
 800f4fc:	4293      	cmp	r3, r2
 800f4fe:	d003      	beq.n	800f508 <TIM_Base_SetConfig+0x40>
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	4a3a      	ldr	r2, [pc, #232]	; (800f5ec <TIM_Base_SetConfig+0x124>)
 800f504:	4293      	cmp	r3, r2
 800f506:	d108      	bne.n	800f51a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f50e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	685b      	ldr	r3, [r3, #4]
 800f514:	68fa      	ldr	r2, [r7, #12]
 800f516:	4313      	orrs	r3, r2
 800f518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	4a2f      	ldr	r2, [pc, #188]	; (800f5dc <TIM_Base_SetConfig+0x114>)
 800f51e:	4293      	cmp	r3, r2
 800f520:	d01f      	beq.n	800f562 <TIM_Base_SetConfig+0x9a>
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f528:	d01b      	beq.n	800f562 <TIM_Base_SetConfig+0x9a>
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	4a2c      	ldr	r2, [pc, #176]	; (800f5e0 <TIM_Base_SetConfig+0x118>)
 800f52e:	4293      	cmp	r3, r2
 800f530:	d017      	beq.n	800f562 <TIM_Base_SetConfig+0x9a>
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	4a2b      	ldr	r2, [pc, #172]	; (800f5e4 <TIM_Base_SetConfig+0x11c>)
 800f536:	4293      	cmp	r3, r2
 800f538:	d013      	beq.n	800f562 <TIM_Base_SetConfig+0x9a>
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	4a2a      	ldr	r2, [pc, #168]	; (800f5e8 <TIM_Base_SetConfig+0x120>)
 800f53e:	4293      	cmp	r3, r2
 800f540:	d00f      	beq.n	800f562 <TIM_Base_SetConfig+0x9a>
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	4a29      	ldr	r2, [pc, #164]	; (800f5ec <TIM_Base_SetConfig+0x124>)
 800f546:	4293      	cmp	r3, r2
 800f548:	d00b      	beq.n	800f562 <TIM_Base_SetConfig+0x9a>
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	4a28      	ldr	r2, [pc, #160]	; (800f5f0 <TIM_Base_SetConfig+0x128>)
 800f54e:	4293      	cmp	r3, r2
 800f550:	d007      	beq.n	800f562 <TIM_Base_SetConfig+0x9a>
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	4a27      	ldr	r2, [pc, #156]	; (800f5f4 <TIM_Base_SetConfig+0x12c>)
 800f556:	4293      	cmp	r3, r2
 800f558:	d003      	beq.n	800f562 <TIM_Base_SetConfig+0x9a>
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	4a26      	ldr	r2, [pc, #152]	; (800f5f8 <TIM_Base_SetConfig+0x130>)
 800f55e:	4293      	cmp	r3, r2
 800f560:	d108      	bne.n	800f574 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	68db      	ldr	r3, [r3, #12]
 800f56e:	68fa      	ldr	r2, [r7, #12]
 800f570:	4313      	orrs	r3, r2
 800f572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f57a:	683b      	ldr	r3, [r7, #0]
 800f57c:	695b      	ldr	r3, [r3, #20]
 800f57e:	4313      	orrs	r3, r2
 800f580:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	68fa      	ldr	r2, [r7, #12]
 800f586:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	689a      	ldr	r2, [r3, #8]
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	681a      	ldr	r2, [r3, #0]
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	4a10      	ldr	r2, [pc, #64]	; (800f5dc <TIM_Base_SetConfig+0x114>)
 800f59c:	4293      	cmp	r3, r2
 800f59e:	d00f      	beq.n	800f5c0 <TIM_Base_SetConfig+0xf8>
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	4a12      	ldr	r2, [pc, #72]	; (800f5ec <TIM_Base_SetConfig+0x124>)
 800f5a4:	4293      	cmp	r3, r2
 800f5a6:	d00b      	beq.n	800f5c0 <TIM_Base_SetConfig+0xf8>
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	4a11      	ldr	r2, [pc, #68]	; (800f5f0 <TIM_Base_SetConfig+0x128>)
 800f5ac:	4293      	cmp	r3, r2
 800f5ae:	d007      	beq.n	800f5c0 <TIM_Base_SetConfig+0xf8>
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	4a10      	ldr	r2, [pc, #64]	; (800f5f4 <TIM_Base_SetConfig+0x12c>)
 800f5b4:	4293      	cmp	r3, r2
 800f5b6:	d003      	beq.n	800f5c0 <TIM_Base_SetConfig+0xf8>
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	4a0f      	ldr	r2, [pc, #60]	; (800f5f8 <TIM_Base_SetConfig+0x130>)
 800f5bc:	4293      	cmp	r3, r2
 800f5be:	d103      	bne.n	800f5c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	691a      	ldr	r2, [r3, #16]
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2201      	movs	r2, #1
 800f5cc:	615a      	str	r2, [r3, #20]
}
 800f5ce:	bf00      	nop
 800f5d0:	3714      	adds	r7, #20
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d8:	4770      	bx	lr
 800f5da:	bf00      	nop
 800f5dc:	40010000 	.word	0x40010000
 800f5e0:	40000400 	.word	0x40000400
 800f5e4:	40000800 	.word	0x40000800
 800f5e8:	40000c00 	.word	0x40000c00
 800f5ec:	40010400 	.word	0x40010400
 800f5f0:	40014000 	.word	0x40014000
 800f5f4:	40014400 	.word	0x40014400
 800f5f8:	40014800 	.word	0x40014800

0800f5fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f5fc:	b480      	push	{r7}
 800f5fe:	b087      	sub	sp, #28
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
 800f604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	6a1b      	ldr	r3, [r3, #32]
 800f60a:	f023 0201 	bic.w	r2, r3, #1
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	6a1b      	ldr	r3, [r3, #32]
 800f616:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	685b      	ldr	r3, [r3, #4]
 800f61c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	699b      	ldr	r3, [r3, #24]
 800f622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f624:	68fa      	ldr	r2, [r7, #12]
 800f626:	4b37      	ldr	r3, [pc, #220]	; (800f704 <TIM_OC1_SetConfig+0x108>)
 800f628:	4013      	ands	r3, r2
 800f62a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	f023 0303 	bic.w	r3, r3, #3
 800f632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	68fa      	ldr	r2, [r7, #12]
 800f63a:	4313      	orrs	r3, r2
 800f63c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f63e:	697b      	ldr	r3, [r7, #20]
 800f640:	f023 0302 	bic.w	r3, r3, #2
 800f644:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f646:	683b      	ldr	r3, [r7, #0]
 800f648:	689b      	ldr	r3, [r3, #8]
 800f64a:	697a      	ldr	r2, [r7, #20]
 800f64c:	4313      	orrs	r3, r2
 800f64e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	4a2d      	ldr	r2, [pc, #180]	; (800f708 <TIM_OC1_SetConfig+0x10c>)
 800f654:	4293      	cmp	r3, r2
 800f656:	d00f      	beq.n	800f678 <TIM_OC1_SetConfig+0x7c>
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	4a2c      	ldr	r2, [pc, #176]	; (800f70c <TIM_OC1_SetConfig+0x110>)
 800f65c:	4293      	cmp	r3, r2
 800f65e:	d00b      	beq.n	800f678 <TIM_OC1_SetConfig+0x7c>
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	4a2b      	ldr	r2, [pc, #172]	; (800f710 <TIM_OC1_SetConfig+0x114>)
 800f664:	4293      	cmp	r3, r2
 800f666:	d007      	beq.n	800f678 <TIM_OC1_SetConfig+0x7c>
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	4a2a      	ldr	r2, [pc, #168]	; (800f714 <TIM_OC1_SetConfig+0x118>)
 800f66c:	4293      	cmp	r3, r2
 800f66e:	d003      	beq.n	800f678 <TIM_OC1_SetConfig+0x7c>
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	4a29      	ldr	r2, [pc, #164]	; (800f718 <TIM_OC1_SetConfig+0x11c>)
 800f674:	4293      	cmp	r3, r2
 800f676:	d10c      	bne.n	800f692 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f678:	697b      	ldr	r3, [r7, #20]
 800f67a:	f023 0308 	bic.w	r3, r3, #8
 800f67e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	68db      	ldr	r3, [r3, #12]
 800f684:	697a      	ldr	r2, [r7, #20]
 800f686:	4313      	orrs	r3, r2
 800f688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f68a:	697b      	ldr	r3, [r7, #20]
 800f68c:	f023 0304 	bic.w	r3, r3, #4
 800f690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	4a1c      	ldr	r2, [pc, #112]	; (800f708 <TIM_OC1_SetConfig+0x10c>)
 800f696:	4293      	cmp	r3, r2
 800f698:	d00f      	beq.n	800f6ba <TIM_OC1_SetConfig+0xbe>
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	4a1b      	ldr	r2, [pc, #108]	; (800f70c <TIM_OC1_SetConfig+0x110>)
 800f69e:	4293      	cmp	r3, r2
 800f6a0:	d00b      	beq.n	800f6ba <TIM_OC1_SetConfig+0xbe>
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	4a1a      	ldr	r2, [pc, #104]	; (800f710 <TIM_OC1_SetConfig+0x114>)
 800f6a6:	4293      	cmp	r3, r2
 800f6a8:	d007      	beq.n	800f6ba <TIM_OC1_SetConfig+0xbe>
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	4a19      	ldr	r2, [pc, #100]	; (800f714 <TIM_OC1_SetConfig+0x118>)
 800f6ae:	4293      	cmp	r3, r2
 800f6b0:	d003      	beq.n	800f6ba <TIM_OC1_SetConfig+0xbe>
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	4a18      	ldr	r2, [pc, #96]	; (800f718 <TIM_OC1_SetConfig+0x11c>)
 800f6b6:	4293      	cmp	r3, r2
 800f6b8:	d111      	bne.n	800f6de <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f6ba:	693b      	ldr	r3, [r7, #16]
 800f6bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f6c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f6c2:	693b      	ldr	r3, [r7, #16]
 800f6c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f6c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	695b      	ldr	r3, [r3, #20]
 800f6ce:	693a      	ldr	r2, [r7, #16]
 800f6d0:	4313      	orrs	r3, r2
 800f6d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f6d4:	683b      	ldr	r3, [r7, #0]
 800f6d6:	699b      	ldr	r3, [r3, #24]
 800f6d8:	693a      	ldr	r2, [r7, #16]
 800f6da:	4313      	orrs	r3, r2
 800f6dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	693a      	ldr	r2, [r7, #16]
 800f6e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	68fa      	ldr	r2, [r7, #12]
 800f6e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	685a      	ldr	r2, [r3, #4]
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	697a      	ldr	r2, [r7, #20]
 800f6f6:	621a      	str	r2, [r3, #32]
}
 800f6f8:	bf00      	nop
 800f6fa:	371c      	adds	r7, #28
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f702:	4770      	bx	lr
 800f704:	fffeff8f 	.word	0xfffeff8f
 800f708:	40010000 	.word	0x40010000
 800f70c:	40010400 	.word	0x40010400
 800f710:	40014000 	.word	0x40014000
 800f714:	40014400 	.word	0x40014400
 800f718:	40014800 	.word	0x40014800

0800f71c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f71c:	b480      	push	{r7}
 800f71e:	b087      	sub	sp, #28
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
 800f724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	6a1b      	ldr	r3, [r3, #32]
 800f72a:	f023 0210 	bic.w	r2, r3, #16
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	6a1b      	ldr	r3, [r3, #32]
 800f736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	685b      	ldr	r3, [r3, #4]
 800f73c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	699b      	ldr	r3, [r3, #24]
 800f742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f744:	68fa      	ldr	r2, [r7, #12]
 800f746:	4b34      	ldr	r3, [pc, #208]	; (800f818 <TIM_OC2_SetConfig+0xfc>)
 800f748:	4013      	ands	r3, r2
 800f74a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f752:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	021b      	lsls	r3, r3, #8
 800f75a:	68fa      	ldr	r2, [r7, #12]
 800f75c:	4313      	orrs	r3, r2
 800f75e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f760:	697b      	ldr	r3, [r7, #20]
 800f762:	f023 0320 	bic.w	r3, r3, #32
 800f766:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	689b      	ldr	r3, [r3, #8]
 800f76c:	011b      	lsls	r3, r3, #4
 800f76e:	697a      	ldr	r2, [r7, #20]
 800f770:	4313      	orrs	r3, r2
 800f772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	4a29      	ldr	r2, [pc, #164]	; (800f81c <TIM_OC2_SetConfig+0x100>)
 800f778:	4293      	cmp	r3, r2
 800f77a:	d003      	beq.n	800f784 <TIM_OC2_SetConfig+0x68>
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	4a28      	ldr	r2, [pc, #160]	; (800f820 <TIM_OC2_SetConfig+0x104>)
 800f780:	4293      	cmp	r3, r2
 800f782:	d10d      	bne.n	800f7a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f784:	697b      	ldr	r3, [r7, #20]
 800f786:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f78a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	68db      	ldr	r3, [r3, #12]
 800f790:	011b      	lsls	r3, r3, #4
 800f792:	697a      	ldr	r2, [r7, #20]
 800f794:	4313      	orrs	r3, r2
 800f796:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f798:	697b      	ldr	r3, [r7, #20]
 800f79a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f79e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	4a1e      	ldr	r2, [pc, #120]	; (800f81c <TIM_OC2_SetConfig+0x100>)
 800f7a4:	4293      	cmp	r3, r2
 800f7a6:	d00f      	beq.n	800f7c8 <TIM_OC2_SetConfig+0xac>
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	4a1d      	ldr	r2, [pc, #116]	; (800f820 <TIM_OC2_SetConfig+0x104>)
 800f7ac:	4293      	cmp	r3, r2
 800f7ae:	d00b      	beq.n	800f7c8 <TIM_OC2_SetConfig+0xac>
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	4a1c      	ldr	r2, [pc, #112]	; (800f824 <TIM_OC2_SetConfig+0x108>)
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	d007      	beq.n	800f7c8 <TIM_OC2_SetConfig+0xac>
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	4a1b      	ldr	r2, [pc, #108]	; (800f828 <TIM_OC2_SetConfig+0x10c>)
 800f7bc:	4293      	cmp	r3, r2
 800f7be:	d003      	beq.n	800f7c8 <TIM_OC2_SetConfig+0xac>
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	4a1a      	ldr	r2, [pc, #104]	; (800f82c <TIM_OC2_SetConfig+0x110>)
 800f7c4:	4293      	cmp	r3, r2
 800f7c6:	d113      	bne.n	800f7f0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f7c8:	693b      	ldr	r3, [r7, #16]
 800f7ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f7ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f7d0:	693b      	ldr	r3, [r7, #16]
 800f7d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f7d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	695b      	ldr	r3, [r3, #20]
 800f7dc:	009b      	lsls	r3, r3, #2
 800f7de:	693a      	ldr	r2, [r7, #16]
 800f7e0:	4313      	orrs	r3, r2
 800f7e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	699b      	ldr	r3, [r3, #24]
 800f7e8:	009b      	lsls	r3, r3, #2
 800f7ea:	693a      	ldr	r2, [r7, #16]
 800f7ec:	4313      	orrs	r3, r2
 800f7ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	693a      	ldr	r2, [r7, #16]
 800f7f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	68fa      	ldr	r2, [r7, #12]
 800f7fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	685a      	ldr	r2, [r3, #4]
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	697a      	ldr	r2, [r7, #20]
 800f808:	621a      	str	r2, [r3, #32]
}
 800f80a:	bf00      	nop
 800f80c:	371c      	adds	r7, #28
 800f80e:	46bd      	mov	sp, r7
 800f810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f814:	4770      	bx	lr
 800f816:	bf00      	nop
 800f818:	feff8fff 	.word	0xfeff8fff
 800f81c:	40010000 	.word	0x40010000
 800f820:	40010400 	.word	0x40010400
 800f824:	40014000 	.word	0x40014000
 800f828:	40014400 	.word	0x40014400
 800f82c:	40014800 	.word	0x40014800

0800f830 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f830:	b480      	push	{r7}
 800f832:	b087      	sub	sp, #28
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
 800f838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	6a1b      	ldr	r3, [r3, #32]
 800f83e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	6a1b      	ldr	r3, [r3, #32]
 800f84a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	685b      	ldr	r3, [r3, #4]
 800f850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	69db      	ldr	r3, [r3, #28]
 800f856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f85e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	f023 0303 	bic.w	r3, r3, #3
 800f866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	68fa      	ldr	r2, [r7, #12]
 800f86e:	4313      	orrs	r3, r2
 800f870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f872:	697b      	ldr	r3, [r7, #20]
 800f874:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	689b      	ldr	r3, [r3, #8]
 800f87e:	021b      	lsls	r3, r3, #8
 800f880:	697a      	ldr	r2, [r7, #20]
 800f882:	4313      	orrs	r3, r2
 800f884:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	4a27      	ldr	r2, [pc, #156]	; (800f928 <TIM_OC3_SetConfig+0xf8>)
 800f88a:	4293      	cmp	r3, r2
 800f88c:	d003      	beq.n	800f896 <TIM_OC3_SetConfig+0x66>
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	4a26      	ldr	r2, [pc, #152]	; (800f92c <TIM_OC3_SetConfig+0xfc>)
 800f892:	4293      	cmp	r3, r2
 800f894:	d10d      	bne.n	800f8b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f89c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	68db      	ldr	r3, [r3, #12]
 800f8a2:	021b      	lsls	r3, r3, #8
 800f8a4:	697a      	ldr	r2, [r7, #20]
 800f8a6:	4313      	orrs	r3, r2
 800f8a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f8aa:	697b      	ldr	r3, [r7, #20]
 800f8ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f8b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	4a1c      	ldr	r2, [pc, #112]	; (800f928 <TIM_OC3_SetConfig+0xf8>)
 800f8b6:	4293      	cmp	r3, r2
 800f8b8:	d00f      	beq.n	800f8da <TIM_OC3_SetConfig+0xaa>
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	4a1b      	ldr	r2, [pc, #108]	; (800f92c <TIM_OC3_SetConfig+0xfc>)
 800f8be:	4293      	cmp	r3, r2
 800f8c0:	d00b      	beq.n	800f8da <TIM_OC3_SetConfig+0xaa>
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	4a1a      	ldr	r2, [pc, #104]	; (800f930 <TIM_OC3_SetConfig+0x100>)
 800f8c6:	4293      	cmp	r3, r2
 800f8c8:	d007      	beq.n	800f8da <TIM_OC3_SetConfig+0xaa>
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	4a19      	ldr	r2, [pc, #100]	; (800f934 <TIM_OC3_SetConfig+0x104>)
 800f8ce:	4293      	cmp	r3, r2
 800f8d0:	d003      	beq.n	800f8da <TIM_OC3_SetConfig+0xaa>
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	4a18      	ldr	r2, [pc, #96]	; (800f938 <TIM_OC3_SetConfig+0x108>)
 800f8d6:	4293      	cmp	r3, r2
 800f8d8:	d113      	bne.n	800f902 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f8da:	693b      	ldr	r3, [r7, #16]
 800f8dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f8e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f8e2:	693b      	ldr	r3, [r7, #16]
 800f8e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f8e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	695b      	ldr	r3, [r3, #20]
 800f8ee:	011b      	lsls	r3, r3, #4
 800f8f0:	693a      	ldr	r2, [r7, #16]
 800f8f2:	4313      	orrs	r3, r2
 800f8f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	699b      	ldr	r3, [r3, #24]
 800f8fa:	011b      	lsls	r3, r3, #4
 800f8fc:	693a      	ldr	r2, [r7, #16]
 800f8fe:	4313      	orrs	r3, r2
 800f900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	693a      	ldr	r2, [r7, #16]
 800f906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	68fa      	ldr	r2, [r7, #12]
 800f90c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	685a      	ldr	r2, [r3, #4]
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	697a      	ldr	r2, [r7, #20]
 800f91a:	621a      	str	r2, [r3, #32]
}
 800f91c:	bf00      	nop
 800f91e:	371c      	adds	r7, #28
 800f920:	46bd      	mov	sp, r7
 800f922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f926:	4770      	bx	lr
 800f928:	40010000 	.word	0x40010000
 800f92c:	40010400 	.word	0x40010400
 800f930:	40014000 	.word	0x40014000
 800f934:	40014400 	.word	0x40014400
 800f938:	40014800 	.word	0x40014800

0800f93c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f93c:	b480      	push	{r7}
 800f93e:	b087      	sub	sp, #28
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
 800f944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	6a1b      	ldr	r3, [r3, #32]
 800f94a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	6a1b      	ldr	r3, [r3, #32]
 800f956:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	685b      	ldr	r3, [r3, #4]
 800f95c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	69db      	ldr	r3, [r3, #28]
 800f962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f96a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f972:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	021b      	lsls	r3, r3, #8
 800f97a:	68fa      	ldr	r2, [r7, #12]
 800f97c:	4313      	orrs	r3, r2
 800f97e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f980:	693b      	ldr	r3, [r7, #16]
 800f982:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f986:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	689b      	ldr	r3, [r3, #8]
 800f98c:	031b      	lsls	r3, r3, #12
 800f98e:	693a      	ldr	r2, [r7, #16]
 800f990:	4313      	orrs	r3, r2
 800f992:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	4a18      	ldr	r2, [pc, #96]	; (800f9f8 <TIM_OC4_SetConfig+0xbc>)
 800f998:	4293      	cmp	r3, r2
 800f99a:	d00f      	beq.n	800f9bc <TIM_OC4_SetConfig+0x80>
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	4a17      	ldr	r2, [pc, #92]	; (800f9fc <TIM_OC4_SetConfig+0xc0>)
 800f9a0:	4293      	cmp	r3, r2
 800f9a2:	d00b      	beq.n	800f9bc <TIM_OC4_SetConfig+0x80>
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	4a16      	ldr	r2, [pc, #88]	; (800fa00 <TIM_OC4_SetConfig+0xc4>)
 800f9a8:	4293      	cmp	r3, r2
 800f9aa:	d007      	beq.n	800f9bc <TIM_OC4_SetConfig+0x80>
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	4a15      	ldr	r2, [pc, #84]	; (800fa04 <TIM_OC4_SetConfig+0xc8>)
 800f9b0:	4293      	cmp	r3, r2
 800f9b2:	d003      	beq.n	800f9bc <TIM_OC4_SetConfig+0x80>
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	4a14      	ldr	r2, [pc, #80]	; (800fa08 <TIM_OC4_SetConfig+0xcc>)
 800f9b8:	4293      	cmp	r3, r2
 800f9ba:	d109      	bne.n	800f9d0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f9bc:	697b      	ldr	r3, [r7, #20]
 800f9be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f9c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	695b      	ldr	r3, [r3, #20]
 800f9c8:	019b      	lsls	r3, r3, #6
 800f9ca:	697a      	ldr	r2, [r7, #20]
 800f9cc:	4313      	orrs	r3, r2
 800f9ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	697a      	ldr	r2, [r7, #20]
 800f9d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	68fa      	ldr	r2, [r7, #12]
 800f9da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f9dc:	683b      	ldr	r3, [r7, #0]
 800f9de:	685a      	ldr	r2, [r3, #4]
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	693a      	ldr	r2, [r7, #16]
 800f9e8:	621a      	str	r2, [r3, #32]
}
 800f9ea:	bf00      	nop
 800f9ec:	371c      	adds	r7, #28
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f4:	4770      	bx	lr
 800f9f6:	bf00      	nop
 800f9f8:	40010000 	.word	0x40010000
 800f9fc:	40010400 	.word	0x40010400
 800fa00:	40014000 	.word	0x40014000
 800fa04:	40014400 	.word	0x40014400
 800fa08:	40014800 	.word	0x40014800

0800fa0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800fa0c:	b480      	push	{r7}
 800fa0e:	b087      	sub	sp, #28
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
 800fa14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	6a1b      	ldr	r3, [r3, #32]
 800fa1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	6a1b      	ldr	r3, [r3, #32]
 800fa26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	685b      	ldr	r3, [r3, #4]
 800fa2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fa3c:	683b      	ldr	r3, [r7, #0]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	68fa      	ldr	r2, [r7, #12]
 800fa42:	4313      	orrs	r3, r2
 800fa44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fa46:	693b      	ldr	r3, [r7, #16]
 800fa48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fa4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	689b      	ldr	r3, [r3, #8]
 800fa52:	041b      	lsls	r3, r3, #16
 800fa54:	693a      	ldr	r2, [r7, #16]
 800fa56:	4313      	orrs	r3, r2
 800fa58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	4a17      	ldr	r2, [pc, #92]	; (800fabc <TIM_OC5_SetConfig+0xb0>)
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d00f      	beq.n	800fa82 <TIM_OC5_SetConfig+0x76>
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	4a16      	ldr	r2, [pc, #88]	; (800fac0 <TIM_OC5_SetConfig+0xb4>)
 800fa66:	4293      	cmp	r3, r2
 800fa68:	d00b      	beq.n	800fa82 <TIM_OC5_SetConfig+0x76>
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	4a15      	ldr	r2, [pc, #84]	; (800fac4 <TIM_OC5_SetConfig+0xb8>)
 800fa6e:	4293      	cmp	r3, r2
 800fa70:	d007      	beq.n	800fa82 <TIM_OC5_SetConfig+0x76>
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	4a14      	ldr	r2, [pc, #80]	; (800fac8 <TIM_OC5_SetConfig+0xbc>)
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d003      	beq.n	800fa82 <TIM_OC5_SetConfig+0x76>
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	4a13      	ldr	r2, [pc, #76]	; (800facc <TIM_OC5_SetConfig+0xc0>)
 800fa7e:	4293      	cmp	r3, r2
 800fa80:	d109      	bne.n	800fa96 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fa88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fa8a:	683b      	ldr	r3, [r7, #0]
 800fa8c:	695b      	ldr	r3, [r3, #20]
 800fa8e:	021b      	lsls	r3, r3, #8
 800fa90:	697a      	ldr	r2, [r7, #20]
 800fa92:	4313      	orrs	r3, r2
 800fa94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	697a      	ldr	r2, [r7, #20]
 800fa9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	68fa      	ldr	r2, [r7, #12]
 800faa0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	685a      	ldr	r2, [r3, #4]
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	693a      	ldr	r2, [r7, #16]
 800faae:	621a      	str	r2, [r3, #32]
}
 800fab0:	bf00      	nop
 800fab2:	371c      	adds	r7, #28
 800fab4:	46bd      	mov	sp, r7
 800fab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faba:	4770      	bx	lr
 800fabc:	40010000 	.word	0x40010000
 800fac0:	40010400 	.word	0x40010400
 800fac4:	40014000 	.word	0x40014000
 800fac8:	40014400 	.word	0x40014400
 800facc:	40014800 	.word	0x40014800

0800fad0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800fad0:	b480      	push	{r7}
 800fad2:	b087      	sub	sp, #28
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
 800fad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	6a1b      	ldr	r3, [r3, #32]
 800fade:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	6a1b      	ldr	r3, [r3, #32]
 800faea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	685b      	ldr	r3, [r3, #4]
 800faf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800faf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fafe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	021b      	lsls	r3, r3, #8
 800fb06:	68fa      	ldr	r2, [r7, #12]
 800fb08:	4313      	orrs	r3, r2
 800fb0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fb0c:	693b      	ldr	r3, [r7, #16]
 800fb0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fb12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	689b      	ldr	r3, [r3, #8]
 800fb18:	051b      	lsls	r3, r3, #20
 800fb1a:	693a      	ldr	r2, [r7, #16]
 800fb1c:	4313      	orrs	r3, r2
 800fb1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	4a18      	ldr	r2, [pc, #96]	; (800fb84 <TIM_OC6_SetConfig+0xb4>)
 800fb24:	4293      	cmp	r3, r2
 800fb26:	d00f      	beq.n	800fb48 <TIM_OC6_SetConfig+0x78>
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	4a17      	ldr	r2, [pc, #92]	; (800fb88 <TIM_OC6_SetConfig+0xb8>)
 800fb2c:	4293      	cmp	r3, r2
 800fb2e:	d00b      	beq.n	800fb48 <TIM_OC6_SetConfig+0x78>
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	4a16      	ldr	r2, [pc, #88]	; (800fb8c <TIM_OC6_SetConfig+0xbc>)
 800fb34:	4293      	cmp	r3, r2
 800fb36:	d007      	beq.n	800fb48 <TIM_OC6_SetConfig+0x78>
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	4a15      	ldr	r2, [pc, #84]	; (800fb90 <TIM_OC6_SetConfig+0xc0>)
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	d003      	beq.n	800fb48 <TIM_OC6_SetConfig+0x78>
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	4a14      	ldr	r2, [pc, #80]	; (800fb94 <TIM_OC6_SetConfig+0xc4>)
 800fb44:	4293      	cmp	r3, r2
 800fb46:	d109      	bne.n	800fb5c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fb4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	695b      	ldr	r3, [r3, #20]
 800fb54:	029b      	lsls	r3, r3, #10
 800fb56:	697a      	ldr	r2, [r7, #20]
 800fb58:	4313      	orrs	r3, r2
 800fb5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	697a      	ldr	r2, [r7, #20]
 800fb60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	68fa      	ldr	r2, [r7, #12]
 800fb66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fb68:	683b      	ldr	r3, [r7, #0]
 800fb6a:	685a      	ldr	r2, [r3, #4]
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	693a      	ldr	r2, [r7, #16]
 800fb74:	621a      	str	r2, [r3, #32]
}
 800fb76:	bf00      	nop
 800fb78:	371c      	adds	r7, #28
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb80:	4770      	bx	lr
 800fb82:	bf00      	nop
 800fb84:	40010000 	.word	0x40010000
 800fb88:	40010400 	.word	0x40010400
 800fb8c:	40014000 	.word	0x40014000
 800fb90:	40014400 	.word	0x40014400
 800fb94:	40014800 	.word	0x40014800

0800fb98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fb98:	b480      	push	{r7}
 800fb9a:	b087      	sub	sp, #28
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	60f8      	str	r0, [r7, #12]
 800fba0:	60b9      	str	r1, [r7, #8]
 800fba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	6a1b      	ldr	r3, [r3, #32]
 800fba8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	6a1b      	ldr	r3, [r3, #32]
 800fbae:	f023 0201 	bic.w	r2, r3, #1
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	699b      	ldr	r3, [r3, #24]
 800fbba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fbbc:	693b      	ldr	r3, [r7, #16]
 800fbbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fbc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	011b      	lsls	r3, r3, #4
 800fbc8:	693a      	ldr	r2, [r7, #16]
 800fbca:	4313      	orrs	r3, r2
 800fbcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fbce:	697b      	ldr	r3, [r7, #20]
 800fbd0:	f023 030a 	bic.w	r3, r3, #10
 800fbd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fbd6:	697a      	ldr	r2, [r7, #20]
 800fbd8:	68bb      	ldr	r3, [r7, #8]
 800fbda:	4313      	orrs	r3, r2
 800fbdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	693a      	ldr	r2, [r7, #16]
 800fbe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	697a      	ldr	r2, [r7, #20]
 800fbe8:	621a      	str	r2, [r3, #32]
}
 800fbea:	bf00      	nop
 800fbec:	371c      	adds	r7, #28
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf4:	4770      	bx	lr

0800fbf6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fbf6:	b480      	push	{r7}
 800fbf8:	b087      	sub	sp, #28
 800fbfa:	af00      	add	r7, sp, #0
 800fbfc:	60f8      	str	r0, [r7, #12]
 800fbfe:	60b9      	str	r1, [r7, #8]
 800fc00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	6a1b      	ldr	r3, [r3, #32]
 800fc06:	f023 0210 	bic.w	r2, r3, #16
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	699b      	ldr	r3, [r3, #24]
 800fc12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	6a1b      	ldr	r3, [r3, #32]
 800fc18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fc1a:	697b      	ldr	r3, [r7, #20]
 800fc1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fc20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	031b      	lsls	r3, r3, #12
 800fc26:	697a      	ldr	r2, [r7, #20]
 800fc28:	4313      	orrs	r3, r2
 800fc2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fc2c:	693b      	ldr	r3, [r7, #16]
 800fc2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fc32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fc34:	68bb      	ldr	r3, [r7, #8]
 800fc36:	011b      	lsls	r3, r3, #4
 800fc38:	693a      	ldr	r2, [r7, #16]
 800fc3a:	4313      	orrs	r3, r2
 800fc3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	697a      	ldr	r2, [r7, #20]
 800fc42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	693a      	ldr	r2, [r7, #16]
 800fc48:	621a      	str	r2, [r3, #32]
}
 800fc4a:	bf00      	nop
 800fc4c:	371c      	adds	r7, #28
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc54:	4770      	bx	lr
	...

0800fc58 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fc58:	b480      	push	{r7}
 800fc5a:	b085      	sub	sp, #20
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
 800fc60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	689b      	ldr	r3, [r3, #8]
 800fc66:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fc68:	68fa      	ldr	r2, [r7, #12]
 800fc6a:	4b09      	ldr	r3, [pc, #36]	; (800fc90 <TIM_ITRx_SetConfig+0x38>)
 800fc6c:	4013      	ands	r3, r2
 800fc6e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fc70:	683a      	ldr	r2, [r7, #0]
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	4313      	orrs	r3, r2
 800fc76:	f043 0307 	orr.w	r3, r3, #7
 800fc7a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	68fa      	ldr	r2, [r7, #12]
 800fc80:	609a      	str	r2, [r3, #8]
}
 800fc82:	bf00      	nop
 800fc84:	3714      	adds	r7, #20
 800fc86:	46bd      	mov	sp, r7
 800fc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8c:	4770      	bx	lr
 800fc8e:	bf00      	nop
 800fc90:	ffcfff8f 	.word	0xffcfff8f

0800fc94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fc94:	b480      	push	{r7}
 800fc96:	b087      	sub	sp, #28
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	60f8      	str	r0, [r7, #12]
 800fc9c:	60b9      	str	r1, [r7, #8]
 800fc9e:	607a      	str	r2, [r7, #4]
 800fca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	689b      	ldr	r3, [r3, #8]
 800fca6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fca8:	697b      	ldr	r3, [r7, #20]
 800fcaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fcae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	021a      	lsls	r2, r3, #8
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	431a      	orrs	r2, r3
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	4313      	orrs	r3, r2
 800fcbc:	697a      	ldr	r2, [r7, #20]
 800fcbe:	4313      	orrs	r3, r2
 800fcc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	697a      	ldr	r2, [r7, #20]
 800fcc6:	609a      	str	r2, [r3, #8]
}
 800fcc8:	bf00      	nop
 800fcca:	371c      	adds	r7, #28
 800fccc:	46bd      	mov	sp, r7
 800fcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd2:	4770      	bx	lr

0800fcd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fcd4:	b480      	push	{r7}
 800fcd6:	b087      	sub	sp, #28
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	60f8      	str	r0, [r7, #12]
 800fcdc:	60b9      	str	r1, [r7, #8]
 800fcde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fce0:	68bb      	ldr	r3, [r7, #8]
 800fce2:	f003 031f 	and.w	r3, r3, #31
 800fce6:	2201      	movs	r2, #1
 800fce8:	fa02 f303 	lsl.w	r3, r2, r3
 800fcec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	6a1a      	ldr	r2, [r3, #32]
 800fcf2:	697b      	ldr	r3, [r7, #20]
 800fcf4:	43db      	mvns	r3, r3
 800fcf6:	401a      	ands	r2, r3
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	6a1a      	ldr	r2, [r3, #32]
 800fd00:	68bb      	ldr	r3, [r7, #8]
 800fd02:	f003 031f 	and.w	r3, r3, #31
 800fd06:	6879      	ldr	r1, [r7, #4]
 800fd08:	fa01 f303 	lsl.w	r3, r1, r3
 800fd0c:	431a      	orrs	r2, r3
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	621a      	str	r2, [r3, #32]
}
 800fd12:	bf00      	nop
 800fd14:	371c      	adds	r7, #28
 800fd16:	46bd      	mov	sp, r7
 800fd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1c:	4770      	bx	lr
	...

0800fd20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fd20:	b480      	push	{r7}
 800fd22:	b085      	sub	sp, #20
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
 800fd28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fd30:	2b01      	cmp	r3, #1
 800fd32:	d101      	bne.n	800fd38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fd34:	2302      	movs	r3, #2
 800fd36:	e068      	b.n	800fe0a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2201      	movs	r2, #1
 800fd3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2202      	movs	r2, #2
 800fd44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	685b      	ldr	r3, [r3, #4]
 800fd4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	689b      	ldr	r3, [r3, #8]
 800fd56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	4a2e      	ldr	r2, [pc, #184]	; (800fe18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800fd5e:	4293      	cmp	r3, r2
 800fd60:	d004      	beq.n	800fd6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	4a2d      	ldr	r2, [pc, #180]	; (800fe1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800fd68:	4293      	cmp	r3, r2
 800fd6a:	d108      	bne.n	800fd7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fd72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fd74:	683b      	ldr	r3, [r7, #0]
 800fd76:	685b      	ldr	r3, [r3, #4]
 800fd78:	68fa      	ldr	r2, [r7, #12]
 800fd7a:	4313      	orrs	r3, r2
 800fd7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	68fa      	ldr	r2, [r7, #12]
 800fd8c:	4313      	orrs	r3, r2
 800fd8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	68fa      	ldr	r2, [r7, #12]
 800fd96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	4a1e      	ldr	r2, [pc, #120]	; (800fe18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800fd9e:	4293      	cmp	r3, r2
 800fda0:	d01d      	beq.n	800fdde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fdaa:	d018      	beq.n	800fdde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	4a1b      	ldr	r2, [pc, #108]	; (800fe20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fdb2:	4293      	cmp	r3, r2
 800fdb4:	d013      	beq.n	800fdde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	4a1a      	ldr	r2, [pc, #104]	; (800fe24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fdbc:	4293      	cmp	r3, r2
 800fdbe:	d00e      	beq.n	800fdde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	4a18      	ldr	r2, [pc, #96]	; (800fe28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800fdc6:	4293      	cmp	r3, r2
 800fdc8:	d009      	beq.n	800fdde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	4a13      	ldr	r2, [pc, #76]	; (800fe1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800fdd0:	4293      	cmp	r3, r2
 800fdd2:	d004      	beq.n	800fdde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	4a14      	ldr	r2, [pc, #80]	; (800fe2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fdda:	4293      	cmp	r3, r2
 800fddc:	d10c      	bne.n	800fdf8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fdde:	68bb      	ldr	r3, [r7, #8]
 800fde0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fde4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fde6:	683b      	ldr	r3, [r7, #0]
 800fde8:	689b      	ldr	r3, [r3, #8]
 800fdea:	68ba      	ldr	r2, [r7, #8]
 800fdec:	4313      	orrs	r3, r2
 800fdee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	68ba      	ldr	r2, [r7, #8]
 800fdf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2201      	movs	r2, #1
 800fdfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	2200      	movs	r2, #0
 800fe04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fe08:	2300      	movs	r3, #0
}
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	3714      	adds	r7, #20
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe14:	4770      	bx	lr
 800fe16:	bf00      	nop
 800fe18:	40010000 	.word	0x40010000
 800fe1c:	40010400 	.word	0x40010400
 800fe20:	40000400 	.word	0x40000400
 800fe24:	40000800 	.word	0x40000800
 800fe28:	40000c00 	.word	0x40000c00
 800fe2c:	40001800 	.word	0x40001800

0800fe30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fe30:	b480      	push	{r7}
 800fe32:	b085      	sub	sp, #20
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
 800fe38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe44:	2b01      	cmp	r3, #1
 800fe46:	d101      	bne.n	800fe4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fe48:	2302      	movs	r3, #2
 800fe4a:	e065      	b.n	800ff18 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2201      	movs	r2, #1
 800fe50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	68db      	ldr	r3, [r3, #12]
 800fe5e:	4313      	orrs	r3, r2
 800fe60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	689b      	ldr	r3, [r3, #8]
 800fe6c:	4313      	orrs	r3, r2
 800fe6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	685b      	ldr	r3, [r3, #4]
 800fe7a:	4313      	orrs	r3, r2
 800fe7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	4313      	orrs	r3, r2
 800fe8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	691b      	ldr	r3, [r3, #16]
 800fe96:	4313      	orrs	r3, r2
 800fe98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fea0:	683b      	ldr	r3, [r7, #0]
 800fea2:	695b      	ldr	r3, [r3, #20]
 800fea4:	4313      	orrs	r3, r2
 800fea6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800feae:	683b      	ldr	r3, [r7, #0]
 800feb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800feb2:	4313      	orrs	r3, r2
 800feb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	699b      	ldr	r3, [r3, #24]
 800fec0:	041b      	lsls	r3, r3, #16
 800fec2:	4313      	orrs	r3, r2
 800fec4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	4a16      	ldr	r2, [pc, #88]	; (800ff24 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800fecc:	4293      	cmp	r3, r2
 800fece:	d004      	beq.n	800feda <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	4a14      	ldr	r2, [pc, #80]	; (800ff28 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800fed6:	4293      	cmp	r3, r2
 800fed8:	d115      	bne.n	800ff06 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800fee0:	683b      	ldr	r3, [r7, #0]
 800fee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fee4:	051b      	lsls	r3, r3, #20
 800fee6:	4313      	orrs	r3, r2
 800fee8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	69db      	ldr	r3, [r3, #28]
 800fef4:	4313      	orrs	r3, r2
 800fef6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	6a1b      	ldr	r3, [r3, #32]
 800ff02:	4313      	orrs	r3, r2
 800ff04:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	68fa      	ldr	r2, [r7, #12]
 800ff0c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	2200      	movs	r2, #0
 800ff12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ff16:	2300      	movs	r3, #0
}
 800ff18:	4618      	mov	r0, r3
 800ff1a:	3714      	adds	r7, #20
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff22:	4770      	bx	lr
 800ff24:	40010000 	.word	0x40010000
 800ff28:	40010400 	.word	0x40010400

0800ff2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ff2c:	b480      	push	{r7}
 800ff2e:	b083      	sub	sp, #12
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ff34:	bf00      	nop
 800ff36:	370c      	adds	r7, #12
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3e:	4770      	bx	lr

0800ff40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ff40:	b480      	push	{r7}
 800ff42:	b083      	sub	sp, #12
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ff48:	bf00      	nop
 800ff4a:	370c      	adds	r7, #12
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff52:	4770      	bx	lr

0800ff54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ff54:	b480      	push	{r7}
 800ff56:	b083      	sub	sp, #12
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ff5c:	bf00      	nop
 800ff5e:	370c      	adds	r7, #12
 800ff60:	46bd      	mov	sp, r7
 800ff62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff66:	4770      	bx	lr

0800ff68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b082      	sub	sp, #8
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d101      	bne.n	800ff7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ff76:	2301      	movs	r3, #1
 800ff78:	e042      	b.n	8010000 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d106      	bne.n	800ff92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	2200      	movs	r2, #0
 800ff88:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ff8c:	6878      	ldr	r0, [r7, #4]
 800ff8e:	f7f5 fe0f 	bl	8005bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	2224      	movs	r2, #36	; 0x24
 800ff96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	681a      	ldr	r2, [r3, #0]
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	f022 0201 	bic.w	r2, r2, #1
 800ffa8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ffaa:	6878      	ldr	r0, [r7, #4]
 800ffac:	f000 fbb0 	bl	8010710 <UART_SetConfig>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	2b01      	cmp	r3, #1
 800ffb4:	d101      	bne.n	800ffba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ffb6:	2301      	movs	r3, #1
 800ffb8:	e022      	b.n	8010000 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d002      	beq.n	800ffc8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ffc2:	6878      	ldr	r0, [r7, #4]
 800ffc4:	f002 fcce 	bl	8012964 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	685a      	ldr	r2, [r3, #4]
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ffd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	689a      	ldr	r2, [r3, #8]
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ffe6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	681a      	ldr	r2, [r3, #0]
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	f042 0201 	orr.w	r2, r2, #1
 800fff6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f002 fd55 	bl	8012aa8 <UART_CheckIdleState>
 800fffe:	4603      	mov	r3, r0
}
 8010000:	4618      	mov	r0, r3
 8010002:	3708      	adds	r7, #8
 8010004:	46bd      	mov	sp, r7
 8010006:	bd80      	pop	{r7, pc}

08010008 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b08a      	sub	sp, #40	; 0x28
 801000c:	af02      	add	r7, sp, #8
 801000e:	60f8      	str	r0, [r7, #12]
 8010010:	60b9      	str	r1, [r7, #8]
 8010012:	603b      	str	r3, [r7, #0]
 8010014:	4613      	mov	r3, r2
 8010016:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801001e:	2b20      	cmp	r3, #32
 8010020:	f040 8083 	bne.w	801012a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8010024:	68bb      	ldr	r3, [r7, #8]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d002      	beq.n	8010030 <HAL_UART_Transmit+0x28>
 801002a:	88fb      	ldrh	r3, [r7, #6]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d101      	bne.n	8010034 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8010030:	2301      	movs	r3, #1
 8010032:	e07b      	b.n	801012c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801003a:	2b01      	cmp	r3, #1
 801003c:	d101      	bne.n	8010042 <HAL_UART_Transmit+0x3a>
 801003e:	2302      	movs	r3, #2
 8010040:	e074      	b.n	801012c <HAL_UART_Transmit+0x124>
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	2201      	movs	r2, #1
 8010046:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	2200      	movs	r2, #0
 801004e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	2221      	movs	r2, #33	; 0x21
 8010056:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 801005a:	f7f5 feeb 	bl	8005e34 <HAL_GetTick>
 801005e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	88fa      	ldrh	r2, [r7, #6]
 8010064:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	88fa      	ldrh	r2, [r7, #6]
 801006c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	689b      	ldr	r3, [r3, #8]
 8010074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010078:	d108      	bne.n	801008c <HAL_UART_Transmit+0x84>
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	691b      	ldr	r3, [r3, #16]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d104      	bne.n	801008c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8010082:	2300      	movs	r3, #0
 8010084:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	61bb      	str	r3, [r7, #24]
 801008a:	e003      	b.n	8010094 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 801008c:	68bb      	ldr	r3, [r7, #8]
 801008e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010090:	2300      	movs	r3, #0
 8010092:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010094:	e02c      	b.n	80100f0 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010096:	683b      	ldr	r3, [r7, #0]
 8010098:	9300      	str	r3, [sp, #0]
 801009a:	697b      	ldr	r3, [r7, #20]
 801009c:	2200      	movs	r2, #0
 801009e:	2180      	movs	r1, #128	; 0x80
 80100a0:	68f8      	ldr	r0, [r7, #12]
 80100a2:	f002 fd49 	bl	8012b38 <UART_WaitOnFlagUntilTimeout>
 80100a6:	4603      	mov	r3, r0
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d001      	beq.n	80100b0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80100ac:	2303      	movs	r3, #3
 80100ae:	e03d      	b.n	801012c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80100b0:	69fb      	ldr	r3, [r7, #28]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d10b      	bne.n	80100ce <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80100b6:	69bb      	ldr	r3, [r7, #24]
 80100b8:	881b      	ldrh	r3, [r3, #0]
 80100ba:	461a      	mov	r2, r3
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80100c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80100c6:	69bb      	ldr	r3, [r7, #24]
 80100c8:	3302      	adds	r3, #2
 80100ca:	61bb      	str	r3, [r7, #24]
 80100cc:	e007      	b.n	80100de <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80100ce:	69fb      	ldr	r3, [r7, #28]
 80100d0:	781a      	ldrb	r2, [r3, #0]
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80100d8:	69fb      	ldr	r3, [r7, #28]
 80100da:	3301      	adds	r3, #1
 80100dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80100e4:	b29b      	uxth	r3, r3
 80100e6:	3b01      	subs	r3, #1
 80100e8:	b29a      	uxth	r2, r3
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80100f6:	b29b      	uxth	r3, r3
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d1cc      	bne.n	8010096 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80100fc:	683b      	ldr	r3, [r7, #0]
 80100fe:	9300      	str	r3, [sp, #0]
 8010100:	697b      	ldr	r3, [r7, #20]
 8010102:	2200      	movs	r2, #0
 8010104:	2140      	movs	r1, #64	; 0x40
 8010106:	68f8      	ldr	r0, [r7, #12]
 8010108:	f002 fd16 	bl	8012b38 <UART_WaitOnFlagUntilTimeout>
 801010c:	4603      	mov	r3, r0
 801010e:	2b00      	cmp	r3, #0
 8010110:	d001      	beq.n	8010116 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8010112:	2303      	movs	r3, #3
 8010114:	e00a      	b.n	801012c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	2220      	movs	r2, #32
 801011a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	2200      	movs	r2, #0
 8010122:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8010126:	2300      	movs	r3, #0
 8010128:	e000      	b.n	801012c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 801012a:	2302      	movs	r3, #2
  }
}
 801012c:	4618      	mov	r0, r3
 801012e:	3720      	adds	r7, #32
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}

08010134 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010134:	b480      	push	{r7}
 8010136:	b085      	sub	sp, #20
 8010138:	af00      	add	r7, sp, #0
 801013a:	60f8      	str	r0, [r7, #12]
 801013c:	60b9      	str	r1, [r7, #8]
 801013e:	4613      	mov	r3, r2
 8010140:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010148:	2b20      	cmp	r3, #32
 801014a:	d168      	bne.n	801021e <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 801014c:	68bb      	ldr	r3, [r7, #8]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d002      	beq.n	8010158 <HAL_UART_Transmit_IT+0x24>
 8010152:	88fb      	ldrh	r3, [r7, #6]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d101      	bne.n	801015c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8010158:	2301      	movs	r3, #1
 801015a:	e061      	b.n	8010220 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010162:	2b01      	cmp	r3, #1
 8010164:	d101      	bne.n	801016a <HAL_UART_Transmit_IT+0x36>
 8010166:	2302      	movs	r3, #2
 8010168:	e05a      	b.n	8010220 <HAL_UART_Transmit_IT+0xec>
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	2201      	movs	r2, #1
 801016e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	68ba      	ldr	r2, [r7, #8]
 8010176:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	88fa      	ldrh	r2, [r7, #6]
 801017c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	88fa      	ldrh	r2, [r7, #6]
 8010184:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	2200      	movs	r2, #0
 801018c:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	2200      	movs	r2, #0
 8010192:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	2221      	movs	r2, #33	; 0x21
 801019a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80101a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80101a6:	d11c      	bne.n	80101e2 <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	689b      	ldr	r3, [r3, #8]
 80101ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80101b0:	d107      	bne.n	80101c2 <HAL_UART_Transmit_IT+0x8e>
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	691b      	ldr	r3, [r3, #16]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d103      	bne.n	80101c2 <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	4a1b      	ldr	r2, [pc, #108]	; (801022c <HAL_UART_Transmit_IT+0xf8>)
 80101be:	671a      	str	r2, [r3, #112]	; 0x70
 80101c0:	e002      	b.n	80101c8 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	4a1a      	ldr	r2, [pc, #104]	; (8010230 <HAL_UART_Transmit_IT+0xfc>)
 80101c6:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	2200      	movs	r2, #0
 80101cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	689a      	ldr	r2, [r3, #8]
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80101de:	609a      	str	r2, [r3, #8]
 80101e0:	e01b      	b.n	801021a <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	689b      	ldr	r3, [r3, #8]
 80101e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80101ea:	d107      	bne.n	80101fc <HAL_UART_Transmit_IT+0xc8>
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	691b      	ldr	r3, [r3, #16]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d103      	bne.n	80101fc <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	4a0f      	ldr	r2, [pc, #60]	; (8010234 <HAL_UART_Transmit_IT+0x100>)
 80101f8:	671a      	str	r2, [r3, #112]	; 0x70
 80101fa:	e002      	b.n	8010202 <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	4a0e      	ldr	r2, [pc, #56]	; (8010238 <HAL_UART_Transmit_IT+0x104>)
 8010200:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	2200      	movs	r2, #0
 8010206:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	681a      	ldr	r2, [r3, #0]
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010218:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 801021a:	2300      	movs	r3, #0
 801021c:	e000      	b.n	8010220 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 801021e:	2302      	movs	r3, #2
  }
}
 8010220:	4618      	mov	r0, r3
 8010222:	3714      	adds	r7, #20
 8010224:	46bd      	mov	sp, r7
 8010226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022a:	4770      	bx	lr
 801022c:	08012e39 	.word	0x08012e39
 8010230:	08012d9f 	.word	0x08012d9f
 8010234:	08012d21 	.word	0x08012d21
 8010238:	08012cad 	.word	0x08012cad

0801023c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801023c:	b480      	push	{r7}
 801023e:	b085      	sub	sp, #20
 8010240:	af00      	add	r7, sp, #0
 8010242:	60f8      	str	r0, [r7, #12]
 8010244:	60b9      	str	r1, [r7, #8]
 8010246:	4613      	mov	r3, r2
 8010248:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010250:	2b20      	cmp	r3, #32
 8010252:	f040 80bc 	bne.w	80103ce <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8010256:	68bb      	ldr	r3, [r7, #8]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d002      	beq.n	8010262 <HAL_UART_Receive_IT+0x26>
 801025c:	88fb      	ldrh	r3, [r7, #6]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d101      	bne.n	8010266 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8010262:	2301      	movs	r3, #1
 8010264:	e0b4      	b.n	80103d0 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801026c:	2b01      	cmp	r3, #1
 801026e:	d101      	bne.n	8010274 <HAL_UART_Receive_IT+0x38>
 8010270:	2302      	movs	r3, #2
 8010272:	e0ad      	b.n	80103d0 <HAL_UART_Receive_IT+0x194>
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	2201      	movs	r2, #1
 8010278:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	68ba      	ldr	r2, [r7, #8]
 8010280:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	88fa      	ldrh	r2, [r7, #6]
 8010286:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	88fa      	ldrh	r2, [r7, #6]
 801028e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	2200      	movs	r2, #0
 8010296:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	689b      	ldr	r3, [r3, #8]
 801029c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80102a0:	d10e      	bne.n	80102c0 <HAL_UART_Receive_IT+0x84>
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	691b      	ldr	r3, [r3, #16]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d105      	bne.n	80102b6 <HAL_UART_Receive_IT+0x7a>
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	f240 12ff 	movw	r2, #511	; 0x1ff
 80102b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80102b4:	e02d      	b.n	8010312 <HAL_UART_Receive_IT+0xd6>
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	22ff      	movs	r2, #255	; 0xff
 80102ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80102be:	e028      	b.n	8010312 <HAL_UART_Receive_IT+0xd6>
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	689b      	ldr	r3, [r3, #8]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d10d      	bne.n	80102e4 <HAL_UART_Receive_IT+0xa8>
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	691b      	ldr	r3, [r3, #16]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d104      	bne.n	80102da <HAL_UART_Receive_IT+0x9e>
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	22ff      	movs	r2, #255	; 0xff
 80102d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80102d8:	e01b      	b.n	8010312 <HAL_UART_Receive_IT+0xd6>
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	227f      	movs	r2, #127	; 0x7f
 80102de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80102e2:	e016      	b.n	8010312 <HAL_UART_Receive_IT+0xd6>
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	689b      	ldr	r3, [r3, #8]
 80102e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80102ec:	d10d      	bne.n	801030a <HAL_UART_Receive_IT+0xce>
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	691b      	ldr	r3, [r3, #16]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d104      	bne.n	8010300 <HAL_UART_Receive_IT+0xc4>
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	227f      	movs	r2, #127	; 0x7f
 80102fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80102fe:	e008      	b.n	8010312 <HAL_UART_Receive_IT+0xd6>
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	223f      	movs	r2, #63	; 0x3f
 8010304:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010308:	e003      	b.n	8010312 <HAL_UART_Receive_IT+0xd6>
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	2200      	movs	r2, #0
 801030e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	2200      	movs	r2, #0
 8010316:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	2222      	movs	r2, #34	; 0x22
 801031e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	689a      	ldr	r2, [r3, #8]
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	f042 0201 	orr.w	r2, r2, #1
 8010330:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010336:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801033a:	d12a      	bne.n	8010392 <HAL_UART_Receive_IT+0x156>
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010342:	88fa      	ldrh	r2, [r7, #6]
 8010344:	429a      	cmp	r2, r3
 8010346:	d324      	bcc.n	8010392 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	689b      	ldr	r3, [r3, #8]
 801034c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010350:	d107      	bne.n	8010362 <HAL_UART_Receive_IT+0x126>
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	691b      	ldr	r3, [r3, #16]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d103      	bne.n	8010362 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	4a1f      	ldr	r2, [pc, #124]	; (80103dc <HAL_UART_Receive_IT+0x1a0>)
 801035e:	66da      	str	r2, [r3, #108]	; 0x6c
 8010360:	e002      	b.n	8010368 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	4a1e      	ldr	r2, [pc, #120]	; (80103e0 <HAL_UART_Receive_IT+0x1a4>)
 8010366:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	2200      	movs	r2, #0
 801036c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	681a      	ldr	r2, [r3, #0]
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801037e:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	689a      	ldr	r2, [r3, #8]
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 801038e:	609a      	str	r2, [r3, #8]
 8010390:	e01b      	b.n	80103ca <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	689b      	ldr	r3, [r3, #8]
 8010396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801039a:	d107      	bne.n	80103ac <HAL_UART_Receive_IT+0x170>
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	691b      	ldr	r3, [r3, #16]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d103      	bne.n	80103ac <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	4a0f      	ldr	r2, [pc, #60]	; (80103e4 <HAL_UART_Receive_IT+0x1a8>)
 80103a8:	66da      	str	r2, [r3, #108]	; 0x6c
 80103aa:	e002      	b.n	80103b2 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	4a0e      	ldr	r2, [pc, #56]	; (80103e8 <HAL_UART_Receive_IT+0x1ac>)
 80103b0:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	2200      	movs	r2, #0
 80103b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	681a      	ldr	r2, [r3, #0]
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80103c8:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80103ca:	2300      	movs	r3, #0
 80103cc:	e000      	b.n	80103d0 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 80103ce:	2302      	movs	r3, #2
  }
}
 80103d0:	4618      	mov	r0, r3
 80103d2:	3714      	adds	r7, #20
 80103d4:	46bd      	mov	sp, r7
 80103d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103da:	4770      	bx	lr
 80103dc:	0801316d 	.word	0x0801316d
 80103e0:	08013065 	.word	0x08013065
 80103e4:	08012fbb 	.word	0x08012fbb
 80103e8:	08012f11 	.word	0x08012f11

080103ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b088      	sub	sp, #32
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	69db      	ldr	r3, [r3, #28]
 80103fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	689b      	ldr	r3, [r3, #8]
 801040a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801040c:	69fa      	ldr	r2, [r7, #28]
 801040e:	f640 030f 	movw	r3, #2063	; 0x80f
 8010412:	4013      	ands	r3, r2
 8010414:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8010416:	693b      	ldr	r3, [r7, #16]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d118      	bne.n	801044e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801041c:	69fb      	ldr	r3, [r7, #28]
 801041e:	f003 0320 	and.w	r3, r3, #32
 8010422:	2b00      	cmp	r3, #0
 8010424:	d013      	beq.n	801044e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010426:	69bb      	ldr	r3, [r7, #24]
 8010428:	f003 0320 	and.w	r3, r3, #32
 801042c:	2b00      	cmp	r3, #0
 801042e:	d104      	bne.n	801043a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010430:	697b      	ldr	r3, [r7, #20]
 8010432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010436:	2b00      	cmp	r3, #0
 8010438:	d009      	beq.n	801044e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801043e:	2b00      	cmp	r3, #0
 8010440:	f000 8144 	beq.w	80106cc <HAL_UART_IRQHandler+0x2e0>
      {
        huart->RxISR(huart);
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010448:	6878      	ldr	r0, [r7, #4]
 801044a:	4798      	blx	r3
      }
      return;
 801044c:	e13e      	b.n	80106cc <HAL_UART_IRQHandler+0x2e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801044e:	693b      	ldr	r3, [r7, #16]
 8010450:	2b00      	cmp	r3, #0
 8010452:	f000 80e8 	beq.w	8010626 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010456:	697a      	ldr	r2, [r7, #20]
 8010458:	4ba0      	ldr	r3, [pc, #640]	; (80106dc <HAL_UART_IRQHandler+0x2f0>)
 801045a:	4013      	ands	r3, r2
 801045c:	2b00      	cmp	r3, #0
 801045e:	d105      	bne.n	801046c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010460:	69ba      	ldr	r2, [r7, #24]
 8010462:	4b9f      	ldr	r3, [pc, #636]	; (80106e0 <HAL_UART_IRQHandler+0x2f4>)
 8010464:	4013      	ands	r3, r2
 8010466:	2b00      	cmp	r3, #0
 8010468:	f000 80dd 	beq.w	8010626 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801046c:	69fb      	ldr	r3, [r7, #28]
 801046e:	f003 0301 	and.w	r3, r3, #1
 8010472:	2b00      	cmp	r3, #0
 8010474:	d010      	beq.n	8010498 <HAL_UART_IRQHandler+0xac>
 8010476:	69bb      	ldr	r3, [r7, #24]
 8010478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801047c:	2b00      	cmp	r3, #0
 801047e:	d00b      	beq.n	8010498 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	2201      	movs	r2, #1
 8010486:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801048e:	f043 0201 	orr.w	r2, r3, #1
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010498:	69fb      	ldr	r3, [r7, #28]
 801049a:	f003 0302 	and.w	r3, r3, #2
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d010      	beq.n	80104c4 <HAL_UART_IRQHandler+0xd8>
 80104a2:	697b      	ldr	r3, [r7, #20]
 80104a4:	f003 0301 	and.w	r3, r3, #1
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d00b      	beq.n	80104c4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	2202      	movs	r2, #2
 80104b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80104ba:	f043 0204 	orr.w	r2, r3, #4
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80104c4:	69fb      	ldr	r3, [r7, #28]
 80104c6:	f003 0304 	and.w	r3, r3, #4
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d010      	beq.n	80104f0 <HAL_UART_IRQHandler+0x104>
 80104ce:	697b      	ldr	r3, [r7, #20]
 80104d0:	f003 0301 	and.w	r3, r3, #1
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d00b      	beq.n	80104f0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	2204      	movs	r2, #4
 80104de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80104e6:	f043 0202 	orr.w	r2, r3, #2
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80104f0:	69fb      	ldr	r3, [r7, #28]
 80104f2:	f003 0308 	and.w	r3, r3, #8
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d015      	beq.n	8010526 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80104fa:	69bb      	ldr	r3, [r7, #24]
 80104fc:	f003 0320 	and.w	r3, r3, #32
 8010500:	2b00      	cmp	r3, #0
 8010502:	d104      	bne.n	801050e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010504:	697a      	ldr	r2, [r7, #20]
 8010506:	4b75      	ldr	r3, [pc, #468]	; (80106dc <HAL_UART_IRQHandler+0x2f0>)
 8010508:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801050a:	2b00      	cmp	r3, #0
 801050c:	d00b      	beq.n	8010526 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	2208      	movs	r2, #8
 8010514:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801051c:	f043 0208 	orr.w	r2, r3, #8
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010526:	69fb      	ldr	r3, [r7, #28]
 8010528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801052c:	2b00      	cmp	r3, #0
 801052e:	d011      	beq.n	8010554 <HAL_UART_IRQHandler+0x168>
 8010530:	69bb      	ldr	r3, [r7, #24]
 8010532:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010536:	2b00      	cmp	r3, #0
 8010538:	d00c      	beq.n	8010554 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010542:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801054a:	f043 0220 	orr.w	r2, r3, #32
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801055a:	2b00      	cmp	r3, #0
 801055c:	f000 80b8 	beq.w	80106d0 <HAL_UART_IRQHandler+0x2e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010560:	69fb      	ldr	r3, [r7, #28]
 8010562:	f003 0320 	and.w	r3, r3, #32
 8010566:	2b00      	cmp	r3, #0
 8010568:	d011      	beq.n	801058e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801056a:	69bb      	ldr	r3, [r7, #24]
 801056c:	f003 0320 	and.w	r3, r3, #32
 8010570:	2b00      	cmp	r3, #0
 8010572:	d104      	bne.n	801057e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010574:	697b      	ldr	r3, [r7, #20]
 8010576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801057a:	2b00      	cmp	r3, #0
 801057c:	d007      	beq.n	801058e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010582:	2b00      	cmp	r3, #0
 8010584:	d003      	beq.n	801058e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801058a:	6878      	ldr	r0, [r7, #4]
 801058c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010594:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	689b      	ldr	r3, [r3, #8]
 801059c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105a0:	2b40      	cmp	r3, #64	; 0x40
 80105a2:	d004      	beq.n	80105ae <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d031      	beq.n	8010612 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80105ae:	6878      	ldr	r0, [r7, #4]
 80105b0:	f002 fb42 	bl	8012c38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	689b      	ldr	r3, [r3, #8]
 80105ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105be:	2b40      	cmp	r3, #64	; 0x40
 80105c0:	d123      	bne.n	801060a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	689a      	ldr	r2, [r3, #8]
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80105d0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d013      	beq.n	8010602 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80105de:	4a41      	ldr	r2, [pc, #260]	; (80106e4 <HAL_UART_IRQHandler+0x2f8>)
 80105e0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80105e6:	4618      	mov	r0, r3
 80105e8:	f7f7 fde4 	bl	80081b4 <HAL_DMA_Abort_IT>
 80105ec:	4603      	mov	r3, r0
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d017      	beq.n	8010622 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80105f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105f8:	687a      	ldr	r2, [r7, #4]
 80105fa:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80105fc:	4610      	mov	r0, r2
 80105fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010600:	e00f      	b.n	8010622 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010602:	6878      	ldr	r0, [r7, #4]
 8010604:	f000 f87a 	bl	80106fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010608:	e00b      	b.n	8010622 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801060a:	6878      	ldr	r0, [r7, #4]
 801060c:	f000 f876 	bl	80106fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010610:	e007      	b.n	8010622 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010612:	6878      	ldr	r0, [r7, #4]
 8010614:	f000 f872 	bl	80106fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	2200      	movs	r2, #0
 801061c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8010620:	e056      	b.n	80106d0 <HAL_UART_IRQHandler+0x2e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010622:	bf00      	nop
    return;
 8010624:	e054      	b.n	80106d0 <HAL_UART_IRQHandler+0x2e4>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010626:	69fb      	ldr	r3, [r7, #28]
 8010628:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801062c:	2b00      	cmp	r3, #0
 801062e:	d00d      	beq.n	801064c <HAL_UART_IRQHandler+0x260>
 8010630:	697b      	ldr	r3, [r7, #20]
 8010632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010636:	2b00      	cmp	r3, #0
 8010638:	d008      	beq.n	801064c <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010642:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010644:	6878      	ldr	r0, [r7, #4]
 8010646:	f002 fe15 	bl	8013274 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801064a:	e044      	b.n	80106d6 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801064c:	69fb      	ldr	r3, [r7, #28]
 801064e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010652:	2b00      	cmp	r3, #0
 8010654:	d012      	beq.n	801067c <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010656:	69bb      	ldr	r3, [r7, #24]
 8010658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801065c:	2b00      	cmp	r3, #0
 801065e:	d104      	bne.n	801066a <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010660:	697b      	ldr	r3, [r7, #20]
 8010662:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010666:	2b00      	cmp	r3, #0
 8010668:	d008      	beq.n	801067c <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801066e:	2b00      	cmp	r3, #0
 8010670:	d030      	beq.n	80106d4 <HAL_UART_IRQHandler+0x2e8>
    {
      huart->TxISR(huart);
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010676:	6878      	ldr	r0, [r7, #4]
 8010678:	4798      	blx	r3
    }
    return;
 801067a:	e02b      	b.n	80106d4 <HAL_UART_IRQHandler+0x2e8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801067c:	69fb      	ldr	r3, [r7, #28]
 801067e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010682:	2b00      	cmp	r3, #0
 8010684:	d008      	beq.n	8010698 <HAL_UART_IRQHandler+0x2ac>
 8010686:	69bb      	ldr	r3, [r7, #24]
 8010688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801068c:	2b00      	cmp	r3, #0
 801068e:	d003      	beq.n	8010698 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8010690:	6878      	ldr	r0, [r7, #4]
 8010692:	f002 fc23 	bl	8012edc <UART_EndTransmit_IT>
    return;
 8010696:	e01e      	b.n	80106d6 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010698:	69fb      	ldr	r3, [r7, #28]
 801069a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d008      	beq.n	80106b4 <HAL_UART_IRQHandler+0x2c8>
 80106a2:	69bb      	ldr	r3, [r7, #24]
 80106a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d003      	beq.n	80106b4 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80106ac:	6878      	ldr	r0, [r7, #4]
 80106ae:	f002 fdf5 	bl	801329c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80106b2:	e010      	b.n	80106d6 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80106b4:	69fb      	ldr	r3, [r7, #28]
 80106b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d00b      	beq.n	80106d6 <HAL_UART_IRQHandler+0x2ea>
 80106be:	69bb      	ldr	r3, [r7, #24]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	da08      	bge.n	80106d6 <HAL_UART_IRQHandler+0x2ea>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80106c4:	6878      	ldr	r0, [r7, #4]
 80106c6:	f002 fddf 	bl	8013288 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80106ca:	e004      	b.n	80106d6 <HAL_UART_IRQHandler+0x2ea>
      return;
 80106cc:	bf00      	nop
 80106ce:	e002      	b.n	80106d6 <HAL_UART_IRQHandler+0x2ea>
    return;
 80106d0:	bf00      	nop
 80106d2:	e000      	b.n	80106d6 <HAL_UART_IRQHandler+0x2ea>
    return;
 80106d4:	bf00      	nop
  }
}
 80106d6:	3720      	adds	r7, #32
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd80      	pop	{r7, pc}
 80106dc:	10000001 	.word	0x10000001
 80106e0:	04000120 	.word	0x04000120
 80106e4:	08012c81 	.word	0x08012c81

080106e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80106e8:	b480      	push	{r7}
 80106ea:	b083      	sub	sp, #12
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80106f0:	bf00      	nop
 80106f2:	370c      	adds	r7, #12
 80106f4:	46bd      	mov	sp, r7
 80106f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fa:	4770      	bx	lr

080106fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80106fc:	b480      	push	{r7}
 80106fe:	b083      	sub	sp, #12
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010704:	bf00      	nop
 8010706:	370c      	adds	r7, #12
 8010708:	46bd      	mov	sp, r7
 801070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070e:	4770      	bx	lr

08010710 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010714:	b098      	sub	sp, #96	; 0x60
 8010716:	af00      	add	r7, sp, #0
 8010718:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 801071a:	2300      	movs	r3, #0
 801071c:	657b      	str	r3, [r7, #84]	; 0x54
  HAL_StatusTypeDef ret               = HAL_OK;
 801071e:	2300      	movs	r3, #0
 8010720:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8010724:	2300      	movs	r3, #0
 8010726:	64fb      	str	r3, [r7, #76]	; 0x4c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801072a:	689a      	ldr	r2, [r3, #8]
 801072c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801072e:	691b      	ldr	r3, [r3, #16]
 8010730:	431a      	orrs	r2, r3
 8010732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010734:	695b      	ldr	r3, [r3, #20]
 8010736:	431a      	orrs	r2, r3
 8010738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801073a:	69db      	ldr	r3, [r3, #28]
 801073c:	4313      	orrs	r3, r2
 801073e:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmpreg |= (uint32_t)huart->FifoMode;
 8010740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010742:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8010744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010746:	4313      	orrs	r3, r2
 8010748:	65fb      	str	r3, [r7, #92]	; 0x5c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801074a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	49be      	ldr	r1, [pc, #760]	; (8010a4c <UART_SetConfig+0x33c>)
 8010752:	4019      	ands	r1, r3
 8010754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010756:	681a      	ldr	r2, [r3, #0]
 8010758:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801075a:	430b      	orrs	r3, r1
 801075c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801075e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	685b      	ldr	r3, [r3, #4]
 8010764:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8010768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801076a:	68d9      	ldr	r1, [r3, #12]
 801076c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801076e:	681a      	ldr	r2, [r3, #0]
 8010770:	ea40 0301 	orr.w	r3, r0, r1
 8010774:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010778:	699b      	ldr	r3, [r3, #24]
 801077a:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801077c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801077e:	681a      	ldr	r2, [r3, #0]
 8010780:	4bb3      	ldr	r3, [pc, #716]	; (8010a50 <UART_SetConfig+0x340>)
 8010782:	429a      	cmp	r2, r3
 8010784:	d004      	beq.n	8010790 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010788:	6a1a      	ldr	r2, [r3, #32]
 801078a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801078c:	4313      	orrs	r3, r2
 801078e:	65fb      	str	r3, [r7, #92]	; 0x5c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	689b      	ldr	r3, [r3, #8]
 8010796:	49af      	ldr	r1, [pc, #700]	; (8010a54 <UART_SetConfig+0x344>)
 8010798:	4019      	ands	r1, r3
 801079a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801079c:	681a      	ldr	r2, [r3, #0]
 801079e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80107a0:	430b      	orrs	r3, r1
 80107a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80107a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107aa:	f023 000f 	bic.w	r0, r3, #15
 80107ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80107b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107b4:	681a      	ldr	r2, [r3, #0]
 80107b6:	ea40 0301 	orr.w	r3, r0, r1
 80107ba:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80107bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107be:	681a      	ldr	r2, [r3, #0]
 80107c0:	4ba5      	ldr	r3, [pc, #660]	; (8010a58 <UART_SetConfig+0x348>)
 80107c2:	429a      	cmp	r2, r3
 80107c4:	d176      	bne.n	80108b4 <UART_SetConfig+0x1a4>
 80107c6:	4ba5      	ldr	r3, [pc, #660]	; (8010a5c <UART_SetConfig+0x34c>)
 80107c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80107ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80107ce:	2b28      	cmp	r3, #40	; 0x28
 80107d0:	d86c      	bhi.n	80108ac <UART_SetConfig+0x19c>
 80107d2:	a201      	add	r2, pc, #4	; (adr r2, 80107d8 <UART_SetConfig+0xc8>)
 80107d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107d8:	0801087d 	.word	0x0801087d
 80107dc:	080108ad 	.word	0x080108ad
 80107e0:	080108ad 	.word	0x080108ad
 80107e4:	080108ad 	.word	0x080108ad
 80107e8:	080108ad 	.word	0x080108ad
 80107ec:	080108ad 	.word	0x080108ad
 80107f0:	080108ad 	.word	0x080108ad
 80107f4:	080108ad 	.word	0x080108ad
 80107f8:	08010885 	.word	0x08010885
 80107fc:	080108ad 	.word	0x080108ad
 8010800:	080108ad 	.word	0x080108ad
 8010804:	080108ad 	.word	0x080108ad
 8010808:	080108ad 	.word	0x080108ad
 801080c:	080108ad 	.word	0x080108ad
 8010810:	080108ad 	.word	0x080108ad
 8010814:	080108ad 	.word	0x080108ad
 8010818:	0801088d 	.word	0x0801088d
 801081c:	080108ad 	.word	0x080108ad
 8010820:	080108ad 	.word	0x080108ad
 8010824:	080108ad 	.word	0x080108ad
 8010828:	080108ad 	.word	0x080108ad
 801082c:	080108ad 	.word	0x080108ad
 8010830:	080108ad 	.word	0x080108ad
 8010834:	080108ad 	.word	0x080108ad
 8010838:	08010895 	.word	0x08010895
 801083c:	080108ad 	.word	0x080108ad
 8010840:	080108ad 	.word	0x080108ad
 8010844:	080108ad 	.word	0x080108ad
 8010848:	080108ad 	.word	0x080108ad
 801084c:	080108ad 	.word	0x080108ad
 8010850:	080108ad 	.word	0x080108ad
 8010854:	080108ad 	.word	0x080108ad
 8010858:	0801089d 	.word	0x0801089d
 801085c:	080108ad 	.word	0x080108ad
 8010860:	080108ad 	.word	0x080108ad
 8010864:	080108ad 	.word	0x080108ad
 8010868:	080108ad 	.word	0x080108ad
 801086c:	080108ad 	.word	0x080108ad
 8010870:	080108ad 	.word	0x080108ad
 8010874:	080108ad 	.word	0x080108ad
 8010878:	080108a5 	.word	0x080108a5
 801087c:	2301      	movs	r3, #1
 801087e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010882:	e222      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010884:	2304      	movs	r3, #4
 8010886:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 801088a:	e21e      	b.n	8010cca <UART_SetConfig+0x5ba>
 801088c:	2308      	movs	r3, #8
 801088e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010892:	e21a      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010894:	2310      	movs	r3, #16
 8010896:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 801089a:	e216      	b.n	8010cca <UART_SetConfig+0x5ba>
 801089c:	2320      	movs	r3, #32
 801089e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80108a2:	e212      	b.n	8010cca <UART_SetConfig+0x5ba>
 80108a4:	2340      	movs	r3, #64	; 0x40
 80108a6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80108aa:	e20e      	b.n	8010cca <UART_SetConfig+0x5ba>
 80108ac:	2380      	movs	r3, #128	; 0x80
 80108ae:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80108b2:	e20a      	b.n	8010cca <UART_SetConfig+0x5ba>
 80108b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108b6:	681a      	ldr	r2, [r3, #0]
 80108b8:	4b69      	ldr	r3, [pc, #420]	; (8010a60 <UART_SetConfig+0x350>)
 80108ba:	429a      	cmp	r2, r3
 80108bc:	d130      	bne.n	8010920 <UART_SetConfig+0x210>
 80108be:	4b67      	ldr	r3, [pc, #412]	; (8010a5c <UART_SetConfig+0x34c>)
 80108c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108c2:	f003 0307 	and.w	r3, r3, #7
 80108c6:	2b05      	cmp	r3, #5
 80108c8:	d826      	bhi.n	8010918 <UART_SetConfig+0x208>
 80108ca:	a201      	add	r2, pc, #4	; (adr r2, 80108d0 <UART_SetConfig+0x1c0>)
 80108cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108d0:	080108e9 	.word	0x080108e9
 80108d4:	080108f1 	.word	0x080108f1
 80108d8:	080108f9 	.word	0x080108f9
 80108dc:	08010901 	.word	0x08010901
 80108e0:	08010909 	.word	0x08010909
 80108e4:	08010911 	.word	0x08010911
 80108e8:	2300      	movs	r3, #0
 80108ea:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80108ee:	e1ec      	b.n	8010cca <UART_SetConfig+0x5ba>
 80108f0:	2304      	movs	r3, #4
 80108f2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80108f6:	e1e8      	b.n	8010cca <UART_SetConfig+0x5ba>
 80108f8:	2308      	movs	r3, #8
 80108fa:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80108fe:	e1e4      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010900:	2310      	movs	r3, #16
 8010902:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010906:	e1e0      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010908:	2320      	movs	r3, #32
 801090a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 801090e:	e1dc      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010910:	2340      	movs	r3, #64	; 0x40
 8010912:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010916:	e1d8      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010918:	2380      	movs	r3, #128	; 0x80
 801091a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 801091e:	e1d4      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010922:	681a      	ldr	r2, [r3, #0]
 8010924:	4b4f      	ldr	r3, [pc, #316]	; (8010a64 <UART_SetConfig+0x354>)
 8010926:	429a      	cmp	r2, r3
 8010928:	d130      	bne.n	801098c <UART_SetConfig+0x27c>
 801092a:	4b4c      	ldr	r3, [pc, #304]	; (8010a5c <UART_SetConfig+0x34c>)
 801092c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801092e:	f003 0307 	and.w	r3, r3, #7
 8010932:	2b05      	cmp	r3, #5
 8010934:	d826      	bhi.n	8010984 <UART_SetConfig+0x274>
 8010936:	a201      	add	r2, pc, #4	; (adr r2, 801093c <UART_SetConfig+0x22c>)
 8010938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801093c:	08010955 	.word	0x08010955
 8010940:	0801095d 	.word	0x0801095d
 8010944:	08010965 	.word	0x08010965
 8010948:	0801096d 	.word	0x0801096d
 801094c:	08010975 	.word	0x08010975
 8010950:	0801097d 	.word	0x0801097d
 8010954:	2300      	movs	r3, #0
 8010956:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 801095a:	e1b6      	b.n	8010cca <UART_SetConfig+0x5ba>
 801095c:	2304      	movs	r3, #4
 801095e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010962:	e1b2      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010964:	2308      	movs	r3, #8
 8010966:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 801096a:	e1ae      	b.n	8010cca <UART_SetConfig+0x5ba>
 801096c:	2310      	movs	r3, #16
 801096e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010972:	e1aa      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010974:	2320      	movs	r3, #32
 8010976:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 801097a:	e1a6      	b.n	8010cca <UART_SetConfig+0x5ba>
 801097c:	2340      	movs	r3, #64	; 0x40
 801097e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010982:	e1a2      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010984:	2380      	movs	r3, #128	; 0x80
 8010986:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 801098a:	e19e      	b.n	8010cca <UART_SetConfig+0x5ba>
 801098c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801098e:	681a      	ldr	r2, [r3, #0]
 8010990:	4b35      	ldr	r3, [pc, #212]	; (8010a68 <UART_SetConfig+0x358>)
 8010992:	429a      	cmp	r2, r3
 8010994:	d130      	bne.n	80109f8 <UART_SetConfig+0x2e8>
 8010996:	4b31      	ldr	r3, [pc, #196]	; (8010a5c <UART_SetConfig+0x34c>)
 8010998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801099a:	f003 0307 	and.w	r3, r3, #7
 801099e:	2b05      	cmp	r3, #5
 80109a0:	d826      	bhi.n	80109f0 <UART_SetConfig+0x2e0>
 80109a2:	a201      	add	r2, pc, #4	; (adr r2, 80109a8 <UART_SetConfig+0x298>)
 80109a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109a8:	080109c1 	.word	0x080109c1
 80109ac:	080109c9 	.word	0x080109c9
 80109b0:	080109d1 	.word	0x080109d1
 80109b4:	080109d9 	.word	0x080109d9
 80109b8:	080109e1 	.word	0x080109e1
 80109bc:	080109e9 	.word	0x080109e9
 80109c0:	2300      	movs	r3, #0
 80109c2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80109c6:	e180      	b.n	8010cca <UART_SetConfig+0x5ba>
 80109c8:	2304      	movs	r3, #4
 80109ca:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80109ce:	e17c      	b.n	8010cca <UART_SetConfig+0x5ba>
 80109d0:	2308      	movs	r3, #8
 80109d2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80109d6:	e178      	b.n	8010cca <UART_SetConfig+0x5ba>
 80109d8:	2310      	movs	r3, #16
 80109da:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80109de:	e174      	b.n	8010cca <UART_SetConfig+0x5ba>
 80109e0:	2320      	movs	r3, #32
 80109e2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80109e6:	e170      	b.n	8010cca <UART_SetConfig+0x5ba>
 80109e8:	2340      	movs	r3, #64	; 0x40
 80109ea:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80109ee:	e16c      	b.n	8010cca <UART_SetConfig+0x5ba>
 80109f0:	2380      	movs	r3, #128	; 0x80
 80109f2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80109f6:	e168      	b.n	8010cca <UART_SetConfig+0x5ba>
 80109f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109fa:	681a      	ldr	r2, [r3, #0]
 80109fc:	4b1b      	ldr	r3, [pc, #108]	; (8010a6c <UART_SetConfig+0x35c>)
 80109fe:	429a      	cmp	r2, r3
 8010a00:	d142      	bne.n	8010a88 <UART_SetConfig+0x378>
 8010a02:	4b16      	ldr	r3, [pc, #88]	; (8010a5c <UART_SetConfig+0x34c>)
 8010a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a06:	f003 0307 	and.w	r3, r3, #7
 8010a0a:	2b05      	cmp	r3, #5
 8010a0c:	d838      	bhi.n	8010a80 <UART_SetConfig+0x370>
 8010a0e:	a201      	add	r2, pc, #4	; (adr r2, 8010a14 <UART_SetConfig+0x304>)
 8010a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a14:	08010a2d 	.word	0x08010a2d
 8010a18:	08010a35 	.word	0x08010a35
 8010a1c:	08010a3d 	.word	0x08010a3d
 8010a20:	08010a45 	.word	0x08010a45
 8010a24:	08010a71 	.word	0x08010a71
 8010a28:	08010a79 	.word	0x08010a79
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010a32:	e14a      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010a34:	2304      	movs	r3, #4
 8010a36:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010a3a:	e146      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010a3c:	2308      	movs	r3, #8
 8010a3e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010a42:	e142      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010a44:	2310      	movs	r3, #16
 8010a46:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010a4a:	e13e      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010a4c:	cfff69f3 	.word	0xcfff69f3
 8010a50:	58000c00 	.word	0x58000c00
 8010a54:	11fff4ff 	.word	0x11fff4ff
 8010a58:	40011000 	.word	0x40011000
 8010a5c:	58024400 	.word	0x58024400
 8010a60:	40004400 	.word	0x40004400
 8010a64:	40004800 	.word	0x40004800
 8010a68:	40004c00 	.word	0x40004c00
 8010a6c:	40005000 	.word	0x40005000
 8010a70:	2320      	movs	r3, #32
 8010a72:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010a76:	e128      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010a78:	2340      	movs	r3, #64	; 0x40
 8010a7a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010a7e:	e124      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010a80:	2380      	movs	r3, #128	; 0x80
 8010a82:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010a86:	e120      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a8a:	681a      	ldr	r2, [r3, #0]
 8010a8c:	4bba      	ldr	r3, [pc, #744]	; (8010d78 <UART_SetConfig+0x668>)
 8010a8e:	429a      	cmp	r2, r3
 8010a90:	d176      	bne.n	8010b80 <UART_SetConfig+0x470>
 8010a92:	4bba      	ldr	r3, [pc, #744]	; (8010d7c <UART_SetConfig+0x66c>)
 8010a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010a9a:	2b28      	cmp	r3, #40	; 0x28
 8010a9c:	d86c      	bhi.n	8010b78 <UART_SetConfig+0x468>
 8010a9e:	a201      	add	r2, pc, #4	; (adr r2, 8010aa4 <UART_SetConfig+0x394>)
 8010aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010aa4:	08010b49 	.word	0x08010b49
 8010aa8:	08010b79 	.word	0x08010b79
 8010aac:	08010b79 	.word	0x08010b79
 8010ab0:	08010b79 	.word	0x08010b79
 8010ab4:	08010b79 	.word	0x08010b79
 8010ab8:	08010b79 	.word	0x08010b79
 8010abc:	08010b79 	.word	0x08010b79
 8010ac0:	08010b79 	.word	0x08010b79
 8010ac4:	08010b51 	.word	0x08010b51
 8010ac8:	08010b79 	.word	0x08010b79
 8010acc:	08010b79 	.word	0x08010b79
 8010ad0:	08010b79 	.word	0x08010b79
 8010ad4:	08010b79 	.word	0x08010b79
 8010ad8:	08010b79 	.word	0x08010b79
 8010adc:	08010b79 	.word	0x08010b79
 8010ae0:	08010b79 	.word	0x08010b79
 8010ae4:	08010b59 	.word	0x08010b59
 8010ae8:	08010b79 	.word	0x08010b79
 8010aec:	08010b79 	.word	0x08010b79
 8010af0:	08010b79 	.word	0x08010b79
 8010af4:	08010b79 	.word	0x08010b79
 8010af8:	08010b79 	.word	0x08010b79
 8010afc:	08010b79 	.word	0x08010b79
 8010b00:	08010b79 	.word	0x08010b79
 8010b04:	08010b61 	.word	0x08010b61
 8010b08:	08010b79 	.word	0x08010b79
 8010b0c:	08010b79 	.word	0x08010b79
 8010b10:	08010b79 	.word	0x08010b79
 8010b14:	08010b79 	.word	0x08010b79
 8010b18:	08010b79 	.word	0x08010b79
 8010b1c:	08010b79 	.word	0x08010b79
 8010b20:	08010b79 	.word	0x08010b79
 8010b24:	08010b69 	.word	0x08010b69
 8010b28:	08010b79 	.word	0x08010b79
 8010b2c:	08010b79 	.word	0x08010b79
 8010b30:	08010b79 	.word	0x08010b79
 8010b34:	08010b79 	.word	0x08010b79
 8010b38:	08010b79 	.word	0x08010b79
 8010b3c:	08010b79 	.word	0x08010b79
 8010b40:	08010b79 	.word	0x08010b79
 8010b44:	08010b71 	.word	0x08010b71
 8010b48:	2301      	movs	r3, #1
 8010b4a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010b4e:	e0bc      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010b50:	2304      	movs	r3, #4
 8010b52:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010b56:	e0b8      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010b58:	2308      	movs	r3, #8
 8010b5a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010b5e:	e0b4      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010b60:	2310      	movs	r3, #16
 8010b62:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010b66:	e0b0      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010b68:	2320      	movs	r3, #32
 8010b6a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010b6e:	e0ac      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010b70:	2340      	movs	r3, #64	; 0x40
 8010b72:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010b76:	e0a8      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010b78:	2380      	movs	r3, #128	; 0x80
 8010b7a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010b7e:	e0a4      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b82:	681a      	ldr	r2, [r3, #0]
 8010b84:	4b7e      	ldr	r3, [pc, #504]	; (8010d80 <UART_SetConfig+0x670>)
 8010b86:	429a      	cmp	r2, r3
 8010b88:	d130      	bne.n	8010bec <UART_SetConfig+0x4dc>
 8010b8a:	4b7c      	ldr	r3, [pc, #496]	; (8010d7c <UART_SetConfig+0x66c>)
 8010b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b8e:	f003 0307 	and.w	r3, r3, #7
 8010b92:	2b05      	cmp	r3, #5
 8010b94:	d826      	bhi.n	8010be4 <UART_SetConfig+0x4d4>
 8010b96:	a201      	add	r2, pc, #4	; (adr r2, 8010b9c <UART_SetConfig+0x48c>)
 8010b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b9c:	08010bb5 	.word	0x08010bb5
 8010ba0:	08010bbd 	.word	0x08010bbd
 8010ba4:	08010bc5 	.word	0x08010bc5
 8010ba8:	08010bcd 	.word	0x08010bcd
 8010bac:	08010bd5 	.word	0x08010bd5
 8010bb0:	08010bdd 	.word	0x08010bdd
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010bba:	e086      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010bbc:	2304      	movs	r3, #4
 8010bbe:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010bc2:	e082      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010bc4:	2308      	movs	r3, #8
 8010bc6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010bca:	e07e      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010bcc:	2310      	movs	r3, #16
 8010bce:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010bd2:	e07a      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010bd4:	2320      	movs	r3, #32
 8010bd6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010bda:	e076      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010bdc:	2340      	movs	r3, #64	; 0x40
 8010bde:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010be2:	e072      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010be4:	2380      	movs	r3, #128	; 0x80
 8010be6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010bea:	e06e      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bee:	681a      	ldr	r2, [r3, #0]
 8010bf0:	4b64      	ldr	r3, [pc, #400]	; (8010d84 <UART_SetConfig+0x674>)
 8010bf2:	429a      	cmp	r2, r3
 8010bf4:	d130      	bne.n	8010c58 <UART_SetConfig+0x548>
 8010bf6:	4b61      	ldr	r3, [pc, #388]	; (8010d7c <UART_SetConfig+0x66c>)
 8010bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bfa:	f003 0307 	and.w	r3, r3, #7
 8010bfe:	2b05      	cmp	r3, #5
 8010c00:	d826      	bhi.n	8010c50 <UART_SetConfig+0x540>
 8010c02:	a201      	add	r2, pc, #4	; (adr r2, 8010c08 <UART_SetConfig+0x4f8>)
 8010c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c08:	08010c21 	.word	0x08010c21
 8010c0c:	08010c29 	.word	0x08010c29
 8010c10:	08010c31 	.word	0x08010c31
 8010c14:	08010c39 	.word	0x08010c39
 8010c18:	08010c41 	.word	0x08010c41
 8010c1c:	08010c49 	.word	0x08010c49
 8010c20:	2300      	movs	r3, #0
 8010c22:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010c26:	e050      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010c28:	2304      	movs	r3, #4
 8010c2a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010c2e:	e04c      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010c30:	2308      	movs	r3, #8
 8010c32:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010c36:	e048      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010c38:	2310      	movs	r3, #16
 8010c3a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010c3e:	e044      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010c40:	2320      	movs	r3, #32
 8010c42:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010c46:	e040      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010c48:	2340      	movs	r3, #64	; 0x40
 8010c4a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010c4e:	e03c      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010c50:	2380      	movs	r3, #128	; 0x80
 8010c52:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010c56:	e038      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c5a:	681a      	ldr	r2, [r3, #0]
 8010c5c:	4b4a      	ldr	r3, [pc, #296]	; (8010d88 <UART_SetConfig+0x678>)
 8010c5e:	429a      	cmp	r2, r3
 8010c60:	d130      	bne.n	8010cc4 <UART_SetConfig+0x5b4>
 8010c62:	4b46      	ldr	r3, [pc, #280]	; (8010d7c <UART_SetConfig+0x66c>)
 8010c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c66:	f003 0307 	and.w	r3, r3, #7
 8010c6a:	2b05      	cmp	r3, #5
 8010c6c:	d826      	bhi.n	8010cbc <UART_SetConfig+0x5ac>
 8010c6e:	a201      	add	r2, pc, #4	; (adr r2, 8010c74 <UART_SetConfig+0x564>)
 8010c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c74:	08010c8d 	.word	0x08010c8d
 8010c78:	08010c95 	.word	0x08010c95
 8010c7c:	08010c9d 	.word	0x08010c9d
 8010c80:	08010ca5 	.word	0x08010ca5
 8010c84:	08010cad 	.word	0x08010cad
 8010c88:	08010cb5 	.word	0x08010cb5
 8010c8c:	2302      	movs	r3, #2
 8010c8e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010c92:	e01a      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010c94:	2304      	movs	r3, #4
 8010c96:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010c9a:	e016      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010c9c:	2308      	movs	r3, #8
 8010c9e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010ca2:	e012      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010ca4:	2310      	movs	r3, #16
 8010ca6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010caa:	e00e      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010cac:	2320      	movs	r3, #32
 8010cae:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010cb2:	e00a      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010cb4:	2340      	movs	r3, #64	; 0x40
 8010cb6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010cba:	e006      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010cbc:	2380      	movs	r3, #128	; 0x80
 8010cbe:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8010cc2:	e002      	b.n	8010cca <UART_SetConfig+0x5ba>
 8010cc4:	2380      	movs	r3, #128	; 0x80
 8010cc6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ccc:	681a      	ldr	r2, [r3, #0]
 8010cce:	4b2e      	ldr	r3, [pc, #184]	; (8010d88 <UART_SetConfig+0x678>)
 8010cd0:	429a      	cmp	r2, r3
 8010cd2:	f040 877a 	bne.w	8011bca <UART_SetConfig+0x14ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010cd6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8010cda:	2b20      	cmp	r3, #32
 8010cdc:	dc48      	bgt.n	8010d70 <UART_SetConfig+0x660>
 8010cde:	2b02      	cmp	r3, #2
 8010ce0:	f2c0 829d 	blt.w	801121e <UART_SetConfig+0xb0e>
 8010ce4:	3b02      	subs	r3, #2
 8010ce6:	2b1e      	cmp	r3, #30
 8010ce8:	f200 8299 	bhi.w	801121e <UART_SetConfig+0xb0e>
 8010cec:	a201      	add	r2, pc, #4	; (adr r2, 8010cf4 <UART_SetConfig+0x5e4>)
 8010cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cf2:	bf00      	nop
 8010cf4:	08010d8d 	.word	0x08010d8d
 8010cf8:	0801121f 	.word	0x0801121f
 8010cfc:	08010e2f 	.word	0x08010e2f
 8010d00:	0801121f 	.word	0x0801121f
 8010d04:	0801121f 	.word	0x0801121f
 8010d08:	0801121f 	.word	0x0801121f
 8010d0c:	08010ed7 	.word	0x08010ed7
 8010d10:	0801121f 	.word	0x0801121f
 8010d14:	0801121f 	.word	0x0801121f
 8010d18:	0801121f 	.word	0x0801121f
 8010d1c:	0801121f 	.word	0x0801121f
 8010d20:	0801121f 	.word	0x0801121f
 8010d24:	0801121f 	.word	0x0801121f
 8010d28:	0801121f 	.word	0x0801121f
 8010d2c:	08010f7f 	.word	0x08010f7f
 8010d30:	0801121f 	.word	0x0801121f
 8010d34:	0801121f 	.word	0x0801121f
 8010d38:	0801121f 	.word	0x0801121f
 8010d3c:	0801121f 	.word	0x0801121f
 8010d40:	0801121f 	.word	0x0801121f
 8010d44:	0801121f 	.word	0x0801121f
 8010d48:	0801121f 	.word	0x0801121f
 8010d4c:	0801121f 	.word	0x0801121f
 8010d50:	0801121f 	.word	0x0801121f
 8010d54:	0801121f 	.word	0x0801121f
 8010d58:	0801121f 	.word	0x0801121f
 8010d5c:	0801121f 	.word	0x0801121f
 8010d60:	0801121f 	.word	0x0801121f
 8010d64:	0801121f 	.word	0x0801121f
 8010d68:	0801121f 	.word	0x0801121f
 8010d6c:	080110d5 	.word	0x080110d5
 8010d70:	2b40      	cmp	r3, #64	; 0x40
 8010d72:	f000 81fe 	beq.w	8011172 <UART_SetConfig+0xa62>
 8010d76:	e252      	b.n	801121e <UART_SetConfig+0xb0e>
 8010d78:	40011400 	.word	0x40011400
 8010d7c:	58024400 	.word	0x58024400
 8010d80:	40007800 	.word	0x40007800
 8010d84:	40007c00 	.word	0x40007c00
 8010d88:	58000c00 	.word	0x58000c00
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8010d8c:	f7fc f988 	bl	800d0a0 <HAL_RCCEx_GetD3PCLK1Freq>
 8010d90:	4602      	mov	r2, r0
 8010d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d044      	beq.n	8010e24 <UART_SetConfig+0x714>
 8010d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d9e:	2b01      	cmp	r3, #1
 8010da0:	d03e      	beq.n	8010e20 <UART_SetConfig+0x710>
 8010da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010da6:	2b02      	cmp	r3, #2
 8010da8:	d038      	beq.n	8010e1c <UART_SetConfig+0x70c>
 8010daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dae:	2b03      	cmp	r3, #3
 8010db0:	d032      	beq.n	8010e18 <UART_SetConfig+0x708>
 8010db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010db6:	2b04      	cmp	r3, #4
 8010db8:	d02c      	beq.n	8010e14 <UART_SetConfig+0x704>
 8010dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dbe:	2b05      	cmp	r3, #5
 8010dc0:	d026      	beq.n	8010e10 <UART_SetConfig+0x700>
 8010dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dc6:	2b06      	cmp	r3, #6
 8010dc8:	d020      	beq.n	8010e0c <UART_SetConfig+0x6fc>
 8010dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dce:	2b07      	cmp	r3, #7
 8010dd0:	d01a      	beq.n	8010e08 <UART_SetConfig+0x6f8>
 8010dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dd6:	2b08      	cmp	r3, #8
 8010dd8:	d014      	beq.n	8010e04 <UART_SetConfig+0x6f4>
 8010dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dde:	2b09      	cmp	r3, #9
 8010de0:	d00e      	beq.n	8010e00 <UART_SetConfig+0x6f0>
 8010de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010de6:	2b0a      	cmp	r3, #10
 8010de8:	d008      	beq.n	8010dfc <UART_SetConfig+0x6ec>
 8010dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dee:	2b0b      	cmp	r3, #11
 8010df0:	d102      	bne.n	8010df8 <UART_SetConfig+0x6e8>
 8010df2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010df6:	e016      	b.n	8010e26 <UART_SetConfig+0x716>
 8010df8:	2301      	movs	r3, #1
 8010dfa:	e014      	b.n	8010e26 <UART_SetConfig+0x716>
 8010dfc:	2380      	movs	r3, #128	; 0x80
 8010dfe:	e012      	b.n	8010e26 <UART_SetConfig+0x716>
 8010e00:	2340      	movs	r3, #64	; 0x40
 8010e02:	e010      	b.n	8010e26 <UART_SetConfig+0x716>
 8010e04:	2320      	movs	r3, #32
 8010e06:	e00e      	b.n	8010e26 <UART_SetConfig+0x716>
 8010e08:	2310      	movs	r3, #16
 8010e0a:	e00c      	b.n	8010e26 <UART_SetConfig+0x716>
 8010e0c:	230c      	movs	r3, #12
 8010e0e:	e00a      	b.n	8010e26 <UART_SetConfig+0x716>
 8010e10:	230a      	movs	r3, #10
 8010e12:	e008      	b.n	8010e26 <UART_SetConfig+0x716>
 8010e14:	2308      	movs	r3, #8
 8010e16:	e006      	b.n	8010e26 <UART_SetConfig+0x716>
 8010e18:	2306      	movs	r3, #6
 8010e1a:	e004      	b.n	8010e26 <UART_SetConfig+0x716>
 8010e1c:	2304      	movs	r3, #4
 8010e1e:	e002      	b.n	8010e26 <UART_SetConfig+0x716>
 8010e20:	2302      	movs	r3, #2
 8010e22:	e000      	b.n	8010e26 <UART_SetConfig+0x716>
 8010e24:	2301      	movs	r3, #1
 8010e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
        break;
 8010e2c:	e1fb      	b.n	8011226 <UART_SetConfig+0xb16>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010e2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010e32:	4618      	mov	r0, r3
 8010e34:	f7fc f94a 	bl	800d0cc <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8010e38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d044      	beq.n	8010ecc <UART_SetConfig+0x7bc>
 8010e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e46:	2b01      	cmp	r3, #1
 8010e48:	d03e      	beq.n	8010ec8 <UART_SetConfig+0x7b8>
 8010e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e4e:	2b02      	cmp	r3, #2
 8010e50:	d038      	beq.n	8010ec4 <UART_SetConfig+0x7b4>
 8010e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e56:	2b03      	cmp	r3, #3
 8010e58:	d032      	beq.n	8010ec0 <UART_SetConfig+0x7b0>
 8010e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e5e:	2b04      	cmp	r3, #4
 8010e60:	d02c      	beq.n	8010ebc <UART_SetConfig+0x7ac>
 8010e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e66:	2b05      	cmp	r3, #5
 8010e68:	d026      	beq.n	8010eb8 <UART_SetConfig+0x7a8>
 8010e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e6e:	2b06      	cmp	r3, #6
 8010e70:	d020      	beq.n	8010eb4 <UART_SetConfig+0x7a4>
 8010e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e76:	2b07      	cmp	r3, #7
 8010e78:	d01a      	beq.n	8010eb0 <UART_SetConfig+0x7a0>
 8010e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e7e:	2b08      	cmp	r3, #8
 8010e80:	d014      	beq.n	8010eac <UART_SetConfig+0x79c>
 8010e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e86:	2b09      	cmp	r3, #9
 8010e88:	d00e      	beq.n	8010ea8 <UART_SetConfig+0x798>
 8010e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e8e:	2b0a      	cmp	r3, #10
 8010e90:	d008      	beq.n	8010ea4 <UART_SetConfig+0x794>
 8010e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e96:	2b0b      	cmp	r3, #11
 8010e98:	d102      	bne.n	8010ea0 <UART_SetConfig+0x790>
 8010e9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010e9e:	e016      	b.n	8010ece <UART_SetConfig+0x7be>
 8010ea0:	2301      	movs	r3, #1
 8010ea2:	e014      	b.n	8010ece <UART_SetConfig+0x7be>
 8010ea4:	2380      	movs	r3, #128	; 0x80
 8010ea6:	e012      	b.n	8010ece <UART_SetConfig+0x7be>
 8010ea8:	2340      	movs	r3, #64	; 0x40
 8010eaa:	e010      	b.n	8010ece <UART_SetConfig+0x7be>
 8010eac:	2320      	movs	r3, #32
 8010eae:	e00e      	b.n	8010ece <UART_SetConfig+0x7be>
 8010eb0:	2310      	movs	r3, #16
 8010eb2:	e00c      	b.n	8010ece <UART_SetConfig+0x7be>
 8010eb4:	230c      	movs	r3, #12
 8010eb6:	e00a      	b.n	8010ece <UART_SetConfig+0x7be>
 8010eb8:	230a      	movs	r3, #10
 8010eba:	e008      	b.n	8010ece <UART_SetConfig+0x7be>
 8010ebc:	2308      	movs	r3, #8
 8010ebe:	e006      	b.n	8010ece <UART_SetConfig+0x7be>
 8010ec0:	2306      	movs	r3, #6
 8010ec2:	e004      	b.n	8010ece <UART_SetConfig+0x7be>
 8010ec4:	2304      	movs	r3, #4
 8010ec6:	e002      	b.n	8010ece <UART_SetConfig+0x7be>
 8010ec8:	2302      	movs	r3, #2
 8010eca:	e000      	b.n	8010ece <UART_SetConfig+0x7be>
 8010ecc:	2301      	movs	r3, #1
 8010ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
        break;
 8010ed4:	e1a7      	b.n	8011226 <UART_SetConfig+0xb16>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010ed6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010eda:	4618      	mov	r0, r3
 8010edc:	f7fc fa4a 	bl	800d374 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8010ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d044      	beq.n	8010f74 <UART_SetConfig+0x864>
 8010eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010eee:	2b01      	cmp	r3, #1
 8010ef0:	d03e      	beq.n	8010f70 <UART_SetConfig+0x860>
 8010ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ef6:	2b02      	cmp	r3, #2
 8010ef8:	d038      	beq.n	8010f6c <UART_SetConfig+0x85c>
 8010efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010efe:	2b03      	cmp	r3, #3
 8010f00:	d032      	beq.n	8010f68 <UART_SetConfig+0x858>
 8010f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f06:	2b04      	cmp	r3, #4
 8010f08:	d02c      	beq.n	8010f64 <UART_SetConfig+0x854>
 8010f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f0e:	2b05      	cmp	r3, #5
 8010f10:	d026      	beq.n	8010f60 <UART_SetConfig+0x850>
 8010f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f16:	2b06      	cmp	r3, #6
 8010f18:	d020      	beq.n	8010f5c <UART_SetConfig+0x84c>
 8010f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f1e:	2b07      	cmp	r3, #7
 8010f20:	d01a      	beq.n	8010f58 <UART_SetConfig+0x848>
 8010f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f26:	2b08      	cmp	r3, #8
 8010f28:	d014      	beq.n	8010f54 <UART_SetConfig+0x844>
 8010f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f2e:	2b09      	cmp	r3, #9
 8010f30:	d00e      	beq.n	8010f50 <UART_SetConfig+0x840>
 8010f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f36:	2b0a      	cmp	r3, #10
 8010f38:	d008      	beq.n	8010f4c <UART_SetConfig+0x83c>
 8010f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f3e:	2b0b      	cmp	r3, #11
 8010f40:	d102      	bne.n	8010f48 <UART_SetConfig+0x838>
 8010f42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010f46:	e016      	b.n	8010f76 <UART_SetConfig+0x866>
 8010f48:	2301      	movs	r3, #1
 8010f4a:	e014      	b.n	8010f76 <UART_SetConfig+0x866>
 8010f4c:	2380      	movs	r3, #128	; 0x80
 8010f4e:	e012      	b.n	8010f76 <UART_SetConfig+0x866>
 8010f50:	2340      	movs	r3, #64	; 0x40
 8010f52:	e010      	b.n	8010f76 <UART_SetConfig+0x866>
 8010f54:	2320      	movs	r3, #32
 8010f56:	e00e      	b.n	8010f76 <UART_SetConfig+0x866>
 8010f58:	2310      	movs	r3, #16
 8010f5a:	e00c      	b.n	8010f76 <UART_SetConfig+0x866>
 8010f5c:	230c      	movs	r3, #12
 8010f5e:	e00a      	b.n	8010f76 <UART_SetConfig+0x866>
 8010f60:	230a      	movs	r3, #10
 8010f62:	e008      	b.n	8010f76 <UART_SetConfig+0x866>
 8010f64:	2308      	movs	r3, #8
 8010f66:	e006      	b.n	8010f76 <UART_SetConfig+0x866>
 8010f68:	2306      	movs	r3, #6
 8010f6a:	e004      	b.n	8010f76 <UART_SetConfig+0x866>
 8010f6c:	2304      	movs	r3, #4
 8010f6e:	e002      	b.n	8010f76 <UART_SetConfig+0x866>
 8010f70:	2302      	movs	r3, #2
 8010f72:	e000      	b.n	8010f76 <UART_SetConfig+0x866>
 8010f74:	2301      	movs	r3, #1
 8010f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
        break;
 8010f7c:	e153      	b.n	8011226 <UART_SetConfig+0xb16>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010f7e:	4b9a      	ldr	r3, [pc, #616]	; (80111e8 <UART_SetConfig+0xad8>)
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	f003 0320 	and.w	r3, r3, #32
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d055      	beq.n	8011036 <UART_SetConfig+0x926>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8010f8a:	4b97      	ldr	r3, [pc, #604]	; (80111e8 <UART_SetConfig+0xad8>)
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	08db      	lsrs	r3, r3, #3
 8010f90:	f003 0203 	and.w	r2, r3, #3
 8010f94:	4b95      	ldr	r3, [pc, #596]	; (80111ec <UART_SetConfig+0xadc>)
 8010f96:	fa23 f202 	lsr.w	r2, r3, r2
 8010f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d044      	beq.n	801102c <UART_SetConfig+0x91c>
 8010fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fa6:	2b01      	cmp	r3, #1
 8010fa8:	d03e      	beq.n	8011028 <UART_SetConfig+0x918>
 8010faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fae:	2b02      	cmp	r3, #2
 8010fb0:	d038      	beq.n	8011024 <UART_SetConfig+0x914>
 8010fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fb6:	2b03      	cmp	r3, #3
 8010fb8:	d032      	beq.n	8011020 <UART_SetConfig+0x910>
 8010fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fbe:	2b04      	cmp	r3, #4
 8010fc0:	d02c      	beq.n	801101c <UART_SetConfig+0x90c>
 8010fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fc6:	2b05      	cmp	r3, #5
 8010fc8:	d026      	beq.n	8011018 <UART_SetConfig+0x908>
 8010fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fce:	2b06      	cmp	r3, #6
 8010fd0:	d020      	beq.n	8011014 <UART_SetConfig+0x904>
 8010fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fd6:	2b07      	cmp	r3, #7
 8010fd8:	d01a      	beq.n	8011010 <UART_SetConfig+0x900>
 8010fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fde:	2b08      	cmp	r3, #8
 8010fe0:	d014      	beq.n	801100c <UART_SetConfig+0x8fc>
 8010fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fe6:	2b09      	cmp	r3, #9
 8010fe8:	d00e      	beq.n	8011008 <UART_SetConfig+0x8f8>
 8010fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fee:	2b0a      	cmp	r3, #10
 8010ff0:	d008      	beq.n	8011004 <UART_SetConfig+0x8f4>
 8010ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ff6:	2b0b      	cmp	r3, #11
 8010ff8:	d102      	bne.n	8011000 <UART_SetConfig+0x8f0>
 8010ffa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010ffe:	e016      	b.n	801102e <UART_SetConfig+0x91e>
 8011000:	2301      	movs	r3, #1
 8011002:	e014      	b.n	801102e <UART_SetConfig+0x91e>
 8011004:	2380      	movs	r3, #128	; 0x80
 8011006:	e012      	b.n	801102e <UART_SetConfig+0x91e>
 8011008:	2340      	movs	r3, #64	; 0x40
 801100a:	e010      	b.n	801102e <UART_SetConfig+0x91e>
 801100c:	2320      	movs	r3, #32
 801100e:	e00e      	b.n	801102e <UART_SetConfig+0x91e>
 8011010:	2310      	movs	r3, #16
 8011012:	e00c      	b.n	801102e <UART_SetConfig+0x91e>
 8011014:	230c      	movs	r3, #12
 8011016:	e00a      	b.n	801102e <UART_SetConfig+0x91e>
 8011018:	230a      	movs	r3, #10
 801101a:	e008      	b.n	801102e <UART_SetConfig+0x91e>
 801101c:	2308      	movs	r3, #8
 801101e:	e006      	b.n	801102e <UART_SetConfig+0x91e>
 8011020:	2306      	movs	r3, #6
 8011022:	e004      	b.n	801102e <UART_SetConfig+0x91e>
 8011024:	2304      	movs	r3, #4
 8011026:	e002      	b.n	801102e <UART_SetConfig+0x91e>
 8011028:	2302      	movs	r3, #2
 801102a:	e000      	b.n	801102e <UART_SetConfig+0x91e>
 801102c:	2301      	movs	r3, #1
 801102e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011032:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8011034:	e0f7      	b.n	8011226 <UART_SetConfig+0xb16>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8011036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801103a:	2b00      	cmp	r3, #0
 801103c:	d044      	beq.n	80110c8 <UART_SetConfig+0x9b8>
 801103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011042:	2b01      	cmp	r3, #1
 8011044:	d03e      	beq.n	80110c4 <UART_SetConfig+0x9b4>
 8011046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801104a:	2b02      	cmp	r3, #2
 801104c:	d038      	beq.n	80110c0 <UART_SetConfig+0x9b0>
 801104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011052:	2b03      	cmp	r3, #3
 8011054:	d032      	beq.n	80110bc <UART_SetConfig+0x9ac>
 8011056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801105a:	2b04      	cmp	r3, #4
 801105c:	d02c      	beq.n	80110b8 <UART_SetConfig+0x9a8>
 801105e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011062:	2b05      	cmp	r3, #5
 8011064:	d026      	beq.n	80110b4 <UART_SetConfig+0x9a4>
 8011066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801106a:	2b06      	cmp	r3, #6
 801106c:	d020      	beq.n	80110b0 <UART_SetConfig+0x9a0>
 801106e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011072:	2b07      	cmp	r3, #7
 8011074:	d01a      	beq.n	80110ac <UART_SetConfig+0x99c>
 8011076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801107a:	2b08      	cmp	r3, #8
 801107c:	d014      	beq.n	80110a8 <UART_SetConfig+0x998>
 801107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011082:	2b09      	cmp	r3, #9
 8011084:	d00e      	beq.n	80110a4 <UART_SetConfig+0x994>
 8011086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801108a:	2b0a      	cmp	r3, #10
 801108c:	d008      	beq.n	80110a0 <UART_SetConfig+0x990>
 801108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011092:	2b0b      	cmp	r3, #11
 8011094:	d102      	bne.n	801109c <UART_SetConfig+0x98c>
 8011096:	f44f 7280 	mov.w	r2, #256	; 0x100
 801109a:	e016      	b.n	80110ca <UART_SetConfig+0x9ba>
 801109c:	2201      	movs	r2, #1
 801109e:	e014      	b.n	80110ca <UART_SetConfig+0x9ba>
 80110a0:	2280      	movs	r2, #128	; 0x80
 80110a2:	e012      	b.n	80110ca <UART_SetConfig+0x9ba>
 80110a4:	2240      	movs	r2, #64	; 0x40
 80110a6:	e010      	b.n	80110ca <UART_SetConfig+0x9ba>
 80110a8:	2220      	movs	r2, #32
 80110aa:	e00e      	b.n	80110ca <UART_SetConfig+0x9ba>
 80110ac:	2210      	movs	r2, #16
 80110ae:	e00c      	b.n	80110ca <UART_SetConfig+0x9ba>
 80110b0:	220c      	movs	r2, #12
 80110b2:	e00a      	b.n	80110ca <UART_SetConfig+0x9ba>
 80110b4:	220a      	movs	r2, #10
 80110b6:	e008      	b.n	80110ca <UART_SetConfig+0x9ba>
 80110b8:	2208      	movs	r2, #8
 80110ba:	e006      	b.n	80110ca <UART_SetConfig+0x9ba>
 80110bc:	2206      	movs	r2, #6
 80110be:	e004      	b.n	80110ca <UART_SetConfig+0x9ba>
 80110c0:	2204      	movs	r2, #4
 80110c2:	e002      	b.n	80110ca <UART_SetConfig+0x9ba>
 80110c4:	2202      	movs	r2, #2
 80110c6:	e000      	b.n	80110ca <UART_SetConfig+0x9ba>
 80110c8:	2201      	movs	r2, #1
 80110ca:	4b48      	ldr	r3, [pc, #288]	; (80111ec <UART_SetConfig+0xadc>)
 80110cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80110d0:	64fb      	str	r3, [r7, #76]	; 0x4c
        break;
 80110d2:	e0a8      	b.n	8011226 <UART_SetConfig+0xb16>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80110d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d044      	beq.n	8011166 <UART_SetConfig+0xa56>
 80110dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110e0:	2b01      	cmp	r3, #1
 80110e2:	d03e      	beq.n	8011162 <UART_SetConfig+0xa52>
 80110e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110e8:	2b02      	cmp	r3, #2
 80110ea:	d038      	beq.n	801115e <UART_SetConfig+0xa4e>
 80110ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110f0:	2b03      	cmp	r3, #3
 80110f2:	d032      	beq.n	801115a <UART_SetConfig+0xa4a>
 80110f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110f8:	2b04      	cmp	r3, #4
 80110fa:	d02c      	beq.n	8011156 <UART_SetConfig+0xa46>
 80110fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011100:	2b05      	cmp	r3, #5
 8011102:	d026      	beq.n	8011152 <UART_SetConfig+0xa42>
 8011104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011108:	2b06      	cmp	r3, #6
 801110a:	d020      	beq.n	801114e <UART_SetConfig+0xa3e>
 801110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801110e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011110:	2b07      	cmp	r3, #7
 8011112:	d01a      	beq.n	801114a <UART_SetConfig+0xa3a>
 8011114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011118:	2b08      	cmp	r3, #8
 801111a:	d014      	beq.n	8011146 <UART_SetConfig+0xa36>
 801111c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801111e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011120:	2b09      	cmp	r3, #9
 8011122:	d00e      	beq.n	8011142 <UART_SetConfig+0xa32>
 8011124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011128:	2b0a      	cmp	r3, #10
 801112a:	d008      	beq.n	801113e <UART_SetConfig+0xa2e>
 801112c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801112e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011130:	2b0b      	cmp	r3, #11
 8011132:	d102      	bne.n	801113a <UART_SetConfig+0xa2a>
 8011134:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011138:	e016      	b.n	8011168 <UART_SetConfig+0xa58>
 801113a:	2201      	movs	r2, #1
 801113c:	e014      	b.n	8011168 <UART_SetConfig+0xa58>
 801113e:	2280      	movs	r2, #128	; 0x80
 8011140:	e012      	b.n	8011168 <UART_SetConfig+0xa58>
 8011142:	2240      	movs	r2, #64	; 0x40
 8011144:	e010      	b.n	8011168 <UART_SetConfig+0xa58>
 8011146:	2220      	movs	r2, #32
 8011148:	e00e      	b.n	8011168 <UART_SetConfig+0xa58>
 801114a:	2210      	movs	r2, #16
 801114c:	e00c      	b.n	8011168 <UART_SetConfig+0xa58>
 801114e:	220c      	movs	r2, #12
 8011150:	e00a      	b.n	8011168 <UART_SetConfig+0xa58>
 8011152:	220a      	movs	r2, #10
 8011154:	e008      	b.n	8011168 <UART_SetConfig+0xa58>
 8011156:	2208      	movs	r2, #8
 8011158:	e006      	b.n	8011168 <UART_SetConfig+0xa58>
 801115a:	2206      	movs	r2, #6
 801115c:	e004      	b.n	8011168 <UART_SetConfig+0xa58>
 801115e:	2204      	movs	r2, #4
 8011160:	e002      	b.n	8011168 <UART_SetConfig+0xa58>
 8011162:	2202      	movs	r2, #2
 8011164:	e000      	b.n	8011168 <UART_SetConfig+0xa58>
 8011166:	2201      	movs	r2, #1
 8011168:	4b21      	ldr	r3, [pc, #132]	; (80111f0 <UART_SetConfig+0xae0>)
 801116a:	fbb3 f3f2 	udiv	r3, r3, r2
 801116e:	64fb      	str	r3, [r7, #76]	; 0x4c
        break;
 8011170:	e059      	b.n	8011226 <UART_SetConfig+0xb16>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8011172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011176:	2b00      	cmp	r3, #0
 8011178:	d04a      	beq.n	8011210 <UART_SetConfig+0xb00>
 801117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801117c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801117e:	2b01      	cmp	r3, #1
 8011180:	d044      	beq.n	801120c <UART_SetConfig+0xafc>
 8011182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011186:	2b02      	cmp	r3, #2
 8011188:	d03e      	beq.n	8011208 <UART_SetConfig+0xaf8>
 801118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801118c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801118e:	2b03      	cmp	r3, #3
 8011190:	d038      	beq.n	8011204 <UART_SetConfig+0xaf4>
 8011192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011196:	2b04      	cmp	r3, #4
 8011198:	d032      	beq.n	8011200 <UART_SetConfig+0xaf0>
 801119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801119c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801119e:	2b05      	cmp	r3, #5
 80111a0:	d02c      	beq.n	80111fc <UART_SetConfig+0xaec>
 80111a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111a6:	2b06      	cmp	r3, #6
 80111a8:	d026      	beq.n	80111f8 <UART_SetConfig+0xae8>
 80111aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111ae:	2b07      	cmp	r3, #7
 80111b0:	d020      	beq.n	80111f4 <UART_SetConfig+0xae4>
 80111b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111b6:	2b08      	cmp	r3, #8
 80111b8:	d014      	beq.n	80111e4 <UART_SetConfig+0xad4>
 80111ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111be:	2b09      	cmp	r3, #9
 80111c0:	d00e      	beq.n	80111e0 <UART_SetConfig+0xad0>
 80111c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111c6:	2b0a      	cmp	r3, #10
 80111c8:	d008      	beq.n	80111dc <UART_SetConfig+0xacc>
 80111ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111ce:	2b0b      	cmp	r3, #11
 80111d0:	d102      	bne.n	80111d8 <UART_SetConfig+0xac8>
 80111d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80111d6:	e01c      	b.n	8011212 <UART_SetConfig+0xb02>
 80111d8:	2201      	movs	r2, #1
 80111da:	e01a      	b.n	8011212 <UART_SetConfig+0xb02>
 80111dc:	2280      	movs	r2, #128	; 0x80
 80111de:	e018      	b.n	8011212 <UART_SetConfig+0xb02>
 80111e0:	2240      	movs	r2, #64	; 0x40
 80111e2:	e016      	b.n	8011212 <UART_SetConfig+0xb02>
 80111e4:	2220      	movs	r2, #32
 80111e6:	e014      	b.n	8011212 <UART_SetConfig+0xb02>
 80111e8:	58024400 	.word	0x58024400
 80111ec:	03d09000 	.word	0x03d09000
 80111f0:	003d0900 	.word	0x003d0900
 80111f4:	2210      	movs	r2, #16
 80111f6:	e00c      	b.n	8011212 <UART_SetConfig+0xb02>
 80111f8:	220c      	movs	r2, #12
 80111fa:	e00a      	b.n	8011212 <UART_SetConfig+0xb02>
 80111fc:	220a      	movs	r2, #10
 80111fe:	e008      	b.n	8011212 <UART_SetConfig+0xb02>
 8011200:	2208      	movs	r2, #8
 8011202:	e006      	b.n	8011212 <UART_SetConfig+0xb02>
 8011204:	2206      	movs	r2, #6
 8011206:	e004      	b.n	8011212 <UART_SetConfig+0xb02>
 8011208:	2204      	movs	r2, #4
 801120a:	e002      	b.n	8011212 <UART_SetConfig+0xb02>
 801120c:	2202      	movs	r2, #2
 801120e:	e000      	b.n	8011212 <UART_SetConfig+0xb02>
 8011210:	2201      	movs	r2, #1
 8011212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011216:	fbb3 f3f2 	udiv	r3, r3, r2
 801121a:	64fb      	str	r3, [r7, #76]	; 0x4c
        break;
 801121c:	e003      	b.n	8011226 <UART_SetConfig+0xb16>
      default:
        ret = HAL_ERROR;
 801121e:	2301      	movs	r3, #1
 8011220:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        break;
 8011224:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8011226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011228:	2b00      	cmp	r3, #0
 801122a:	f001 8385 	beq.w	8012938 <UART_SetConfig+0x2228>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011230:	685a      	ldr	r2, [r3, #4]
 8011232:	4613      	mov	r3, r2
 8011234:	005b      	lsls	r3, r3, #1
 8011236:	441a      	add	r2, r3
 8011238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801123a:	4293      	cmp	r3, r2
 801123c:	d305      	bcc.n	801124a <UART_SetConfig+0xb3a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011240:	685b      	ldr	r3, [r3, #4]
 8011242:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011246:	4293      	cmp	r3, r2
 8011248:	d904      	bls.n	8011254 <UART_SetConfig+0xb44>
      {
        ret = HAL_ERROR;
 801124a:	2301      	movs	r3, #1
 801124c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8011250:	f001 bb72 	b.w	8012938 <UART_SetConfig+0x2228>
      }
      else
      {
        switch (clocksource)
 8011254:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8011258:	2b20      	cmp	r3, #32
 801125a:	dc47      	bgt.n	80112ec <UART_SetConfig+0xbdc>
 801125c:	2b02      	cmp	r3, #2
 801125e:	f2c0 849d 	blt.w	8011b9c <UART_SetConfig+0x148c>
 8011262:	3b02      	subs	r3, #2
 8011264:	2b1e      	cmp	r3, #30
 8011266:	f200 8499 	bhi.w	8011b9c <UART_SetConfig+0x148c>
 801126a:	a201      	add	r2, pc, #4	; (adr r2, 8011270 <UART_SetConfig+0xb60>)
 801126c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011270:	080112f7 	.word	0x080112f7
 8011274:	08011b9d 	.word	0x08011b9d
 8011278:	08011431 	.word	0x08011431
 801127c:	08011b9d 	.word	0x08011b9d
 8011280:	08011b9d 	.word	0x08011b9d
 8011284:	08011b9d 	.word	0x08011b9d
 8011288:	0801156f 	.word	0x0801156f
 801128c:	08011b9d 	.word	0x08011b9d
 8011290:	08011b9d 	.word	0x08011b9d
 8011294:	08011b9d 	.word	0x08011b9d
 8011298:	08011b9d 	.word	0x08011b9d
 801129c:	08011b9d 	.word	0x08011b9d
 80112a0:	08011b9d 	.word	0x08011b9d
 80112a4:	08011b9d 	.word	0x08011b9d
 80112a8:	080116ad 	.word	0x080116ad
 80112ac:	08011b9d 	.word	0x08011b9d
 80112b0:	08011b9d 	.word	0x08011b9d
 80112b4:	08011b9d 	.word	0x08011b9d
 80112b8:	08011b9d 	.word	0x08011b9d
 80112bc:	08011b9d 	.word	0x08011b9d
 80112c0:	08011b9d 	.word	0x08011b9d
 80112c4:	08011b9d 	.word	0x08011b9d
 80112c8:	08011b9d 	.word	0x08011b9d
 80112cc:	08011b9d 	.word	0x08011b9d
 80112d0:	08011b9d 	.word	0x08011b9d
 80112d4:	08011b9d 	.word	0x08011b9d
 80112d8:	08011b9d 	.word	0x08011b9d
 80112dc:	08011b9d 	.word	0x08011b9d
 80112e0:	08011b9d 	.word	0x08011b9d
 80112e4:	08011b9d 	.word	0x08011b9d
 80112e8:	08011939 	.word	0x08011939
 80112ec:	2b40      	cmp	r3, #64	; 0x40
 80112ee:	f000 83bc 	beq.w	8011a6a <UART_SetConfig+0x135a>
 80112f2:	f000 bc53 	b.w	8011b9c <UART_SetConfig+0x148c>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80112f6:	f7fb fed3 	bl	800d0a0 <HAL_RCCEx_GetD3PCLK1Freq>
 80112fa:	64b8      	str	r0, [r7, #72]	; 0x48
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80112fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80112fe:	4618      	mov	r0, r3
 8011300:	f04f 0100 	mov.w	r1, #0
 8011304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011308:	2b00      	cmp	r3, #0
 801130a:	d067      	beq.n	80113dc <UART_SetConfig+0xccc>
 801130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801130e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011310:	2b01      	cmp	r3, #1
 8011312:	d05e      	beq.n	80113d2 <UART_SetConfig+0xcc2>
 8011314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011318:	2b02      	cmp	r3, #2
 801131a:	d055      	beq.n	80113c8 <UART_SetConfig+0xcb8>
 801131c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801131e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011320:	2b03      	cmp	r3, #3
 8011322:	d04c      	beq.n	80113be <UART_SetConfig+0xcae>
 8011324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011328:	2b04      	cmp	r3, #4
 801132a:	d043      	beq.n	80113b4 <UART_SetConfig+0xca4>
 801132c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801132e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011330:	2b05      	cmp	r3, #5
 8011332:	d03a      	beq.n	80113aa <UART_SetConfig+0xc9a>
 8011334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011338:	2b06      	cmp	r3, #6
 801133a:	d031      	beq.n	80113a0 <UART_SetConfig+0xc90>
 801133c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801133e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011340:	2b07      	cmp	r3, #7
 8011342:	d028      	beq.n	8011396 <UART_SetConfig+0xc86>
 8011344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011348:	2b08      	cmp	r3, #8
 801134a:	d01f      	beq.n	801138c <UART_SetConfig+0xc7c>
 801134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801134e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011350:	2b09      	cmp	r3, #9
 8011352:	d016      	beq.n	8011382 <UART_SetConfig+0xc72>
 8011354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011358:	2b0a      	cmp	r3, #10
 801135a:	d00d      	beq.n	8011378 <UART_SetConfig+0xc68>
 801135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801135e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011360:	2b0b      	cmp	r3, #11
 8011362:	d104      	bne.n	801136e <UART_SetConfig+0xc5e>
 8011364:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011368:	f04f 0300 	mov.w	r3, #0
 801136c:	e03a      	b.n	80113e4 <UART_SetConfig+0xcd4>
 801136e:	f04f 0201 	mov.w	r2, #1
 8011372:	f04f 0300 	mov.w	r3, #0
 8011376:	e035      	b.n	80113e4 <UART_SetConfig+0xcd4>
 8011378:	f04f 0280 	mov.w	r2, #128	; 0x80
 801137c:	f04f 0300 	mov.w	r3, #0
 8011380:	e030      	b.n	80113e4 <UART_SetConfig+0xcd4>
 8011382:	f04f 0240 	mov.w	r2, #64	; 0x40
 8011386:	f04f 0300 	mov.w	r3, #0
 801138a:	e02b      	b.n	80113e4 <UART_SetConfig+0xcd4>
 801138c:	f04f 0220 	mov.w	r2, #32
 8011390:	f04f 0300 	mov.w	r3, #0
 8011394:	e026      	b.n	80113e4 <UART_SetConfig+0xcd4>
 8011396:	f04f 0210 	mov.w	r2, #16
 801139a:	f04f 0300 	mov.w	r3, #0
 801139e:	e021      	b.n	80113e4 <UART_SetConfig+0xcd4>
 80113a0:	f04f 020c 	mov.w	r2, #12
 80113a4:	f04f 0300 	mov.w	r3, #0
 80113a8:	e01c      	b.n	80113e4 <UART_SetConfig+0xcd4>
 80113aa:	f04f 020a 	mov.w	r2, #10
 80113ae:	f04f 0300 	mov.w	r3, #0
 80113b2:	e017      	b.n	80113e4 <UART_SetConfig+0xcd4>
 80113b4:	f04f 0208 	mov.w	r2, #8
 80113b8:	f04f 0300 	mov.w	r3, #0
 80113bc:	e012      	b.n	80113e4 <UART_SetConfig+0xcd4>
 80113be:	f04f 0206 	mov.w	r2, #6
 80113c2:	f04f 0300 	mov.w	r3, #0
 80113c6:	e00d      	b.n	80113e4 <UART_SetConfig+0xcd4>
 80113c8:	f04f 0204 	mov.w	r2, #4
 80113cc:	f04f 0300 	mov.w	r3, #0
 80113d0:	e008      	b.n	80113e4 <UART_SetConfig+0xcd4>
 80113d2:	f04f 0202 	mov.w	r2, #2
 80113d6:	f04f 0300 	mov.w	r3, #0
 80113da:	e003      	b.n	80113e4 <UART_SetConfig+0xcd4>
 80113dc:	f04f 0201 	mov.w	r2, #1
 80113e0:	f04f 0300 	mov.w	r3, #0
 80113e4:	f7ef f990 	bl	8000708 <__aeabi_uldivmod>
 80113e8:	4602      	mov	r2, r0
 80113ea:	460b      	mov	r3, r1
 80113ec:	4610      	mov	r0, r2
 80113ee:	4619      	mov	r1, r3
 80113f0:	f04f 0200 	mov.w	r2, #0
 80113f4:	f04f 0300 	mov.w	r3, #0
 80113f8:	020b      	lsls	r3, r1, #8
 80113fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80113fe:	0202      	lsls	r2, r0, #8
 8011400:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011402:	6849      	ldr	r1, [r1, #4]
 8011404:	0849      	lsrs	r1, r1, #1
 8011406:	4608      	mov	r0, r1
 8011408:	f04f 0100 	mov.w	r1, #0
 801140c:	1814      	adds	r4, r2, r0
 801140e:	61bc      	str	r4, [r7, #24]
 8011410:	414b      	adcs	r3, r1
 8011412:	61fb      	str	r3, [r7, #28]
 8011414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011416:	685b      	ldr	r3, [r3, #4]
 8011418:	461a      	mov	r2, r3
 801141a:	f04f 0300 	mov.w	r3, #0
 801141e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011422:	f7ef f971 	bl	8000708 <__aeabi_uldivmod>
 8011426:	4602      	mov	r2, r0
 8011428:	460b      	mov	r3, r1
 801142a:	4613      	mov	r3, r2
 801142c:	657b      	str	r3, [r7, #84]	; 0x54
            break;
 801142e:	e3b9      	b.n	8011ba4 <UART_SetConfig+0x1494>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011430:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011434:	4618      	mov	r0, r3
 8011436:	f7fb fe49 	bl	800d0cc <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801143a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801143c:	4618      	mov	r0, r3
 801143e:	f04f 0100 	mov.w	r1, #0
 8011442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011446:	2b00      	cmp	r3, #0
 8011448:	d067      	beq.n	801151a <UART_SetConfig+0xe0a>
 801144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801144e:	2b01      	cmp	r3, #1
 8011450:	d05e      	beq.n	8011510 <UART_SetConfig+0xe00>
 8011452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011456:	2b02      	cmp	r3, #2
 8011458:	d055      	beq.n	8011506 <UART_SetConfig+0xdf6>
 801145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801145c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801145e:	2b03      	cmp	r3, #3
 8011460:	d04c      	beq.n	80114fc <UART_SetConfig+0xdec>
 8011462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011466:	2b04      	cmp	r3, #4
 8011468:	d043      	beq.n	80114f2 <UART_SetConfig+0xde2>
 801146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801146c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801146e:	2b05      	cmp	r3, #5
 8011470:	d03a      	beq.n	80114e8 <UART_SetConfig+0xdd8>
 8011472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011476:	2b06      	cmp	r3, #6
 8011478:	d031      	beq.n	80114de <UART_SetConfig+0xdce>
 801147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801147e:	2b07      	cmp	r3, #7
 8011480:	d028      	beq.n	80114d4 <UART_SetConfig+0xdc4>
 8011482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011486:	2b08      	cmp	r3, #8
 8011488:	d01f      	beq.n	80114ca <UART_SetConfig+0xdba>
 801148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801148c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801148e:	2b09      	cmp	r3, #9
 8011490:	d016      	beq.n	80114c0 <UART_SetConfig+0xdb0>
 8011492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011496:	2b0a      	cmp	r3, #10
 8011498:	d00d      	beq.n	80114b6 <UART_SetConfig+0xda6>
 801149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801149c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801149e:	2b0b      	cmp	r3, #11
 80114a0:	d104      	bne.n	80114ac <UART_SetConfig+0xd9c>
 80114a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80114a6:	f04f 0300 	mov.w	r3, #0
 80114aa:	e03a      	b.n	8011522 <UART_SetConfig+0xe12>
 80114ac:	f04f 0201 	mov.w	r2, #1
 80114b0:	f04f 0300 	mov.w	r3, #0
 80114b4:	e035      	b.n	8011522 <UART_SetConfig+0xe12>
 80114b6:	f04f 0280 	mov.w	r2, #128	; 0x80
 80114ba:	f04f 0300 	mov.w	r3, #0
 80114be:	e030      	b.n	8011522 <UART_SetConfig+0xe12>
 80114c0:	f04f 0240 	mov.w	r2, #64	; 0x40
 80114c4:	f04f 0300 	mov.w	r3, #0
 80114c8:	e02b      	b.n	8011522 <UART_SetConfig+0xe12>
 80114ca:	f04f 0220 	mov.w	r2, #32
 80114ce:	f04f 0300 	mov.w	r3, #0
 80114d2:	e026      	b.n	8011522 <UART_SetConfig+0xe12>
 80114d4:	f04f 0210 	mov.w	r2, #16
 80114d8:	f04f 0300 	mov.w	r3, #0
 80114dc:	e021      	b.n	8011522 <UART_SetConfig+0xe12>
 80114de:	f04f 020c 	mov.w	r2, #12
 80114e2:	f04f 0300 	mov.w	r3, #0
 80114e6:	e01c      	b.n	8011522 <UART_SetConfig+0xe12>
 80114e8:	f04f 020a 	mov.w	r2, #10
 80114ec:	f04f 0300 	mov.w	r3, #0
 80114f0:	e017      	b.n	8011522 <UART_SetConfig+0xe12>
 80114f2:	f04f 0208 	mov.w	r2, #8
 80114f6:	f04f 0300 	mov.w	r3, #0
 80114fa:	e012      	b.n	8011522 <UART_SetConfig+0xe12>
 80114fc:	f04f 0206 	mov.w	r2, #6
 8011500:	f04f 0300 	mov.w	r3, #0
 8011504:	e00d      	b.n	8011522 <UART_SetConfig+0xe12>
 8011506:	f04f 0204 	mov.w	r2, #4
 801150a:	f04f 0300 	mov.w	r3, #0
 801150e:	e008      	b.n	8011522 <UART_SetConfig+0xe12>
 8011510:	f04f 0202 	mov.w	r2, #2
 8011514:	f04f 0300 	mov.w	r3, #0
 8011518:	e003      	b.n	8011522 <UART_SetConfig+0xe12>
 801151a:	f04f 0201 	mov.w	r2, #1
 801151e:	f04f 0300 	mov.w	r3, #0
 8011522:	f7ef f8f1 	bl	8000708 <__aeabi_uldivmod>
 8011526:	4602      	mov	r2, r0
 8011528:	460b      	mov	r3, r1
 801152a:	4610      	mov	r0, r2
 801152c:	4619      	mov	r1, r3
 801152e:	f04f 0200 	mov.w	r2, #0
 8011532:	f04f 0300 	mov.w	r3, #0
 8011536:	020b      	lsls	r3, r1, #8
 8011538:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801153c:	0202      	lsls	r2, r0, #8
 801153e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011540:	6849      	ldr	r1, [r1, #4]
 8011542:	0849      	lsrs	r1, r1, #1
 8011544:	4608      	mov	r0, r1
 8011546:	f04f 0100 	mov.w	r1, #0
 801154a:	1814      	adds	r4, r2, r0
 801154c:	613c      	str	r4, [r7, #16]
 801154e:	414b      	adcs	r3, r1
 8011550:	617b      	str	r3, [r7, #20]
 8011552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011554:	685b      	ldr	r3, [r3, #4]
 8011556:	461a      	mov	r2, r3
 8011558:	f04f 0300 	mov.w	r3, #0
 801155c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011560:	f7ef f8d2 	bl	8000708 <__aeabi_uldivmod>
 8011564:	4602      	mov	r2, r0
 8011566:	460b      	mov	r3, r1
 8011568:	4613      	mov	r3, r2
 801156a:	657b      	str	r3, [r7, #84]	; 0x54
            break;
 801156c:	e31a      	b.n	8011ba4 <UART_SetConfig+0x1494>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801156e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011572:	4618      	mov	r0, r3
 8011574:	f7fb fefe 	bl	800d374 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801157a:	4618      	mov	r0, r3
 801157c:	f04f 0100 	mov.w	r1, #0
 8011580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011584:	2b00      	cmp	r3, #0
 8011586:	d067      	beq.n	8011658 <UART_SetConfig+0xf48>
 8011588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801158a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801158c:	2b01      	cmp	r3, #1
 801158e:	d05e      	beq.n	801164e <UART_SetConfig+0xf3e>
 8011590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011594:	2b02      	cmp	r3, #2
 8011596:	d055      	beq.n	8011644 <UART_SetConfig+0xf34>
 8011598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801159c:	2b03      	cmp	r3, #3
 801159e:	d04c      	beq.n	801163a <UART_SetConfig+0xf2a>
 80115a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115a4:	2b04      	cmp	r3, #4
 80115a6:	d043      	beq.n	8011630 <UART_SetConfig+0xf20>
 80115a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115ac:	2b05      	cmp	r3, #5
 80115ae:	d03a      	beq.n	8011626 <UART_SetConfig+0xf16>
 80115b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115b4:	2b06      	cmp	r3, #6
 80115b6:	d031      	beq.n	801161c <UART_SetConfig+0xf0c>
 80115b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115bc:	2b07      	cmp	r3, #7
 80115be:	d028      	beq.n	8011612 <UART_SetConfig+0xf02>
 80115c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115c4:	2b08      	cmp	r3, #8
 80115c6:	d01f      	beq.n	8011608 <UART_SetConfig+0xef8>
 80115c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115cc:	2b09      	cmp	r3, #9
 80115ce:	d016      	beq.n	80115fe <UART_SetConfig+0xeee>
 80115d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115d4:	2b0a      	cmp	r3, #10
 80115d6:	d00d      	beq.n	80115f4 <UART_SetConfig+0xee4>
 80115d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115dc:	2b0b      	cmp	r3, #11
 80115de:	d104      	bne.n	80115ea <UART_SetConfig+0xeda>
 80115e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80115e4:	f04f 0300 	mov.w	r3, #0
 80115e8:	e03a      	b.n	8011660 <UART_SetConfig+0xf50>
 80115ea:	f04f 0201 	mov.w	r2, #1
 80115ee:	f04f 0300 	mov.w	r3, #0
 80115f2:	e035      	b.n	8011660 <UART_SetConfig+0xf50>
 80115f4:	f04f 0280 	mov.w	r2, #128	; 0x80
 80115f8:	f04f 0300 	mov.w	r3, #0
 80115fc:	e030      	b.n	8011660 <UART_SetConfig+0xf50>
 80115fe:	f04f 0240 	mov.w	r2, #64	; 0x40
 8011602:	f04f 0300 	mov.w	r3, #0
 8011606:	e02b      	b.n	8011660 <UART_SetConfig+0xf50>
 8011608:	f04f 0220 	mov.w	r2, #32
 801160c:	f04f 0300 	mov.w	r3, #0
 8011610:	e026      	b.n	8011660 <UART_SetConfig+0xf50>
 8011612:	f04f 0210 	mov.w	r2, #16
 8011616:	f04f 0300 	mov.w	r3, #0
 801161a:	e021      	b.n	8011660 <UART_SetConfig+0xf50>
 801161c:	f04f 020c 	mov.w	r2, #12
 8011620:	f04f 0300 	mov.w	r3, #0
 8011624:	e01c      	b.n	8011660 <UART_SetConfig+0xf50>
 8011626:	f04f 020a 	mov.w	r2, #10
 801162a:	f04f 0300 	mov.w	r3, #0
 801162e:	e017      	b.n	8011660 <UART_SetConfig+0xf50>
 8011630:	f04f 0208 	mov.w	r2, #8
 8011634:	f04f 0300 	mov.w	r3, #0
 8011638:	e012      	b.n	8011660 <UART_SetConfig+0xf50>
 801163a:	f04f 0206 	mov.w	r2, #6
 801163e:	f04f 0300 	mov.w	r3, #0
 8011642:	e00d      	b.n	8011660 <UART_SetConfig+0xf50>
 8011644:	f04f 0204 	mov.w	r2, #4
 8011648:	f04f 0300 	mov.w	r3, #0
 801164c:	e008      	b.n	8011660 <UART_SetConfig+0xf50>
 801164e:	f04f 0202 	mov.w	r2, #2
 8011652:	f04f 0300 	mov.w	r3, #0
 8011656:	e003      	b.n	8011660 <UART_SetConfig+0xf50>
 8011658:	f04f 0201 	mov.w	r2, #1
 801165c:	f04f 0300 	mov.w	r3, #0
 8011660:	f7ef f852 	bl	8000708 <__aeabi_uldivmod>
 8011664:	4602      	mov	r2, r0
 8011666:	460b      	mov	r3, r1
 8011668:	4610      	mov	r0, r2
 801166a:	4619      	mov	r1, r3
 801166c:	f04f 0200 	mov.w	r2, #0
 8011670:	f04f 0300 	mov.w	r3, #0
 8011674:	020b      	lsls	r3, r1, #8
 8011676:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801167a:	0202      	lsls	r2, r0, #8
 801167c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801167e:	6849      	ldr	r1, [r1, #4]
 8011680:	0849      	lsrs	r1, r1, #1
 8011682:	4608      	mov	r0, r1
 8011684:	f04f 0100 	mov.w	r1, #0
 8011688:	1814      	adds	r4, r2, r0
 801168a:	60bc      	str	r4, [r7, #8]
 801168c:	414b      	adcs	r3, r1
 801168e:	60fb      	str	r3, [r7, #12]
 8011690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011692:	685b      	ldr	r3, [r3, #4]
 8011694:	461a      	mov	r2, r3
 8011696:	f04f 0300 	mov.w	r3, #0
 801169a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801169e:	f7ef f833 	bl	8000708 <__aeabi_uldivmod>
 80116a2:	4602      	mov	r2, r0
 80116a4:	460b      	mov	r3, r1
 80116a6:	4613      	mov	r3, r2
 80116a8:	657b      	str	r3, [r7, #84]	; 0x54
            break;
 80116aa:	e27b      	b.n	8011ba4 <UART_SetConfig+0x1494>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80116ac:	4ba0      	ldr	r3, [pc, #640]	; (8011930 <UART_SetConfig+0x1220>)
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	f003 0320 	and.w	r3, r3, #32
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	f000 80a1 	beq.w	80117fc <UART_SetConfig+0x10ec>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80116ba:	4b9d      	ldr	r3, [pc, #628]	; (8011930 <UART_SetConfig+0x1220>)
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	08db      	lsrs	r3, r3, #3
 80116c0:	f003 0303 	and.w	r3, r3, #3
 80116c4:	4a9b      	ldr	r2, [pc, #620]	; (8011934 <UART_SetConfig+0x1224>)
 80116c6:	fa22 f303 	lsr.w	r3, r2, r3
 80116ca:	4618      	mov	r0, r3
 80116cc:	f04f 0100 	mov.w	r1, #0
 80116d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d067      	beq.n	80117a8 <UART_SetConfig+0x1098>
 80116d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116dc:	2b01      	cmp	r3, #1
 80116de:	d05e      	beq.n	801179e <UART_SetConfig+0x108e>
 80116e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116e4:	2b02      	cmp	r3, #2
 80116e6:	d055      	beq.n	8011794 <UART_SetConfig+0x1084>
 80116e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116ec:	2b03      	cmp	r3, #3
 80116ee:	d04c      	beq.n	801178a <UART_SetConfig+0x107a>
 80116f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116f4:	2b04      	cmp	r3, #4
 80116f6:	d043      	beq.n	8011780 <UART_SetConfig+0x1070>
 80116f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116fc:	2b05      	cmp	r3, #5
 80116fe:	d03a      	beq.n	8011776 <UART_SetConfig+0x1066>
 8011700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011704:	2b06      	cmp	r3, #6
 8011706:	d031      	beq.n	801176c <UART_SetConfig+0x105c>
 8011708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801170a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801170c:	2b07      	cmp	r3, #7
 801170e:	d028      	beq.n	8011762 <UART_SetConfig+0x1052>
 8011710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011714:	2b08      	cmp	r3, #8
 8011716:	d01f      	beq.n	8011758 <UART_SetConfig+0x1048>
 8011718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801171c:	2b09      	cmp	r3, #9
 801171e:	d016      	beq.n	801174e <UART_SetConfig+0x103e>
 8011720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011724:	2b0a      	cmp	r3, #10
 8011726:	d00d      	beq.n	8011744 <UART_SetConfig+0x1034>
 8011728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801172c:	2b0b      	cmp	r3, #11
 801172e:	d104      	bne.n	801173a <UART_SetConfig+0x102a>
 8011730:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011734:	f04f 0300 	mov.w	r3, #0
 8011738:	e03a      	b.n	80117b0 <UART_SetConfig+0x10a0>
 801173a:	f04f 0201 	mov.w	r2, #1
 801173e:	f04f 0300 	mov.w	r3, #0
 8011742:	e035      	b.n	80117b0 <UART_SetConfig+0x10a0>
 8011744:	f04f 0280 	mov.w	r2, #128	; 0x80
 8011748:	f04f 0300 	mov.w	r3, #0
 801174c:	e030      	b.n	80117b0 <UART_SetConfig+0x10a0>
 801174e:	f04f 0240 	mov.w	r2, #64	; 0x40
 8011752:	f04f 0300 	mov.w	r3, #0
 8011756:	e02b      	b.n	80117b0 <UART_SetConfig+0x10a0>
 8011758:	f04f 0220 	mov.w	r2, #32
 801175c:	f04f 0300 	mov.w	r3, #0
 8011760:	e026      	b.n	80117b0 <UART_SetConfig+0x10a0>
 8011762:	f04f 0210 	mov.w	r2, #16
 8011766:	f04f 0300 	mov.w	r3, #0
 801176a:	e021      	b.n	80117b0 <UART_SetConfig+0x10a0>
 801176c:	f04f 020c 	mov.w	r2, #12
 8011770:	f04f 0300 	mov.w	r3, #0
 8011774:	e01c      	b.n	80117b0 <UART_SetConfig+0x10a0>
 8011776:	f04f 020a 	mov.w	r2, #10
 801177a:	f04f 0300 	mov.w	r3, #0
 801177e:	e017      	b.n	80117b0 <UART_SetConfig+0x10a0>
 8011780:	f04f 0208 	mov.w	r2, #8
 8011784:	f04f 0300 	mov.w	r3, #0
 8011788:	e012      	b.n	80117b0 <UART_SetConfig+0x10a0>
 801178a:	f04f 0206 	mov.w	r2, #6
 801178e:	f04f 0300 	mov.w	r3, #0
 8011792:	e00d      	b.n	80117b0 <UART_SetConfig+0x10a0>
 8011794:	f04f 0204 	mov.w	r2, #4
 8011798:	f04f 0300 	mov.w	r3, #0
 801179c:	e008      	b.n	80117b0 <UART_SetConfig+0x10a0>
 801179e:	f04f 0202 	mov.w	r2, #2
 80117a2:	f04f 0300 	mov.w	r3, #0
 80117a6:	e003      	b.n	80117b0 <UART_SetConfig+0x10a0>
 80117a8:	f04f 0201 	mov.w	r2, #1
 80117ac:	f04f 0300 	mov.w	r3, #0
 80117b0:	f7ee ffaa 	bl	8000708 <__aeabi_uldivmod>
 80117b4:	4602      	mov	r2, r0
 80117b6:	460b      	mov	r3, r1
 80117b8:	4610      	mov	r0, r2
 80117ba:	4619      	mov	r1, r3
 80117bc:	f04f 0200 	mov.w	r2, #0
 80117c0:	f04f 0300 	mov.w	r3, #0
 80117c4:	020b      	lsls	r3, r1, #8
 80117c6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80117ca:	0202      	lsls	r2, r0, #8
 80117cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80117ce:	6849      	ldr	r1, [r1, #4]
 80117d0:	0849      	lsrs	r1, r1, #1
 80117d2:	4608      	mov	r0, r1
 80117d4:	f04f 0100 	mov.w	r1, #0
 80117d8:	1814      	adds	r4, r2, r0
 80117da:	603c      	str	r4, [r7, #0]
 80117dc:	414b      	adcs	r3, r1
 80117de:	607b      	str	r3, [r7, #4]
 80117e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117e2:	685b      	ldr	r3, [r3, #4]
 80117e4:	461a      	mov	r2, r3
 80117e6:	f04f 0300 	mov.w	r3, #0
 80117ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80117ee:	f7ee ff8b 	bl	8000708 <__aeabi_uldivmod>
 80117f2:	4602      	mov	r2, r0
 80117f4:	460b      	mov	r3, r1
 80117f6:	4613      	mov	r3, r2
 80117f8:	657b      	str	r3, [r7, #84]	; 0x54
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 80117fa:	e1d3      	b.n	8011ba4 <UART_SetConfig+0x1494>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80117fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011800:	2b00      	cmp	r3, #0
 8011802:	d067      	beq.n	80118d4 <UART_SetConfig+0x11c4>
 8011804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011808:	2b01      	cmp	r3, #1
 801180a:	d05e      	beq.n	80118ca <UART_SetConfig+0x11ba>
 801180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801180e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011810:	2b02      	cmp	r3, #2
 8011812:	d055      	beq.n	80118c0 <UART_SetConfig+0x11b0>
 8011814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011818:	2b03      	cmp	r3, #3
 801181a:	d04c      	beq.n	80118b6 <UART_SetConfig+0x11a6>
 801181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011820:	2b04      	cmp	r3, #4
 8011822:	d043      	beq.n	80118ac <UART_SetConfig+0x119c>
 8011824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011828:	2b05      	cmp	r3, #5
 801182a:	d03a      	beq.n	80118a2 <UART_SetConfig+0x1192>
 801182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801182e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011830:	2b06      	cmp	r3, #6
 8011832:	d031      	beq.n	8011898 <UART_SetConfig+0x1188>
 8011834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011838:	2b07      	cmp	r3, #7
 801183a:	d028      	beq.n	801188e <UART_SetConfig+0x117e>
 801183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011840:	2b08      	cmp	r3, #8
 8011842:	d01f      	beq.n	8011884 <UART_SetConfig+0x1174>
 8011844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011848:	2b09      	cmp	r3, #9
 801184a:	d016      	beq.n	801187a <UART_SetConfig+0x116a>
 801184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011850:	2b0a      	cmp	r3, #10
 8011852:	d00d      	beq.n	8011870 <UART_SetConfig+0x1160>
 8011854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011858:	2b0b      	cmp	r3, #11
 801185a:	d104      	bne.n	8011866 <UART_SetConfig+0x1156>
 801185c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011860:	f04f 0300 	mov.w	r3, #0
 8011864:	e03a      	b.n	80118dc <UART_SetConfig+0x11cc>
 8011866:	f04f 0201 	mov.w	r2, #1
 801186a:	f04f 0300 	mov.w	r3, #0
 801186e:	e035      	b.n	80118dc <UART_SetConfig+0x11cc>
 8011870:	f04f 0280 	mov.w	r2, #128	; 0x80
 8011874:	f04f 0300 	mov.w	r3, #0
 8011878:	e030      	b.n	80118dc <UART_SetConfig+0x11cc>
 801187a:	f04f 0240 	mov.w	r2, #64	; 0x40
 801187e:	f04f 0300 	mov.w	r3, #0
 8011882:	e02b      	b.n	80118dc <UART_SetConfig+0x11cc>
 8011884:	f04f 0220 	mov.w	r2, #32
 8011888:	f04f 0300 	mov.w	r3, #0
 801188c:	e026      	b.n	80118dc <UART_SetConfig+0x11cc>
 801188e:	f04f 0210 	mov.w	r2, #16
 8011892:	f04f 0300 	mov.w	r3, #0
 8011896:	e021      	b.n	80118dc <UART_SetConfig+0x11cc>
 8011898:	f04f 020c 	mov.w	r2, #12
 801189c:	f04f 0300 	mov.w	r3, #0
 80118a0:	e01c      	b.n	80118dc <UART_SetConfig+0x11cc>
 80118a2:	f04f 020a 	mov.w	r2, #10
 80118a6:	f04f 0300 	mov.w	r3, #0
 80118aa:	e017      	b.n	80118dc <UART_SetConfig+0x11cc>
 80118ac:	f04f 0208 	mov.w	r2, #8
 80118b0:	f04f 0300 	mov.w	r3, #0
 80118b4:	e012      	b.n	80118dc <UART_SetConfig+0x11cc>
 80118b6:	f04f 0206 	mov.w	r2, #6
 80118ba:	f04f 0300 	mov.w	r3, #0
 80118be:	e00d      	b.n	80118dc <UART_SetConfig+0x11cc>
 80118c0:	f04f 0204 	mov.w	r2, #4
 80118c4:	f04f 0300 	mov.w	r3, #0
 80118c8:	e008      	b.n	80118dc <UART_SetConfig+0x11cc>
 80118ca:	f04f 0202 	mov.w	r2, #2
 80118ce:	f04f 0300 	mov.w	r3, #0
 80118d2:	e003      	b.n	80118dc <UART_SetConfig+0x11cc>
 80118d4:	f04f 0201 	mov.w	r2, #1
 80118d8:	f04f 0300 	mov.w	r3, #0
 80118dc:	4815      	ldr	r0, [pc, #84]	; (8011934 <UART_SetConfig+0x1224>)
 80118de:	f04f 0100 	mov.w	r1, #0
 80118e2:	f7ee ff11 	bl	8000708 <__aeabi_uldivmod>
 80118e6:	4602      	mov	r2, r0
 80118e8:	460b      	mov	r3, r1
 80118ea:	4610      	mov	r0, r2
 80118ec:	4619      	mov	r1, r3
 80118ee:	f04f 0200 	mov.w	r2, #0
 80118f2:	f04f 0300 	mov.w	r3, #0
 80118f6:	020b      	lsls	r3, r1, #8
 80118f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80118fc:	0202      	lsls	r2, r0, #8
 80118fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011900:	6849      	ldr	r1, [r1, #4]
 8011902:	0849      	lsrs	r1, r1, #1
 8011904:	4608      	mov	r0, r1
 8011906:	f04f 0100 	mov.w	r1, #0
 801190a:	eb12 0a00 	adds.w	sl, r2, r0
 801190e:	eb43 0b01 	adc.w	fp, r3, r1
 8011912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011914:	685b      	ldr	r3, [r3, #4]
 8011916:	461a      	mov	r2, r3
 8011918:	f04f 0300 	mov.w	r3, #0
 801191c:	4650      	mov	r0, sl
 801191e:	4659      	mov	r1, fp
 8011920:	f7ee fef2 	bl	8000708 <__aeabi_uldivmod>
 8011924:	4602      	mov	r2, r0
 8011926:	460b      	mov	r3, r1
 8011928:	4613      	mov	r3, r2
 801192a:	657b      	str	r3, [r7, #84]	; 0x54
            break;
 801192c:	e13a      	b.n	8011ba4 <UART_SetConfig+0x1494>
 801192e:	bf00      	nop
 8011930:	58024400 	.word	0x58024400
 8011934:	03d09000 	.word	0x03d09000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801193c:	2b00      	cmp	r3, #0
 801193e:	d067      	beq.n	8011a10 <UART_SetConfig+0x1300>
 8011940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011944:	2b01      	cmp	r3, #1
 8011946:	d05e      	beq.n	8011a06 <UART_SetConfig+0x12f6>
 8011948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801194a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801194c:	2b02      	cmp	r3, #2
 801194e:	d055      	beq.n	80119fc <UART_SetConfig+0x12ec>
 8011950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011954:	2b03      	cmp	r3, #3
 8011956:	d04c      	beq.n	80119f2 <UART_SetConfig+0x12e2>
 8011958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801195c:	2b04      	cmp	r3, #4
 801195e:	d043      	beq.n	80119e8 <UART_SetConfig+0x12d8>
 8011960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011964:	2b05      	cmp	r3, #5
 8011966:	d03a      	beq.n	80119de <UART_SetConfig+0x12ce>
 8011968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801196c:	2b06      	cmp	r3, #6
 801196e:	d031      	beq.n	80119d4 <UART_SetConfig+0x12c4>
 8011970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011974:	2b07      	cmp	r3, #7
 8011976:	d028      	beq.n	80119ca <UART_SetConfig+0x12ba>
 8011978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801197c:	2b08      	cmp	r3, #8
 801197e:	d01f      	beq.n	80119c0 <UART_SetConfig+0x12b0>
 8011980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011984:	2b09      	cmp	r3, #9
 8011986:	d016      	beq.n	80119b6 <UART_SetConfig+0x12a6>
 8011988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801198c:	2b0a      	cmp	r3, #10
 801198e:	d00d      	beq.n	80119ac <UART_SetConfig+0x129c>
 8011990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011994:	2b0b      	cmp	r3, #11
 8011996:	d104      	bne.n	80119a2 <UART_SetConfig+0x1292>
 8011998:	f44f 7280 	mov.w	r2, #256	; 0x100
 801199c:	f04f 0300 	mov.w	r3, #0
 80119a0:	e03a      	b.n	8011a18 <UART_SetConfig+0x1308>
 80119a2:	f04f 0201 	mov.w	r2, #1
 80119a6:	f04f 0300 	mov.w	r3, #0
 80119aa:	e035      	b.n	8011a18 <UART_SetConfig+0x1308>
 80119ac:	f04f 0280 	mov.w	r2, #128	; 0x80
 80119b0:	f04f 0300 	mov.w	r3, #0
 80119b4:	e030      	b.n	8011a18 <UART_SetConfig+0x1308>
 80119b6:	f04f 0240 	mov.w	r2, #64	; 0x40
 80119ba:	f04f 0300 	mov.w	r3, #0
 80119be:	e02b      	b.n	8011a18 <UART_SetConfig+0x1308>
 80119c0:	f04f 0220 	mov.w	r2, #32
 80119c4:	f04f 0300 	mov.w	r3, #0
 80119c8:	e026      	b.n	8011a18 <UART_SetConfig+0x1308>
 80119ca:	f04f 0210 	mov.w	r2, #16
 80119ce:	f04f 0300 	mov.w	r3, #0
 80119d2:	e021      	b.n	8011a18 <UART_SetConfig+0x1308>
 80119d4:	f04f 020c 	mov.w	r2, #12
 80119d8:	f04f 0300 	mov.w	r3, #0
 80119dc:	e01c      	b.n	8011a18 <UART_SetConfig+0x1308>
 80119de:	f04f 020a 	mov.w	r2, #10
 80119e2:	f04f 0300 	mov.w	r3, #0
 80119e6:	e017      	b.n	8011a18 <UART_SetConfig+0x1308>
 80119e8:	f04f 0208 	mov.w	r2, #8
 80119ec:	f04f 0300 	mov.w	r3, #0
 80119f0:	e012      	b.n	8011a18 <UART_SetConfig+0x1308>
 80119f2:	f04f 0206 	mov.w	r2, #6
 80119f6:	f04f 0300 	mov.w	r3, #0
 80119fa:	e00d      	b.n	8011a18 <UART_SetConfig+0x1308>
 80119fc:	f04f 0204 	mov.w	r2, #4
 8011a00:	f04f 0300 	mov.w	r3, #0
 8011a04:	e008      	b.n	8011a18 <UART_SetConfig+0x1308>
 8011a06:	f04f 0202 	mov.w	r2, #2
 8011a0a:	f04f 0300 	mov.w	r3, #0
 8011a0e:	e003      	b.n	8011a18 <UART_SetConfig+0x1308>
 8011a10:	f04f 0201 	mov.w	r2, #1
 8011a14:	f04f 0300 	mov.w	r3, #0
 8011a18:	48be      	ldr	r0, [pc, #760]	; (8011d14 <UART_SetConfig+0x1604>)
 8011a1a:	f04f 0100 	mov.w	r1, #0
 8011a1e:	f7ee fe73 	bl	8000708 <__aeabi_uldivmod>
 8011a22:	4602      	mov	r2, r0
 8011a24:	460b      	mov	r3, r1
 8011a26:	4610      	mov	r0, r2
 8011a28:	4619      	mov	r1, r3
 8011a2a:	f04f 0200 	mov.w	r2, #0
 8011a2e:	f04f 0300 	mov.w	r3, #0
 8011a32:	020b      	lsls	r3, r1, #8
 8011a34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011a38:	0202      	lsls	r2, r0, #8
 8011a3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011a3c:	6849      	ldr	r1, [r1, #4]
 8011a3e:	0849      	lsrs	r1, r1, #1
 8011a40:	4608      	mov	r0, r1
 8011a42:	f04f 0100 	mov.w	r1, #0
 8011a46:	eb12 0800 	adds.w	r8, r2, r0
 8011a4a:	eb43 0901 	adc.w	r9, r3, r1
 8011a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a50:	685b      	ldr	r3, [r3, #4]
 8011a52:	461a      	mov	r2, r3
 8011a54:	f04f 0300 	mov.w	r3, #0
 8011a58:	4640      	mov	r0, r8
 8011a5a:	4649      	mov	r1, r9
 8011a5c:	f7ee fe54 	bl	8000708 <__aeabi_uldivmod>
 8011a60:	4602      	mov	r2, r0
 8011a62:	460b      	mov	r3, r1
 8011a64:	4613      	mov	r3, r2
 8011a66:	657b      	str	r3, [r7, #84]	; 0x54
            break;
 8011a68:	e09c      	b.n	8011ba4 <UART_SetConfig+0x1494>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d067      	beq.n	8011b42 <UART_SetConfig+0x1432>
 8011a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a76:	2b01      	cmp	r3, #1
 8011a78:	d05e      	beq.n	8011b38 <UART_SetConfig+0x1428>
 8011a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a7e:	2b02      	cmp	r3, #2
 8011a80:	d055      	beq.n	8011b2e <UART_SetConfig+0x141e>
 8011a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a86:	2b03      	cmp	r3, #3
 8011a88:	d04c      	beq.n	8011b24 <UART_SetConfig+0x1414>
 8011a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a8e:	2b04      	cmp	r3, #4
 8011a90:	d043      	beq.n	8011b1a <UART_SetConfig+0x140a>
 8011a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a96:	2b05      	cmp	r3, #5
 8011a98:	d03a      	beq.n	8011b10 <UART_SetConfig+0x1400>
 8011a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a9e:	2b06      	cmp	r3, #6
 8011aa0:	d031      	beq.n	8011b06 <UART_SetConfig+0x13f6>
 8011aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011aa6:	2b07      	cmp	r3, #7
 8011aa8:	d028      	beq.n	8011afc <UART_SetConfig+0x13ec>
 8011aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011aae:	2b08      	cmp	r3, #8
 8011ab0:	d01f      	beq.n	8011af2 <UART_SetConfig+0x13e2>
 8011ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ab6:	2b09      	cmp	r3, #9
 8011ab8:	d016      	beq.n	8011ae8 <UART_SetConfig+0x13d8>
 8011aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011abe:	2b0a      	cmp	r3, #10
 8011ac0:	d00d      	beq.n	8011ade <UART_SetConfig+0x13ce>
 8011ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ac6:	2b0b      	cmp	r3, #11
 8011ac8:	d104      	bne.n	8011ad4 <UART_SetConfig+0x13c4>
 8011aca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011ace:	f04f 0300 	mov.w	r3, #0
 8011ad2:	e03a      	b.n	8011b4a <UART_SetConfig+0x143a>
 8011ad4:	f04f 0201 	mov.w	r2, #1
 8011ad8:	f04f 0300 	mov.w	r3, #0
 8011adc:	e035      	b.n	8011b4a <UART_SetConfig+0x143a>
 8011ade:	f04f 0280 	mov.w	r2, #128	; 0x80
 8011ae2:	f04f 0300 	mov.w	r3, #0
 8011ae6:	e030      	b.n	8011b4a <UART_SetConfig+0x143a>
 8011ae8:	f04f 0240 	mov.w	r2, #64	; 0x40
 8011aec:	f04f 0300 	mov.w	r3, #0
 8011af0:	e02b      	b.n	8011b4a <UART_SetConfig+0x143a>
 8011af2:	f04f 0220 	mov.w	r2, #32
 8011af6:	f04f 0300 	mov.w	r3, #0
 8011afa:	e026      	b.n	8011b4a <UART_SetConfig+0x143a>
 8011afc:	f04f 0210 	mov.w	r2, #16
 8011b00:	f04f 0300 	mov.w	r3, #0
 8011b04:	e021      	b.n	8011b4a <UART_SetConfig+0x143a>
 8011b06:	f04f 020c 	mov.w	r2, #12
 8011b0a:	f04f 0300 	mov.w	r3, #0
 8011b0e:	e01c      	b.n	8011b4a <UART_SetConfig+0x143a>
 8011b10:	f04f 020a 	mov.w	r2, #10
 8011b14:	f04f 0300 	mov.w	r3, #0
 8011b18:	e017      	b.n	8011b4a <UART_SetConfig+0x143a>
 8011b1a:	f04f 0208 	mov.w	r2, #8
 8011b1e:	f04f 0300 	mov.w	r3, #0
 8011b22:	e012      	b.n	8011b4a <UART_SetConfig+0x143a>
 8011b24:	f04f 0206 	mov.w	r2, #6
 8011b28:	f04f 0300 	mov.w	r3, #0
 8011b2c:	e00d      	b.n	8011b4a <UART_SetConfig+0x143a>
 8011b2e:	f04f 0204 	mov.w	r2, #4
 8011b32:	f04f 0300 	mov.w	r3, #0
 8011b36:	e008      	b.n	8011b4a <UART_SetConfig+0x143a>
 8011b38:	f04f 0202 	mov.w	r2, #2
 8011b3c:	f04f 0300 	mov.w	r3, #0
 8011b40:	e003      	b.n	8011b4a <UART_SetConfig+0x143a>
 8011b42:	f04f 0201 	mov.w	r2, #1
 8011b46:	f04f 0300 	mov.w	r3, #0
 8011b4a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8011b4e:	f04f 0100 	mov.w	r1, #0
 8011b52:	f7ee fdd9 	bl	8000708 <__aeabi_uldivmod>
 8011b56:	4602      	mov	r2, r0
 8011b58:	460b      	mov	r3, r1
 8011b5a:	4610      	mov	r0, r2
 8011b5c:	4619      	mov	r1, r3
 8011b5e:	f04f 0200 	mov.w	r2, #0
 8011b62:	f04f 0300 	mov.w	r3, #0
 8011b66:	020b      	lsls	r3, r1, #8
 8011b68:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011b6c:	0202      	lsls	r2, r0, #8
 8011b6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011b70:	6849      	ldr	r1, [r1, #4]
 8011b72:	0849      	lsrs	r1, r1, #1
 8011b74:	4608      	mov	r0, r1
 8011b76:	f04f 0100 	mov.w	r1, #0
 8011b7a:	1814      	adds	r4, r2, r0
 8011b7c:	eb43 0501 	adc.w	r5, r3, r1
 8011b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b82:	685b      	ldr	r3, [r3, #4]
 8011b84:	461a      	mov	r2, r3
 8011b86:	f04f 0300 	mov.w	r3, #0
 8011b8a:	4620      	mov	r0, r4
 8011b8c:	4629      	mov	r1, r5
 8011b8e:	f7ee fdbb 	bl	8000708 <__aeabi_uldivmod>
 8011b92:	4602      	mov	r2, r0
 8011b94:	460b      	mov	r3, r1
 8011b96:	4613      	mov	r3, r2
 8011b98:	657b      	str	r3, [r7, #84]	; 0x54
            break;
 8011b9a:	e003      	b.n	8011ba4 <UART_SetConfig+0x1494>
          default:
            ret = HAL_ERROR;
 8011b9c:	2301      	movs	r3, #1
 8011b9e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 8011ba2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ba6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011baa:	d309      	bcc.n	8011bc0 <UART_SetConfig+0x14b0>
 8011bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011bb2:	d205      	bcs.n	8011bc0 <UART_SetConfig+0x14b0>
        {
          huart->Instance->BRR = usartdiv;
 8011bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011bba:	60da      	str	r2, [r3, #12]
 8011bbc:	f000 bebc 	b.w	8012938 <UART_SetConfig+0x2228>
        }
        else
        {
          ret = HAL_ERROR;
 8011bc0:	2301      	movs	r3, #1
 8011bc2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8011bc6:	f000 beb7 	b.w	8012938 <UART_SetConfig+0x2228>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bcc:	69db      	ldr	r3, [r3, #28]
 8011bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011bd2:	f040 8367 	bne.w	80122a4 <UART_SetConfig+0x1b94>
  {
    switch (clocksource)
 8011bd6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8011bda:	2b20      	cmp	r3, #32
 8011bdc:	dc4a      	bgt.n	8011c74 <UART_SetConfig+0x1564>
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	f2c0 833a 	blt.w	8012258 <UART_SetConfig+0x1b48>
 8011be4:	2b20      	cmp	r3, #32
 8011be6:	f200 8337 	bhi.w	8012258 <UART_SetConfig+0x1b48>
 8011bea:	a201      	add	r2, pc, #4	; (adr r2, 8011bf0 <UART_SetConfig+0x14e0>)
 8011bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bf0:	08011c7d 	.word	0x08011c7d
 8011bf4:	08011d39 	.word	0x08011d39
 8011bf8:	08012259 	.word	0x08012259
 8011bfc:	08012259 	.word	0x08012259
 8011c00:	08011df1 	.word	0x08011df1
 8011c04:	08012259 	.word	0x08012259
 8011c08:	08012259 	.word	0x08012259
 8011c0c:	08012259 	.word	0x08012259
 8011c10:	08011ead 	.word	0x08011ead
 8011c14:	08012259 	.word	0x08012259
 8011c18:	08012259 	.word	0x08012259
 8011c1c:	08012259 	.word	0x08012259
 8011c20:	08012259 	.word	0x08012259
 8011c24:	08012259 	.word	0x08012259
 8011c28:	08012259 	.word	0x08012259
 8011c2c:	08012259 	.word	0x08012259
 8011c30:	08011f69 	.word	0x08011f69
 8011c34:	08012259 	.word	0x08012259
 8011c38:	08012259 	.word	0x08012259
 8011c3c:	08012259 	.word	0x08012259
 8011c40:	08012259 	.word	0x08012259
 8011c44:	08012259 	.word	0x08012259
 8011c48:	08012259 	.word	0x08012259
 8011c4c:	08012259 	.word	0x08012259
 8011c50:	08012259 	.word	0x08012259
 8011c54:	08012259 	.word	0x08012259
 8011c58:	08012259 	.word	0x08012259
 8011c5c:	08012259 	.word	0x08012259
 8011c60:	08012259 	.word	0x08012259
 8011c64:	08012259 	.word	0x08012259
 8011c68:	08012259 	.word	0x08012259
 8011c6c:	08012259 	.word	0x08012259
 8011c70:	080120e5 	.word	0x080120e5
 8011c74:	2b40      	cmp	r3, #64	; 0x40
 8011c76:	f000 8295 	beq.w	80121a4 <UART_SetConfig+0x1a94>
 8011c7a:	e2ed      	b.n	8012258 <UART_SetConfig+0x1b48>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011c7c:	f7fa f80c 	bl	800bc98 <HAL_RCC_GetPCLK1Freq>
 8011c80:	64b8      	str	r0, [r7, #72]	; 0x48
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d046      	beq.n	8011d18 <UART_SetConfig+0x1608>
 8011c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c8e:	2b01      	cmp	r3, #1
 8011c90:	d03e      	beq.n	8011d10 <UART_SetConfig+0x1600>
 8011c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c96:	2b02      	cmp	r3, #2
 8011c98:	d038      	beq.n	8011d0c <UART_SetConfig+0x15fc>
 8011c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c9e:	2b03      	cmp	r3, #3
 8011ca0:	d032      	beq.n	8011d08 <UART_SetConfig+0x15f8>
 8011ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ca6:	2b04      	cmp	r3, #4
 8011ca8:	d02c      	beq.n	8011d04 <UART_SetConfig+0x15f4>
 8011caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cae:	2b05      	cmp	r3, #5
 8011cb0:	d026      	beq.n	8011d00 <UART_SetConfig+0x15f0>
 8011cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cb6:	2b06      	cmp	r3, #6
 8011cb8:	d020      	beq.n	8011cfc <UART_SetConfig+0x15ec>
 8011cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cbe:	2b07      	cmp	r3, #7
 8011cc0:	d01a      	beq.n	8011cf8 <UART_SetConfig+0x15e8>
 8011cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cc6:	2b08      	cmp	r3, #8
 8011cc8:	d014      	beq.n	8011cf4 <UART_SetConfig+0x15e4>
 8011cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cce:	2b09      	cmp	r3, #9
 8011cd0:	d00e      	beq.n	8011cf0 <UART_SetConfig+0x15e0>
 8011cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cd6:	2b0a      	cmp	r3, #10
 8011cd8:	d008      	beq.n	8011cec <UART_SetConfig+0x15dc>
 8011cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cde:	2b0b      	cmp	r3, #11
 8011ce0:	d102      	bne.n	8011ce8 <UART_SetConfig+0x15d8>
 8011ce2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011ce6:	e018      	b.n	8011d1a <UART_SetConfig+0x160a>
 8011ce8:	2301      	movs	r3, #1
 8011cea:	e016      	b.n	8011d1a <UART_SetConfig+0x160a>
 8011cec:	2380      	movs	r3, #128	; 0x80
 8011cee:	e014      	b.n	8011d1a <UART_SetConfig+0x160a>
 8011cf0:	2340      	movs	r3, #64	; 0x40
 8011cf2:	e012      	b.n	8011d1a <UART_SetConfig+0x160a>
 8011cf4:	2320      	movs	r3, #32
 8011cf6:	e010      	b.n	8011d1a <UART_SetConfig+0x160a>
 8011cf8:	2310      	movs	r3, #16
 8011cfa:	e00e      	b.n	8011d1a <UART_SetConfig+0x160a>
 8011cfc:	230c      	movs	r3, #12
 8011cfe:	e00c      	b.n	8011d1a <UART_SetConfig+0x160a>
 8011d00:	230a      	movs	r3, #10
 8011d02:	e00a      	b.n	8011d1a <UART_SetConfig+0x160a>
 8011d04:	2308      	movs	r3, #8
 8011d06:	e008      	b.n	8011d1a <UART_SetConfig+0x160a>
 8011d08:	2306      	movs	r3, #6
 8011d0a:	e006      	b.n	8011d1a <UART_SetConfig+0x160a>
 8011d0c:	2304      	movs	r3, #4
 8011d0e:	e004      	b.n	8011d1a <UART_SetConfig+0x160a>
 8011d10:	2302      	movs	r3, #2
 8011d12:	e002      	b.n	8011d1a <UART_SetConfig+0x160a>
 8011d14:	003d0900 	.word	0x003d0900
 8011d18:	2301      	movs	r3, #1
 8011d1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d20:	005a      	lsls	r2, r3, #1
 8011d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d24:	685b      	ldr	r3, [r3, #4]
 8011d26:	085b      	lsrs	r3, r3, #1
 8011d28:	441a      	add	r2, r3
 8011d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d2c:	685b      	ldr	r3, [r3, #4]
 8011d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d32:	b29b      	uxth	r3, r3
 8011d34:	657b      	str	r3, [r7, #84]	; 0x54
        break;
 8011d36:	e293      	b.n	8012260 <UART_SetConfig+0x1b50>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011d38:	f7f9 ffc4 	bl	800bcc4 <HAL_RCC_GetPCLK2Freq>
 8011d3c:	64b8      	str	r0, [r7, #72]	; 0x48
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d044      	beq.n	8011dd0 <UART_SetConfig+0x16c0>
 8011d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d4a:	2b01      	cmp	r3, #1
 8011d4c:	d03e      	beq.n	8011dcc <UART_SetConfig+0x16bc>
 8011d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d52:	2b02      	cmp	r3, #2
 8011d54:	d038      	beq.n	8011dc8 <UART_SetConfig+0x16b8>
 8011d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d5a:	2b03      	cmp	r3, #3
 8011d5c:	d032      	beq.n	8011dc4 <UART_SetConfig+0x16b4>
 8011d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d62:	2b04      	cmp	r3, #4
 8011d64:	d02c      	beq.n	8011dc0 <UART_SetConfig+0x16b0>
 8011d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d6a:	2b05      	cmp	r3, #5
 8011d6c:	d026      	beq.n	8011dbc <UART_SetConfig+0x16ac>
 8011d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d72:	2b06      	cmp	r3, #6
 8011d74:	d020      	beq.n	8011db8 <UART_SetConfig+0x16a8>
 8011d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d7a:	2b07      	cmp	r3, #7
 8011d7c:	d01a      	beq.n	8011db4 <UART_SetConfig+0x16a4>
 8011d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d82:	2b08      	cmp	r3, #8
 8011d84:	d014      	beq.n	8011db0 <UART_SetConfig+0x16a0>
 8011d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d8a:	2b09      	cmp	r3, #9
 8011d8c:	d00e      	beq.n	8011dac <UART_SetConfig+0x169c>
 8011d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d92:	2b0a      	cmp	r3, #10
 8011d94:	d008      	beq.n	8011da8 <UART_SetConfig+0x1698>
 8011d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d9a:	2b0b      	cmp	r3, #11
 8011d9c:	d102      	bne.n	8011da4 <UART_SetConfig+0x1694>
 8011d9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011da2:	e016      	b.n	8011dd2 <UART_SetConfig+0x16c2>
 8011da4:	2301      	movs	r3, #1
 8011da6:	e014      	b.n	8011dd2 <UART_SetConfig+0x16c2>
 8011da8:	2380      	movs	r3, #128	; 0x80
 8011daa:	e012      	b.n	8011dd2 <UART_SetConfig+0x16c2>
 8011dac:	2340      	movs	r3, #64	; 0x40
 8011dae:	e010      	b.n	8011dd2 <UART_SetConfig+0x16c2>
 8011db0:	2320      	movs	r3, #32
 8011db2:	e00e      	b.n	8011dd2 <UART_SetConfig+0x16c2>
 8011db4:	2310      	movs	r3, #16
 8011db6:	e00c      	b.n	8011dd2 <UART_SetConfig+0x16c2>
 8011db8:	230c      	movs	r3, #12
 8011dba:	e00a      	b.n	8011dd2 <UART_SetConfig+0x16c2>
 8011dbc:	230a      	movs	r3, #10
 8011dbe:	e008      	b.n	8011dd2 <UART_SetConfig+0x16c2>
 8011dc0:	2308      	movs	r3, #8
 8011dc2:	e006      	b.n	8011dd2 <UART_SetConfig+0x16c2>
 8011dc4:	2306      	movs	r3, #6
 8011dc6:	e004      	b.n	8011dd2 <UART_SetConfig+0x16c2>
 8011dc8:	2304      	movs	r3, #4
 8011dca:	e002      	b.n	8011dd2 <UART_SetConfig+0x16c2>
 8011dcc:	2302      	movs	r3, #2
 8011dce:	e000      	b.n	8011dd2 <UART_SetConfig+0x16c2>
 8011dd0:	2301      	movs	r3, #1
 8011dd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8011dd8:	005a      	lsls	r2, r3, #1
 8011dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ddc:	685b      	ldr	r3, [r3, #4]
 8011dde:	085b      	lsrs	r3, r3, #1
 8011de0:	441a      	add	r2, r3
 8011de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011de4:	685b      	ldr	r3, [r3, #4]
 8011de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8011dea:	b29b      	uxth	r3, r3
 8011dec:	657b      	str	r3, [r7, #84]	; 0x54
        break;
 8011dee:	e237      	b.n	8012260 <UART_SetConfig+0x1b50>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011df0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011df4:	4618      	mov	r0, r3
 8011df6:	f7fb f969 	bl	800d0cc <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011dfa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d044      	beq.n	8011e8e <UART_SetConfig+0x177e>
 8011e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e08:	2b01      	cmp	r3, #1
 8011e0a:	d03e      	beq.n	8011e8a <UART_SetConfig+0x177a>
 8011e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e10:	2b02      	cmp	r3, #2
 8011e12:	d038      	beq.n	8011e86 <UART_SetConfig+0x1776>
 8011e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e18:	2b03      	cmp	r3, #3
 8011e1a:	d032      	beq.n	8011e82 <UART_SetConfig+0x1772>
 8011e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e20:	2b04      	cmp	r3, #4
 8011e22:	d02c      	beq.n	8011e7e <UART_SetConfig+0x176e>
 8011e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e28:	2b05      	cmp	r3, #5
 8011e2a:	d026      	beq.n	8011e7a <UART_SetConfig+0x176a>
 8011e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e30:	2b06      	cmp	r3, #6
 8011e32:	d020      	beq.n	8011e76 <UART_SetConfig+0x1766>
 8011e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e38:	2b07      	cmp	r3, #7
 8011e3a:	d01a      	beq.n	8011e72 <UART_SetConfig+0x1762>
 8011e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e40:	2b08      	cmp	r3, #8
 8011e42:	d014      	beq.n	8011e6e <UART_SetConfig+0x175e>
 8011e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e48:	2b09      	cmp	r3, #9
 8011e4a:	d00e      	beq.n	8011e6a <UART_SetConfig+0x175a>
 8011e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e50:	2b0a      	cmp	r3, #10
 8011e52:	d008      	beq.n	8011e66 <UART_SetConfig+0x1756>
 8011e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e58:	2b0b      	cmp	r3, #11
 8011e5a:	d102      	bne.n	8011e62 <UART_SetConfig+0x1752>
 8011e5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011e60:	e016      	b.n	8011e90 <UART_SetConfig+0x1780>
 8011e62:	2301      	movs	r3, #1
 8011e64:	e014      	b.n	8011e90 <UART_SetConfig+0x1780>
 8011e66:	2380      	movs	r3, #128	; 0x80
 8011e68:	e012      	b.n	8011e90 <UART_SetConfig+0x1780>
 8011e6a:	2340      	movs	r3, #64	; 0x40
 8011e6c:	e010      	b.n	8011e90 <UART_SetConfig+0x1780>
 8011e6e:	2320      	movs	r3, #32
 8011e70:	e00e      	b.n	8011e90 <UART_SetConfig+0x1780>
 8011e72:	2310      	movs	r3, #16
 8011e74:	e00c      	b.n	8011e90 <UART_SetConfig+0x1780>
 8011e76:	230c      	movs	r3, #12
 8011e78:	e00a      	b.n	8011e90 <UART_SetConfig+0x1780>
 8011e7a:	230a      	movs	r3, #10
 8011e7c:	e008      	b.n	8011e90 <UART_SetConfig+0x1780>
 8011e7e:	2308      	movs	r3, #8
 8011e80:	e006      	b.n	8011e90 <UART_SetConfig+0x1780>
 8011e82:	2306      	movs	r3, #6
 8011e84:	e004      	b.n	8011e90 <UART_SetConfig+0x1780>
 8011e86:	2304      	movs	r3, #4
 8011e88:	e002      	b.n	8011e90 <UART_SetConfig+0x1780>
 8011e8a:	2302      	movs	r3, #2
 8011e8c:	e000      	b.n	8011e90 <UART_SetConfig+0x1780>
 8011e8e:	2301      	movs	r3, #1
 8011e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8011e94:	005a      	lsls	r2, r3, #1
 8011e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e98:	685b      	ldr	r3, [r3, #4]
 8011e9a:	085b      	lsrs	r3, r3, #1
 8011e9c:	441a      	add	r2, r3
 8011e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ea0:	685b      	ldr	r3, [r3, #4]
 8011ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8011ea6:	b29b      	uxth	r3, r3
 8011ea8:	657b      	str	r3, [r7, #84]	; 0x54
        break;
 8011eaa:	e1d9      	b.n	8012260 <UART_SetConfig+0x1b50>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011eac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	f7fb fa5f 	bl	800d374 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011eb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d044      	beq.n	8011f4a <UART_SetConfig+0x183a>
 8011ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ec4:	2b01      	cmp	r3, #1
 8011ec6:	d03e      	beq.n	8011f46 <UART_SetConfig+0x1836>
 8011ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ecc:	2b02      	cmp	r3, #2
 8011ece:	d038      	beq.n	8011f42 <UART_SetConfig+0x1832>
 8011ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ed4:	2b03      	cmp	r3, #3
 8011ed6:	d032      	beq.n	8011f3e <UART_SetConfig+0x182e>
 8011ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011edc:	2b04      	cmp	r3, #4
 8011ede:	d02c      	beq.n	8011f3a <UART_SetConfig+0x182a>
 8011ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ee4:	2b05      	cmp	r3, #5
 8011ee6:	d026      	beq.n	8011f36 <UART_SetConfig+0x1826>
 8011ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011eec:	2b06      	cmp	r3, #6
 8011eee:	d020      	beq.n	8011f32 <UART_SetConfig+0x1822>
 8011ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ef4:	2b07      	cmp	r3, #7
 8011ef6:	d01a      	beq.n	8011f2e <UART_SetConfig+0x181e>
 8011ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011efc:	2b08      	cmp	r3, #8
 8011efe:	d014      	beq.n	8011f2a <UART_SetConfig+0x181a>
 8011f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f04:	2b09      	cmp	r3, #9
 8011f06:	d00e      	beq.n	8011f26 <UART_SetConfig+0x1816>
 8011f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f0c:	2b0a      	cmp	r3, #10
 8011f0e:	d008      	beq.n	8011f22 <UART_SetConfig+0x1812>
 8011f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f14:	2b0b      	cmp	r3, #11
 8011f16:	d102      	bne.n	8011f1e <UART_SetConfig+0x180e>
 8011f18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011f1c:	e016      	b.n	8011f4c <UART_SetConfig+0x183c>
 8011f1e:	2301      	movs	r3, #1
 8011f20:	e014      	b.n	8011f4c <UART_SetConfig+0x183c>
 8011f22:	2380      	movs	r3, #128	; 0x80
 8011f24:	e012      	b.n	8011f4c <UART_SetConfig+0x183c>
 8011f26:	2340      	movs	r3, #64	; 0x40
 8011f28:	e010      	b.n	8011f4c <UART_SetConfig+0x183c>
 8011f2a:	2320      	movs	r3, #32
 8011f2c:	e00e      	b.n	8011f4c <UART_SetConfig+0x183c>
 8011f2e:	2310      	movs	r3, #16
 8011f30:	e00c      	b.n	8011f4c <UART_SetConfig+0x183c>
 8011f32:	230c      	movs	r3, #12
 8011f34:	e00a      	b.n	8011f4c <UART_SetConfig+0x183c>
 8011f36:	230a      	movs	r3, #10
 8011f38:	e008      	b.n	8011f4c <UART_SetConfig+0x183c>
 8011f3a:	2308      	movs	r3, #8
 8011f3c:	e006      	b.n	8011f4c <UART_SetConfig+0x183c>
 8011f3e:	2306      	movs	r3, #6
 8011f40:	e004      	b.n	8011f4c <UART_SetConfig+0x183c>
 8011f42:	2304      	movs	r3, #4
 8011f44:	e002      	b.n	8011f4c <UART_SetConfig+0x183c>
 8011f46:	2302      	movs	r3, #2
 8011f48:	e000      	b.n	8011f4c <UART_SetConfig+0x183c>
 8011f4a:	2301      	movs	r3, #1
 8011f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011f50:	005a      	lsls	r2, r3, #1
 8011f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f54:	685b      	ldr	r3, [r3, #4]
 8011f56:	085b      	lsrs	r3, r3, #1
 8011f58:	441a      	add	r2, r3
 8011f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f5c:	685b      	ldr	r3, [r3, #4]
 8011f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011f62:	b29b      	uxth	r3, r3
 8011f64:	657b      	str	r3, [r7, #84]	; 0x54
        break;
 8011f66:	e17b      	b.n	8012260 <UART_SetConfig+0x1b50>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011f68:	4b8b      	ldr	r3, [pc, #556]	; (8012198 <UART_SetConfig+0x1a88>)
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	f003 0320 	and.w	r3, r3, #32
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d05e      	beq.n	8012032 <UART_SetConfig+0x1922>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011f74:	4b88      	ldr	r3, [pc, #544]	; (8012198 <UART_SetConfig+0x1a88>)
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	08db      	lsrs	r3, r3, #3
 8011f7a:	f003 0303 	and.w	r3, r3, #3
 8011f7e:	4a87      	ldr	r2, [pc, #540]	; (801219c <UART_SetConfig+0x1a8c>)
 8011f80:	40da      	lsrs	r2, r3
 8011f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d044      	beq.n	8012014 <UART_SetConfig+0x1904>
 8011f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f8e:	2b01      	cmp	r3, #1
 8011f90:	d03e      	beq.n	8012010 <UART_SetConfig+0x1900>
 8011f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f96:	2b02      	cmp	r3, #2
 8011f98:	d038      	beq.n	801200c <UART_SetConfig+0x18fc>
 8011f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f9e:	2b03      	cmp	r3, #3
 8011fa0:	d032      	beq.n	8012008 <UART_SetConfig+0x18f8>
 8011fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fa6:	2b04      	cmp	r3, #4
 8011fa8:	d02c      	beq.n	8012004 <UART_SetConfig+0x18f4>
 8011faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fae:	2b05      	cmp	r3, #5
 8011fb0:	d026      	beq.n	8012000 <UART_SetConfig+0x18f0>
 8011fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fb6:	2b06      	cmp	r3, #6
 8011fb8:	d020      	beq.n	8011ffc <UART_SetConfig+0x18ec>
 8011fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fbe:	2b07      	cmp	r3, #7
 8011fc0:	d01a      	beq.n	8011ff8 <UART_SetConfig+0x18e8>
 8011fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fc6:	2b08      	cmp	r3, #8
 8011fc8:	d014      	beq.n	8011ff4 <UART_SetConfig+0x18e4>
 8011fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fce:	2b09      	cmp	r3, #9
 8011fd0:	d00e      	beq.n	8011ff0 <UART_SetConfig+0x18e0>
 8011fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fd6:	2b0a      	cmp	r3, #10
 8011fd8:	d008      	beq.n	8011fec <UART_SetConfig+0x18dc>
 8011fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fde:	2b0b      	cmp	r3, #11
 8011fe0:	d102      	bne.n	8011fe8 <UART_SetConfig+0x18d8>
 8011fe2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011fe6:	e016      	b.n	8012016 <UART_SetConfig+0x1906>
 8011fe8:	2301      	movs	r3, #1
 8011fea:	e014      	b.n	8012016 <UART_SetConfig+0x1906>
 8011fec:	2380      	movs	r3, #128	; 0x80
 8011fee:	e012      	b.n	8012016 <UART_SetConfig+0x1906>
 8011ff0:	2340      	movs	r3, #64	; 0x40
 8011ff2:	e010      	b.n	8012016 <UART_SetConfig+0x1906>
 8011ff4:	2320      	movs	r3, #32
 8011ff6:	e00e      	b.n	8012016 <UART_SetConfig+0x1906>
 8011ff8:	2310      	movs	r3, #16
 8011ffa:	e00c      	b.n	8012016 <UART_SetConfig+0x1906>
 8011ffc:	230c      	movs	r3, #12
 8011ffe:	e00a      	b.n	8012016 <UART_SetConfig+0x1906>
 8012000:	230a      	movs	r3, #10
 8012002:	e008      	b.n	8012016 <UART_SetConfig+0x1906>
 8012004:	2308      	movs	r3, #8
 8012006:	e006      	b.n	8012016 <UART_SetConfig+0x1906>
 8012008:	2306      	movs	r3, #6
 801200a:	e004      	b.n	8012016 <UART_SetConfig+0x1906>
 801200c:	2304      	movs	r3, #4
 801200e:	e002      	b.n	8012016 <UART_SetConfig+0x1906>
 8012010:	2302      	movs	r3, #2
 8012012:	e000      	b.n	8012016 <UART_SetConfig+0x1906>
 8012014:	2301      	movs	r3, #1
 8012016:	fbb2 f3f3 	udiv	r3, r2, r3
 801201a:	005a      	lsls	r2, r3, #1
 801201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801201e:	685b      	ldr	r3, [r3, #4]
 8012020:	085b      	lsrs	r3, r3, #1
 8012022:	441a      	add	r2, r3
 8012024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012026:	685b      	ldr	r3, [r3, #4]
 8012028:	fbb2 f3f3 	udiv	r3, r2, r3
 801202c:	b29b      	uxth	r3, r3
 801202e:	657b      	str	r3, [r7, #84]	; 0x54
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8012030:	e116      	b.n	8012260 <UART_SetConfig+0x1b50>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012036:	2b00      	cmp	r3, #0
 8012038:	d044      	beq.n	80120c4 <UART_SetConfig+0x19b4>
 801203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801203e:	2b01      	cmp	r3, #1
 8012040:	d03e      	beq.n	80120c0 <UART_SetConfig+0x19b0>
 8012042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012046:	2b02      	cmp	r3, #2
 8012048:	d038      	beq.n	80120bc <UART_SetConfig+0x19ac>
 801204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801204e:	2b03      	cmp	r3, #3
 8012050:	d032      	beq.n	80120b8 <UART_SetConfig+0x19a8>
 8012052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012056:	2b04      	cmp	r3, #4
 8012058:	d02c      	beq.n	80120b4 <UART_SetConfig+0x19a4>
 801205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801205e:	2b05      	cmp	r3, #5
 8012060:	d026      	beq.n	80120b0 <UART_SetConfig+0x19a0>
 8012062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012066:	2b06      	cmp	r3, #6
 8012068:	d020      	beq.n	80120ac <UART_SetConfig+0x199c>
 801206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801206e:	2b07      	cmp	r3, #7
 8012070:	d01a      	beq.n	80120a8 <UART_SetConfig+0x1998>
 8012072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012076:	2b08      	cmp	r3, #8
 8012078:	d014      	beq.n	80120a4 <UART_SetConfig+0x1994>
 801207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801207e:	2b09      	cmp	r3, #9
 8012080:	d00e      	beq.n	80120a0 <UART_SetConfig+0x1990>
 8012082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012086:	2b0a      	cmp	r3, #10
 8012088:	d008      	beq.n	801209c <UART_SetConfig+0x198c>
 801208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801208e:	2b0b      	cmp	r3, #11
 8012090:	d102      	bne.n	8012098 <UART_SetConfig+0x1988>
 8012092:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012096:	e016      	b.n	80120c6 <UART_SetConfig+0x19b6>
 8012098:	2301      	movs	r3, #1
 801209a:	e014      	b.n	80120c6 <UART_SetConfig+0x19b6>
 801209c:	2380      	movs	r3, #128	; 0x80
 801209e:	e012      	b.n	80120c6 <UART_SetConfig+0x19b6>
 80120a0:	2340      	movs	r3, #64	; 0x40
 80120a2:	e010      	b.n	80120c6 <UART_SetConfig+0x19b6>
 80120a4:	2320      	movs	r3, #32
 80120a6:	e00e      	b.n	80120c6 <UART_SetConfig+0x19b6>
 80120a8:	2310      	movs	r3, #16
 80120aa:	e00c      	b.n	80120c6 <UART_SetConfig+0x19b6>
 80120ac:	230c      	movs	r3, #12
 80120ae:	e00a      	b.n	80120c6 <UART_SetConfig+0x19b6>
 80120b0:	230a      	movs	r3, #10
 80120b2:	e008      	b.n	80120c6 <UART_SetConfig+0x19b6>
 80120b4:	2308      	movs	r3, #8
 80120b6:	e006      	b.n	80120c6 <UART_SetConfig+0x19b6>
 80120b8:	2306      	movs	r3, #6
 80120ba:	e004      	b.n	80120c6 <UART_SetConfig+0x19b6>
 80120bc:	2304      	movs	r3, #4
 80120be:	e002      	b.n	80120c6 <UART_SetConfig+0x19b6>
 80120c0:	2302      	movs	r3, #2
 80120c2:	e000      	b.n	80120c6 <UART_SetConfig+0x19b6>
 80120c4:	2301      	movs	r3, #1
 80120c6:	4a35      	ldr	r2, [pc, #212]	; (801219c <UART_SetConfig+0x1a8c>)
 80120c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80120cc:	005a      	lsls	r2, r3, #1
 80120ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120d0:	685b      	ldr	r3, [r3, #4]
 80120d2:	085b      	lsrs	r3, r3, #1
 80120d4:	441a      	add	r2, r3
 80120d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120d8:	685b      	ldr	r3, [r3, #4]
 80120da:	fbb2 f3f3 	udiv	r3, r2, r3
 80120de:	b29b      	uxth	r3, r3
 80120e0:	657b      	str	r3, [r7, #84]	; 0x54
        break;
 80120e2:	e0bd      	b.n	8012260 <UART_SetConfig+0x1b50>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80120e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d044      	beq.n	8012176 <UART_SetConfig+0x1a66>
 80120ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120f0:	2b01      	cmp	r3, #1
 80120f2:	d03e      	beq.n	8012172 <UART_SetConfig+0x1a62>
 80120f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120f8:	2b02      	cmp	r3, #2
 80120fa:	d038      	beq.n	801216e <UART_SetConfig+0x1a5e>
 80120fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012100:	2b03      	cmp	r3, #3
 8012102:	d032      	beq.n	801216a <UART_SetConfig+0x1a5a>
 8012104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012108:	2b04      	cmp	r3, #4
 801210a:	d02c      	beq.n	8012166 <UART_SetConfig+0x1a56>
 801210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012110:	2b05      	cmp	r3, #5
 8012112:	d026      	beq.n	8012162 <UART_SetConfig+0x1a52>
 8012114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012118:	2b06      	cmp	r3, #6
 801211a:	d020      	beq.n	801215e <UART_SetConfig+0x1a4e>
 801211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012120:	2b07      	cmp	r3, #7
 8012122:	d01a      	beq.n	801215a <UART_SetConfig+0x1a4a>
 8012124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012128:	2b08      	cmp	r3, #8
 801212a:	d014      	beq.n	8012156 <UART_SetConfig+0x1a46>
 801212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012130:	2b09      	cmp	r3, #9
 8012132:	d00e      	beq.n	8012152 <UART_SetConfig+0x1a42>
 8012134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012138:	2b0a      	cmp	r3, #10
 801213a:	d008      	beq.n	801214e <UART_SetConfig+0x1a3e>
 801213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012140:	2b0b      	cmp	r3, #11
 8012142:	d102      	bne.n	801214a <UART_SetConfig+0x1a3a>
 8012144:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012148:	e016      	b.n	8012178 <UART_SetConfig+0x1a68>
 801214a:	2301      	movs	r3, #1
 801214c:	e014      	b.n	8012178 <UART_SetConfig+0x1a68>
 801214e:	2380      	movs	r3, #128	; 0x80
 8012150:	e012      	b.n	8012178 <UART_SetConfig+0x1a68>
 8012152:	2340      	movs	r3, #64	; 0x40
 8012154:	e010      	b.n	8012178 <UART_SetConfig+0x1a68>
 8012156:	2320      	movs	r3, #32
 8012158:	e00e      	b.n	8012178 <UART_SetConfig+0x1a68>
 801215a:	2310      	movs	r3, #16
 801215c:	e00c      	b.n	8012178 <UART_SetConfig+0x1a68>
 801215e:	230c      	movs	r3, #12
 8012160:	e00a      	b.n	8012178 <UART_SetConfig+0x1a68>
 8012162:	230a      	movs	r3, #10
 8012164:	e008      	b.n	8012178 <UART_SetConfig+0x1a68>
 8012166:	2308      	movs	r3, #8
 8012168:	e006      	b.n	8012178 <UART_SetConfig+0x1a68>
 801216a:	2306      	movs	r3, #6
 801216c:	e004      	b.n	8012178 <UART_SetConfig+0x1a68>
 801216e:	2304      	movs	r3, #4
 8012170:	e002      	b.n	8012178 <UART_SetConfig+0x1a68>
 8012172:	2302      	movs	r3, #2
 8012174:	e000      	b.n	8012178 <UART_SetConfig+0x1a68>
 8012176:	2301      	movs	r3, #1
 8012178:	4a09      	ldr	r2, [pc, #36]	; (80121a0 <UART_SetConfig+0x1a90>)
 801217a:	fbb2 f3f3 	udiv	r3, r2, r3
 801217e:	005a      	lsls	r2, r3, #1
 8012180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012182:	685b      	ldr	r3, [r3, #4]
 8012184:	085b      	lsrs	r3, r3, #1
 8012186:	441a      	add	r2, r3
 8012188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801218a:	685b      	ldr	r3, [r3, #4]
 801218c:	fbb2 f3f3 	udiv	r3, r2, r3
 8012190:	b29b      	uxth	r3, r3
 8012192:	657b      	str	r3, [r7, #84]	; 0x54
        break;
 8012194:	e064      	b.n	8012260 <UART_SetConfig+0x1b50>
 8012196:	bf00      	nop
 8012198:	58024400 	.word	0x58024400
 801219c:	03d09000 	.word	0x03d09000
 80121a0:	003d0900 	.word	0x003d0900
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80121a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d044      	beq.n	8012236 <UART_SetConfig+0x1b26>
 80121ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121b0:	2b01      	cmp	r3, #1
 80121b2:	d03e      	beq.n	8012232 <UART_SetConfig+0x1b22>
 80121b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121b8:	2b02      	cmp	r3, #2
 80121ba:	d038      	beq.n	801222e <UART_SetConfig+0x1b1e>
 80121bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121c0:	2b03      	cmp	r3, #3
 80121c2:	d032      	beq.n	801222a <UART_SetConfig+0x1b1a>
 80121c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121c8:	2b04      	cmp	r3, #4
 80121ca:	d02c      	beq.n	8012226 <UART_SetConfig+0x1b16>
 80121cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121d0:	2b05      	cmp	r3, #5
 80121d2:	d026      	beq.n	8012222 <UART_SetConfig+0x1b12>
 80121d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121d8:	2b06      	cmp	r3, #6
 80121da:	d020      	beq.n	801221e <UART_SetConfig+0x1b0e>
 80121dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121e0:	2b07      	cmp	r3, #7
 80121e2:	d01a      	beq.n	801221a <UART_SetConfig+0x1b0a>
 80121e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121e8:	2b08      	cmp	r3, #8
 80121ea:	d014      	beq.n	8012216 <UART_SetConfig+0x1b06>
 80121ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121f0:	2b09      	cmp	r3, #9
 80121f2:	d00e      	beq.n	8012212 <UART_SetConfig+0x1b02>
 80121f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121f8:	2b0a      	cmp	r3, #10
 80121fa:	d008      	beq.n	801220e <UART_SetConfig+0x1afe>
 80121fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012200:	2b0b      	cmp	r3, #11
 8012202:	d102      	bne.n	801220a <UART_SetConfig+0x1afa>
 8012204:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012208:	e016      	b.n	8012238 <UART_SetConfig+0x1b28>
 801220a:	2301      	movs	r3, #1
 801220c:	e014      	b.n	8012238 <UART_SetConfig+0x1b28>
 801220e:	2380      	movs	r3, #128	; 0x80
 8012210:	e012      	b.n	8012238 <UART_SetConfig+0x1b28>
 8012212:	2340      	movs	r3, #64	; 0x40
 8012214:	e010      	b.n	8012238 <UART_SetConfig+0x1b28>
 8012216:	2320      	movs	r3, #32
 8012218:	e00e      	b.n	8012238 <UART_SetConfig+0x1b28>
 801221a:	2310      	movs	r3, #16
 801221c:	e00c      	b.n	8012238 <UART_SetConfig+0x1b28>
 801221e:	230c      	movs	r3, #12
 8012220:	e00a      	b.n	8012238 <UART_SetConfig+0x1b28>
 8012222:	230a      	movs	r3, #10
 8012224:	e008      	b.n	8012238 <UART_SetConfig+0x1b28>
 8012226:	2308      	movs	r3, #8
 8012228:	e006      	b.n	8012238 <UART_SetConfig+0x1b28>
 801222a:	2306      	movs	r3, #6
 801222c:	e004      	b.n	8012238 <UART_SetConfig+0x1b28>
 801222e:	2304      	movs	r3, #4
 8012230:	e002      	b.n	8012238 <UART_SetConfig+0x1b28>
 8012232:	2302      	movs	r3, #2
 8012234:	e000      	b.n	8012238 <UART_SetConfig+0x1b28>
 8012236:	2301      	movs	r3, #1
 8012238:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801223c:	fbb2 f3f3 	udiv	r3, r2, r3
 8012240:	005a      	lsls	r2, r3, #1
 8012242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012244:	685b      	ldr	r3, [r3, #4]
 8012246:	085b      	lsrs	r3, r3, #1
 8012248:	441a      	add	r2, r3
 801224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801224c:	685b      	ldr	r3, [r3, #4]
 801224e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012252:	b29b      	uxth	r3, r3
 8012254:	657b      	str	r3, [r7, #84]	; 0x54
        break;
 8012256:	e003      	b.n	8012260 <UART_SetConfig+0x1b50>
      default:
        ret = HAL_ERROR;
 8012258:	2301      	movs	r3, #1
 801225a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        break;
 801225e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012262:	2b0f      	cmp	r3, #15
 8012264:	d91a      	bls.n	801229c <UART_SetConfig+0x1b8c>
 8012266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801226c:	d216      	bcs.n	801229c <UART_SetConfig+0x1b8c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801226e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012270:	b29b      	uxth	r3, r3
 8012272:	f023 030f 	bic.w	r3, r3, #15
 8012276:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801227a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801227c:	085b      	lsrs	r3, r3, #1
 801227e:	b29b      	uxth	r3, r3
 8012280:	f003 0307 	and.w	r3, r3, #7
 8012284:	b29a      	uxth	r2, r3
 8012286:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801228a:	4313      	orrs	r3, r2
 801228c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      huart->Instance->BRR = brrtemp;
 8012290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8012298:	60da      	str	r2, [r3, #12]
 801229a:	e34d      	b.n	8012938 <UART_SetConfig+0x2228>
    }
    else
    {
      ret = HAL_ERROR;
 801229c:	2301      	movs	r3, #1
 801229e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 80122a2:	e349      	b.n	8012938 <UART_SetConfig+0x2228>
    }
  }
  else
  {
    switch (clocksource)
 80122a4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80122a8:	2b20      	cmp	r3, #32
 80122aa:	dc4b      	bgt.n	8012344 <UART_SetConfig+0x1c34>
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	f2c0 8330 	blt.w	8012912 <UART_SetConfig+0x2202>
 80122b2:	2b20      	cmp	r3, #32
 80122b4:	f200 832d 	bhi.w	8012912 <UART_SetConfig+0x2202>
 80122b8:	a201      	add	r2, pc, #4	; (adr r2, 80122c0 <UART_SetConfig+0x1bb0>)
 80122ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122be:	bf00      	nop
 80122c0:	0801234d 	.word	0x0801234d
 80122c4:	08012403 	.word	0x08012403
 80122c8:	08012913 	.word	0x08012913
 80122cc:	08012913 	.word	0x08012913
 80122d0:	080124b9 	.word	0x080124b9
 80122d4:	08012913 	.word	0x08012913
 80122d8:	08012913 	.word	0x08012913
 80122dc:	08012913 	.word	0x08012913
 80122e0:	08012573 	.word	0x08012573
 80122e4:	08012913 	.word	0x08012913
 80122e8:	08012913 	.word	0x08012913
 80122ec:	08012913 	.word	0x08012913
 80122f0:	08012913 	.word	0x08012913
 80122f4:	08012913 	.word	0x08012913
 80122f8:	08012913 	.word	0x08012913
 80122fc:	08012913 	.word	0x08012913
 8012300:	0801262d 	.word	0x0801262d
 8012304:	08012913 	.word	0x08012913
 8012308:	08012913 	.word	0x08012913
 801230c:	08012913 	.word	0x08012913
 8012310:	08012913 	.word	0x08012913
 8012314:	08012913 	.word	0x08012913
 8012318:	08012913 	.word	0x08012913
 801231c:	08012913 	.word	0x08012913
 8012320:	08012913 	.word	0x08012913
 8012324:	08012913 	.word	0x08012913
 8012328:	08012913 	.word	0x08012913
 801232c:	08012913 	.word	0x08012913
 8012330:	08012913 	.word	0x08012913
 8012334:	08012913 	.word	0x08012913
 8012338:	08012913 	.word	0x08012913
 801233c:	08012913 	.word	0x08012913
 8012340:	080127a5 	.word	0x080127a5
 8012344:	2b40      	cmp	r3, #64	; 0x40
 8012346:	f000 828b 	beq.w	8012860 <UART_SetConfig+0x2150>
 801234a:	e2e2      	b.n	8012912 <UART_SetConfig+0x2202>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801234c:	f7f9 fca4 	bl	800bc98 <HAL_RCC_GetPCLK1Freq>
 8012350:	64b8      	str	r0, [r7, #72]	; 0x48
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012356:	2b00      	cmp	r3, #0
 8012358:	d044      	beq.n	80123e4 <UART_SetConfig+0x1cd4>
 801235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801235e:	2b01      	cmp	r3, #1
 8012360:	d03e      	beq.n	80123e0 <UART_SetConfig+0x1cd0>
 8012362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012366:	2b02      	cmp	r3, #2
 8012368:	d038      	beq.n	80123dc <UART_SetConfig+0x1ccc>
 801236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801236e:	2b03      	cmp	r3, #3
 8012370:	d032      	beq.n	80123d8 <UART_SetConfig+0x1cc8>
 8012372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012376:	2b04      	cmp	r3, #4
 8012378:	d02c      	beq.n	80123d4 <UART_SetConfig+0x1cc4>
 801237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801237e:	2b05      	cmp	r3, #5
 8012380:	d026      	beq.n	80123d0 <UART_SetConfig+0x1cc0>
 8012382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012386:	2b06      	cmp	r3, #6
 8012388:	d020      	beq.n	80123cc <UART_SetConfig+0x1cbc>
 801238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801238e:	2b07      	cmp	r3, #7
 8012390:	d01a      	beq.n	80123c8 <UART_SetConfig+0x1cb8>
 8012392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012396:	2b08      	cmp	r3, #8
 8012398:	d014      	beq.n	80123c4 <UART_SetConfig+0x1cb4>
 801239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801239e:	2b09      	cmp	r3, #9
 80123a0:	d00e      	beq.n	80123c0 <UART_SetConfig+0x1cb0>
 80123a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123a6:	2b0a      	cmp	r3, #10
 80123a8:	d008      	beq.n	80123bc <UART_SetConfig+0x1cac>
 80123aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123ae:	2b0b      	cmp	r3, #11
 80123b0:	d102      	bne.n	80123b8 <UART_SetConfig+0x1ca8>
 80123b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80123b6:	e016      	b.n	80123e6 <UART_SetConfig+0x1cd6>
 80123b8:	2301      	movs	r3, #1
 80123ba:	e014      	b.n	80123e6 <UART_SetConfig+0x1cd6>
 80123bc:	2380      	movs	r3, #128	; 0x80
 80123be:	e012      	b.n	80123e6 <UART_SetConfig+0x1cd6>
 80123c0:	2340      	movs	r3, #64	; 0x40
 80123c2:	e010      	b.n	80123e6 <UART_SetConfig+0x1cd6>
 80123c4:	2320      	movs	r3, #32
 80123c6:	e00e      	b.n	80123e6 <UART_SetConfig+0x1cd6>
 80123c8:	2310      	movs	r3, #16
 80123ca:	e00c      	b.n	80123e6 <UART_SetConfig+0x1cd6>
 80123cc:	230c      	movs	r3, #12
 80123ce:	e00a      	b.n	80123e6 <UART_SetConfig+0x1cd6>
 80123d0:	230a      	movs	r3, #10
 80123d2:	e008      	b.n	80123e6 <UART_SetConfig+0x1cd6>
 80123d4:	2308      	movs	r3, #8
 80123d6:	e006      	b.n	80123e6 <UART_SetConfig+0x1cd6>
 80123d8:	2306      	movs	r3, #6
 80123da:	e004      	b.n	80123e6 <UART_SetConfig+0x1cd6>
 80123dc:	2304      	movs	r3, #4
 80123de:	e002      	b.n	80123e6 <UART_SetConfig+0x1cd6>
 80123e0:	2302      	movs	r3, #2
 80123e2:	e000      	b.n	80123e6 <UART_SetConfig+0x1cd6>
 80123e4:	2301      	movs	r3, #1
 80123e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80123e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80123ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ee:	685b      	ldr	r3, [r3, #4]
 80123f0:	085b      	lsrs	r3, r3, #1
 80123f2:	441a      	add	r2, r3
 80123f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f6:	685b      	ldr	r3, [r3, #4]
 80123f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80123fc:	b29b      	uxth	r3, r3
 80123fe:	657b      	str	r3, [r7, #84]	; 0x54
        break;
 8012400:	e28b      	b.n	801291a <UART_SetConfig+0x220a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012402:	f7f9 fc5f 	bl	800bcc4 <HAL_RCC_GetPCLK2Freq>
 8012406:	64b8      	str	r0, [r7, #72]	; 0x48
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801240c:	2b00      	cmp	r3, #0
 801240e:	d044      	beq.n	801249a <UART_SetConfig+0x1d8a>
 8012410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012414:	2b01      	cmp	r3, #1
 8012416:	d03e      	beq.n	8012496 <UART_SetConfig+0x1d86>
 8012418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801241c:	2b02      	cmp	r3, #2
 801241e:	d038      	beq.n	8012492 <UART_SetConfig+0x1d82>
 8012420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012424:	2b03      	cmp	r3, #3
 8012426:	d032      	beq.n	801248e <UART_SetConfig+0x1d7e>
 8012428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801242c:	2b04      	cmp	r3, #4
 801242e:	d02c      	beq.n	801248a <UART_SetConfig+0x1d7a>
 8012430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012434:	2b05      	cmp	r3, #5
 8012436:	d026      	beq.n	8012486 <UART_SetConfig+0x1d76>
 8012438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801243c:	2b06      	cmp	r3, #6
 801243e:	d020      	beq.n	8012482 <UART_SetConfig+0x1d72>
 8012440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012444:	2b07      	cmp	r3, #7
 8012446:	d01a      	beq.n	801247e <UART_SetConfig+0x1d6e>
 8012448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801244c:	2b08      	cmp	r3, #8
 801244e:	d014      	beq.n	801247a <UART_SetConfig+0x1d6a>
 8012450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012454:	2b09      	cmp	r3, #9
 8012456:	d00e      	beq.n	8012476 <UART_SetConfig+0x1d66>
 8012458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801245c:	2b0a      	cmp	r3, #10
 801245e:	d008      	beq.n	8012472 <UART_SetConfig+0x1d62>
 8012460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012464:	2b0b      	cmp	r3, #11
 8012466:	d102      	bne.n	801246e <UART_SetConfig+0x1d5e>
 8012468:	f44f 7380 	mov.w	r3, #256	; 0x100
 801246c:	e016      	b.n	801249c <UART_SetConfig+0x1d8c>
 801246e:	2301      	movs	r3, #1
 8012470:	e014      	b.n	801249c <UART_SetConfig+0x1d8c>
 8012472:	2380      	movs	r3, #128	; 0x80
 8012474:	e012      	b.n	801249c <UART_SetConfig+0x1d8c>
 8012476:	2340      	movs	r3, #64	; 0x40
 8012478:	e010      	b.n	801249c <UART_SetConfig+0x1d8c>
 801247a:	2320      	movs	r3, #32
 801247c:	e00e      	b.n	801249c <UART_SetConfig+0x1d8c>
 801247e:	2310      	movs	r3, #16
 8012480:	e00c      	b.n	801249c <UART_SetConfig+0x1d8c>
 8012482:	230c      	movs	r3, #12
 8012484:	e00a      	b.n	801249c <UART_SetConfig+0x1d8c>
 8012486:	230a      	movs	r3, #10
 8012488:	e008      	b.n	801249c <UART_SetConfig+0x1d8c>
 801248a:	2308      	movs	r3, #8
 801248c:	e006      	b.n	801249c <UART_SetConfig+0x1d8c>
 801248e:	2306      	movs	r3, #6
 8012490:	e004      	b.n	801249c <UART_SetConfig+0x1d8c>
 8012492:	2304      	movs	r3, #4
 8012494:	e002      	b.n	801249c <UART_SetConfig+0x1d8c>
 8012496:	2302      	movs	r3, #2
 8012498:	e000      	b.n	801249c <UART_SetConfig+0x1d8c>
 801249a:	2301      	movs	r3, #1
 801249c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801249e:	fbb2 f2f3 	udiv	r2, r2, r3
 80124a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124a4:	685b      	ldr	r3, [r3, #4]
 80124a6:	085b      	lsrs	r3, r3, #1
 80124a8:	441a      	add	r2, r3
 80124aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ac:	685b      	ldr	r3, [r3, #4]
 80124ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80124b2:	b29b      	uxth	r3, r3
 80124b4:	657b      	str	r3, [r7, #84]	; 0x54
        break;
 80124b6:	e230      	b.n	801291a <UART_SetConfig+0x220a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80124b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80124bc:	4618      	mov	r0, r3
 80124be:	f7fa fe05 	bl	800d0cc <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80124c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80124c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d044      	beq.n	8012556 <UART_SetConfig+0x1e46>
 80124cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124d0:	2b01      	cmp	r3, #1
 80124d2:	d03e      	beq.n	8012552 <UART_SetConfig+0x1e42>
 80124d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124d8:	2b02      	cmp	r3, #2
 80124da:	d038      	beq.n	801254e <UART_SetConfig+0x1e3e>
 80124dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124e0:	2b03      	cmp	r3, #3
 80124e2:	d032      	beq.n	801254a <UART_SetConfig+0x1e3a>
 80124e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124e8:	2b04      	cmp	r3, #4
 80124ea:	d02c      	beq.n	8012546 <UART_SetConfig+0x1e36>
 80124ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124f0:	2b05      	cmp	r3, #5
 80124f2:	d026      	beq.n	8012542 <UART_SetConfig+0x1e32>
 80124f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124f8:	2b06      	cmp	r3, #6
 80124fa:	d020      	beq.n	801253e <UART_SetConfig+0x1e2e>
 80124fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012500:	2b07      	cmp	r3, #7
 8012502:	d01a      	beq.n	801253a <UART_SetConfig+0x1e2a>
 8012504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012508:	2b08      	cmp	r3, #8
 801250a:	d014      	beq.n	8012536 <UART_SetConfig+0x1e26>
 801250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012510:	2b09      	cmp	r3, #9
 8012512:	d00e      	beq.n	8012532 <UART_SetConfig+0x1e22>
 8012514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012518:	2b0a      	cmp	r3, #10
 801251a:	d008      	beq.n	801252e <UART_SetConfig+0x1e1e>
 801251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012520:	2b0b      	cmp	r3, #11
 8012522:	d102      	bne.n	801252a <UART_SetConfig+0x1e1a>
 8012524:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012528:	e016      	b.n	8012558 <UART_SetConfig+0x1e48>
 801252a:	2301      	movs	r3, #1
 801252c:	e014      	b.n	8012558 <UART_SetConfig+0x1e48>
 801252e:	2380      	movs	r3, #128	; 0x80
 8012530:	e012      	b.n	8012558 <UART_SetConfig+0x1e48>
 8012532:	2340      	movs	r3, #64	; 0x40
 8012534:	e010      	b.n	8012558 <UART_SetConfig+0x1e48>
 8012536:	2320      	movs	r3, #32
 8012538:	e00e      	b.n	8012558 <UART_SetConfig+0x1e48>
 801253a:	2310      	movs	r3, #16
 801253c:	e00c      	b.n	8012558 <UART_SetConfig+0x1e48>
 801253e:	230c      	movs	r3, #12
 8012540:	e00a      	b.n	8012558 <UART_SetConfig+0x1e48>
 8012542:	230a      	movs	r3, #10
 8012544:	e008      	b.n	8012558 <UART_SetConfig+0x1e48>
 8012546:	2308      	movs	r3, #8
 8012548:	e006      	b.n	8012558 <UART_SetConfig+0x1e48>
 801254a:	2306      	movs	r3, #6
 801254c:	e004      	b.n	8012558 <UART_SetConfig+0x1e48>
 801254e:	2304      	movs	r3, #4
 8012550:	e002      	b.n	8012558 <UART_SetConfig+0x1e48>
 8012552:	2302      	movs	r3, #2
 8012554:	e000      	b.n	8012558 <UART_SetConfig+0x1e48>
 8012556:	2301      	movs	r3, #1
 8012558:	fbb2 f2f3 	udiv	r2, r2, r3
 801255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801255e:	685b      	ldr	r3, [r3, #4]
 8012560:	085b      	lsrs	r3, r3, #1
 8012562:	441a      	add	r2, r3
 8012564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012566:	685b      	ldr	r3, [r3, #4]
 8012568:	fbb2 f3f3 	udiv	r3, r2, r3
 801256c:	b29b      	uxth	r3, r3
 801256e:	657b      	str	r3, [r7, #84]	; 0x54
        break;
 8012570:	e1d3      	b.n	801291a <UART_SetConfig+0x220a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012572:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012576:	4618      	mov	r0, r3
 8012578:	f7fa fefc 	bl	800d374 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801257c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012582:	2b00      	cmp	r3, #0
 8012584:	d044      	beq.n	8012610 <UART_SetConfig+0x1f00>
 8012586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801258a:	2b01      	cmp	r3, #1
 801258c:	d03e      	beq.n	801260c <UART_SetConfig+0x1efc>
 801258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012592:	2b02      	cmp	r3, #2
 8012594:	d038      	beq.n	8012608 <UART_SetConfig+0x1ef8>
 8012596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801259a:	2b03      	cmp	r3, #3
 801259c:	d032      	beq.n	8012604 <UART_SetConfig+0x1ef4>
 801259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125a2:	2b04      	cmp	r3, #4
 80125a4:	d02c      	beq.n	8012600 <UART_SetConfig+0x1ef0>
 80125a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125aa:	2b05      	cmp	r3, #5
 80125ac:	d026      	beq.n	80125fc <UART_SetConfig+0x1eec>
 80125ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125b2:	2b06      	cmp	r3, #6
 80125b4:	d020      	beq.n	80125f8 <UART_SetConfig+0x1ee8>
 80125b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125ba:	2b07      	cmp	r3, #7
 80125bc:	d01a      	beq.n	80125f4 <UART_SetConfig+0x1ee4>
 80125be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125c2:	2b08      	cmp	r3, #8
 80125c4:	d014      	beq.n	80125f0 <UART_SetConfig+0x1ee0>
 80125c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125ca:	2b09      	cmp	r3, #9
 80125cc:	d00e      	beq.n	80125ec <UART_SetConfig+0x1edc>
 80125ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125d2:	2b0a      	cmp	r3, #10
 80125d4:	d008      	beq.n	80125e8 <UART_SetConfig+0x1ed8>
 80125d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125da:	2b0b      	cmp	r3, #11
 80125dc:	d102      	bne.n	80125e4 <UART_SetConfig+0x1ed4>
 80125de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80125e2:	e016      	b.n	8012612 <UART_SetConfig+0x1f02>
 80125e4:	2301      	movs	r3, #1
 80125e6:	e014      	b.n	8012612 <UART_SetConfig+0x1f02>
 80125e8:	2380      	movs	r3, #128	; 0x80
 80125ea:	e012      	b.n	8012612 <UART_SetConfig+0x1f02>
 80125ec:	2340      	movs	r3, #64	; 0x40
 80125ee:	e010      	b.n	8012612 <UART_SetConfig+0x1f02>
 80125f0:	2320      	movs	r3, #32
 80125f2:	e00e      	b.n	8012612 <UART_SetConfig+0x1f02>
 80125f4:	2310      	movs	r3, #16
 80125f6:	e00c      	b.n	8012612 <UART_SetConfig+0x1f02>
 80125f8:	230c      	movs	r3, #12
 80125fa:	e00a      	b.n	8012612 <UART_SetConfig+0x1f02>
 80125fc:	230a      	movs	r3, #10
 80125fe:	e008      	b.n	8012612 <UART_SetConfig+0x1f02>
 8012600:	2308      	movs	r3, #8
 8012602:	e006      	b.n	8012612 <UART_SetConfig+0x1f02>
 8012604:	2306      	movs	r3, #6
 8012606:	e004      	b.n	8012612 <UART_SetConfig+0x1f02>
 8012608:	2304      	movs	r3, #4
 801260a:	e002      	b.n	8012612 <UART_SetConfig+0x1f02>
 801260c:	2302      	movs	r3, #2
 801260e:	e000      	b.n	8012612 <UART_SetConfig+0x1f02>
 8012610:	2301      	movs	r3, #1
 8012612:	fbb2 f2f3 	udiv	r2, r2, r3
 8012616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012618:	685b      	ldr	r3, [r3, #4]
 801261a:	085b      	lsrs	r3, r3, #1
 801261c:	441a      	add	r2, r3
 801261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012620:	685b      	ldr	r3, [r3, #4]
 8012622:	fbb2 f3f3 	udiv	r3, r2, r3
 8012626:	b29b      	uxth	r3, r3
 8012628:	657b      	str	r3, [r7, #84]	; 0x54
        break;
 801262a:	e176      	b.n	801291a <UART_SetConfig+0x220a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801262c:	4b89      	ldr	r3, [pc, #548]	; (8012854 <UART_SetConfig+0x2144>)
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	f003 0320 	and.w	r3, r3, #32
 8012634:	2b00      	cmp	r3, #0
 8012636:	d05d      	beq.n	80126f4 <UART_SetConfig+0x1fe4>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012638:	4b86      	ldr	r3, [pc, #536]	; (8012854 <UART_SetConfig+0x2144>)
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	08db      	lsrs	r3, r3, #3
 801263e:	f003 0303 	and.w	r3, r3, #3
 8012642:	4a85      	ldr	r2, [pc, #532]	; (8012858 <UART_SetConfig+0x2148>)
 8012644:	40da      	lsrs	r2, r3
 8012646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801264a:	2b00      	cmp	r3, #0
 801264c:	d044      	beq.n	80126d8 <UART_SetConfig+0x1fc8>
 801264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012652:	2b01      	cmp	r3, #1
 8012654:	d03e      	beq.n	80126d4 <UART_SetConfig+0x1fc4>
 8012656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801265a:	2b02      	cmp	r3, #2
 801265c:	d038      	beq.n	80126d0 <UART_SetConfig+0x1fc0>
 801265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012662:	2b03      	cmp	r3, #3
 8012664:	d032      	beq.n	80126cc <UART_SetConfig+0x1fbc>
 8012666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801266a:	2b04      	cmp	r3, #4
 801266c:	d02c      	beq.n	80126c8 <UART_SetConfig+0x1fb8>
 801266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012672:	2b05      	cmp	r3, #5
 8012674:	d026      	beq.n	80126c4 <UART_SetConfig+0x1fb4>
 8012676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801267a:	2b06      	cmp	r3, #6
 801267c:	d020      	beq.n	80126c0 <UART_SetConfig+0x1fb0>
 801267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012682:	2b07      	cmp	r3, #7
 8012684:	d01a      	beq.n	80126bc <UART_SetConfig+0x1fac>
 8012686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801268a:	2b08      	cmp	r3, #8
 801268c:	d014      	beq.n	80126b8 <UART_SetConfig+0x1fa8>
 801268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012692:	2b09      	cmp	r3, #9
 8012694:	d00e      	beq.n	80126b4 <UART_SetConfig+0x1fa4>
 8012696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801269a:	2b0a      	cmp	r3, #10
 801269c:	d008      	beq.n	80126b0 <UART_SetConfig+0x1fa0>
 801269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126a2:	2b0b      	cmp	r3, #11
 80126a4:	d102      	bne.n	80126ac <UART_SetConfig+0x1f9c>
 80126a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80126aa:	e016      	b.n	80126da <UART_SetConfig+0x1fca>
 80126ac:	2301      	movs	r3, #1
 80126ae:	e014      	b.n	80126da <UART_SetConfig+0x1fca>
 80126b0:	2380      	movs	r3, #128	; 0x80
 80126b2:	e012      	b.n	80126da <UART_SetConfig+0x1fca>
 80126b4:	2340      	movs	r3, #64	; 0x40
 80126b6:	e010      	b.n	80126da <UART_SetConfig+0x1fca>
 80126b8:	2320      	movs	r3, #32
 80126ba:	e00e      	b.n	80126da <UART_SetConfig+0x1fca>
 80126bc:	2310      	movs	r3, #16
 80126be:	e00c      	b.n	80126da <UART_SetConfig+0x1fca>
 80126c0:	230c      	movs	r3, #12
 80126c2:	e00a      	b.n	80126da <UART_SetConfig+0x1fca>
 80126c4:	230a      	movs	r3, #10
 80126c6:	e008      	b.n	80126da <UART_SetConfig+0x1fca>
 80126c8:	2308      	movs	r3, #8
 80126ca:	e006      	b.n	80126da <UART_SetConfig+0x1fca>
 80126cc:	2306      	movs	r3, #6
 80126ce:	e004      	b.n	80126da <UART_SetConfig+0x1fca>
 80126d0:	2304      	movs	r3, #4
 80126d2:	e002      	b.n	80126da <UART_SetConfig+0x1fca>
 80126d4:	2302      	movs	r3, #2
 80126d6:	e000      	b.n	80126da <UART_SetConfig+0x1fca>
 80126d8:	2301      	movs	r3, #1
 80126da:	fbb2 f2f3 	udiv	r2, r2, r3
 80126de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126e0:	685b      	ldr	r3, [r3, #4]
 80126e2:	085b      	lsrs	r3, r3, #1
 80126e4:	441a      	add	r2, r3
 80126e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126e8:	685b      	ldr	r3, [r3, #4]
 80126ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80126ee:	b29b      	uxth	r3, r3
 80126f0:	657b      	str	r3, [r7, #84]	; 0x54
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80126f2:	e112      	b.n	801291a <UART_SetConfig+0x220a>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80126f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d044      	beq.n	8012786 <UART_SetConfig+0x2076>
 80126fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012700:	2b01      	cmp	r3, #1
 8012702:	d03e      	beq.n	8012782 <UART_SetConfig+0x2072>
 8012704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012708:	2b02      	cmp	r3, #2
 801270a:	d038      	beq.n	801277e <UART_SetConfig+0x206e>
 801270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012710:	2b03      	cmp	r3, #3
 8012712:	d032      	beq.n	801277a <UART_SetConfig+0x206a>
 8012714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012718:	2b04      	cmp	r3, #4
 801271a:	d02c      	beq.n	8012776 <UART_SetConfig+0x2066>
 801271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012720:	2b05      	cmp	r3, #5
 8012722:	d026      	beq.n	8012772 <UART_SetConfig+0x2062>
 8012724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012728:	2b06      	cmp	r3, #6
 801272a:	d020      	beq.n	801276e <UART_SetConfig+0x205e>
 801272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012730:	2b07      	cmp	r3, #7
 8012732:	d01a      	beq.n	801276a <UART_SetConfig+0x205a>
 8012734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012738:	2b08      	cmp	r3, #8
 801273a:	d014      	beq.n	8012766 <UART_SetConfig+0x2056>
 801273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012740:	2b09      	cmp	r3, #9
 8012742:	d00e      	beq.n	8012762 <UART_SetConfig+0x2052>
 8012744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012748:	2b0a      	cmp	r3, #10
 801274a:	d008      	beq.n	801275e <UART_SetConfig+0x204e>
 801274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012750:	2b0b      	cmp	r3, #11
 8012752:	d102      	bne.n	801275a <UART_SetConfig+0x204a>
 8012754:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012758:	e016      	b.n	8012788 <UART_SetConfig+0x2078>
 801275a:	2301      	movs	r3, #1
 801275c:	e014      	b.n	8012788 <UART_SetConfig+0x2078>
 801275e:	2380      	movs	r3, #128	; 0x80
 8012760:	e012      	b.n	8012788 <UART_SetConfig+0x2078>
 8012762:	2340      	movs	r3, #64	; 0x40
 8012764:	e010      	b.n	8012788 <UART_SetConfig+0x2078>
 8012766:	2320      	movs	r3, #32
 8012768:	e00e      	b.n	8012788 <UART_SetConfig+0x2078>
 801276a:	2310      	movs	r3, #16
 801276c:	e00c      	b.n	8012788 <UART_SetConfig+0x2078>
 801276e:	230c      	movs	r3, #12
 8012770:	e00a      	b.n	8012788 <UART_SetConfig+0x2078>
 8012772:	230a      	movs	r3, #10
 8012774:	e008      	b.n	8012788 <UART_SetConfig+0x2078>
 8012776:	2308      	movs	r3, #8
 8012778:	e006      	b.n	8012788 <UART_SetConfig+0x2078>
 801277a:	2306      	movs	r3, #6
 801277c:	e004      	b.n	8012788 <UART_SetConfig+0x2078>
 801277e:	2304      	movs	r3, #4
 8012780:	e002      	b.n	8012788 <UART_SetConfig+0x2078>
 8012782:	2302      	movs	r3, #2
 8012784:	e000      	b.n	8012788 <UART_SetConfig+0x2078>
 8012786:	2301      	movs	r3, #1
 8012788:	4a33      	ldr	r2, [pc, #204]	; (8012858 <UART_SetConfig+0x2148>)
 801278a:	fbb2 f2f3 	udiv	r2, r2, r3
 801278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012790:	685b      	ldr	r3, [r3, #4]
 8012792:	085b      	lsrs	r3, r3, #1
 8012794:	441a      	add	r2, r3
 8012796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012798:	685b      	ldr	r3, [r3, #4]
 801279a:	fbb2 f3f3 	udiv	r3, r2, r3
 801279e:	b29b      	uxth	r3, r3
 80127a0:	657b      	str	r3, [r7, #84]	; 0x54
        break;
 80127a2:	e0ba      	b.n	801291a <UART_SetConfig+0x220a>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80127a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d044      	beq.n	8012836 <UART_SetConfig+0x2126>
 80127ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127b0:	2b01      	cmp	r3, #1
 80127b2:	d03e      	beq.n	8012832 <UART_SetConfig+0x2122>
 80127b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127b8:	2b02      	cmp	r3, #2
 80127ba:	d038      	beq.n	801282e <UART_SetConfig+0x211e>
 80127bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127c0:	2b03      	cmp	r3, #3
 80127c2:	d032      	beq.n	801282a <UART_SetConfig+0x211a>
 80127c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127c8:	2b04      	cmp	r3, #4
 80127ca:	d02c      	beq.n	8012826 <UART_SetConfig+0x2116>
 80127cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127d0:	2b05      	cmp	r3, #5
 80127d2:	d026      	beq.n	8012822 <UART_SetConfig+0x2112>
 80127d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127d8:	2b06      	cmp	r3, #6
 80127da:	d020      	beq.n	801281e <UART_SetConfig+0x210e>
 80127dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127e0:	2b07      	cmp	r3, #7
 80127e2:	d01a      	beq.n	801281a <UART_SetConfig+0x210a>
 80127e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127e8:	2b08      	cmp	r3, #8
 80127ea:	d014      	beq.n	8012816 <UART_SetConfig+0x2106>
 80127ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127f0:	2b09      	cmp	r3, #9
 80127f2:	d00e      	beq.n	8012812 <UART_SetConfig+0x2102>
 80127f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127f8:	2b0a      	cmp	r3, #10
 80127fa:	d008      	beq.n	801280e <UART_SetConfig+0x20fe>
 80127fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012800:	2b0b      	cmp	r3, #11
 8012802:	d102      	bne.n	801280a <UART_SetConfig+0x20fa>
 8012804:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012808:	e016      	b.n	8012838 <UART_SetConfig+0x2128>
 801280a:	2301      	movs	r3, #1
 801280c:	e014      	b.n	8012838 <UART_SetConfig+0x2128>
 801280e:	2380      	movs	r3, #128	; 0x80
 8012810:	e012      	b.n	8012838 <UART_SetConfig+0x2128>
 8012812:	2340      	movs	r3, #64	; 0x40
 8012814:	e010      	b.n	8012838 <UART_SetConfig+0x2128>
 8012816:	2320      	movs	r3, #32
 8012818:	e00e      	b.n	8012838 <UART_SetConfig+0x2128>
 801281a:	2310      	movs	r3, #16
 801281c:	e00c      	b.n	8012838 <UART_SetConfig+0x2128>
 801281e:	230c      	movs	r3, #12
 8012820:	e00a      	b.n	8012838 <UART_SetConfig+0x2128>
 8012822:	230a      	movs	r3, #10
 8012824:	e008      	b.n	8012838 <UART_SetConfig+0x2128>
 8012826:	2308      	movs	r3, #8
 8012828:	e006      	b.n	8012838 <UART_SetConfig+0x2128>
 801282a:	2306      	movs	r3, #6
 801282c:	e004      	b.n	8012838 <UART_SetConfig+0x2128>
 801282e:	2304      	movs	r3, #4
 8012830:	e002      	b.n	8012838 <UART_SetConfig+0x2128>
 8012832:	2302      	movs	r3, #2
 8012834:	e000      	b.n	8012838 <UART_SetConfig+0x2128>
 8012836:	2301      	movs	r3, #1
 8012838:	4a08      	ldr	r2, [pc, #32]	; (801285c <UART_SetConfig+0x214c>)
 801283a:	fbb2 f2f3 	udiv	r2, r2, r3
 801283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012840:	685b      	ldr	r3, [r3, #4]
 8012842:	085b      	lsrs	r3, r3, #1
 8012844:	441a      	add	r2, r3
 8012846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012848:	685b      	ldr	r3, [r3, #4]
 801284a:	fbb2 f3f3 	udiv	r3, r2, r3
 801284e:	b29b      	uxth	r3, r3
 8012850:	657b      	str	r3, [r7, #84]	; 0x54
        break;
 8012852:	e062      	b.n	801291a <UART_SetConfig+0x220a>
 8012854:	58024400 	.word	0x58024400
 8012858:	03d09000 	.word	0x03d09000
 801285c:	003d0900 	.word	0x003d0900
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012864:	2b00      	cmp	r3, #0
 8012866:	d044      	beq.n	80128f2 <UART_SetConfig+0x21e2>
 8012868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801286c:	2b01      	cmp	r3, #1
 801286e:	d03e      	beq.n	80128ee <UART_SetConfig+0x21de>
 8012870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012874:	2b02      	cmp	r3, #2
 8012876:	d038      	beq.n	80128ea <UART_SetConfig+0x21da>
 8012878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801287c:	2b03      	cmp	r3, #3
 801287e:	d032      	beq.n	80128e6 <UART_SetConfig+0x21d6>
 8012880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012884:	2b04      	cmp	r3, #4
 8012886:	d02c      	beq.n	80128e2 <UART_SetConfig+0x21d2>
 8012888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801288c:	2b05      	cmp	r3, #5
 801288e:	d026      	beq.n	80128de <UART_SetConfig+0x21ce>
 8012890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012894:	2b06      	cmp	r3, #6
 8012896:	d020      	beq.n	80128da <UART_SetConfig+0x21ca>
 8012898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801289c:	2b07      	cmp	r3, #7
 801289e:	d01a      	beq.n	80128d6 <UART_SetConfig+0x21c6>
 80128a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128a4:	2b08      	cmp	r3, #8
 80128a6:	d014      	beq.n	80128d2 <UART_SetConfig+0x21c2>
 80128a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128ac:	2b09      	cmp	r3, #9
 80128ae:	d00e      	beq.n	80128ce <UART_SetConfig+0x21be>
 80128b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128b4:	2b0a      	cmp	r3, #10
 80128b6:	d008      	beq.n	80128ca <UART_SetConfig+0x21ba>
 80128b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128bc:	2b0b      	cmp	r3, #11
 80128be:	d102      	bne.n	80128c6 <UART_SetConfig+0x21b6>
 80128c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80128c4:	e016      	b.n	80128f4 <UART_SetConfig+0x21e4>
 80128c6:	2301      	movs	r3, #1
 80128c8:	e014      	b.n	80128f4 <UART_SetConfig+0x21e4>
 80128ca:	2380      	movs	r3, #128	; 0x80
 80128cc:	e012      	b.n	80128f4 <UART_SetConfig+0x21e4>
 80128ce:	2340      	movs	r3, #64	; 0x40
 80128d0:	e010      	b.n	80128f4 <UART_SetConfig+0x21e4>
 80128d2:	2320      	movs	r3, #32
 80128d4:	e00e      	b.n	80128f4 <UART_SetConfig+0x21e4>
 80128d6:	2310      	movs	r3, #16
 80128d8:	e00c      	b.n	80128f4 <UART_SetConfig+0x21e4>
 80128da:	230c      	movs	r3, #12
 80128dc:	e00a      	b.n	80128f4 <UART_SetConfig+0x21e4>
 80128de:	230a      	movs	r3, #10
 80128e0:	e008      	b.n	80128f4 <UART_SetConfig+0x21e4>
 80128e2:	2308      	movs	r3, #8
 80128e4:	e006      	b.n	80128f4 <UART_SetConfig+0x21e4>
 80128e6:	2306      	movs	r3, #6
 80128e8:	e004      	b.n	80128f4 <UART_SetConfig+0x21e4>
 80128ea:	2304      	movs	r3, #4
 80128ec:	e002      	b.n	80128f4 <UART_SetConfig+0x21e4>
 80128ee:	2302      	movs	r3, #2
 80128f0:	e000      	b.n	80128f4 <UART_SetConfig+0x21e4>
 80128f2:	2301      	movs	r3, #1
 80128f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80128f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80128fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128fe:	685b      	ldr	r3, [r3, #4]
 8012900:	085b      	lsrs	r3, r3, #1
 8012902:	441a      	add	r2, r3
 8012904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012906:	685b      	ldr	r3, [r3, #4]
 8012908:	fbb2 f3f3 	udiv	r3, r2, r3
 801290c:	b29b      	uxth	r3, r3
 801290e:	657b      	str	r3, [r7, #84]	; 0x54
        break;
 8012910:	e003      	b.n	801291a <UART_SetConfig+0x220a>
      default:
        ret = HAL_ERROR;
 8012912:	2301      	movs	r3, #1
 8012914:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        break;
 8012918:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801291a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801291c:	2b0f      	cmp	r3, #15
 801291e:	d908      	bls.n	8012932 <UART_SetConfig+0x2222>
 8012920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012926:	d204      	bcs.n	8012932 <UART_SetConfig+0x2222>
    {
      huart->Instance->BRR = usartdiv;
 8012928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801292e:	60da      	str	r2, [r3, #12]
 8012930:	e002      	b.n	8012938 <UART_SetConfig+0x2228>
    }
    else
    {
      ret = HAL_ERROR;
 8012932:	2301      	movs	r3, #1
 8012934:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8012938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801293a:	2201      	movs	r2, #1
 801293c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8012940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012942:	2201      	movs	r2, #1
 8012944:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801294a:	2200      	movs	r2, #0
 801294c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 801294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012950:	2200      	movs	r2, #0
 8012952:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8012954:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
}
 8012958:	4618      	mov	r0, r3
 801295a:	3760      	adds	r7, #96	; 0x60
 801295c:	46bd      	mov	sp, r7
 801295e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012962:	bf00      	nop

08012964 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012964:	b480      	push	{r7}
 8012966:	b083      	sub	sp, #12
 8012968:	af00      	add	r7, sp, #0
 801296a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012970:	f003 0301 	and.w	r3, r3, #1
 8012974:	2b00      	cmp	r3, #0
 8012976:	d00a      	beq.n	801298e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	685b      	ldr	r3, [r3, #4]
 801297e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	430a      	orrs	r2, r1
 801298c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012992:	f003 0302 	and.w	r3, r3, #2
 8012996:	2b00      	cmp	r3, #0
 8012998:	d00a      	beq.n	80129b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	685b      	ldr	r3, [r3, #4]
 80129a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	430a      	orrs	r2, r1
 80129ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129b4:	f003 0304 	and.w	r3, r3, #4
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d00a      	beq.n	80129d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	685b      	ldr	r3, [r3, #4]
 80129c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	430a      	orrs	r2, r1
 80129d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129d6:	f003 0308 	and.w	r3, r3, #8
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d00a      	beq.n	80129f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	685b      	ldr	r3, [r3, #4]
 80129e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	430a      	orrs	r2, r1
 80129f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129f8:	f003 0310 	and.w	r3, r3, #16
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d00a      	beq.n	8012a16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	689b      	ldr	r3, [r3, #8]
 8012a06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	430a      	orrs	r2, r1
 8012a14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a1a:	f003 0320 	and.w	r3, r3, #32
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d00a      	beq.n	8012a38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	689b      	ldr	r3, [r3, #8]
 8012a28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	430a      	orrs	r2, r1
 8012a36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d01a      	beq.n	8012a7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	685b      	ldr	r3, [r3, #4]
 8012a4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	430a      	orrs	r2, r1
 8012a58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012a62:	d10a      	bne.n	8012a7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	685b      	ldr	r3, [r3, #4]
 8012a6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	430a      	orrs	r2, r1
 8012a78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d00a      	beq.n	8012a9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	685b      	ldr	r3, [r3, #4]
 8012a8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	430a      	orrs	r2, r1
 8012a9a:	605a      	str	r2, [r3, #4]
  }
}
 8012a9c:	bf00      	nop
 8012a9e:	370c      	adds	r7, #12
 8012aa0:	46bd      	mov	sp, r7
 8012aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa6:	4770      	bx	lr

08012aa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b086      	sub	sp, #24
 8012aac:	af02      	add	r7, sp, #8
 8012aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8012ab8:	f7f3 f9bc 	bl	8005e34 <HAL_GetTick>
 8012abc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	f003 0308 	and.w	r3, r3, #8
 8012ac8:	2b08      	cmp	r3, #8
 8012aca:	d10e      	bne.n	8012aea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012acc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012ad0:	9300      	str	r3, [sp, #0]
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	2200      	movs	r2, #0
 8012ad6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012ada:	6878      	ldr	r0, [r7, #4]
 8012adc:	f000 f82c 	bl	8012b38 <UART_WaitOnFlagUntilTimeout>
 8012ae0:	4603      	mov	r3, r0
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d001      	beq.n	8012aea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012ae6:	2303      	movs	r3, #3
 8012ae8:	e022      	b.n	8012b30 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	f003 0304 	and.w	r3, r3, #4
 8012af4:	2b04      	cmp	r3, #4
 8012af6:	d10e      	bne.n	8012b16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012af8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012afc:	9300      	str	r3, [sp, #0]
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	2200      	movs	r2, #0
 8012b02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012b06:	6878      	ldr	r0, [r7, #4]
 8012b08:	f000 f816 	bl	8012b38 <UART_WaitOnFlagUntilTimeout>
 8012b0c:	4603      	mov	r3, r0
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d001      	beq.n	8012b16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012b12:	2303      	movs	r3, #3
 8012b14:	e00c      	b.n	8012b30 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	2220      	movs	r2, #32
 8012b1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	2220      	movs	r2, #32
 8012b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	2200      	movs	r2, #0
 8012b2a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8012b2e:	2300      	movs	r3, #0
}
 8012b30:	4618      	mov	r0, r3
 8012b32:	3710      	adds	r7, #16
 8012b34:	46bd      	mov	sp, r7
 8012b36:	bd80      	pop	{r7, pc}

08012b38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012b38:	b580      	push	{r7, lr}
 8012b3a:	b084      	sub	sp, #16
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	60f8      	str	r0, [r7, #12]
 8012b40:	60b9      	str	r1, [r7, #8]
 8012b42:	603b      	str	r3, [r7, #0]
 8012b44:	4613      	mov	r3, r2
 8012b46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012b48:	e062      	b.n	8012c10 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012b4a:	69bb      	ldr	r3, [r7, #24]
 8012b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b50:	d05e      	beq.n	8012c10 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012b52:	f7f3 f96f 	bl	8005e34 <HAL_GetTick>
 8012b56:	4602      	mov	r2, r0
 8012b58:	683b      	ldr	r3, [r7, #0]
 8012b5a:	1ad3      	subs	r3, r2, r3
 8012b5c:	69ba      	ldr	r2, [r7, #24]
 8012b5e:	429a      	cmp	r2, r3
 8012b60:	d302      	bcc.n	8012b68 <UART_WaitOnFlagUntilTimeout+0x30>
 8012b62:	69bb      	ldr	r3, [r7, #24]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d11d      	bne.n	8012ba4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	681a      	ldr	r2, [r3, #0]
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8012b76:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	689a      	ldr	r2, [r3, #8]
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	f022 0201 	bic.w	r2, r2, #1
 8012b86:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	2220      	movs	r2, #32
 8012b8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	2220      	movs	r2, #32
 8012b94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8012ba0:	2303      	movs	r3, #3
 8012ba2:	e045      	b.n	8012c30 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	f003 0304 	and.w	r3, r3, #4
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d02e      	beq.n	8012c10 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	69db      	ldr	r3, [r3, #28]
 8012bb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012bbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012bc0:	d126      	bne.n	8012c10 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012bca:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	681a      	ldr	r2, [r3, #0]
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8012bda:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	689a      	ldr	r2, [r3, #8]
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	f022 0201 	bic.w	r2, r2, #1
 8012bea:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	2220      	movs	r2, #32
 8012bf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	2220      	movs	r2, #32
 8012bf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	2220      	movs	r2, #32
 8012c00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	2200      	movs	r2, #0
 8012c08:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8012c0c:	2303      	movs	r3, #3
 8012c0e:	e00f      	b.n	8012c30 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	69da      	ldr	r2, [r3, #28]
 8012c16:	68bb      	ldr	r3, [r7, #8]
 8012c18:	4013      	ands	r3, r2
 8012c1a:	68ba      	ldr	r2, [r7, #8]
 8012c1c:	429a      	cmp	r2, r3
 8012c1e:	bf0c      	ite	eq
 8012c20:	2301      	moveq	r3, #1
 8012c22:	2300      	movne	r3, #0
 8012c24:	b2db      	uxtb	r3, r3
 8012c26:	461a      	mov	r2, r3
 8012c28:	79fb      	ldrb	r3, [r7, #7]
 8012c2a:	429a      	cmp	r2, r3
 8012c2c:	d08d      	beq.n	8012b4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012c2e:	2300      	movs	r3, #0
}
 8012c30:	4618      	mov	r0, r3
 8012c32:	3710      	adds	r7, #16
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd80      	pop	{r7, pc}

08012c38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012c38:	b480      	push	{r7}
 8012c3a:	b083      	sub	sp, #12
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	681a      	ldr	r2, [r3, #0]
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8012c4e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	6899      	ldr	r1, [r3, #8]
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	681a      	ldr	r2, [r3, #0]
 8012c5a:	4b08      	ldr	r3, [pc, #32]	; (8012c7c <UART_EndRxTransfer+0x44>)
 8012c5c:	400b      	ands	r3, r1
 8012c5e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	2220      	movs	r2, #32
 8012c64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	2200      	movs	r2, #0
 8012c6c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8012c6e:	bf00      	nop
 8012c70:	370c      	adds	r7, #12
 8012c72:	46bd      	mov	sp, r7
 8012c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c78:	4770      	bx	lr
 8012c7a:	bf00      	nop
 8012c7c:	effffffe 	.word	0xeffffffe

08012c80 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b084      	sub	sp, #16
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	2200      	movs	r2, #0
 8012c92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	2200      	movs	r2, #0
 8012c9a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012c9e:	68f8      	ldr	r0, [r7, #12]
 8012ca0:	f7fd fd2c 	bl	80106fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012ca4:	bf00      	nop
 8012ca6:	3710      	adds	r7, #16
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	bd80      	pop	{r7, pc}

08012cac <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8012cac:	b480      	push	{r7}
 8012cae:	b083      	sub	sp, #12
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012cba:	2b21      	cmp	r3, #33	; 0x21
 8012cbc:	d12a      	bne.n	8012d14 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012cc4:	b29b      	uxth	r3, r3
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d110      	bne.n	8012cec <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	681a      	ldr	r2, [r3, #0]
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012cd8:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	681a      	ldr	r2, [r3, #0]
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012ce8:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8012cea:	e013      	b.n	8012d14 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012cf0:	781a      	ldrb	r2, [r3, #0]
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012cfc:	1c5a      	adds	r2, r3, #1
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012d08:	b29b      	uxth	r3, r3
 8012d0a:	3b01      	subs	r3, #1
 8012d0c:	b29a      	uxth	r2, r3
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8012d14:	bf00      	nop
 8012d16:	370c      	adds	r7, #12
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d1e:	4770      	bx	lr

08012d20 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012d20:	b480      	push	{r7}
 8012d22:	b085      	sub	sp, #20
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012d2e:	2b21      	cmp	r3, #33	; 0x21
 8012d30:	d12f      	bne.n	8012d92 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012d38:	b29b      	uxth	r3, r3
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d110      	bne.n	8012d60 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	681a      	ldr	r2, [r3, #0]
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012d4c:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	681a      	ldr	r2, [r3, #0]
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012d5c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8012d5e:	e018      	b.n	8012d92 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012d64:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	881b      	ldrh	r3, [r3, #0]
 8012d6a:	461a      	mov	r2, r3
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012d74:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012d7a:	1c9a      	adds	r2, r3, #2
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012d86:	b29b      	uxth	r3, r3
 8012d88:	3b01      	subs	r3, #1
 8012d8a:	b29a      	uxth	r2, r3
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8012d92:	bf00      	nop
 8012d94:	3714      	adds	r7, #20
 8012d96:	46bd      	mov	sp, r7
 8012d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d9c:	4770      	bx	lr

08012d9e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012d9e:	b480      	push	{r7}
 8012da0:	b085      	sub	sp, #20
 8012da2:	af00      	add	r7, sp, #0
 8012da4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012dac:	2b21      	cmp	r3, #33	; 0x21
 8012dae:	d13d      	bne.n	8012e2c <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012db6:	81fb      	strh	r3, [r7, #14]
 8012db8:	e035      	b.n	8012e26 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012dc0:	b29b      	uxth	r3, r3
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d111      	bne.n	8012dea <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	689a      	ldr	r2, [r3, #8]
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8012dd4:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	681a      	ldr	r2, [r3, #0]
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012de4:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8012de6:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8012de8:	e020      	b.n	8012e2c <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	69db      	ldr	r3, [r3, #28]
 8012df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d013      	beq.n	8012e20 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012dfc:	781a      	ldrb	r2, [r3, #0]
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e08:	1c5a      	adds	r2, r3, #1
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012e14:	b29b      	uxth	r3, r3
 8012e16:	3b01      	subs	r3, #1
 8012e18:	b29a      	uxth	r2, r3
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8012e20:	89fb      	ldrh	r3, [r7, #14]
 8012e22:	3b01      	subs	r3, #1
 8012e24:	81fb      	strh	r3, [r7, #14]
 8012e26:	89fb      	ldrh	r3, [r7, #14]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d1c6      	bne.n	8012dba <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 8012e2c:	bf00      	nop
 8012e2e:	3714      	adds	r7, #20
 8012e30:	46bd      	mov	sp, r7
 8012e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e36:	4770      	bx	lr

08012e38 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012e38:	b480      	push	{r7}
 8012e3a:	b085      	sub	sp, #20
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012e46:	2b21      	cmp	r3, #33	; 0x21
 8012e48:	d142      	bne.n	8012ed0 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012e50:	81fb      	strh	r3, [r7, #14]
 8012e52:	e03a      	b.n	8012eca <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012e5a:	b29b      	uxth	r3, r3
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d111      	bne.n	8012e84 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	689a      	ldr	r2, [r3, #8]
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8012e6e:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	681a      	ldr	r2, [r3, #0]
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012e7e:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8012e80:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8012e82:	e025      	b.n	8012ed0 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	69db      	ldr	r3, [r3, #28]
 8012e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d018      	beq.n	8012ec4 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e96:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8012e98:	68bb      	ldr	r3, [r7, #8]
 8012e9a:	881b      	ldrh	r3, [r3, #0]
 8012e9c:	461a      	mov	r2, r3
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012ea6:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012eac:	1c9a      	adds	r2, r3, #2
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012eb8:	b29b      	uxth	r3, r3
 8012eba:	3b01      	subs	r3, #1
 8012ebc:	b29a      	uxth	r2, r3
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8012ec4:	89fb      	ldrh	r3, [r7, #14]
 8012ec6:	3b01      	subs	r3, #1
 8012ec8:	81fb      	strh	r3, [r7, #14]
 8012eca:	89fb      	ldrh	r3, [r7, #14]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d1c1      	bne.n	8012e54 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 8012ed0:	bf00      	nop
 8012ed2:	3714      	adds	r7, #20
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eda:	4770      	bx	lr

08012edc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b082      	sub	sp, #8
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	681a      	ldr	r2, [r3, #0]
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012ef2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	2220      	movs	r2, #32
 8012ef8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	2200      	movs	r2, #0
 8012f00:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8012f02:	6878      	ldr	r0, [r7, #4]
 8012f04:	f7fd fbf0 	bl	80106e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012f08:	bf00      	nop
 8012f0a:	3708      	adds	r7, #8
 8012f0c:	46bd      	mov	sp, r7
 8012f0e:	bd80      	pop	{r7, pc}

08012f10 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b084      	sub	sp, #16
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012f1e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012f26:	2b22      	cmp	r3, #34	; 0x22
 8012f28:	d13b      	bne.n	8012fa2 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f30:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012f32:	89bb      	ldrh	r3, [r7, #12]
 8012f34:	b2d9      	uxtb	r1, r3
 8012f36:	89fb      	ldrh	r3, [r7, #14]
 8012f38:	b2da      	uxtb	r2, r3
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f3e:	400a      	ands	r2, r1
 8012f40:	b2d2      	uxtb	r2, r2
 8012f42:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f48:	1c5a      	adds	r2, r3, #1
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012f54:	b29b      	uxth	r3, r3
 8012f56:	3b01      	subs	r3, #1
 8012f58:	b29a      	uxth	r2, r3
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012f66:	b29b      	uxth	r3, r3
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d122      	bne.n	8012fb2 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	681a      	ldr	r2, [r3, #0]
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8012f7a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	689a      	ldr	r2, [r3, #8]
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	f022 0201 	bic.w	r2, r2, #1
 8012f8a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	2220      	movs	r2, #32
 8012f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	2200      	movs	r2, #0
 8012f98:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8012f9a:	6878      	ldr	r0, [r7, #4]
 8012f9c:	f7ed fdb8 	bl	8000b10 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012fa0:	e007      	b.n	8012fb2 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	699a      	ldr	r2, [r3, #24]
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	f042 0208 	orr.w	r2, r2, #8
 8012fb0:	619a      	str	r2, [r3, #24]
}
 8012fb2:	bf00      	nop
 8012fb4:	3710      	adds	r7, #16
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	bd80      	pop	{r7, pc}

08012fba <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012fba:	b580      	push	{r7, lr}
 8012fbc:	b084      	sub	sp, #16
 8012fbe:	af00      	add	r7, sp, #0
 8012fc0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012fc8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012fd0:	2b22      	cmp	r3, #34	; 0x22
 8012fd2:	d13b      	bne.n	801304c <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fda:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012fe0:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8012fe2:	89ba      	ldrh	r2, [r7, #12]
 8012fe4:	89fb      	ldrh	r3, [r7, #14]
 8012fe6:	4013      	ands	r3, r2
 8012fe8:	b29a      	uxth	r2, r3
 8012fea:	68bb      	ldr	r3, [r7, #8]
 8012fec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012ff2:	1c9a      	adds	r2, r3, #2
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012ffe:	b29b      	uxth	r3, r3
 8013000:	3b01      	subs	r3, #1
 8013002:	b29a      	uxth	r2, r3
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013010:	b29b      	uxth	r3, r3
 8013012:	2b00      	cmp	r3, #0
 8013014:	d122      	bne.n	801305c <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	681a      	ldr	r2, [r3, #0]
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8013024:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	689a      	ldr	r2, [r3, #8]
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	f022 0201 	bic.w	r2, r2, #1
 8013034:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	2220      	movs	r2, #32
 801303a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	2200      	movs	r2, #0
 8013042:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8013044:	6878      	ldr	r0, [r7, #4]
 8013046:	f7ed fd63 	bl	8000b10 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801304a:	e007      	b.n	801305c <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	699a      	ldr	r2, [r3, #24]
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	f042 0208 	orr.w	r2, r2, #8
 801305a:	619a      	str	r2, [r3, #24]
}
 801305c:	bf00      	nop
 801305e:	3710      	adds	r7, #16
 8013060:	46bd      	mov	sp, r7
 8013062:	bd80      	pop	{r7, pc}

08013064 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8013064:	b580      	push	{r7, lr}
 8013066:	b084      	sub	sp, #16
 8013068:	af00      	add	r7, sp, #0
 801306a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013072:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801307a:	2b22      	cmp	r3, #34	; 0x22
 801307c:	d166      	bne.n	801314c <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013084:	81fb      	strh	r3, [r7, #14]
 8013086:	e03d      	b.n	8013104 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801308e:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8013090:	893b      	ldrh	r3, [r7, #8]
 8013092:	b2d9      	uxtb	r1, r3
 8013094:	89bb      	ldrh	r3, [r7, #12]
 8013096:	b2da      	uxtb	r2, r3
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801309c:	400a      	ands	r2, r1
 801309e:	b2d2      	uxtb	r2, r2
 80130a0:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80130a6:	1c5a      	adds	r2, r3, #1
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80130b2:	b29b      	uxth	r3, r3
 80130b4:	3b01      	subs	r3, #1
 80130b6:	b29a      	uxth	r2, r3
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80130c4:	b29b      	uxth	r3, r3
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d119      	bne.n	80130fe <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	681a      	ldr	r2, [r3, #0]
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80130d8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	6899      	ldr	r1, [r3, #8]
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	681a      	ldr	r2, [r3, #0]
 80130e4:	4b1f      	ldr	r3, [pc, #124]	; (8013164 <UART_RxISR_8BIT_FIFOEN+0x100>)
 80130e6:	400b      	ands	r3, r1
 80130e8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	2220      	movs	r2, #32
 80130ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	2200      	movs	r2, #0
 80130f6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80130f8:	6878      	ldr	r0, [r7, #4]
 80130fa:	f7ed fd09 	bl	8000b10 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80130fe:	89fb      	ldrh	r3, [r7, #14]
 8013100:	3b01      	subs	r3, #1
 8013102:	81fb      	strh	r3, [r7, #14]
 8013104:	89fb      	ldrh	r3, [r7, #14]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d1be      	bne.n	8013088 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013110:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8013112:	897b      	ldrh	r3, [r7, #10]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d021      	beq.n	801315c <UART_RxISR_8BIT_FIFOEN+0xf8>
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801311e:	897a      	ldrh	r2, [r7, #10]
 8013120:	429a      	cmp	r2, r3
 8013122:	d21b      	bcs.n	801315c <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	689a      	ldr	r2, [r3, #8]
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8013132:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	4a0c      	ldr	r2, [pc, #48]	; (8013168 <UART_RxISR_8BIT_FIFOEN+0x104>)
 8013138:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	681a      	ldr	r2, [r3, #0]
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	f042 0220 	orr.w	r2, r2, #32
 8013148:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801314a:	e007      	b.n	801315c <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	699a      	ldr	r2, [r3, #24]
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	f042 0208 	orr.w	r2, r2, #8
 801315a:	619a      	str	r2, [r3, #24]
}
 801315c:	bf00      	nop
 801315e:	3710      	adds	r7, #16
 8013160:	46bd      	mov	sp, r7
 8013162:	bd80      	pop	{r7, pc}
 8013164:	effffffe 	.word	0xeffffffe
 8013168:	08012f11 	.word	0x08012f11

0801316c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801316c:	b580      	push	{r7, lr}
 801316e:	b086      	sub	sp, #24
 8013170:	af00      	add	r7, sp, #0
 8013172:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801317a:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013182:	2b22      	cmp	r3, #34	; 0x22
 8013184:	d166      	bne.n	8013254 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801318c:	82fb      	strh	r3, [r7, #22]
 801318e:	e03d      	b.n	801320c <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013196:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801319c:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 801319e:	8a3a      	ldrh	r2, [r7, #16]
 80131a0:	8abb      	ldrh	r3, [r7, #20]
 80131a2:	4013      	ands	r3, r2
 80131a4:	b29a      	uxth	r2, r3
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80131ae:	1c9a      	adds	r2, r3, #2
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80131ba:	b29b      	uxth	r3, r3
 80131bc:	3b01      	subs	r3, #1
 80131be:	b29a      	uxth	r2, r3
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80131cc:	b29b      	uxth	r3, r3
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d119      	bne.n	8013206 <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	681a      	ldr	r2, [r3, #0]
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80131e0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	6899      	ldr	r1, [r3, #8]
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	681a      	ldr	r2, [r3, #0]
 80131ec:	4b1f      	ldr	r3, [pc, #124]	; (801326c <UART_RxISR_16BIT_FIFOEN+0x100>)
 80131ee:	400b      	ands	r3, r1
 80131f0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	2220      	movs	r2, #32
 80131f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	2200      	movs	r2, #0
 80131fe:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8013200:	6878      	ldr	r0, [r7, #4]
 8013202:	f7ed fc85 	bl	8000b10 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8013206:	8afb      	ldrh	r3, [r7, #22]
 8013208:	3b01      	subs	r3, #1
 801320a:	82fb      	strh	r3, [r7, #22]
 801320c:	8afb      	ldrh	r3, [r7, #22]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d1be      	bne.n	8013190 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013218:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801321a:	8a7b      	ldrh	r3, [r7, #18]
 801321c:	2b00      	cmp	r3, #0
 801321e:	d021      	beq.n	8013264 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013226:	8a7a      	ldrh	r2, [r7, #18]
 8013228:	429a      	cmp	r2, r3
 801322a:	d21b      	bcs.n	8013264 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	689a      	ldr	r2, [r3, #8]
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 801323a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	4a0c      	ldr	r2, [pc, #48]	; (8013270 <UART_RxISR_16BIT_FIFOEN+0x104>)
 8013240:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	681a      	ldr	r2, [r3, #0]
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	f042 0220 	orr.w	r2, r2, #32
 8013250:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013252:	e007      	b.n	8013264 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	699a      	ldr	r2, [r3, #24]
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	f042 0208 	orr.w	r2, r2, #8
 8013262:	619a      	str	r2, [r3, #24]
}
 8013264:	bf00      	nop
 8013266:	3718      	adds	r7, #24
 8013268:	46bd      	mov	sp, r7
 801326a:	bd80      	pop	{r7, pc}
 801326c:	effffffe 	.word	0xeffffffe
 8013270:	08012fbb 	.word	0x08012fbb

08013274 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8013274:	b480      	push	{r7}
 8013276:	b083      	sub	sp, #12
 8013278:	af00      	add	r7, sp, #0
 801327a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801327c:	bf00      	nop
 801327e:	370c      	adds	r7, #12
 8013280:	46bd      	mov	sp, r7
 8013282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013286:	4770      	bx	lr

08013288 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8013288:	b480      	push	{r7}
 801328a:	b083      	sub	sp, #12
 801328c:	af00      	add	r7, sp, #0
 801328e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8013290:	bf00      	nop
 8013292:	370c      	adds	r7, #12
 8013294:	46bd      	mov	sp, r7
 8013296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801329a:	4770      	bx	lr

0801329c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801329c:	b480      	push	{r7}
 801329e:	b083      	sub	sp, #12
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80132a4:	bf00      	nop
 80132a6:	370c      	adds	r7, #12
 80132a8:	46bd      	mov	sp, r7
 80132aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ae:	4770      	bx	lr

080132b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80132b0:	b480      	push	{r7}
 80132b2:	b085      	sub	sp, #20
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80132be:	2b01      	cmp	r3, #1
 80132c0:	d101      	bne.n	80132c6 <HAL_UARTEx_DisableFifoMode+0x16>
 80132c2:	2302      	movs	r3, #2
 80132c4:	e027      	b.n	8013316 <HAL_UARTEx_DisableFifoMode+0x66>
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	2201      	movs	r2, #1
 80132ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	2224      	movs	r2, #36	; 0x24
 80132d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	681a      	ldr	r2, [r3, #0]
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	f022 0201 	bic.w	r2, r2, #1
 80132ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80132f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	2200      	movs	r2, #0
 80132fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	68fa      	ldr	r2, [r7, #12]
 8013302:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	2220      	movs	r2, #32
 8013308:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	2200      	movs	r2, #0
 8013310:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8013314:	2300      	movs	r3, #0
}
 8013316:	4618      	mov	r0, r3
 8013318:	3714      	adds	r7, #20
 801331a:	46bd      	mov	sp, r7
 801331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013320:	4770      	bx	lr

08013322 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013322:	b580      	push	{r7, lr}
 8013324:	b084      	sub	sp, #16
 8013326:	af00      	add	r7, sp, #0
 8013328:	6078      	str	r0, [r7, #4]
 801332a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8013332:	2b01      	cmp	r3, #1
 8013334:	d101      	bne.n	801333a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013336:	2302      	movs	r3, #2
 8013338:	e02d      	b.n	8013396 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	2201      	movs	r2, #1
 801333e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	2224      	movs	r2, #36	; 0x24
 8013346:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	681a      	ldr	r2, [r3, #0]
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	f022 0201 	bic.w	r2, r2, #1
 8013360:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	689b      	ldr	r3, [r3, #8]
 8013368:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	683a      	ldr	r2, [r7, #0]
 8013372:	430a      	orrs	r2, r1
 8013374:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013376:	6878      	ldr	r0, [r7, #4]
 8013378:	f000 f850 	bl	801341c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	68fa      	ldr	r2, [r7, #12]
 8013382:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	2220      	movs	r2, #32
 8013388:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	2200      	movs	r2, #0
 8013390:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8013394:	2300      	movs	r3, #0
}
 8013396:	4618      	mov	r0, r3
 8013398:	3710      	adds	r7, #16
 801339a:	46bd      	mov	sp, r7
 801339c:	bd80      	pop	{r7, pc}

0801339e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801339e:	b580      	push	{r7, lr}
 80133a0:	b084      	sub	sp, #16
 80133a2:	af00      	add	r7, sp, #0
 80133a4:	6078      	str	r0, [r7, #4]
 80133a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80133ae:	2b01      	cmp	r3, #1
 80133b0:	d101      	bne.n	80133b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80133b2:	2302      	movs	r3, #2
 80133b4:	e02d      	b.n	8013412 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	2201      	movs	r2, #1
 80133ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	2224      	movs	r2, #36	; 0x24
 80133c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	681a      	ldr	r2, [r3, #0]
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	f022 0201 	bic.w	r2, r2, #1
 80133dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	689b      	ldr	r3, [r3, #8]
 80133e4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	683a      	ldr	r2, [r7, #0]
 80133ee:	430a      	orrs	r2, r1
 80133f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80133f2:	6878      	ldr	r0, [r7, #4]
 80133f4:	f000 f812 	bl	801341c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	68fa      	ldr	r2, [r7, #12]
 80133fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	2220      	movs	r2, #32
 8013404:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	2200      	movs	r2, #0
 801340c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8013410:	2300      	movs	r3, #0
}
 8013412:	4618      	mov	r0, r3
 8013414:	3710      	adds	r7, #16
 8013416:	46bd      	mov	sp, r7
 8013418:	bd80      	pop	{r7, pc}
	...

0801341c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801341c:	b480      	push	{r7}
 801341e:	b089      	sub	sp, #36	; 0x24
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8013424:	4a2f      	ldr	r2, [pc, #188]	; (80134e4 <UARTEx_SetNbDataToProcess+0xc8>)
 8013426:	f107 0314 	add.w	r3, r7, #20
 801342a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801342e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8013432:	4a2d      	ldr	r2, [pc, #180]	; (80134e8 <UARTEx_SetNbDataToProcess+0xcc>)
 8013434:	f107 030c 	add.w	r3, r7, #12
 8013438:	e892 0003 	ldmia.w	r2, {r0, r1}
 801343c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013444:	2b00      	cmp	r3, #0
 8013446:	d108      	bne.n	801345a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	2201      	movs	r2, #1
 801344c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	2201      	movs	r2, #1
 8013454:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013458:	e03d      	b.n	80134d6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801345a:	2308      	movs	r3, #8
 801345c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801345e:	2308      	movs	r3, #8
 8013460:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	689b      	ldr	r3, [r3, #8]
 8013468:	0e5b      	lsrs	r3, r3, #25
 801346a:	b2db      	uxtb	r3, r3
 801346c:	f003 0307 	and.w	r3, r3, #7
 8013470:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	689b      	ldr	r3, [r3, #8]
 8013478:	0f5b      	lsrs	r3, r3, #29
 801347a:	b2db      	uxtb	r3, r3
 801347c:	f003 0307 	and.w	r3, r3, #7
 8013480:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8013482:	7fbb      	ldrb	r3, [r7, #30]
 8013484:	7f3a      	ldrb	r2, [r7, #28]
 8013486:	f107 0120 	add.w	r1, r7, #32
 801348a:	440a      	add	r2, r1
 801348c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8013490:	fb02 f303 	mul.w	r3, r2, r3
 8013494:	7f3a      	ldrb	r2, [r7, #28]
 8013496:	f107 0120 	add.w	r1, r7, #32
 801349a:	440a      	add	r2, r1
 801349c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80134a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80134a4:	b29a      	uxth	r2, r3
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80134ac:	7ffb      	ldrb	r3, [r7, #31]
 80134ae:	7f7a      	ldrb	r2, [r7, #29]
 80134b0:	f107 0120 	add.w	r1, r7, #32
 80134b4:	440a      	add	r2, r1
 80134b6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80134ba:	fb02 f303 	mul.w	r3, r2, r3
 80134be:	7f7a      	ldrb	r2, [r7, #29]
 80134c0:	f107 0120 	add.w	r1, r7, #32
 80134c4:	440a      	add	r2, r1
 80134c6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80134ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80134ce:	b29a      	uxth	r2, r3
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80134d6:	bf00      	nop
 80134d8:	3724      	adds	r7, #36	; 0x24
 80134da:	46bd      	mov	sp, r7
 80134dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e0:	4770      	bx	lr
 80134e2:	bf00      	nop
 80134e4:	0801947c 	.word	0x0801947c
 80134e8:	08019484 	.word	0x08019484

080134ec <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80134ec:	b084      	sub	sp, #16
 80134ee:	b480      	push	{r7}
 80134f0:	b085      	sub	sp, #20
 80134f2:	af00      	add	r7, sp, #0
 80134f4:	6078      	str	r0, [r7, #4]
 80134f6:	f107 001c 	add.w	r0, r7, #28
 80134fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80134fe:	2300      	movs	r3, #0
 8013500:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8013502:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8013504:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8013506:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8013508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 801350a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 801350c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 801350e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8013510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8013512:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8013514:	68fa      	ldr	r2, [r7, #12]
 8013516:	4313      	orrs	r3, r2
 8013518:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	685a      	ldr	r2, [r3, #4]
 801351e:	4b07      	ldr	r3, [pc, #28]	; (801353c <SDMMC_Init+0x50>)
 8013520:	4013      	ands	r3, r2
 8013522:	68fa      	ldr	r2, [r7, #12]
 8013524:	431a      	orrs	r2, r3
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801352a:	2300      	movs	r3, #0
}
 801352c:	4618      	mov	r0, r3
 801352e:	3714      	adds	r7, #20
 8013530:	46bd      	mov	sp, r7
 8013532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013536:	b004      	add	sp, #16
 8013538:	4770      	bx	lr
 801353a:	bf00      	nop
 801353c:	ffc02c00 	.word	0xffc02c00

08013540 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8013540:	b480      	push	{r7}
 8013542:	b083      	sub	sp, #12
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801354e:	4618      	mov	r0, r3
 8013550:	370c      	adds	r7, #12
 8013552:	46bd      	mov	sp, r7
 8013554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013558:	4770      	bx	lr

0801355a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 801355a:	b480      	push	{r7}
 801355c:	b083      	sub	sp, #12
 801355e:	af00      	add	r7, sp, #0
 8013560:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	f043 0203 	orr.w	r2, r3, #3
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 801356e:	2300      	movs	r3, #0
}
 8013570:	4618      	mov	r0, r3
 8013572:	370c      	adds	r7, #12
 8013574:	46bd      	mov	sp, r7
 8013576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801357a:	4770      	bx	lr

0801357c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 801357c:	b480      	push	{r7}
 801357e:	b083      	sub	sp, #12
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	f003 0303 	and.w	r3, r3, #3
}
 801358c:	4618      	mov	r0, r3
 801358e:	370c      	adds	r7, #12
 8013590:	46bd      	mov	sp, r7
 8013592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013596:	4770      	bx	lr

08013598 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8013598:	b480      	push	{r7}
 801359a:	b085      	sub	sp, #20
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
 80135a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80135a2:	2300      	movs	r3, #0
 80135a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80135a6:	683b      	ldr	r3, [r7, #0]
 80135a8:	681a      	ldr	r2, [r3, #0]
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80135ae:	683b      	ldr	r3, [r7, #0]
 80135b0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80135b2:	683b      	ldr	r3, [r7, #0]
 80135b4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80135b6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80135b8:	683b      	ldr	r3, [r7, #0]
 80135ba:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80135bc:	431a      	orrs	r2, r3
                       Command->CPSM);
 80135be:	683b      	ldr	r3, [r7, #0]
 80135c0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80135c2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80135c4:	68fa      	ldr	r2, [r7, #12]
 80135c6:	4313      	orrs	r3, r2
 80135c8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	68da      	ldr	r2, [r3, #12]
 80135ce:	4b06      	ldr	r3, [pc, #24]	; (80135e8 <SDMMC_SendCommand+0x50>)
 80135d0:	4013      	ands	r3, r2
 80135d2:	68fa      	ldr	r2, [r7, #12]
 80135d4:	431a      	orrs	r2, r3
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80135da:	2300      	movs	r3, #0
}
 80135dc:	4618      	mov	r0, r3
 80135de:	3714      	adds	r7, #20
 80135e0:	46bd      	mov	sp, r7
 80135e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e6:	4770      	bx	lr
 80135e8:	fffee0c0 	.word	0xfffee0c0

080135ec <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80135ec:	b480      	push	{r7}
 80135ee:	b083      	sub	sp, #12
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	691b      	ldr	r3, [r3, #16]
 80135f8:	b2db      	uxtb	r3, r3
}
 80135fa:	4618      	mov	r0, r3
 80135fc:	370c      	adds	r7, #12
 80135fe:	46bd      	mov	sp, r7
 8013600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013604:	4770      	bx	lr

08013606 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8013606:	b480      	push	{r7}
 8013608:	b085      	sub	sp, #20
 801360a:	af00      	add	r7, sp, #0
 801360c:	6078      	str	r0, [r7, #4]
 801360e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	3314      	adds	r3, #20
 8013614:	461a      	mov	r2, r3
 8013616:	683b      	ldr	r3, [r7, #0]
 8013618:	4413      	add	r3, r2
 801361a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	681b      	ldr	r3, [r3, #0]
}
 8013620:	4618      	mov	r0, r3
 8013622:	3714      	adds	r7, #20
 8013624:	46bd      	mov	sp, r7
 8013626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801362a:	4770      	bx	lr

0801362c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 801362c:	b480      	push	{r7}
 801362e:	b085      	sub	sp, #20
 8013630:	af00      	add	r7, sp, #0
 8013632:	6078      	str	r0, [r7, #4]
 8013634:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8013636:	2300      	movs	r3, #0
 8013638:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801363a:	683b      	ldr	r3, [r7, #0]
 801363c:	681a      	ldr	r2, [r3, #0]
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8013642:	683b      	ldr	r3, [r7, #0]
 8013644:	685a      	ldr	r2, [r3, #4]
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801364a:	683b      	ldr	r3, [r7, #0]
 801364c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801364e:	683b      	ldr	r3, [r7, #0]
 8013650:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8013652:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8013654:	683b      	ldr	r3, [r7, #0]
 8013656:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8013658:	431a      	orrs	r2, r3
                       Data->DPSM);
 801365a:	683b      	ldr	r3, [r7, #0]
 801365c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 801365e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8013660:	68fa      	ldr	r2, [r7, #12]
 8013662:	4313      	orrs	r3, r2
 8013664:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801366a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	431a      	orrs	r2, r3
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8013676:	2300      	movs	r3, #0

}
 8013678:	4618      	mov	r0, r3
 801367a:	3714      	adds	r7, #20
 801367c:	46bd      	mov	sp, r7
 801367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013682:	4770      	bx	lr

08013684 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8013684:	b580      	push	{r7, lr}
 8013686:	b088      	sub	sp, #32
 8013688:	af00      	add	r7, sp, #0
 801368a:	6078      	str	r0, [r7, #4]
 801368c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801368e:	683b      	ldr	r3, [r7, #0]
 8013690:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8013692:	2310      	movs	r3, #16
 8013694:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013696:	f44f 7380 	mov.w	r3, #256	; 0x100
 801369a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801369c:	2300      	movs	r3, #0
 801369e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80136a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80136a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80136a6:	f107 0308 	add.w	r3, r7, #8
 80136aa:	4619      	mov	r1, r3
 80136ac:	6878      	ldr	r0, [r7, #4]
 80136ae:	f7ff ff73 	bl	8013598 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80136b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80136b6:	2110      	movs	r1, #16
 80136b8:	6878      	ldr	r0, [r7, #4]
 80136ba:	f000 f9e3 	bl	8013a84 <SDMMC_GetCmdResp1>
 80136be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80136c0:	69fb      	ldr	r3, [r7, #28]
}
 80136c2:	4618      	mov	r0, r3
 80136c4:	3720      	adds	r7, #32
 80136c6:	46bd      	mov	sp, r7
 80136c8:	bd80      	pop	{r7, pc}

080136ca <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80136ca:	b580      	push	{r7, lr}
 80136cc:	b08a      	sub	sp, #40	; 0x28
 80136ce:	af00      	add	r7, sp, #0
 80136d0:	60f8      	str	r0, [r7, #12]
 80136d2:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80136d6:	683b      	ldr	r3, [r7, #0]
 80136d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80136da:	2307      	movs	r3, #7
 80136dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80136de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80136e2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80136e4:	2300      	movs	r3, #0
 80136e6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80136e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80136ec:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80136ee:	f107 0310 	add.w	r3, r7, #16
 80136f2:	4619      	mov	r1, r3
 80136f4:	68f8      	ldr	r0, [r7, #12]
 80136f6:	f7ff ff4f 	bl	8013598 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80136fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80136fe:	2107      	movs	r1, #7
 8013700:	68f8      	ldr	r0, [r7, #12]
 8013702:	f000 f9bf 	bl	8013a84 <SDMMC_GetCmdResp1>
 8013706:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8013708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801370a:	4618      	mov	r0, r3
 801370c:	3728      	adds	r7, #40	; 0x28
 801370e:	46bd      	mov	sp, r7
 8013710:	bd80      	pop	{r7, pc}

08013712 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8013712:	b580      	push	{r7, lr}
 8013714:	b088      	sub	sp, #32
 8013716:	af00      	add	r7, sp, #0
 8013718:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801371a:	2300      	movs	r3, #0
 801371c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801371e:	2300      	movs	r3, #0
 8013720:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8013722:	2300      	movs	r3, #0
 8013724:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013726:	2300      	movs	r3, #0
 8013728:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801372a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801372e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013730:	f107 0308 	add.w	r3, r7, #8
 8013734:	4619      	mov	r1, r3
 8013736:	6878      	ldr	r0, [r7, #4]
 8013738:	f7ff ff2e 	bl	8013598 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801373c:	6878      	ldr	r0, [r7, #4]
 801373e:	f000 f977 	bl	8013a30 <SDMMC_GetCmdError>
 8013742:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013744:	69fb      	ldr	r3, [r7, #28]
}
 8013746:	4618      	mov	r0, r3
 8013748:	3720      	adds	r7, #32
 801374a:	46bd      	mov	sp, r7
 801374c:	bd80      	pop	{r7, pc}

0801374e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801374e:	b580      	push	{r7, lr}
 8013750:	b088      	sub	sp, #32
 8013752:	af00      	add	r7, sp, #0
 8013754:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8013756:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801375a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801375c:	2308      	movs	r3, #8
 801375e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013760:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013764:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013766:	2300      	movs	r3, #0
 8013768:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801376a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801376e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013770:	f107 0308 	add.w	r3, r7, #8
 8013774:	4619      	mov	r1, r3
 8013776:	6878      	ldr	r0, [r7, #4]
 8013778:	f7ff ff0e 	bl	8013598 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801377c:	6878      	ldr	r0, [r7, #4]
 801377e:	f000 fb6b 	bl	8013e58 <SDMMC_GetCmdResp7>
 8013782:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013784:	69fb      	ldr	r3, [r7, #28]
}
 8013786:	4618      	mov	r0, r3
 8013788:	3720      	adds	r7, #32
 801378a:	46bd      	mov	sp, r7
 801378c:	bd80      	pop	{r7, pc}

0801378e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801378e:	b580      	push	{r7, lr}
 8013790:	b088      	sub	sp, #32
 8013792:	af00      	add	r7, sp, #0
 8013794:	6078      	str	r0, [r7, #4]
 8013796:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8013798:	683b      	ldr	r3, [r7, #0]
 801379a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801379c:	2337      	movs	r3, #55	; 0x37
 801379e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80137a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80137a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80137a6:	2300      	movs	r3, #0
 80137a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80137aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80137ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80137b0:	f107 0308 	add.w	r3, r7, #8
 80137b4:	4619      	mov	r1, r3
 80137b6:	6878      	ldr	r0, [r7, #4]
 80137b8:	f7ff feee 	bl	8013598 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80137bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80137c0:	2137      	movs	r1, #55	; 0x37
 80137c2:	6878      	ldr	r0, [r7, #4]
 80137c4:	f000 f95e 	bl	8013a84 <SDMMC_GetCmdResp1>
 80137c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80137ca:	69fb      	ldr	r3, [r7, #28]
}
 80137cc:	4618      	mov	r0, r3
 80137ce:	3720      	adds	r7, #32
 80137d0:	46bd      	mov	sp, r7
 80137d2:	bd80      	pop	{r7, pc}

080137d4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b088      	sub	sp, #32
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]
 80137dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80137de:	683b      	ldr	r3, [r7, #0]
 80137e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80137e2:	2329      	movs	r3, #41	; 0x29
 80137e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80137e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80137ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80137ec:	2300      	movs	r3, #0
 80137ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80137f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80137f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80137f6:	f107 0308 	add.w	r3, r7, #8
 80137fa:	4619      	mov	r1, r3
 80137fc:	6878      	ldr	r0, [r7, #4]
 80137fe:	f7ff fecb 	bl	8013598 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8013802:	6878      	ldr	r0, [r7, #4]
 8013804:	f000 fa76 	bl	8013cf4 <SDMMC_GetCmdResp3>
 8013808:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801380a:	69fb      	ldr	r3, [r7, #28]
}
 801380c:	4618      	mov	r0, r3
 801380e:	3720      	adds	r7, #32
 8013810:	46bd      	mov	sp, r7
 8013812:	bd80      	pop	{r7, pc}

08013814 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8013814:	b580      	push	{r7, lr}
 8013816:	b088      	sub	sp, #32
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
 801381c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801381e:	683b      	ldr	r3, [r7, #0]
 8013820:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8013822:	2306      	movs	r3, #6
 8013824:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013826:	f44f 7380 	mov.w	r3, #256	; 0x100
 801382a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801382c:	2300      	movs	r3, #0
 801382e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013834:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013836:	f107 0308 	add.w	r3, r7, #8
 801383a:	4619      	mov	r1, r3
 801383c:	6878      	ldr	r0, [r7, #4]
 801383e:	f7ff feab 	bl	8013598 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8013842:	f241 3288 	movw	r2, #5000	; 0x1388
 8013846:	2106      	movs	r1, #6
 8013848:	6878      	ldr	r0, [r7, #4]
 801384a:	f000 f91b 	bl	8013a84 <SDMMC_GetCmdResp1>
 801384e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013850:	69fb      	ldr	r3, [r7, #28]
}
 8013852:	4618      	mov	r0, r3
 8013854:	3720      	adds	r7, #32
 8013856:	46bd      	mov	sp, r7
 8013858:	bd80      	pop	{r7, pc}

0801385a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801385a:	b580      	push	{r7, lr}
 801385c:	b088      	sub	sp, #32
 801385e:	af00      	add	r7, sp, #0
 8013860:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8013862:	2300      	movs	r3, #0
 8013864:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8013866:	2333      	movs	r3, #51	; 0x33
 8013868:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801386a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801386e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013870:	2300      	movs	r3, #0
 8013872:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013878:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801387a:	f107 0308 	add.w	r3, r7, #8
 801387e:	4619      	mov	r1, r3
 8013880:	6878      	ldr	r0, [r7, #4]
 8013882:	f7ff fe89 	bl	8013598 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8013886:	f241 3288 	movw	r2, #5000	; 0x1388
 801388a:	2133      	movs	r1, #51	; 0x33
 801388c:	6878      	ldr	r0, [r7, #4]
 801388e:	f000 f8f9 	bl	8013a84 <SDMMC_GetCmdResp1>
 8013892:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013894:	69fb      	ldr	r3, [r7, #28]
}
 8013896:	4618      	mov	r0, r3
 8013898:	3720      	adds	r7, #32
 801389a:	46bd      	mov	sp, r7
 801389c:	bd80      	pop	{r7, pc}

0801389e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801389e:	b580      	push	{r7, lr}
 80138a0:	b088      	sub	sp, #32
 80138a2:	af00      	add	r7, sp, #0
 80138a4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80138a6:	2300      	movs	r3, #0
 80138a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80138aa:	2302      	movs	r3, #2
 80138ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80138ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80138b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80138b4:	2300      	movs	r3, #0
 80138b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80138b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80138bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80138be:	f107 0308 	add.w	r3, r7, #8
 80138c2:	4619      	mov	r1, r3
 80138c4:	6878      	ldr	r0, [r7, #4]
 80138c6:	f7ff fe67 	bl	8013598 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80138ca:	6878      	ldr	r0, [r7, #4]
 80138cc:	f000 f9ca 	bl	8013c64 <SDMMC_GetCmdResp2>
 80138d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80138d2:	69fb      	ldr	r3, [r7, #28]
}
 80138d4:	4618      	mov	r0, r3
 80138d6:	3720      	adds	r7, #32
 80138d8:	46bd      	mov	sp, r7
 80138da:	bd80      	pop	{r7, pc}

080138dc <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80138dc:	b580      	push	{r7, lr}
 80138de:	b088      	sub	sp, #32
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	6078      	str	r0, [r7, #4]
 80138e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80138e6:	683b      	ldr	r3, [r7, #0]
 80138e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80138ea:	2309      	movs	r3, #9
 80138ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80138ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80138f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80138f4:	2300      	movs	r3, #0
 80138f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80138f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80138fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80138fe:	f107 0308 	add.w	r3, r7, #8
 8013902:	4619      	mov	r1, r3
 8013904:	6878      	ldr	r0, [r7, #4]
 8013906:	f7ff fe47 	bl	8013598 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801390a:	6878      	ldr	r0, [r7, #4]
 801390c:	f000 f9aa 	bl	8013c64 <SDMMC_GetCmdResp2>
 8013910:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013912:	69fb      	ldr	r3, [r7, #28]
}
 8013914:	4618      	mov	r0, r3
 8013916:	3720      	adds	r7, #32
 8013918:	46bd      	mov	sp, r7
 801391a:	bd80      	pop	{r7, pc}

0801391c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801391c:	b580      	push	{r7, lr}
 801391e:	b088      	sub	sp, #32
 8013920:	af00      	add	r7, sp, #0
 8013922:	6078      	str	r0, [r7, #4]
 8013924:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8013926:	2300      	movs	r3, #0
 8013928:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801392a:	2303      	movs	r3, #3
 801392c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801392e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013932:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013934:	2300      	movs	r3, #0
 8013936:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801393c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801393e:	f107 0308 	add.w	r3, r7, #8
 8013942:	4619      	mov	r1, r3
 8013944:	6878      	ldr	r0, [r7, #4]
 8013946:	f7ff fe27 	bl	8013598 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801394a:	683a      	ldr	r2, [r7, #0]
 801394c:	2103      	movs	r1, #3
 801394e:	6878      	ldr	r0, [r7, #4]
 8013950:	f000 fa0c 	bl	8013d6c <SDMMC_GetCmdResp6>
 8013954:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013956:	69fb      	ldr	r3, [r7, #28]
}
 8013958:	4618      	mov	r0, r3
 801395a:	3720      	adds	r7, #32
 801395c:	46bd      	mov	sp, r7
 801395e:	bd80      	pop	{r7, pc}

08013960 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013960:	b580      	push	{r7, lr}
 8013962:	b088      	sub	sp, #32
 8013964:	af00      	add	r7, sp, #0
 8013966:	6078      	str	r0, [r7, #4]
 8013968:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801396a:	683b      	ldr	r3, [r7, #0]
 801396c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801396e:	230d      	movs	r3, #13
 8013970:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013972:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013976:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013978:	2300      	movs	r3, #0
 801397a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801397c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013980:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013982:	f107 0308 	add.w	r3, r7, #8
 8013986:	4619      	mov	r1, r3
 8013988:	6878      	ldr	r0, [r7, #4]
 801398a:	f7ff fe05 	bl	8013598 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801398e:	f241 3288 	movw	r2, #5000	; 0x1388
 8013992:	210d      	movs	r1, #13
 8013994:	6878      	ldr	r0, [r7, #4]
 8013996:	f000 f875 	bl	8013a84 <SDMMC_GetCmdResp1>
 801399a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801399c:	69fb      	ldr	r3, [r7, #28]
}
 801399e:	4618      	mov	r0, r3
 80139a0:	3720      	adds	r7, #32
 80139a2:	46bd      	mov	sp, r7
 80139a4:	bd80      	pop	{r7, pc}

080139a6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80139a6:	b580      	push	{r7, lr}
 80139a8:	b088      	sub	sp, #32
 80139aa:	af00      	add	r7, sp, #0
 80139ac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80139ae:	2300      	movs	r3, #0
 80139b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80139b2:	230d      	movs	r3, #13
 80139b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80139b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80139ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80139bc:	2300      	movs	r3, #0
 80139be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80139c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80139c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80139c6:	f107 0308 	add.w	r3, r7, #8
 80139ca:	4619      	mov	r1, r3
 80139cc:	6878      	ldr	r0, [r7, #4]
 80139ce:	f7ff fde3 	bl	8013598 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80139d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80139d6:	210d      	movs	r1, #13
 80139d8:	6878      	ldr	r0, [r7, #4]
 80139da:	f000 f853 	bl	8013a84 <SDMMC_GetCmdResp1>
 80139de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80139e0:	69fb      	ldr	r3, [r7, #28]
}
 80139e2:	4618      	mov	r0, r3
 80139e4:	3720      	adds	r7, #32
 80139e6:	46bd      	mov	sp, r7
 80139e8:	bd80      	pop	{r7, pc}

080139ea <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 80139ea:	b580      	push	{r7, lr}
 80139ec:	b088      	sub	sp, #32
 80139ee:	af00      	add	r7, sp, #0
 80139f0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 80139f2:	2300      	movs	r3, #0
 80139f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 80139f6:	230b      	movs	r3, #11
 80139f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80139fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80139fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013a00:	2300      	movs	r3, #0
 8013a02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013a08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013a0a:	f107 0308 	add.w	r3, r7, #8
 8013a0e:	4619      	mov	r1, r3
 8013a10:	6878      	ldr	r0, [r7, #4]
 8013a12:	f7ff fdc1 	bl	8013598 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8013a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8013a1a:	210b      	movs	r1, #11
 8013a1c:	6878      	ldr	r0, [r7, #4]
 8013a1e:	f000 f831 	bl	8013a84 <SDMMC_GetCmdResp1>
 8013a22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013a24:	69fb      	ldr	r3, [r7, #28]
}
 8013a26:	4618      	mov	r0, r3
 8013a28:	3720      	adds	r7, #32
 8013a2a:	46bd      	mov	sp, r7
 8013a2c:	bd80      	pop	{r7, pc}
	...

08013a30 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8013a30:	b490      	push	{r4, r7}
 8013a32:	b082      	sub	sp, #8
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013a38:	4b0f      	ldr	r3, [pc, #60]	; (8013a78 <SDMMC_GetCmdError+0x48>)
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	4a0f      	ldr	r2, [pc, #60]	; (8013a7c <SDMMC_GetCmdError+0x4c>)
 8013a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8013a42:	0a5b      	lsrs	r3, r3, #9
 8013a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8013a48:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8013a4c:	4623      	mov	r3, r4
 8013a4e:	1e5c      	subs	r4, r3, #1
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d102      	bne.n	8013a5a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013a54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013a58:	e009      	b.n	8013a6e <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d0f2      	beq.n	8013a4c <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	4a05      	ldr	r2, [pc, #20]	; (8013a80 <SDMMC_GetCmdError+0x50>)
 8013a6a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8013a6c:	2300      	movs	r3, #0
}
 8013a6e:	4618      	mov	r0, r3
 8013a70:	3708      	adds	r7, #8
 8013a72:	46bd      	mov	sp, r7
 8013a74:	bc90      	pop	{r4, r7}
 8013a76:	4770      	bx	lr
 8013a78:	24000010 	.word	0x24000010
 8013a7c:	10624dd3 	.word	0x10624dd3
 8013a80:	002000c5 	.word	0x002000c5

08013a84 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8013a84:	b590      	push	{r4, r7, lr}
 8013a86:	b087      	sub	sp, #28
 8013a88:	af00      	add	r7, sp, #0
 8013a8a:	60f8      	str	r0, [r7, #12]
 8013a8c:	460b      	mov	r3, r1
 8013a8e:	607a      	str	r2, [r7, #4]
 8013a90:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013a92:	4b6f      	ldr	r3, [pc, #444]	; (8013c50 <SDMMC_GetCmdResp1+0x1cc>)
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	4a6f      	ldr	r2, [pc, #444]	; (8013c54 <SDMMC_GetCmdResp1+0x1d0>)
 8013a98:	fba2 2303 	umull	r2, r3, r2, r3
 8013a9c:	0a5b      	lsrs	r3, r3, #9
 8013a9e:	687a      	ldr	r2, [r7, #4]
 8013aa0:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8013aa4:	4623      	mov	r3, r4
 8013aa6:	1e5c      	subs	r4, r3, #1
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d102      	bne.n	8013ab2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013aac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013ab0:	e0c9      	b.n	8013c46 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ab6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8013ab8:	697a      	ldr	r2, [r7, #20]
 8013aba:	4b67      	ldr	r3, [pc, #412]	; (8013c58 <SDMMC_GetCmdResp1+0x1d4>)
 8013abc:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d0f0      	beq.n	8013aa4 <SDMMC_GetCmdResp1+0x20>
 8013ac2:	697b      	ldr	r3, [r7, #20]
 8013ac4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d1eb      	bne.n	8013aa4 <SDMMC_GetCmdResp1+0x20>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ad0:	f003 0304 	and.w	r3, r3, #4
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d004      	beq.n	8013ae2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	2204      	movs	r2, #4
 8013adc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013ade:	2304      	movs	r3, #4
 8013ae0:	e0b1      	b.n	8013c46 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ae6:	f003 0301 	and.w	r3, r3, #1
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d004      	beq.n	8013af8 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	2201      	movs	r2, #1
 8013af2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013af4:	2301      	movs	r3, #1
 8013af6:	e0a6      	b.n	8013c46 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	4a58      	ldr	r2, [pc, #352]	; (8013c5c <SDMMC_GetCmdResp1+0x1d8>)
 8013afc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013afe:	68f8      	ldr	r0, [r7, #12]
 8013b00:	f7ff fd74 	bl	80135ec <SDMMC_GetCommandResponse>
 8013b04:	4603      	mov	r3, r0
 8013b06:	461a      	mov	r2, r3
 8013b08:	7afb      	ldrb	r3, [r7, #11]
 8013b0a:	4293      	cmp	r3, r2
 8013b0c:	d001      	beq.n	8013b12 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013b0e:	2301      	movs	r3, #1
 8013b10:	e099      	b.n	8013c46 <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013b12:	2100      	movs	r1, #0
 8013b14:	68f8      	ldr	r0, [r7, #12]
 8013b16:	f7ff fd76 	bl	8013606 <SDMMC_GetResponse>
 8013b1a:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8013b1c:	693a      	ldr	r2, [r7, #16]
 8013b1e:	4b50      	ldr	r3, [pc, #320]	; (8013c60 <SDMMC_GetCmdResp1+0x1dc>)
 8013b20:	4013      	ands	r3, r2
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d101      	bne.n	8013b2a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8013b26:	2300      	movs	r3, #0
 8013b28:	e08d      	b.n	8013c46 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8013b2a:	693b      	ldr	r3, [r7, #16]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	da02      	bge.n	8013b36 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8013b30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8013b34:	e087      	b.n	8013c46 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8013b36:	693b      	ldr	r3, [r7, #16]
 8013b38:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d001      	beq.n	8013b44 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8013b40:	2340      	movs	r3, #64	; 0x40
 8013b42:	e080      	b.n	8013c46 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8013b44:	693b      	ldr	r3, [r7, #16]
 8013b46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d001      	beq.n	8013b52 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8013b4e:	2380      	movs	r3, #128	; 0x80
 8013b50:	e079      	b.n	8013c46 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8013b52:	693b      	ldr	r3, [r7, #16]
 8013b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d002      	beq.n	8013b62 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8013b5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013b60:	e071      	b.n	8013c46 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8013b62:	693b      	ldr	r3, [r7, #16]
 8013b64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d002      	beq.n	8013b72 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8013b6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013b70:	e069      	b.n	8013c46 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8013b72:	693b      	ldr	r3, [r7, #16]
 8013b74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d002      	beq.n	8013b82 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8013b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013b80:	e061      	b.n	8013c46 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8013b82:	693b      	ldr	r3, [r7, #16]
 8013b84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d002      	beq.n	8013b92 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8013b8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013b90:	e059      	b.n	8013c46 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8013b92:	693b      	ldr	r3, [r7, #16]
 8013b94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d002      	beq.n	8013ba2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013ba0:	e051      	b.n	8013c46 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8013ba2:	693b      	ldr	r3, [r7, #16]
 8013ba4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d002      	beq.n	8013bb2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013bac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013bb0:	e049      	b.n	8013c46 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8013bb2:	693b      	ldr	r3, [r7, #16]
 8013bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d002      	beq.n	8013bc2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013bbc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013bc0:	e041      	b.n	8013c46 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8013bc2:	693b      	ldr	r3, [r7, #16]
 8013bc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d002      	beq.n	8013bd2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8013bcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013bd0:	e039      	b.n	8013c46 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8013bd2:	693b      	ldr	r3, [r7, #16]
 8013bd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d002      	beq.n	8013be2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013bdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013be0:	e031      	b.n	8013c46 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8013be2:	693b      	ldr	r3, [r7, #16]
 8013be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d002      	beq.n	8013bf2 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013bec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8013bf0:	e029      	b.n	8013c46 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8013bf2:	693b      	ldr	r3, [r7, #16]
 8013bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d002      	beq.n	8013c02 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013bfc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013c00:	e021      	b.n	8013c46 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8013c02:	693b      	ldr	r3, [r7, #16]
 8013c04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d002      	beq.n	8013c12 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013c0c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8013c10:	e019      	b.n	8013c46 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8013c12:	693b      	ldr	r3, [r7, #16]
 8013c14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d002      	beq.n	8013c22 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013c1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8013c20:	e011      	b.n	8013c46 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8013c22:	693b      	ldr	r3, [r7, #16]
 8013c24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d002      	beq.n	8013c32 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8013c2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013c30:	e009      	b.n	8013c46 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8013c32:	693b      	ldr	r3, [r7, #16]
 8013c34:	f003 0308 	and.w	r3, r3, #8
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d002      	beq.n	8013c42 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8013c3c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8013c40:	e001      	b.n	8013c46 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013c42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8013c46:	4618      	mov	r0, r3
 8013c48:	371c      	adds	r7, #28
 8013c4a:	46bd      	mov	sp, r7
 8013c4c:	bd90      	pop	{r4, r7, pc}
 8013c4e:	bf00      	nop
 8013c50:	24000010 	.word	0x24000010
 8013c54:	10624dd3 	.word	0x10624dd3
 8013c58:	00200045 	.word	0x00200045
 8013c5c:	002000c5 	.word	0x002000c5
 8013c60:	fdffe008 	.word	0xfdffe008

08013c64 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8013c64:	b490      	push	{r4, r7}
 8013c66:	b084      	sub	sp, #16
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013c6c:	4b1e      	ldr	r3, [pc, #120]	; (8013ce8 <SDMMC_GetCmdResp2+0x84>)
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	4a1e      	ldr	r2, [pc, #120]	; (8013cec <SDMMC_GetCmdResp2+0x88>)
 8013c72:	fba2 2303 	umull	r2, r3, r2, r3
 8013c76:	0a5b      	lsrs	r3, r3, #9
 8013c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8013c7c:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8013c80:	4623      	mov	r3, r4
 8013c82:	1e5c      	subs	r4, r3, #1
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d102      	bne.n	8013c8e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013c88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013c8c:	e026      	b.n	8013cdc <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c92:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d0f0      	beq.n	8013c80 <SDMMC_GetCmdResp2+0x1c>
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d1eb      	bne.n	8013c80 <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013cac:	f003 0304 	and.w	r3, r3, #4
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d004      	beq.n	8013cbe <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	2204      	movs	r2, #4
 8013cb8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013cba:	2304      	movs	r3, #4
 8013cbc:	e00e      	b.n	8013cdc <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013cc2:	f003 0301 	and.w	r3, r3, #1
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d004      	beq.n	8013cd4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	2201      	movs	r2, #1
 8013cce:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013cd0:	2301      	movs	r3, #1
 8013cd2:	e003      	b.n	8013cdc <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	4a06      	ldr	r2, [pc, #24]	; (8013cf0 <SDMMC_GetCmdResp2+0x8c>)
 8013cd8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8013cda:	2300      	movs	r3, #0
}
 8013cdc:	4618      	mov	r0, r3
 8013cde:	3710      	adds	r7, #16
 8013ce0:	46bd      	mov	sp, r7
 8013ce2:	bc90      	pop	{r4, r7}
 8013ce4:	4770      	bx	lr
 8013ce6:	bf00      	nop
 8013ce8:	24000010 	.word	0x24000010
 8013cec:	10624dd3 	.word	0x10624dd3
 8013cf0:	002000c5 	.word	0x002000c5

08013cf4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8013cf4:	b490      	push	{r4, r7}
 8013cf6:	b084      	sub	sp, #16
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013cfc:	4b18      	ldr	r3, [pc, #96]	; (8013d60 <SDMMC_GetCmdResp3+0x6c>)
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	4a18      	ldr	r2, [pc, #96]	; (8013d64 <SDMMC_GetCmdResp3+0x70>)
 8013d02:	fba2 2303 	umull	r2, r3, r2, r3
 8013d06:	0a5b      	lsrs	r3, r3, #9
 8013d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8013d0c:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8013d10:	4623      	mov	r3, r4
 8013d12:	1e5c      	subs	r4, r3, #1
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d102      	bne.n	8013d1e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013d18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013d1c:	e01b      	b.n	8013d56 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d22:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d0f0      	beq.n	8013d10 <SDMMC_GetCmdResp3+0x1c>
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d1eb      	bne.n	8013d10 <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d3c:	f003 0304 	and.w	r3, r3, #4
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d004      	beq.n	8013d4e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	2204      	movs	r2, #4
 8013d48:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013d4a:	2304      	movs	r3, #4
 8013d4c:	e003      	b.n	8013d56 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	4a05      	ldr	r2, [pc, #20]	; (8013d68 <SDMMC_GetCmdResp3+0x74>)
 8013d52:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8013d54:	2300      	movs	r3, #0
}
 8013d56:	4618      	mov	r0, r3
 8013d58:	3710      	adds	r7, #16
 8013d5a:	46bd      	mov	sp, r7
 8013d5c:	bc90      	pop	{r4, r7}
 8013d5e:	4770      	bx	lr
 8013d60:	24000010 	.word	0x24000010
 8013d64:	10624dd3 	.word	0x10624dd3
 8013d68:	002000c5 	.word	0x002000c5

08013d6c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8013d6c:	b590      	push	{r4, r7, lr}
 8013d6e:	b087      	sub	sp, #28
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	60f8      	str	r0, [r7, #12]
 8013d74:	460b      	mov	r3, r1
 8013d76:	607a      	str	r2, [r7, #4]
 8013d78:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013d7a:	4b34      	ldr	r3, [pc, #208]	; (8013e4c <SDMMC_GetCmdResp6+0xe0>)
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	4a34      	ldr	r2, [pc, #208]	; (8013e50 <SDMMC_GetCmdResp6+0xe4>)
 8013d80:	fba2 2303 	umull	r2, r3, r2, r3
 8013d84:	0a5b      	lsrs	r3, r3, #9
 8013d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8013d8a:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8013d8e:	4623      	mov	r3, r4
 8013d90:	1e5c      	subs	r4, r3, #1
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d102      	bne.n	8013d9c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013d96:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013d9a:	e052      	b.n	8013e42 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013da0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013da2:	697b      	ldr	r3, [r7, #20]
 8013da4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d0f0      	beq.n	8013d8e <SDMMC_GetCmdResp6+0x22>
 8013dac:	697b      	ldr	r3, [r7, #20]
 8013dae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d1eb      	bne.n	8013d8e <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013dba:	f003 0304 	and.w	r3, r3, #4
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d004      	beq.n	8013dcc <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	2204      	movs	r2, #4
 8013dc6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013dc8:	2304      	movs	r3, #4
 8013dca:	e03a      	b.n	8013e42 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013dd0:	f003 0301 	and.w	r3, r3, #1
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d004      	beq.n	8013de2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	2201      	movs	r2, #1
 8013ddc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013dde:	2301      	movs	r3, #1
 8013de0:	e02f      	b.n	8013e42 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013de2:	68f8      	ldr	r0, [r7, #12]
 8013de4:	f7ff fc02 	bl	80135ec <SDMMC_GetCommandResponse>
 8013de8:	4603      	mov	r3, r0
 8013dea:	461a      	mov	r2, r3
 8013dec:	7afb      	ldrb	r3, [r7, #11]
 8013dee:	4293      	cmp	r3, r2
 8013df0:	d001      	beq.n	8013df6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013df2:	2301      	movs	r3, #1
 8013df4:	e025      	b.n	8013e42 <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	4a16      	ldr	r2, [pc, #88]	; (8013e54 <SDMMC_GetCmdResp6+0xe8>)
 8013dfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013dfc:	2100      	movs	r1, #0
 8013dfe:	68f8      	ldr	r0, [r7, #12]
 8013e00:	f7ff fc01 	bl	8013606 <SDMMC_GetResponse>
 8013e04:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8013e06:	693b      	ldr	r3, [r7, #16]
 8013e08:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d106      	bne.n	8013e1e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8013e10:	693b      	ldr	r3, [r7, #16]
 8013e12:	0c1b      	lsrs	r3, r3, #16
 8013e14:	b29a      	uxth	r2, r3
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8013e1a:	2300      	movs	r3, #0
 8013e1c:	e011      	b.n	8013e42 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8013e1e:	693b      	ldr	r3, [r7, #16]
 8013e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d002      	beq.n	8013e2e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013e28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013e2c:	e009      	b.n	8013e42 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8013e2e:	693b      	ldr	r3, [r7, #16]
 8013e30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d002      	beq.n	8013e3e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013e3c:	e001      	b.n	8013e42 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013e3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8013e42:	4618      	mov	r0, r3
 8013e44:	371c      	adds	r7, #28
 8013e46:	46bd      	mov	sp, r7
 8013e48:	bd90      	pop	{r4, r7, pc}
 8013e4a:	bf00      	nop
 8013e4c:	24000010 	.word	0x24000010
 8013e50:	10624dd3 	.word	0x10624dd3
 8013e54:	002000c5 	.word	0x002000c5

08013e58 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8013e58:	b490      	push	{r4, r7}
 8013e5a:	b084      	sub	sp, #16
 8013e5c:	af00      	add	r7, sp, #0
 8013e5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013e60:	4b21      	ldr	r3, [pc, #132]	; (8013ee8 <SDMMC_GetCmdResp7+0x90>)
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	4a21      	ldr	r2, [pc, #132]	; (8013eec <SDMMC_GetCmdResp7+0x94>)
 8013e66:	fba2 2303 	umull	r2, r3, r2, r3
 8013e6a:	0a5b      	lsrs	r3, r3, #9
 8013e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8013e70:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8013e74:	4623      	mov	r3, r4
 8013e76:	1e5c      	subs	r4, r3, #1
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d102      	bne.n	8013e82 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013e7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013e80:	e02c      	b.n	8013edc <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e86:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d0f0      	beq.n	8013e74 <SDMMC_GetCmdResp7+0x1c>
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d1eb      	bne.n	8013e74 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ea0:	f003 0304 	and.w	r3, r3, #4
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d004      	beq.n	8013eb2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	2204      	movs	r2, #4
 8013eac:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013eae:	2304      	movs	r3, #4
 8013eb0:	e014      	b.n	8013edc <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013eb6:	f003 0301 	and.w	r3, r3, #1
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d004      	beq.n	8013ec8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	2201      	movs	r2, #1
 8013ec2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013ec4:	2301      	movs	r3, #1
 8013ec6:	e009      	b.n	8013edc <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d002      	beq.n	8013eda <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	2240      	movs	r2, #64	; 0x40
 8013ed8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8013eda:	2300      	movs	r3, #0

}
 8013edc:	4618      	mov	r0, r3
 8013ede:	3710      	adds	r7, #16
 8013ee0:	46bd      	mov	sp, r7
 8013ee2:	bc90      	pop	{r4, r7}
 8013ee4:	4770      	bx	lr
 8013ee6:	bf00      	nop
 8013ee8:	24000010 	.word	0x24000010
 8013eec:	10624dd3 	.word	0x10624dd3

08013ef0 <atof>:
 8013ef0:	2100      	movs	r1, #0
 8013ef2:	f001 bcc5 	b.w	8015880 <strtod>

08013ef6 <atoi>:
 8013ef6:	220a      	movs	r2, #10
 8013ef8:	2100      	movs	r1, #0
 8013efa:	f001 bd53 	b.w	80159a4 <strtol>
	...

08013f00 <__errno>:
 8013f00:	4b01      	ldr	r3, [pc, #4]	; (8013f08 <__errno+0x8>)
 8013f02:	6818      	ldr	r0, [r3, #0]
 8013f04:	4770      	bx	lr
 8013f06:	bf00      	nop
 8013f08:	24000020 	.word	0x24000020

08013f0c <__libc_init_array>:
 8013f0c:	b570      	push	{r4, r5, r6, lr}
 8013f0e:	4d0d      	ldr	r5, [pc, #52]	; (8013f44 <__libc_init_array+0x38>)
 8013f10:	4c0d      	ldr	r4, [pc, #52]	; (8013f48 <__libc_init_array+0x3c>)
 8013f12:	1b64      	subs	r4, r4, r5
 8013f14:	10a4      	asrs	r4, r4, #2
 8013f16:	2600      	movs	r6, #0
 8013f18:	42a6      	cmp	r6, r4
 8013f1a:	d109      	bne.n	8013f30 <__libc_init_array+0x24>
 8013f1c:	4d0b      	ldr	r5, [pc, #44]	; (8013f4c <__libc_init_array+0x40>)
 8013f1e:	4c0c      	ldr	r4, [pc, #48]	; (8013f50 <__libc_init_array+0x44>)
 8013f20:	f005 fa1c 	bl	801935c <_init>
 8013f24:	1b64      	subs	r4, r4, r5
 8013f26:	10a4      	asrs	r4, r4, #2
 8013f28:	2600      	movs	r6, #0
 8013f2a:	42a6      	cmp	r6, r4
 8013f2c:	d105      	bne.n	8013f3a <__libc_init_array+0x2e>
 8013f2e:	bd70      	pop	{r4, r5, r6, pc}
 8013f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8013f34:	4798      	blx	r3
 8013f36:	3601      	adds	r6, #1
 8013f38:	e7ee      	b.n	8013f18 <__libc_init_array+0xc>
 8013f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8013f3e:	4798      	blx	r3
 8013f40:	3601      	adds	r6, #1
 8013f42:	e7f2      	b.n	8013f2a <__libc_init_array+0x1e>
 8013f44:	08019bb8 	.word	0x08019bb8
 8013f48:	08019bb8 	.word	0x08019bb8
 8013f4c:	08019bb8 	.word	0x08019bb8
 8013f50:	08019bbc 	.word	0x08019bbc

08013f54 <__itoa>:
 8013f54:	1e93      	subs	r3, r2, #2
 8013f56:	2b22      	cmp	r3, #34	; 0x22
 8013f58:	b510      	push	{r4, lr}
 8013f5a:	460c      	mov	r4, r1
 8013f5c:	d904      	bls.n	8013f68 <__itoa+0x14>
 8013f5e:	2300      	movs	r3, #0
 8013f60:	700b      	strb	r3, [r1, #0]
 8013f62:	461c      	mov	r4, r3
 8013f64:	4620      	mov	r0, r4
 8013f66:	bd10      	pop	{r4, pc}
 8013f68:	2a0a      	cmp	r2, #10
 8013f6a:	d109      	bne.n	8013f80 <__itoa+0x2c>
 8013f6c:	2800      	cmp	r0, #0
 8013f6e:	da07      	bge.n	8013f80 <__itoa+0x2c>
 8013f70:	232d      	movs	r3, #45	; 0x2d
 8013f72:	700b      	strb	r3, [r1, #0]
 8013f74:	4240      	negs	r0, r0
 8013f76:	2101      	movs	r1, #1
 8013f78:	4421      	add	r1, r4
 8013f7a:	f001 fd1d 	bl	80159b8 <__utoa>
 8013f7e:	e7f1      	b.n	8013f64 <__itoa+0x10>
 8013f80:	2100      	movs	r1, #0
 8013f82:	e7f9      	b.n	8013f78 <__itoa+0x24>

08013f84 <itoa>:
 8013f84:	f7ff bfe6 	b.w	8013f54 <__itoa>

08013f88 <memset>:
 8013f88:	4402      	add	r2, r0
 8013f8a:	4603      	mov	r3, r0
 8013f8c:	4293      	cmp	r3, r2
 8013f8e:	d100      	bne.n	8013f92 <memset+0xa>
 8013f90:	4770      	bx	lr
 8013f92:	f803 1b01 	strb.w	r1, [r3], #1
 8013f96:	e7f9      	b.n	8013f8c <memset+0x4>

08013f98 <__cvt>:
 8013f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f9a:	ed2d 8b02 	vpush	{d8}
 8013f9e:	eeb0 8b40 	vmov.f64	d8, d0
 8013fa2:	b085      	sub	sp, #20
 8013fa4:	4617      	mov	r7, r2
 8013fa6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8013fa8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8013faa:	ee18 2a90 	vmov	r2, s17
 8013fae:	f025 0520 	bic.w	r5, r5, #32
 8013fb2:	2a00      	cmp	r2, #0
 8013fb4:	bfb6      	itet	lt
 8013fb6:	222d      	movlt	r2, #45	; 0x2d
 8013fb8:	2200      	movge	r2, #0
 8013fba:	eeb1 8b40 	vneglt.f64	d8, d0
 8013fbe:	2d46      	cmp	r5, #70	; 0x46
 8013fc0:	460c      	mov	r4, r1
 8013fc2:	701a      	strb	r2, [r3, #0]
 8013fc4:	d004      	beq.n	8013fd0 <__cvt+0x38>
 8013fc6:	2d45      	cmp	r5, #69	; 0x45
 8013fc8:	d100      	bne.n	8013fcc <__cvt+0x34>
 8013fca:	3401      	adds	r4, #1
 8013fcc:	2102      	movs	r1, #2
 8013fce:	e000      	b.n	8013fd2 <__cvt+0x3a>
 8013fd0:	2103      	movs	r1, #3
 8013fd2:	ab03      	add	r3, sp, #12
 8013fd4:	9301      	str	r3, [sp, #4]
 8013fd6:	ab02      	add	r3, sp, #8
 8013fd8:	9300      	str	r3, [sp, #0]
 8013fda:	4622      	mov	r2, r4
 8013fdc:	4633      	mov	r3, r6
 8013fde:	eeb0 0b48 	vmov.f64	d0, d8
 8013fe2:	f001 fdb9 	bl	8015b58 <_dtoa_r>
 8013fe6:	2d47      	cmp	r5, #71	; 0x47
 8013fe8:	d109      	bne.n	8013ffe <__cvt+0x66>
 8013fea:	07fb      	lsls	r3, r7, #31
 8013fec:	d407      	bmi.n	8013ffe <__cvt+0x66>
 8013fee:	9b03      	ldr	r3, [sp, #12]
 8013ff0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013ff2:	1a1b      	subs	r3, r3, r0
 8013ff4:	6013      	str	r3, [r2, #0]
 8013ff6:	b005      	add	sp, #20
 8013ff8:	ecbd 8b02 	vpop	{d8}
 8013ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ffe:	2d46      	cmp	r5, #70	; 0x46
 8014000:	eb00 0204 	add.w	r2, r0, r4
 8014004:	d10c      	bne.n	8014020 <__cvt+0x88>
 8014006:	7803      	ldrb	r3, [r0, #0]
 8014008:	2b30      	cmp	r3, #48	; 0x30
 801400a:	d107      	bne.n	801401c <__cvt+0x84>
 801400c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014014:	bf1c      	itt	ne
 8014016:	f1c4 0401 	rsbne	r4, r4, #1
 801401a:	6034      	strne	r4, [r6, #0]
 801401c:	6833      	ldr	r3, [r6, #0]
 801401e:	441a      	add	r2, r3
 8014020:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014028:	bf08      	it	eq
 801402a:	9203      	streq	r2, [sp, #12]
 801402c:	2130      	movs	r1, #48	; 0x30
 801402e:	9b03      	ldr	r3, [sp, #12]
 8014030:	4293      	cmp	r3, r2
 8014032:	d2dc      	bcs.n	8013fee <__cvt+0x56>
 8014034:	1c5c      	adds	r4, r3, #1
 8014036:	9403      	str	r4, [sp, #12]
 8014038:	7019      	strb	r1, [r3, #0]
 801403a:	e7f8      	b.n	801402e <__cvt+0x96>

0801403c <__exponent>:
 801403c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801403e:	4603      	mov	r3, r0
 8014040:	2900      	cmp	r1, #0
 8014042:	bfb8      	it	lt
 8014044:	4249      	neglt	r1, r1
 8014046:	f803 2b02 	strb.w	r2, [r3], #2
 801404a:	bfb4      	ite	lt
 801404c:	222d      	movlt	r2, #45	; 0x2d
 801404e:	222b      	movge	r2, #43	; 0x2b
 8014050:	2909      	cmp	r1, #9
 8014052:	7042      	strb	r2, [r0, #1]
 8014054:	dd2a      	ble.n	80140ac <__exponent+0x70>
 8014056:	f10d 0407 	add.w	r4, sp, #7
 801405a:	46a4      	mov	ip, r4
 801405c:	270a      	movs	r7, #10
 801405e:	46a6      	mov	lr, r4
 8014060:	460a      	mov	r2, r1
 8014062:	fb91 f6f7 	sdiv	r6, r1, r7
 8014066:	fb07 1516 	mls	r5, r7, r6, r1
 801406a:	3530      	adds	r5, #48	; 0x30
 801406c:	2a63      	cmp	r2, #99	; 0x63
 801406e:	f104 34ff 	add.w	r4, r4, #4294967295
 8014072:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8014076:	4631      	mov	r1, r6
 8014078:	dcf1      	bgt.n	801405e <__exponent+0x22>
 801407a:	3130      	adds	r1, #48	; 0x30
 801407c:	f1ae 0502 	sub.w	r5, lr, #2
 8014080:	f804 1c01 	strb.w	r1, [r4, #-1]
 8014084:	1c44      	adds	r4, r0, #1
 8014086:	4629      	mov	r1, r5
 8014088:	4561      	cmp	r1, ip
 801408a:	d30a      	bcc.n	80140a2 <__exponent+0x66>
 801408c:	f10d 0209 	add.w	r2, sp, #9
 8014090:	eba2 020e 	sub.w	r2, r2, lr
 8014094:	4565      	cmp	r5, ip
 8014096:	bf88      	it	hi
 8014098:	2200      	movhi	r2, #0
 801409a:	4413      	add	r3, r2
 801409c:	1a18      	subs	r0, r3, r0
 801409e:	b003      	add	sp, #12
 80140a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80140a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80140a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80140aa:	e7ed      	b.n	8014088 <__exponent+0x4c>
 80140ac:	2330      	movs	r3, #48	; 0x30
 80140ae:	3130      	adds	r1, #48	; 0x30
 80140b0:	7083      	strb	r3, [r0, #2]
 80140b2:	70c1      	strb	r1, [r0, #3]
 80140b4:	1d03      	adds	r3, r0, #4
 80140b6:	e7f1      	b.n	801409c <__exponent+0x60>

080140b8 <_printf_float>:
 80140b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140bc:	b08b      	sub	sp, #44	; 0x2c
 80140be:	460c      	mov	r4, r1
 80140c0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80140c4:	4616      	mov	r6, r2
 80140c6:	461f      	mov	r7, r3
 80140c8:	4605      	mov	r5, r0
 80140ca:	f002 fe37 	bl	8016d3c <_localeconv_r>
 80140ce:	f8d0 b000 	ldr.w	fp, [r0]
 80140d2:	4658      	mov	r0, fp
 80140d4:	f7ec f904 	bl	80002e0 <strlen>
 80140d8:	2300      	movs	r3, #0
 80140da:	9308      	str	r3, [sp, #32]
 80140dc:	f8d8 3000 	ldr.w	r3, [r8]
 80140e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80140e4:	6822      	ldr	r2, [r4, #0]
 80140e6:	3307      	adds	r3, #7
 80140e8:	f023 0307 	bic.w	r3, r3, #7
 80140ec:	f103 0108 	add.w	r1, r3, #8
 80140f0:	f8c8 1000 	str.w	r1, [r8]
 80140f4:	4682      	mov	sl, r0
 80140f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80140fa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80140fe:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8014360 <_printf_float+0x2a8>
 8014102:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8014106:	eeb0 6bc0 	vabs.f64	d6, d0
 801410a:	eeb4 6b47 	vcmp.f64	d6, d7
 801410e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014112:	dd24      	ble.n	801415e <_printf_float+0xa6>
 8014114:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801411c:	d502      	bpl.n	8014124 <_printf_float+0x6c>
 801411e:	232d      	movs	r3, #45	; 0x2d
 8014120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014124:	4b90      	ldr	r3, [pc, #576]	; (8014368 <_printf_float+0x2b0>)
 8014126:	4891      	ldr	r0, [pc, #580]	; (801436c <_printf_float+0x2b4>)
 8014128:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801412c:	bf94      	ite	ls
 801412e:	4698      	movls	r8, r3
 8014130:	4680      	movhi	r8, r0
 8014132:	2303      	movs	r3, #3
 8014134:	6123      	str	r3, [r4, #16]
 8014136:	f022 0204 	bic.w	r2, r2, #4
 801413a:	2300      	movs	r3, #0
 801413c:	6022      	str	r2, [r4, #0]
 801413e:	9304      	str	r3, [sp, #16]
 8014140:	9700      	str	r7, [sp, #0]
 8014142:	4633      	mov	r3, r6
 8014144:	aa09      	add	r2, sp, #36	; 0x24
 8014146:	4621      	mov	r1, r4
 8014148:	4628      	mov	r0, r5
 801414a:	f000 f9d3 	bl	80144f4 <_printf_common>
 801414e:	3001      	adds	r0, #1
 8014150:	f040 808a 	bne.w	8014268 <_printf_float+0x1b0>
 8014154:	f04f 30ff 	mov.w	r0, #4294967295
 8014158:	b00b      	add	sp, #44	; 0x2c
 801415a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801415e:	eeb4 0b40 	vcmp.f64	d0, d0
 8014162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014166:	d709      	bvc.n	801417c <_printf_float+0xc4>
 8014168:	ee10 3a90 	vmov	r3, s1
 801416c:	2b00      	cmp	r3, #0
 801416e:	bfbc      	itt	lt
 8014170:	232d      	movlt	r3, #45	; 0x2d
 8014172:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014176:	487e      	ldr	r0, [pc, #504]	; (8014370 <_printf_float+0x2b8>)
 8014178:	4b7e      	ldr	r3, [pc, #504]	; (8014374 <_printf_float+0x2bc>)
 801417a:	e7d5      	b.n	8014128 <_printf_float+0x70>
 801417c:	6863      	ldr	r3, [r4, #4]
 801417e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8014182:	9104      	str	r1, [sp, #16]
 8014184:	1c59      	adds	r1, r3, #1
 8014186:	d13c      	bne.n	8014202 <_printf_float+0x14a>
 8014188:	2306      	movs	r3, #6
 801418a:	6063      	str	r3, [r4, #4]
 801418c:	2300      	movs	r3, #0
 801418e:	9303      	str	r3, [sp, #12]
 8014190:	ab08      	add	r3, sp, #32
 8014192:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8014196:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801419a:	ab07      	add	r3, sp, #28
 801419c:	6861      	ldr	r1, [r4, #4]
 801419e:	9300      	str	r3, [sp, #0]
 80141a0:	6022      	str	r2, [r4, #0]
 80141a2:	f10d 031b 	add.w	r3, sp, #27
 80141a6:	4628      	mov	r0, r5
 80141a8:	f7ff fef6 	bl	8013f98 <__cvt>
 80141ac:	9b04      	ldr	r3, [sp, #16]
 80141ae:	9907      	ldr	r1, [sp, #28]
 80141b0:	2b47      	cmp	r3, #71	; 0x47
 80141b2:	4680      	mov	r8, r0
 80141b4:	d108      	bne.n	80141c8 <_printf_float+0x110>
 80141b6:	1cc8      	adds	r0, r1, #3
 80141b8:	db02      	blt.n	80141c0 <_printf_float+0x108>
 80141ba:	6863      	ldr	r3, [r4, #4]
 80141bc:	4299      	cmp	r1, r3
 80141be:	dd41      	ble.n	8014244 <_printf_float+0x18c>
 80141c0:	f1a9 0902 	sub.w	r9, r9, #2
 80141c4:	fa5f f989 	uxtb.w	r9, r9
 80141c8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80141cc:	d820      	bhi.n	8014210 <_printf_float+0x158>
 80141ce:	3901      	subs	r1, #1
 80141d0:	464a      	mov	r2, r9
 80141d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80141d6:	9107      	str	r1, [sp, #28]
 80141d8:	f7ff ff30 	bl	801403c <__exponent>
 80141dc:	9a08      	ldr	r2, [sp, #32]
 80141de:	9004      	str	r0, [sp, #16]
 80141e0:	1813      	adds	r3, r2, r0
 80141e2:	2a01      	cmp	r2, #1
 80141e4:	6123      	str	r3, [r4, #16]
 80141e6:	dc02      	bgt.n	80141ee <_printf_float+0x136>
 80141e8:	6822      	ldr	r2, [r4, #0]
 80141ea:	07d2      	lsls	r2, r2, #31
 80141ec:	d501      	bpl.n	80141f2 <_printf_float+0x13a>
 80141ee:	3301      	adds	r3, #1
 80141f0:	6123      	str	r3, [r4, #16]
 80141f2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d0a2      	beq.n	8014140 <_printf_float+0x88>
 80141fa:	232d      	movs	r3, #45	; 0x2d
 80141fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014200:	e79e      	b.n	8014140 <_printf_float+0x88>
 8014202:	9904      	ldr	r1, [sp, #16]
 8014204:	2947      	cmp	r1, #71	; 0x47
 8014206:	d1c1      	bne.n	801418c <_printf_float+0xd4>
 8014208:	2b00      	cmp	r3, #0
 801420a:	d1bf      	bne.n	801418c <_printf_float+0xd4>
 801420c:	2301      	movs	r3, #1
 801420e:	e7bc      	b.n	801418a <_printf_float+0xd2>
 8014210:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8014214:	d118      	bne.n	8014248 <_printf_float+0x190>
 8014216:	2900      	cmp	r1, #0
 8014218:	6863      	ldr	r3, [r4, #4]
 801421a:	dd0b      	ble.n	8014234 <_printf_float+0x17c>
 801421c:	6121      	str	r1, [r4, #16]
 801421e:	b913      	cbnz	r3, 8014226 <_printf_float+0x16e>
 8014220:	6822      	ldr	r2, [r4, #0]
 8014222:	07d0      	lsls	r0, r2, #31
 8014224:	d502      	bpl.n	801422c <_printf_float+0x174>
 8014226:	3301      	adds	r3, #1
 8014228:	440b      	add	r3, r1
 801422a:	6123      	str	r3, [r4, #16]
 801422c:	2300      	movs	r3, #0
 801422e:	65a1      	str	r1, [r4, #88]	; 0x58
 8014230:	9304      	str	r3, [sp, #16]
 8014232:	e7de      	b.n	80141f2 <_printf_float+0x13a>
 8014234:	b913      	cbnz	r3, 801423c <_printf_float+0x184>
 8014236:	6822      	ldr	r2, [r4, #0]
 8014238:	07d2      	lsls	r2, r2, #31
 801423a:	d501      	bpl.n	8014240 <_printf_float+0x188>
 801423c:	3302      	adds	r3, #2
 801423e:	e7f4      	b.n	801422a <_printf_float+0x172>
 8014240:	2301      	movs	r3, #1
 8014242:	e7f2      	b.n	801422a <_printf_float+0x172>
 8014244:	f04f 0967 	mov.w	r9, #103	; 0x67
 8014248:	9b08      	ldr	r3, [sp, #32]
 801424a:	4299      	cmp	r1, r3
 801424c:	db05      	blt.n	801425a <_printf_float+0x1a2>
 801424e:	6823      	ldr	r3, [r4, #0]
 8014250:	6121      	str	r1, [r4, #16]
 8014252:	07d8      	lsls	r0, r3, #31
 8014254:	d5ea      	bpl.n	801422c <_printf_float+0x174>
 8014256:	1c4b      	adds	r3, r1, #1
 8014258:	e7e7      	b.n	801422a <_printf_float+0x172>
 801425a:	2900      	cmp	r1, #0
 801425c:	bfd4      	ite	le
 801425e:	f1c1 0202 	rsble	r2, r1, #2
 8014262:	2201      	movgt	r2, #1
 8014264:	4413      	add	r3, r2
 8014266:	e7e0      	b.n	801422a <_printf_float+0x172>
 8014268:	6823      	ldr	r3, [r4, #0]
 801426a:	055a      	lsls	r2, r3, #21
 801426c:	d407      	bmi.n	801427e <_printf_float+0x1c6>
 801426e:	6923      	ldr	r3, [r4, #16]
 8014270:	4642      	mov	r2, r8
 8014272:	4631      	mov	r1, r6
 8014274:	4628      	mov	r0, r5
 8014276:	47b8      	blx	r7
 8014278:	3001      	adds	r0, #1
 801427a:	d12a      	bne.n	80142d2 <_printf_float+0x21a>
 801427c:	e76a      	b.n	8014154 <_printf_float+0x9c>
 801427e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8014282:	f240 80e2 	bls.w	801444a <_printf_float+0x392>
 8014286:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801428a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801428e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014292:	d133      	bne.n	80142fc <_printf_float+0x244>
 8014294:	4a38      	ldr	r2, [pc, #224]	; (8014378 <_printf_float+0x2c0>)
 8014296:	2301      	movs	r3, #1
 8014298:	4631      	mov	r1, r6
 801429a:	4628      	mov	r0, r5
 801429c:	47b8      	blx	r7
 801429e:	3001      	adds	r0, #1
 80142a0:	f43f af58 	beq.w	8014154 <_printf_float+0x9c>
 80142a4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80142a8:	429a      	cmp	r2, r3
 80142aa:	db02      	blt.n	80142b2 <_printf_float+0x1fa>
 80142ac:	6823      	ldr	r3, [r4, #0]
 80142ae:	07d8      	lsls	r0, r3, #31
 80142b0:	d50f      	bpl.n	80142d2 <_printf_float+0x21a>
 80142b2:	4653      	mov	r3, sl
 80142b4:	465a      	mov	r2, fp
 80142b6:	4631      	mov	r1, r6
 80142b8:	4628      	mov	r0, r5
 80142ba:	47b8      	blx	r7
 80142bc:	3001      	adds	r0, #1
 80142be:	f43f af49 	beq.w	8014154 <_printf_float+0x9c>
 80142c2:	f04f 0800 	mov.w	r8, #0
 80142c6:	f104 091a 	add.w	r9, r4, #26
 80142ca:	9b08      	ldr	r3, [sp, #32]
 80142cc:	3b01      	subs	r3, #1
 80142ce:	4543      	cmp	r3, r8
 80142d0:	dc09      	bgt.n	80142e6 <_printf_float+0x22e>
 80142d2:	6823      	ldr	r3, [r4, #0]
 80142d4:	079b      	lsls	r3, r3, #30
 80142d6:	f100 8108 	bmi.w	80144ea <_printf_float+0x432>
 80142da:	68e0      	ldr	r0, [r4, #12]
 80142dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142de:	4298      	cmp	r0, r3
 80142e0:	bfb8      	it	lt
 80142e2:	4618      	movlt	r0, r3
 80142e4:	e738      	b.n	8014158 <_printf_float+0xa0>
 80142e6:	2301      	movs	r3, #1
 80142e8:	464a      	mov	r2, r9
 80142ea:	4631      	mov	r1, r6
 80142ec:	4628      	mov	r0, r5
 80142ee:	47b8      	blx	r7
 80142f0:	3001      	adds	r0, #1
 80142f2:	f43f af2f 	beq.w	8014154 <_printf_float+0x9c>
 80142f6:	f108 0801 	add.w	r8, r8, #1
 80142fa:	e7e6      	b.n	80142ca <_printf_float+0x212>
 80142fc:	9b07      	ldr	r3, [sp, #28]
 80142fe:	2b00      	cmp	r3, #0
 8014300:	dc3c      	bgt.n	801437c <_printf_float+0x2c4>
 8014302:	4a1d      	ldr	r2, [pc, #116]	; (8014378 <_printf_float+0x2c0>)
 8014304:	2301      	movs	r3, #1
 8014306:	4631      	mov	r1, r6
 8014308:	4628      	mov	r0, r5
 801430a:	47b8      	blx	r7
 801430c:	3001      	adds	r0, #1
 801430e:	f43f af21 	beq.w	8014154 <_printf_float+0x9c>
 8014312:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014316:	4313      	orrs	r3, r2
 8014318:	d102      	bne.n	8014320 <_printf_float+0x268>
 801431a:	6823      	ldr	r3, [r4, #0]
 801431c:	07d9      	lsls	r1, r3, #31
 801431e:	d5d8      	bpl.n	80142d2 <_printf_float+0x21a>
 8014320:	4653      	mov	r3, sl
 8014322:	465a      	mov	r2, fp
 8014324:	4631      	mov	r1, r6
 8014326:	4628      	mov	r0, r5
 8014328:	47b8      	blx	r7
 801432a:	3001      	adds	r0, #1
 801432c:	f43f af12 	beq.w	8014154 <_printf_float+0x9c>
 8014330:	f04f 0900 	mov.w	r9, #0
 8014334:	f104 0a1a 	add.w	sl, r4, #26
 8014338:	9b07      	ldr	r3, [sp, #28]
 801433a:	425b      	negs	r3, r3
 801433c:	454b      	cmp	r3, r9
 801433e:	dc01      	bgt.n	8014344 <_printf_float+0x28c>
 8014340:	9b08      	ldr	r3, [sp, #32]
 8014342:	e795      	b.n	8014270 <_printf_float+0x1b8>
 8014344:	2301      	movs	r3, #1
 8014346:	4652      	mov	r2, sl
 8014348:	4631      	mov	r1, r6
 801434a:	4628      	mov	r0, r5
 801434c:	47b8      	blx	r7
 801434e:	3001      	adds	r0, #1
 8014350:	f43f af00 	beq.w	8014154 <_printf_float+0x9c>
 8014354:	f109 0901 	add.w	r9, r9, #1
 8014358:	e7ee      	b.n	8014338 <_printf_float+0x280>
 801435a:	bf00      	nop
 801435c:	f3af 8000 	nop.w
 8014360:	ffffffff 	.word	0xffffffff
 8014364:	7fefffff 	.word	0x7fefffff
 8014368:	08019504 	.word	0x08019504
 801436c:	08019508 	.word	0x08019508
 8014370:	08019510 	.word	0x08019510
 8014374:	0801950c 	.word	0x0801950c
 8014378:	08019514 	.word	0x08019514
 801437c:	9a08      	ldr	r2, [sp, #32]
 801437e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014380:	429a      	cmp	r2, r3
 8014382:	bfa8      	it	ge
 8014384:	461a      	movge	r2, r3
 8014386:	2a00      	cmp	r2, #0
 8014388:	4691      	mov	r9, r2
 801438a:	dc38      	bgt.n	80143fe <_printf_float+0x346>
 801438c:	2300      	movs	r3, #0
 801438e:	9305      	str	r3, [sp, #20]
 8014390:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014394:	f104 021a 	add.w	r2, r4, #26
 8014398:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801439a:	9905      	ldr	r1, [sp, #20]
 801439c:	9304      	str	r3, [sp, #16]
 801439e:	eba3 0309 	sub.w	r3, r3, r9
 80143a2:	428b      	cmp	r3, r1
 80143a4:	dc33      	bgt.n	801440e <_printf_float+0x356>
 80143a6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80143aa:	429a      	cmp	r2, r3
 80143ac:	db3c      	blt.n	8014428 <_printf_float+0x370>
 80143ae:	6823      	ldr	r3, [r4, #0]
 80143b0:	07da      	lsls	r2, r3, #31
 80143b2:	d439      	bmi.n	8014428 <_printf_float+0x370>
 80143b4:	9a08      	ldr	r2, [sp, #32]
 80143b6:	9b04      	ldr	r3, [sp, #16]
 80143b8:	9907      	ldr	r1, [sp, #28]
 80143ba:	1ad3      	subs	r3, r2, r3
 80143bc:	eba2 0901 	sub.w	r9, r2, r1
 80143c0:	4599      	cmp	r9, r3
 80143c2:	bfa8      	it	ge
 80143c4:	4699      	movge	r9, r3
 80143c6:	f1b9 0f00 	cmp.w	r9, #0
 80143ca:	dc35      	bgt.n	8014438 <_printf_float+0x380>
 80143cc:	f04f 0800 	mov.w	r8, #0
 80143d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80143d4:	f104 0a1a 	add.w	sl, r4, #26
 80143d8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80143dc:	1a9b      	subs	r3, r3, r2
 80143de:	eba3 0309 	sub.w	r3, r3, r9
 80143e2:	4543      	cmp	r3, r8
 80143e4:	f77f af75 	ble.w	80142d2 <_printf_float+0x21a>
 80143e8:	2301      	movs	r3, #1
 80143ea:	4652      	mov	r2, sl
 80143ec:	4631      	mov	r1, r6
 80143ee:	4628      	mov	r0, r5
 80143f0:	47b8      	blx	r7
 80143f2:	3001      	adds	r0, #1
 80143f4:	f43f aeae 	beq.w	8014154 <_printf_float+0x9c>
 80143f8:	f108 0801 	add.w	r8, r8, #1
 80143fc:	e7ec      	b.n	80143d8 <_printf_float+0x320>
 80143fe:	4613      	mov	r3, r2
 8014400:	4631      	mov	r1, r6
 8014402:	4642      	mov	r2, r8
 8014404:	4628      	mov	r0, r5
 8014406:	47b8      	blx	r7
 8014408:	3001      	adds	r0, #1
 801440a:	d1bf      	bne.n	801438c <_printf_float+0x2d4>
 801440c:	e6a2      	b.n	8014154 <_printf_float+0x9c>
 801440e:	2301      	movs	r3, #1
 8014410:	4631      	mov	r1, r6
 8014412:	4628      	mov	r0, r5
 8014414:	9204      	str	r2, [sp, #16]
 8014416:	47b8      	blx	r7
 8014418:	3001      	adds	r0, #1
 801441a:	f43f ae9b 	beq.w	8014154 <_printf_float+0x9c>
 801441e:	9b05      	ldr	r3, [sp, #20]
 8014420:	9a04      	ldr	r2, [sp, #16]
 8014422:	3301      	adds	r3, #1
 8014424:	9305      	str	r3, [sp, #20]
 8014426:	e7b7      	b.n	8014398 <_printf_float+0x2e0>
 8014428:	4653      	mov	r3, sl
 801442a:	465a      	mov	r2, fp
 801442c:	4631      	mov	r1, r6
 801442e:	4628      	mov	r0, r5
 8014430:	47b8      	blx	r7
 8014432:	3001      	adds	r0, #1
 8014434:	d1be      	bne.n	80143b4 <_printf_float+0x2fc>
 8014436:	e68d      	b.n	8014154 <_printf_float+0x9c>
 8014438:	9a04      	ldr	r2, [sp, #16]
 801443a:	464b      	mov	r3, r9
 801443c:	4442      	add	r2, r8
 801443e:	4631      	mov	r1, r6
 8014440:	4628      	mov	r0, r5
 8014442:	47b8      	blx	r7
 8014444:	3001      	adds	r0, #1
 8014446:	d1c1      	bne.n	80143cc <_printf_float+0x314>
 8014448:	e684      	b.n	8014154 <_printf_float+0x9c>
 801444a:	9a08      	ldr	r2, [sp, #32]
 801444c:	2a01      	cmp	r2, #1
 801444e:	dc01      	bgt.n	8014454 <_printf_float+0x39c>
 8014450:	07db      	lsls	r3, r3, #31
 8014452:	d537      	bpl.n	80144c4 <_printf_float+0x40c>
 8014454:	2301      	movs	r3, #1
 8014456:	4642      	mov	r2, r8
 8014458:	4631      	mov	r1, r6
 801445a:	4628      	mov	r0, r5
 801445c:	47b8      	blx	r7
 801445e:	3001      	adds	r0, #1
 8014460:	f43f ae78 	beq.w	8014154 <_printf_float+0x9c>
 8014464:	4653      	mov	r3, sl
 8014466:	465a      	mov	r2, fp
 8014468:	4631      	mov	r1, r6
 801446a:	4628      	mov	r0, r5
 801446c:	47b8      	blx	r7
 801446e:	3001      	adds	r0, #1
 8014470:	f43f ae70 	beq.w	8014154 <_printf_float+0x9c>
 8014474:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8014478:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801447c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014480:	d01b      	beq.n	80144ba <_printf_float+0x402>
 8014482:	9b08      	ldr	r3, [sp, #32]
 8014484:	f108 0201 	add.w	r2, r8, #1
 8014488:	3b01      	subs	r3, #1
 801448a:	4631      	mov	r1, r6
 801448c:	4628      	mov	r0, r5
 801448e:	47b8      	blx	r7
 8014490:	3001      	adds	r0, #1
 8014492:	d10e      	bne.n	80144b2 <_printf_float+0x3fa>
 8014494:	e65e      	b.n	8014154 <_printf_float+0x9c>
 8014496:	2301      	movs	r3, #1
 8014498:	464a      	mov	r2, r9
 801449a:	4631      	mov	r1, r6
 801449c:	4628      	mov	r0, r5
 801449e:	47b8      	blx	r7
 80144a0:	3001      	adds	r0, #1
 80144a2:	f43f ae57 	beq.w	8014154 <_printf_float+0x9c>
 80144a6:	f108 0801 	add.w	r8, r8, #1
 80144aa:	9b08      	ldr	r3, [sp, #32]
 80144ac:	3b01      	subs	r3, #1
 80144ae:	4543      	cmp	r3, r8
 80144b0:	dcf1      	bgt.n	8014496 <_printf_float+0x3de>
 80144b2:	9b04      	ldr	r3, [sp, #16]
 80144b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80144b8:	e6db      	b.n	8014272 <_printf_float+0x1ba>
 80144ba:	f04f 0800 	mov.w	r8, #0
 80144be:	f104 091a 	add.w	r9, r4, #26
 80144c2:	e7f2      	b.n	80144aa <_printf_float+0x3f2>
 80144c4:	2301      	movs	r3, #1
 80144c6:	4642      	mov	r2, r8
 80144c8:	e7df      	b.n	801448a <_printf_float+0x3d2>
 80144ca:	2301      	movs	r3, #1
 80144cc:	464a      	mov	r2, r9
 80144ce:	4631      	mov	r1, r6
 80144d0:	4628      	mov	r0, r5
 80144d2:	47b8      	blx	r7
 80144d4:	3001      	adds	r0, #1
 80144d6:	f43f ae3d 	beq.w	8014154 <_printf_float+0x9c>
 80144da:	f108 0801 	add.w	r8, r8, #1
 80144de:	68e3      	ldr	r3, [r4, #12]
 80144e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80144e2:	1a5b      	subs	r3, r3, r1
 80144e4:	4543      	cmp	r3, r8
 80144e6:	dcf0      	bgt.n	80144ca <_printf_float+0x412>
 80144e8:	e6f7      	b.n	80142da <_printf_float+0x222>
 80144ea:	f04f 0800 	mov.w	r8, #0
 80144ee:	f104 0919 	add.w	r9, r4, #25
 80144f2:	e7f4      	b.n	80144de <_printf_float+0x426>

080144f4 <_printf_common>:
 80144f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144f8:	4616      	mov	r6, r2
 80144fa:	4699      	mov	r9, r3
 80144fc:	688a      	ldr	r2, [r1, #8]
 80144fe:	690b      	ldr	r3, [r1, #16]
 8014500:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014504:	4293      	cmp	r3, r2
 8014506:	bfb8      	it	lt
 8014508:	4613      	movlt	r3, r2
 801450a:	6033      	str	r3, [r6, #0]
 801450c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014510:	4607      	mov	r7, r0
 8014512:	460c      	mov	r4, r1
 8014514:	b10a      	cbz	r2, 801451a <_printf_common+0x26>
 8014516:	3301      	adds	r3, #1
 8014518:	6033      	str	r3, [r6, #0]
 801451a:	6823      	ldr	r3, [r4, #0]
 801451c:	0699      	lsls	r1, r3, #26
 801451e:	bf42      	ittt	mi
 8014520:	6833      	ldrmi	r3, [r6, #0]
 8014522:	3302      	addmi	r3, #2
 8014524:	6033      	strmi	r3, [r6, #0]
 8014526:	6825      	ldr	r5, [r4, #0]
 8014528:	f015 0506 	ands.w	r5, r5, #6
 801452c:	d106      	bne.n	801453c <_printf_common+0x48>
 801452e:	f104 0a19 	add.w	sl, r4, #25
 8014532:	68e3      	ldr	r3, [r4, #12]
 8014534:	6832      	ldr	r2, [r6, #0]
 8014536:	1a9b      	subs	r3, r3, r2
 8014538:	42ab      	cmp	r3, r5
 801453a:	dc26      	bgt.n	801458a <_printf_common+0x96>
 801453c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014540:	1e13      	subs	r3, r2, #0
 8014542:	6822      	ldr	r2, [r4, #0]
 8014544:	bf18      	it	ne
 8014546:	2301      	movne	r3, #1
 8014548:	0692      	lsls	r2, r2, #26
 801454a:	d42b      	bmi.n	80145a4 <_printf_common+0xb0>
 801454c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014550:	4649      	mov	r1, r9
 8014552:	4638      	mov	r0, r7
 8014554:	47c0      	blx	r8
 8014556:	3001      	adds	r0, #1
 8014558:	d01e      	beq.n	8014598 <_printf_common+0xa4>
 801455a:	6823      	ldr	r3, [r4, #0]
 801455c:	68e5      	ldr	r5, [r4, #12]
 801455e:	6832      	ldr	r2, [r6, #0]
 8014560:	f003 0306 	and.w	r3, r3, #6
 8014564:	2b04      	cmp	r3, #4
 8014566:	bf08      	it	eq
 8014568:	1aad      	subeq	r5, r5, r2
 801456a:	68a3      	ldr	r3, [r4, #8]
 801456c:	6922      	ldr	r2, [r4, #16]
 801456e:	bf0c      	ite	eq
 8014570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014574:	2500      	movne	r5, #0
 8014576:	4293      	cmp	r3, r2
 8014578:	bfc4      	itt	gt
 801457a:	1a9b      	subgt	r3, r3, r2
 801457c:	18ed      	addgt	r5, r5, r3
 801457e:	2600      	movs	r6, #0
 8014580:	341a      	adds	r4, #26
 8014582:	42b5      	cmp	r5, r6
 8014584:	d11a      	bne.n	80145bc <_printf_common+0xc8>
 8014586:	2000      	movs	r0, #0
 8014588:	e008      	b.n	801459c <_printf_common+0xa8>
 801458a:	2301      	movs	r3, #1
 801458c:	4652      	mov	r2, sl
 801458e:	4649      	mov	r1, r9
 8014590:	4638      	mov	r0, r7
 8014592:	47c0      	blx	r8
 8014594:	3001      	adds	r0, #1
 8014596:	d103      	bne.n	80145a0 <_printf_common+0xac>
 8014598:	f04f 30ff 	mov.w	r0, #4294967295
 801459c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145a0:	3501      	adds	r5, #1
 80145a2:	e7c6      	b.n	8014532 <_printf_common+0x3e>
 80145a4:	18e1      	adds	r1, r4, r3
 80145a6:	1c5a      	adds	r2, r3, #1
 80145a8:	2030      	movs	r0, #48	; 0x30
 80145aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80145ae:	4422      	add	r2, r4
 80145b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80145b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80145b8:	3302      	adds	r3, #2
 80145ba:	e7c7      	b.n	801454c <_printf_common+0x58>
 80145bc:	2301      	movs	r3, #1
 80145be:	4622      	mov	r2, r4
 80145c0:	4649      	mov	r1, r9
 80145c2:	4638      	mov	r0, r7
 80145c4:	47c0      	blx	r8
 80145c6:	3001      	adds	r0, #1
 80145c8:	d0e6      	beq.n	8014598 <_printf_common+0xa4>
 80145ca:	3601      	adds	r6, #1
 80145cc:	e7d9      	b.n	8014582 <_printf_common+0x8e>
	...

080145d0 <_printf_i>:
 80145d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80145d4:	460c      	mov	r4, r1
 80145d6:	4691      	mov	r9, r2
 80145d8:	7e27      	ldrb	r7, [r4, #24]
 80145da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80145dc:	2f78      	cmp	r7, #120	; 0x78
 80145de:	4680      	mov	r8, r0
 80145e0:	469a      	mov	sl, r3
 80145e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80145e6:	d807      	bhi.n	80145f8 <_printf_i+0x28>
 80145e8:	2f62      	cmp	r7, #98	; 0x62
 80145ea:	d80a      	bhi.n	8014602 <_printf_i+0x32>
 80145ec:	2f00      	cmp	r7, #0
 80145ee:	f000 80d8 	beq.w	80147a2 <_printf_i+0x1d2>
 80145f2:	2f58      	cmp	r7, #88	; 0x58
 80145f4:	f000 80a3 	beq.w	801473e <_printf_i+0x16e>
 80145f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80145fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014600:	e03a      	b.n	8014678 <_printf_i+0xa8>
 8014602:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014606:	2b15      	cmp	r3, #21
 8014608:	d8f6      	bhi.n	80145f8 <_printf_i+0x28>
 801460a:	a001      	add	r0, pc, #4	; (adr r0, 8014610 <_printf_i+0x40>)
 801460c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8014610:	08014669 	.word	0x08014669
 8014614:	0801467d 	.word	0x0801467d
 8014618:	080145f9 	.word	0x080145f9
 801461c:	080145f9 	.word	0x080145f9
 8014620:	080145f9 	.word	0x080145f9
 8014624:	080145f9 	.word	0x080145f9
 8014628:	0801467d 	.word	0x0801467d
 801462c:	080145f9 	.word	0x080145f9
 8014630:	080145f9 	.word	0x080145f9
 8014634:	080145f9 	.word	0x080145f9
 8014638:	080145f9 	.word	0x080145f9
 801463c:	08014789 	.word	0x08014789
 8014640:	080146ad 	.word	0x080146ad
 8014644:	0801476b 	.word	0x0801476b
 8014648:	080145f9 	.word	0x080145f9
 801464c:	080145f9 	.word	0x080145f9
 8014650:	080147ab 	.word	0x080147ab
 8014654:	080145f9 	.word	0x080145f9
 8014658:	080146ad 	.word	0x080146ad
 801465c:	080145f9 	.word	0x080145f9
 8014660:	080145f9 	.word	0x080145f9
 8014664:	08014773 	.word	0x08014773
 8014668:	680b      	ldr	r3, [r1, #0]
 801466a:	1d1a      	adds	r2, r3, #4
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	600a      	str	r2, [r1, #0]
 8014670:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014674:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014678:	2301      	movs	r3, #1
 801467a:	e0a3      	b.n	80147c4 <_printf_i+0x1f4>
 801467c:	6825      	ldr	r5, [r4, #0]
 801467e:	6808      	ldr	r0, [r1, #0]
 8014680:	062e      	lsls	r6, r5, #24
 8014682:	f100 0304 	add.w	r3, r0, #4
 8014686:	d50a      	bpl.n	801469e <_printf_i+0xce>
 8014688:	6805      	ldr	r5, [r0, #0]
 801468a:	600b      	str	r3, [r1, #0]
 801468c:	2d00      	cmp	r5, #0
 801468e:	da03      	bge.n	8014698 <_printf_i+0xc8>
 8014690:	232d      	movs	r3, #45	; 0x2d
 8014692:	426d      	negs	r5, r5
 8014694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014698:	485e      	ldr	r0, [pc, #376]	; (8014814 <_printf_i+0x244>)
 801469a:	230a      	movs	r3, #10
 801469c:	e019      	b.n	80146d2 <_printf_i+0x102>
 801469e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80146a2:	6805      	ldr	r5, [r0, #0]
 80146a4:	600b      	str	r3, [r1, #0]
 80146a6:	bf18      	it	ne
 80146a8:	b22d      	sxthne	r5, r5
 80146aa:	e7ef      	b.n	801468c <_printf_i+0xbc>
 80146ac:	680b      	ldr	r3, [r1, #0]
 80146ae:	6825      	ldr	r5, [r4, #0]
 80146b0:	1d18      	adds	r0, r3, #4
 80146b2:	6008      	str	r0, [r1, #0]
 80146b4:	0628      	lsls	r0, r5, #24
 80146b6:	d501      	bpl.n	80146bc <_printf_i+0xec>
 80146b8:	681d      	ldr	r5, [r3, #0]
 80146ba:	e002      	b.n	80146c2 <_printf_i+0xf2>
 80146bc:	0669      	lsls	r1, r5, #25
 80146be:	d5fb      	bpl.n	80146b8 <_printf_i+0xe8>
 80146c0:	881d      	ldrh	r5, [r3, #0]
 80146c2:	4854      	ldr	r0, [pc, #336]	; (8014814 <_printf_i+0x244>)
 80146c4:	2f6f      	cmp	r7, #111	; 0x6f
 80146c6:	bf0c      	ite	eq
 80146c8:	2308      	moveq	r3, #8
 80146ca:	230a      	movne	r3, #10
 80146cc:	2100      	movs	r1, #0
 80146ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80146d2:	6866      	ldr	r6, [r4, #4]
 80146d4:	60a6      	str	r6, [r4, #8]
 80146d6:	2e00      	cmp	r6, #0
 80146d8:	bfa2      	ittt	ge
 80146da:	6821      	ldrge	r1, [r4, #0]
 80146dc:	f021 0104 	bicge.w	r1, r1, #4
 80146e0:	6021      	strge	r1, [r4, #0]
 80146e2:	b90d      	cbnz	r5, 80146e8 <_printf_i+0x118>
 80146e4:	2e00      	cmp	r6, #0
 80146e6:	d04d      	beq.n	8014784 <_printf_i+0x1b4>
 80146e8:	4616      	mov	r6, r2
 80146ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80146ee:	fb03 5711 	mls	r7, r3, r1, r5
 80146f2:	5dc7      	ldrb	r7, [r0, r7]
 80146f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80146f8:	462f      	mov	r7, r5
 80146fa:	42bb      	cmp	r3, r7
 80146fc:	460d      	mov	r5, r1
 80146fe:	d9f4      	bls.n	80146ea <_printf_i+0x11a>
 8014700:	2b08      	cmp	r3, #8
 8014702:	d10b      	bne.n	801471c <_printf_i+0x14c>
 8014704:	6823      	ldr	r3, [r4, #0]
 8014706:	07df      	lsls	r7, r3, #31
 8014708:	d508      	bpl.n	801471c <_printf_i+0x14c>
 801470a:	6923      	ldr	r3, [r4, #16]
 801470c:	6861      	ldr	r1, [r4, #4]
 801470e:	4299      	cmp	r1, r3
 8014710:	bfde      	ittt	le
 8014712:	2330      	movle	r3, #48	; 0x30
 8014714:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014718:	f106 36ff 	addle.w	r6, r6, #4294967295
 801471c:	1b92      	subs	r2, r2, r6
 801471e:	6122      	str	r2, [r4, #16]
 8014720:	f8cd a000 	str.w	sl, [sp]
 8014724:	464b      	mov	r3, r9
 8014726:	aa03      	add	r2, sp, #12
 8014728:	4621      	mov	r1, r4
 801472a:	4640      	mov	r0, r8
 801472c:	f7ff fee2 	bl	80144f4 <_printf_common>
 8014730:	3001      	adds	r0, #1
 8014732:	d14c      	bne.n	80147ce <_printf_i+0x1fe>
 8014734:	f04f 30ff 	mov.w	r0, #4294967295
 8014738:	b004      	add	sp, #16
 801473a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801473e:	4835      	ldr	r0, [pc, #212]	; (8014814 <_printf_i+0x244>)
 8014740:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014744:	6823      	ldr	r3, [r4, #0]
 8014746:	680e      	ldr	r6, [r1, #0]
 8014748:	061f      	lsls	r7, r3, #24
 801474a:	f856 5b04 	ldr.w	r5, [r6], #4
 801474e:	600e      	str	r6, [r1, #0]
 8014750:	d514      	bpl.n	801477c <_printf_i+0x1ac>
 8014752:	07d9      	lsls	r1, r3, #31
 8014754:	bf44      	itt	mi
 8014756:	f043 0320 	orrmi.w	r3, r3, #32
 801475a:	6023      	strmi	r3, [r4, #0]
 801475c:	b91d      	cbnz	r5, 8014766 <_printf_i+0x196>
 801475e:	6823      	ldr	r3, [r4, #0]
 8014760:	f023 0320 	bic.w	r3, r3, #32
 8014764:	6023      	str	r3, [r4, #0]
 8014766:	2310      	movs	r3, #16
 8014768:	e7b0      	b.n	80146cc <_printf_i+0xfc>
 801476a:	6823      	ldr	r3, [r4, #0]
 801476c:	f043 0320 	orr.w	r3, r3, #32
 8014770:	6023      	str	r3, [r4, #0]
 8014772:	2378      	movs	r3, #120	; 0x78
 8014774:	4828      	ldr	r0, [pc, #160]	; (8014818 <_printf_i+0x248>)
 8014776:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801477a:	e7e3      	b.n	8014744 <_printf_i+0x174>
 801477c:	065e      	lsls	r6, r3, #25
 801477e:	bf48      	it	mi
 8014780:	b2ad      	uxthmi	r5, r5
 8014782:	e7e6      	b.n	8014752 <_printf_i+0x182>
 8014784:	4616      	mov	r6, r2
 8014786:	e7bb      	b.n	8014700 <_printf_i+0x130>
 8014788:	680b      	ldr	r3, [r1, #0]
 801478a:	6826      	ldr	r6, [r4, #0]
 801478c:	6960      	ldr	r0, [r4, #20]
 801478e:	1d1d      	adds	r5, r3, #4
 8014790:	600d      	str	r5, [r1, #0]
 8014792:	0635      	lsls	r5, r6, #24
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	d501      	bpl.n	801479c <_printf_i+0x1cc>
 8014798:	6018      	str	r0, [r3, #0]
 801479a:	e002      	b.n	80147a2 <_printf_i+0x1d2>
 801479c:	0671      	lsls	r1, r6, #25
 801479e:	d5fb      	bpl.n	8014798 <_printf_i+0x1c8>
 80147a0:	8018      	strh	r0, [r3, #0]
 80147a2:	2300      	movs	r3, #0
 80147a4:	6123      	str	r3, [r4, #16]
 80147a6:	4616      	mov	r6, r2
 80147a8:	e7ba      	b.n	8014720 <_printf_i+0x150>
 80147aa:	680b      	ldr	r3, [r1, #0]
 80147ac:	1d1a      	adds	r2, r3, #4
 80147ae:	600a      	str	r2, [r1, #0]
 80147b0:	681e      	ldr	r6, [r3, #0]
 80147b2:	6862      	ldr	r2, [r4, #4]
 80147b4:	2100      	movs	r1, #0
 80147b6:	4630      	mov	r0, r6
 80147b8:	f7eb fd9a 	bl	80002f0 <memchr>
 80147bc:	b108      	cbz	r0, 80147c2 <_printf_i+0x1f2>
 80147be:	1b80      	subs	r0, r0, r6
 80147c0:	6060      	str	r0, [r4, #4]
 80147c2:	6863      	ldr	r3, [r4, #4]
 80147c4:	6123      	str	r3, [r4, #16]
 80147c6:	2300      	movs	r3, #0
 80147c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80147cc:	e7a8      	b.n	8014720 <_printf_i+0x150>
 80147ce:	6923      	ldr	r3, [r4, #16]
 80147d0:	4632      	mov	r2, r6
 80147d2:	4649      	mov	r1, r9
 80147d4:	4640      	mov	r0, r8
 80147d6:	47d0      	blx	sl
 80147d8:	3001      	adds	r0, #1
 80147da:	d0ab      	beq.n	8014734 <_printf_i+0x164>
 80147dc:	6823      	ldr	r3, [r4, #0]
 80147de:	079b      	lsls	r3, r3, #30
 80147e0:	d413      	bmi.n	801480a <_printf_i+0x23a>
 80147e2:	68e0      	ldr	r0, [r4, #12]
 80147e4:	9b03      	ldr	r3, [sp, #12]
 80147e6:	4298      	cmp	r0, r3
 80147e8:	bfb8      	it	lt
 80147ea:	4618      	movlt	r0, r3
 80147ec:	e7a4      	b.n	8014738 <_printf_i+0x168>
 80147ee:	2301      	movs	r3, #1
 80147f0:	4632      	mov	r2, r6
 80147f2:	4649      	mov	r1, r9
 80147f4:	4640      	mov	r0, r8
 80147f6:	47d0      	blx	sl
 80147f8:	3001      	adds	r0, #1
 80147fa:	d09b      	beq.n	8014734 <_printf_i+0x164>
 80147fc:	3501      	adds	r5, #1
 80147fe:	68e3      	ldr	r3, [r4, #12]
 8014800:	9903      	ldr	r1, [sp, #12]
 8014802:	1a5b      	subs	r3, r3, r1
 8014804:	42ab      	cmp	r3, r5
 8014806:	dcf2      	bgt.n	80147ee <_printf_i+0x21e>
 8014808:	e7eb      	b.n	80147e2 <_printf_i+0x212>
 801480a:	2500      	movs	r5, #0
 801480c:	f104 0619 	add.w	r6, r4, #25
 8014810:	e7f5      	b.n	80147fe <_printf_i+0x22e>
 8014812:	bf00      	nop
 8014814:	08019516 	.word	0x08019516
 8014818:	08019527 	.word	0x08019527

0801481c <_scanf_float>:
 801481c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014820:	b087      	sub	sp, #28
 8014822:	4617      	mov	r7, r2
 8014824:	9303      	str	r3, [sp, #12]
 8014826:	688b      	ldr	r3, [r1, #8]
 8014828:	1e5a      	subs	r2, r3, #1
 801482a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801482e:	bf83      	ittte	hi
 8014830:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8014834:	195b      	addhi	r3, r3, r5
 8014836:	9302      	strhi	r3, [sp, #8]
 8014838:	2300      	movls	r3, #0
 801483a:	bf86      	itte	hi
 801483c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8014840:	608b      	strhi	r3, [r1, #8]
 8014842:	9302      	strls	r3, [sp, #8]
 8014844:	680b      	ldr	r3, [r1, #0]
 8014846:	468b      	mov	fp, r1
 8014848:	2500      	movs	r5, #0
 801484a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801484e:	f84b 3b1c 	str.w	r3, [fp], #28
 8014852:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8014856:	4680      	mov	r8, r0
 8014858:	460c      	mov	r4, r1
 801485a:	465e      	mov	r6, fp
 801485c:	46aa      	mov	sl, r5
 801485e:	46a9      	mov	r9, r5
 8014860:	9501      	str	r5, [sp, #4]
 8014862:	68a2      	ldr	r2, [r4, #8]
 8014864:	b152      	cbz	r2, 801487c <_scanf_float+0x60>
 8014866:	683b      	ldr	r3, [r7, #0]
 8014868:	781b      	ldrb	r3, [r3, #0]
 801486a:	2b4e      	cmp	r3, #78	; 0x4e
 801486c:	d864      	bhi.n	8014938 <_scanf_float+0x11c>
 801486e:	2b40      	cmp	r3, #64	; 0x40
 8014870:	d83c      	bhi.n	80148ec <_scanf_float+0xd0>
 8014872:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8014876:	b2c8      	uxtb	r0, r1
 8014878:	280e      	cmp	r0, #14
 801487a:	d93a      	bls.n	80148f2 <_scanf_float+0xd6>
 801487c:	f1b9 0f00 	cmp.w	r9, #0
 8014880:	d003      	beq.n	801488a <_scanf_float+0x6e>
 8014882:	6823      	ldr	r3, [r4, #0]
 8014884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014888:	6023      	str	r3, [r4, #0]
 801488a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801488e:	f1ba 0f01 	cmp.w	sl, #1
 8014892:	f200 8113 	bhi.w	8014abc <_scanf_float+0x2a0>
 8014896:	455e      	cmp	r6, fp
 8014898:	f200 8105 	bhi.w	8014aa6 <_scanf_float+0x28a>
 801489c:	2501      	movs	r5, #1
 801489e:	4628      	mov	r0, r5
 80148a0:	b007      	add	sp, #28
 80148a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148a6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80148aa:	2a0d      	cmp	r2, #13
 80148ac:	d8e6      	bhi.n	801487c <_scanf_float+0x60>
 80148ae:	a101      	add	r1, pc, #4	; (adr r1, 80148b4 <_scanf_float+0x98>)
 80148b0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80148b4:	080149f3 	.word	0x080149f3
 80148b8:	0801487d 	.word	0x0801487d
 80148bc:	0801487d 	.word	0x0801487d
 80148c0:	0801487d 	.word	0x0801487d
 80148c4:	08014a53 	.word	0x08014a53
 80148c8:	08014a2b 	.word	0x08014a2b
 80148cc:	0801487d 	.word	0x0801487d
 80148d0:	0801487d 	.word	0x0801487d
 80148d4:	08014a01 	.word	0x08014a01
 80148d8:	0801487d 	.word	0x0801487d
 80148dc:	0801487d 	.word	0x0801487d
 80148e0:	0801487d 	.word	0x0801487d
 80148e4:	0801487d 	.word	0x0801487d
 80148e8:	080149b9 	.word	0x080149b9
 80148ec:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80148f0:	e7db      	b.n	80148aa <_scanf_float+0x8e>
 80148f2:	290e      	cmp	r1, #14
 80148f4:	d8c2      	bhi.n	801487c <_scanf_float+0x60>
 80148f6:	a001      	add	r0, pc, #4	; (adr r0, 80148fc <_scanf_float+0xe0>)
 80148f8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80148fc:	080149ab 	.word	0x080149ab
 8014900:	0801487d 	.word	0x0801487d
 8014904:	080149ab 	.word	0x080149ab
 8014908:	08014a3f 	.word	0x08014a3f
 801490c:	0801487d 	.word	0x0801487d
 8014910:	08014959 	.word	0x08014959
 8014914:	08014995 	.word	0x08014995
 8014918:	08014995 	.word	0x08014995
 801491c:	08014995 	.word	0x08014995
 8014920:	08014995 	.word	0x08014995
 8014924:	08014995 	.word	0x08014995
 8014928:	08014995 	.word	0x08014995
 801492c:	08014995 	.word	0x08014995
 8014930:	08014995 	.word	0x08014995
 8014934:	08014995 	.word	0x08014995
 8014938:	2b6e      	cmp	r3, #110	; 0x6e
 801493a:	d809      	bhi.n	8014950 <_scanf_float+0x134>
 801493c:	2b60      	cmp	r3, #96	; 0x60
 801493e:	d8b2      	bhi.n	80148a6 <_scanf_float+0x8a>
 8014940:	2b54      	cmp	r3, #84	; 0x54
 8014942:	d077      	beq.n	8014a34 <_scanf_float+0x218>
 8014944:	2b59      	cmp	r3, #89	; 0x59
 8014946:	d199      	bne.n	801487c <_scanf_float+0x60>
 8014948:	2d07      	cmp	r5, #7
 801494a:	d197      	bne.n	801487c <_scanf_float+0x60>
 801494c:	2508      	movs	r5, #8
 801494e:	e029      	b.n	80149a4 <_scanf_float+0x188>
 8014950:	2b74      	cmp	r3, #116	; 0x74
 8014952:	d06f      	beq.n	8014a34 <_scanf_float+0x218>
 8014954:	2b79      	cmp	r3, #121	; 0x79
 8014956:	e7f6      	b.n	8014946 <_scanf_float+0x12a>
 8014958:	6821      	ldr	r1, [r4, #0]
 801495a:	05c8      	lsls	r0, r1, #23
 801495c:	d51a      	bpl.n	8014994 <_scanf_float+0x178>
 801495e:	9b02      	ldr	r3, [sp, #8]
 8014960:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8014964:	6021      	str	r1, [r4, #0]
 8014966:	f109 0901 	add.w	r9, r9, #1
 801496a:	b11b      	cbz	r3, 8014974 <_scanf_float+0x158>
 801496c:	3b01      	subs	r3, #1
 801496e:	3201      	adds	r2, #1
 8014970:	9302      	str	r3, [sp, #8]
 8014972:	60a2      	str	r2, [r4, #8]
 8014974:	68a3      	ldr	r3, [r4, #8]
 8014976:	3b01      	subs	r3, #1
 8014978:	60a3      	str	r3, [r4, #8]
 801497a:	6923      	ldr	r3, [r4, #16]
 801497c:	3301      	adds	r3, #1
 801497e:	6123      	str	r3, [r4, #16]
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	3b01      	subs	r3, #1
 8014984:	2b00      	cmp	r3, #0
 8014986:	607b      	str	r3, [r7, #4]
 8014988:	f340 8084 	ble.w	8014a94 <_scanf_float+0x278>
 801498c:	683b      	ldr	r3, [r7, #0]
 801498e:	3301      	adds	r3, #1
 8014990:	603b      	str	r3, [r7, #0]
 8014992:	e766      	b.n	8014862 <_scanf_float+0x46>
 8014994:	eb1a 0f05 	cmn.w	sl, r5
 8014998:	f47f af70 	bne.w	801487c <_scanf_float+0x60>
 801499c:	6822      	ldr	r2, [r4, #0]
 801499e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80149a2:	6022      	str	r2, [r4, #0]
 80149a4:	f806 3b01 	strb.w	r3, [r6], #1
 80149a8:	e7e4      	b.n	8014974 <_scanf_float+0x158>
 80149aa:	6822      	ldr	r2, [r4, #0]
 80149ac:	0610      	lsls	r0, r2, #24
 80149ae:	f57f af65 	bpl.w	801487c <_scanf_float+0x60>
 80149b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80149b6:	e7f4      	b.n	80149a2 <_scanf_float+0x186>
 80149b8:	f1ba 0f00 	cmp.w	sl, #0
 80149bc:	d10e      	bne.n	80149dc <_scanf_float+0x1c0>
 80149be:	f1b9 0f00 	cmp.w	r9, #0
 80149c2:	d10e      	bne.n	80149e2 <_scanf_float+0x1c6>
 80149c4:	6822      	ldr	r2, [r4, #0]
 80149c6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80149ca:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80149ce:	d108      	bne.n	80149e2 <_scanf_float+0x1c6>
 80149d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80149d4:	6022      	str	r2, [r4, #0]
 80149d6:	f04f 0a01 	mov.w	sl, #1
 80149da:	e7e3      	b.n	80149a4 <_scanf_float+0x188>
 80149dc:	f1ba 0f02 	cmp.w	sl, #2
 80149e0:	d055      	beq.n	8014a8e <_scanf_float+0x272>
 80149e2:	2d01      	cmp	r5, #1
 80149e4:	d002      	beq.n	80149ec <_scanf_float+0x1d0>
 80149e6:	2d04      	cmp	r5, #4
 80149e8:	f47f af48 	bne.w	801487c <_scanf_float+0x60>
 80149ec:	3501      	adds	r5, #1
 80149ee:	b2ed      	uxtb	r5, r5
 80149f0:	e7d8      	b.n	80149a4 <_scanf_float+0x188>
 80149f2:	f1ba 0f01 	cmp.w	sl, #1
 80149f6:	f47f af41 	bne.w	801487c <_scanf_float+0x60>
 80149fa:	f04f 0a02 	mov.w	sl, #2
 80149fe:	e7d1      	b.n	80149a4 <_scanf_float+0x188>
 8014a00:	b97d      	cbnz	r5, 8014a22 <_scanf_float+0x206>
 8014a02:	f1b9 0f00 	cmp.w	r9, #0
 8014a06:	f47f af3c 	bne.w	8014882 <_scanf_float+0x66>
 8014a0a:	6822      	ldr	r2, [r4, #0]
 8014a0c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8014a10:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8014a14:	f47f af39 	bne.w	801488a <_scanf_float+0x6e>
 8014a18:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014a1c:	6022      	str	r2, [r4, #0]
 8014a1e:	2501      	movs	r5, #1
 8014a20:	e7c0      	b.n	80149a4 <_scanf_float+0x188>
 8014a22:	2d03      	cmp	r5, #3
 8014a24:	d0e2      	beq.n	80149ec <_scanf_float+0x1d0>
 8014a26:	2d05      	cmp	r5, #5
 8014a28:	e7de      	b.n	80149e8 <_scanf_float+0x1cc>
 8014a2a:	2d02      	cmp	r5, #2
 8014a2c:	f47f af26 	bne.w	801487c <_scanf_float+0x60>
 8014a30:	2503      	movs	r5, #3
 8014a32:	e7b7      	b.n	80149a4 <_scanf_float+0x188>
 8014a34:	2d06      	cmp	r5, #6
 8014a36:	f47f af21 	bne.w	801487c <_scanf_float+0x60>
 8014a3a:	2507      	movs	r5, #7
 8014a3c:	e7b2      	b.n	80149a4 <_scanf_float+0x188>
 8014a3e:	6822      	ldr	r2, [r4, #0]
 8014a40:	0591      	lsls	r1, r2, #22
 8014a42:	f57f af1b 	bpl.w	801487c <_scanf_float+0x60>
 8014a46:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8014a4a:	6022      	str	r2, [r4, #0]
 8014a4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8014a50:	e7a8      	b.n	80149a4 <_scanf_float+0x188>
 8014a52:	6822      	ldr	r2, [r4, #0]
 8014a54:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8014a58:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8014a5c:	d006      	beq.n	8014a6c <_scanf_float+0x250>
 8014a5e:	0550      	lsls	r0, r2, #21
 8014a60:	f57f af0c 	bpl.w	801487c <_scanf_float+0x60>
 8014a64:	f1b9 0f00 	cmp.w	r9, #0
 8014a68:	f43f af0f 	beq.w	801488a <_scanf_float+0x6e>
 8014a6c:	0591      	lsls	r1, r2, #22
 8014a6e:	bf58      	it	pl
 8014a70:	9901      	ldrpl	r1, [sp, #4]
 8014a72:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014a76:	bf58      	it	pl
 8014a78:	eba9 0101 	subpl.w	r1, r9, r1
 8014a7c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8014a80:	bf58      	it	pl
 8014a82:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8014a86:	6022      	str	r2, [r4, #0]
 8014a88:	f04f 0900 	mov.w	r9, #0
 8014a8c:	e78a      	b.n	80149a4 <_scanf_float+0x188>
 8014a8e:	f04f 0a03 	mov.w	sl, #3
 8014a92:	e787      	b.n	80149a4 <_scanf_float+0x188>
 8014a94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014a98:	4639      	mov	r1, r7
 8014a9a:	4640      	mov	r0, r8
 8014a9c:	4798      	blx	r3
 8014a9e:	2800      	cmp	r0, #0
 8014aa0:	f43f aedf 	beq.w	8014862 <_scanf_float+0x46>
 8014aa4:	e6ea      	b.n	801487c <_scanf_float+0x60>
 8014aa6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014aaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014aae:	463a      	mov	r2, r7
 8014ab0:	4640      	mov	r0, r8
 8014ab2:	4798      	blx	r3
 8014ab4:	6923      	ldr	r3, [r4, #16]
 8014ab6:	3b01      	subs	r3, #1
 8014ab8:	6123      	str	r3, [r4, #16]
 8014aba:	e6ec      	b.n	8014896 <_scanf_float+0x7a>
 8014abc:	1e6b      	subs	r3, r5, #1
 8014abe:	2b06      	cmp	r3, #6
 8014ac0:	d825      	bhi.n	8014b0e <_scanf_float+0x2f2>
 8014ac2:	2d02      	cmp	r5, #2
 8014ac4:	d836      	bhi.n	8014b34 <_scanf_float+0x318>
 8014ac6:	455e      	cmp	r6, fp
 8014ac8:	f67f aee8 	bls.w	801489c <_scanf_float+0x80>
 8014acc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014ad0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014ad4:	463a      	mov	r2, r7
 8014ad6:	4640      	mov	r0, r8
 8014ad8:	4798      	blx	r3
 8014ada:	6923      	ldr	r3, [r4, #16]
 8014adc:	3b01      	subs	r3, #1
 8014ade:	6123      	str	r3, [r4, #16]
 8014ae0:	e7f1      	b.n	8014ac6 <_scanf_float+0x2aa>
 8014ae2:	9802      	ldr	r0, [sp, #8]
 8014ae4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014ae8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8014aec:	9002      	str	r0, [sp, #8]
 8014aee:	463a      	mov	r2, r7
 8014af0:	4640      	mov	r0, r8
 8014af2:	4798      	blx	r3
 8014af4:	6923      	ldr	r3, [r4, #16]
 8014af6:	3b01      	subs	r3, #1
 8014af8:	6123      	str	r3, [r4, #16]
 8014afa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014afe:	fa5f fa8a 	uxtb.w	sl, sl
 8014b02:	f1ba 0f02 	cmp.w	sl, #2
 8014b06:	d1ec      	bne.n	8014ae2 <_scanf_float+0x2c6>
 8014b08:	3d03      	subs	r5, #3
 8014b0a:	b2ed      	uxtb	r5, r5
 8014b0c:	1b76      	subs	r6, r6, r5
 8014b0e:	6823      	ldr	r3, [r4, #0]
 8014b10:	05da      	lsls	r2, r3, #23
 8014b12:	d52f      	bpl.n	8014b74 <_scanf_float+0x358>
 8014b14:	055b      	lsls	r3, r3, #21
 8014b16:	d510      	bpl.n	8014b3a <_scanf_float+0x31e>
 8014b18:	455e      	cmp	r6, fp
 8014b1a:	f67f aebf 	bls.w	801489c <_scanf_float+0x80>
 8014b1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014b22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014b26:	463a      	mov	r2, r7
 8014b28:	4640      	mov	r0, r8
 8014b2a:	4798      	blx	r3
 8014b2c:	6923      	ldr	r3, [r4, #16]
 8014b2e:	3b01      	subs	r3, #1
 8014b30:	6123      	str	r3, [r4, #16]
 8014b32:	e7f1      	b.n	8014b18 <_scanf_float+0x2fc>
 8014b34:	46aa      	mov	sl, r5
 8014b36:	9602      	str	r6, [sp, #8]
 8014b38:	e7df      	b.n	8014afa <_scanf_float+0x2de>
 8014b3a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8014b3e:	6923      	ldr	r3, [r4, #16]
 8014b40:	2965      	cmp	r1, #101	; 0x65
 8014b42:	f103 33ff 	add.w	r3, r3, #4294967295
 8014b46:	f106 35ff 	add.w	r5, r6, #4294967295
 8014b4a:	6123      	str	r3, [r4, #16]
 8014b4c:	d00c      	beq.n	8014b68 <_scanf_float+0x34c>
 8014b4e:	2945      	cmp	r1, #69	; 0x45
 8014b50:	d00a      	beq.n	8014b68 <_scanf_float+0x34c>
 8014b52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014b56:	463a      	mov	r2, r7
 8014b58:	4640      	mov	r0, r8
 8014b5a:	4798      	blx	r3
 8014b5c:	6923      	ldr	r3, [r4, #16]
 8014b5e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8014b62:	3b01      	subs	r3, #1
 8014b64:	1eb5      	subs	r5, r6, #2
 8014b66:	6123      	str	r3, [r4, #16]
 8014b68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014b6c:	463a      	mov	r2, r7
 8014b6e:	4640      	mov	r0, r8
 8014b70:	4798      	blx	r3
 8014b72:	462e      	mov	r6, r5
 8014b74:	6825      	ldr	r5, [r4, #0]
 8014b76:	f015 0510 	ands.w	r5, r5, #16
 8014b7a:	d14d      	bne.n	8014c18 <_scanf_float+0x3fc>
 8014b7c:	7035      	strb	r5, [r6, #0]
 8014b7e:	6823      	ldr	r3, [r4, #0]
 8014b80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8014b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014b88:	d11a      	bne.n	8014bc0 <_scanf_float+0x3a4>
 8014b8a:	9b01      	ldr	r3, [sp, #4]
 8014b8c:	454b      	cmp	r3, r9
 8014b8e:	eba3 0209 	sub.w	r2, r3, r9
 8014b92:	d122      	bne.n	8014bda <_scanf_float+0x3be>
 8014b94:	2200      	movs	r2, #0
 8014b96:	4659      	mov	r1, fp
 8014b98:	4640      	mov	r0, r8
 8014b9a:	f000 fe6b 	bl	8015874 <_strtod_r>
 8014b9e:	9b03      	ldr	r3, [sp, #12]
 8014ba0:	6821      	ldr	r1, [r4, #0]
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	f011 0f02 	tst.w	r1, #2
 8014ba8:	f103 0204 	add.w	r2, r3, #4
 8014bac:	d020      	beq.n	8014bf0 <_scanf_float+0x3d4>
 8014bae:	9903      	ldr	r1, [sp, #12]
 8014bb0:	600a      	str	r2, [r1, #0]
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	ed83 0b00 	vstr	d0, [r3]
 8014bb8:	68e3      	ldr	r3, [r4, #12]
 8014bba:	3301      	adds	r3, #1
 8014bbc:	60e3      	str	r3, [r4, #12]
 8014bbe:	e66e      	b.n	801489e <_scanf_float+0x82>
 8014bc0:	9b04      	ldr	r3, [sp, #16]
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d0e6      	beq.n	8014b94 <_scanf_float+0x378>
 8014bc6:	9905      	ldr	r1, [sp, #20]
 8014bc8:	230a      	movs	r3, #10
 8014bca:	462a      	mov	r2, r5
 8014bcc:	3101      	adds	r1, #1
 8014bce:	4640      	mov	r0, r8
 8014bd0:	f000 fee6 	bl	80159a0 <_strtol_r>
 8014bd4:	9b04      	ldr	r3, [sp, #16]
 8014bd6:	9e05      	ldr	r6, [sp, #20]
 8014bd8:	1ac2      	subs	r2, r0, r3
 8014bda:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8014bde:	429e      	cmp	r6, r3
 8014be0:	bf28      	it	cs
 8014be2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8014be6:	490d      	ldr	r1, [pc, #52]	; (8014c1c <_scanf_float+0x400>)
 8014be8:	4630      	mov	r0, r6
 8014bea:	f000 f821 	bl	8014c30 <siprintf>
 8014bee:	e7d1      	b.n	8014b94 <_scanf_float+0x378>
 8014bf0:	f011 0f04 	tst.w	r1, #4
 8014bf4:	9903      	ldr	r1, [sp, #12]
 8014bf6:	600a      	str	r2, [r1, #0]
 8014bf8:	d1db      	bne.n	8014bb2 <_scanf_float+0x396>
 8014bfa:	eeb4 0b40 	vcmp.f64	d0, d0
 8014bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c02:	681e      	ldr	r6, [r3, #0]
 8014c04:	d705      	bvc.n	8014c12 <_scanf_float+0x3f6>
 8014c06:	4806      	ldr	r0, [pc, #24]	; (8014c20 <_scanf_float+0x404>)
 8014c08:	f000 f80c 	bl	8014c24 <nanf>
 8014c0c:	ed86 0a00 	vstr	s0, [r6]
 8014c10:	e7d2      	b.n	8014bb8 <_scanf_float+0x39c>
 8014c12:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8014c16:	e7f9      	b.n	8014c0c <_scanf_float+0x3f0>
 8014c18:	2500      	movs	r5, #0
 8014c1a:	e640      	b.n	801489e <_scanf_float+0x82>
 8014c1c:	08019538 	.word	0x08019538
 8014c20:	08019970 	.word	0x08019970

08014c24 <nanf>:
 8014c24:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014c2c <nanf+0x8>
 8014c28:	4770      	bx	lr
 8014c2a:	bf00      	nop
 8014c2c:	7fc00000 	.word	0x7fc00000

08014c30 <siprintf>:
 8014c30:	b40e      	push	{r1, r2, r3}
 8014c32:	b500      	push	{lr}
 8014c34:	b09c      	sub	sp, #112	; 0x70
 8014c36:	ab1d      	add	r3, sp, #116	; 0x74
 8014c38:	9002      	str	r0, [sp, #8]
 8014c3a:	9006      	str	r0, [sp, #24]
 8014c3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014c40:	4809      	ldr	r0, [pc, #36]	; (8014c68 <siprintf+0x38>)
 8014c42:	9107      	str	r1, [sp, #28]
 8014c44:	9104      	str	r1, [sp, #16]
 8014c46:	4909      	ldr	r1, [pc, #36]	; (8014c6c <siprintf+0x3c>)
 8014c48:	f853 2b04 	ldr.w	r2, [r3], #4
 8014c4c:	9105      	str	r1, [sp, #20]
 8014c4e:	6800      	ldr	r0, [r0, #0]
 8014c50:	9301      	str	r3, [sp, #4]
 8014c52:	a902      	add	r1, sp, #8
 8014c54:	f002 fe70 	bl	8017938 <_svfiprintf_r>
 8014c58:	9b02      	ldr	r3, [sp, #8]
 8014c5a:	2200      	movs	r2, #0
 8014c5c:	701a      	strb	r2, [r3, #0]
 8014c5e:	b01c      	add	sp, #112	; 0x70
 8014c60:	f85d eb04 	ldr.w	lr, [sp], #4
 8014c64:	b003      	add	sp, #12
 8014c66:	4770      	bx	lr
 8014c68:	24000020 	.word	0x24000020
 8014c6c:	ffff0208 	.word	0xffff0208

08014c70 <strcat>:
 8014c70:	b510      	push	{r4, lr}
 8014c72:	4602      	mov	r2, r0
 8014c74:	7814      	ldrb	r4, [r2, #0]
 8014c76:	4613      	mov	r3, r2
 8014c78:	3201      	adds	r2, #1
 8014c7a:	2c00      	cmp	r4, #0
 8014c7c:	d1fa      	bne.n	8014c74 <strcat+0x4>
 8014c7e:	3b01      	subs	r3, #1
 8014c80:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014c84:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014c88:	2a00      	cmp	r2, #0
 8014c8a:	d1f9      	bne.n	8014c80 <strcat+0x10>
 8014c8c:	bd10      	pop	{r4, pc}

08014c8e <sulp>:
 8014c8e:	b570      	push	{r4, r5, r6, lr}
 8014c90:	4604      	mov	r4, r0
 8014c92:	460d      	mov	r5, r1
 8014c94:	4616      	mov	r6, r2
 8014c96:	ec45 4b10 	vmov	d0, r4, r5
 8014c9a:	f002 fbe7 	bl	801746c <__ulp>
 8014c9e:	b17e      	cbz	r6, 8014cc0 <sulp+0x32>
 8014ca0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014ca4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	dd09      	ble.n	8014cc0 <sulp+0x32>
 8014cac:	051b      	lsls	r3, r3, #20
 8014cae:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8014cb2:	2000      	movs	r0, #0
 8014cb4:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8014cb8:	ec41 0b17 	vmov	d7, r0, r1
 8014cbc:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014cc0:	bd70      	pop	{r4, r5, r6, pc}
 8014cc2:	0000      	movs	r0, r0
 8014cc4:	0000      	movs	r0, r0
	...

08014cc8 <_strtod_l>:
 8014cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ccc:	ed2d 8b0c 	vpush	{d8-d13}
 8014cd0:	b09d      	sub	sp, #116	; 0x74
 8014cd2:	461f      	mov	r7, r3
 8014cd4:	2300      	movs	r3, #0
 8014cd6:	9318      	str	r3, [sp, #96]	; 0x60
 8014cd8:	4ba6      	ldr	r3, [pc, #664]	; (8014f74 <_strtod_l+0x2ac>)
 8014cda:	9213      	str	r2, [sp, #76]	; 0x4c
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	9308      	str	r3, [sp, #32]
 8014ce0:	4604      	mov	r4, r0
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	468a      	mov	sl, r1
 8014ce6:	f7eb fafb 	bl	80002e0 <strlen>
 8014cea:	f04f 0800 	mov.w	r8, #0
 8014cee:	4605      	mov	r5, r0
 8014cf0:	f04f 0900 	mov.w	r9, #0
 8014cf4:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8014cf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014cfa:	781a      	ldrb	r2, [r3, #0]
 8014cfc:	2a2b      	cmp	r2, #43	; 0x2b
 8014cfe:	d04d      	beq.n	8014d9c <_strtod_l+0xd4>
 8014d00:	d83a      	bhi.n	8014d78 <_strtod_l+0xb0>
 8014d02:	2a0d      	cmp	r2, #13
 8014d04:	d833      	bhi.n	8014d6e <_strtod_l+0xa6>
 8014d06:	2a08      	cmp	r2, #8
 8014d08:	d833      	bhi.n	8014d72 <_strtod_l+0xaa>
 8014d0a:	2a00      	cmp	r2, #0
 8014d0c:	d03d      	beq.n	8014d8a <_strtod_l+0xc2>
 8014d0e:	2300      	movs	r3, #0
 8014d10:	930b      	str	r3, [sp, #44]	; 0x2c
 8014d12:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8014d14:	7833      	ldrb	r3, [r6, #0]
 8014d16:	2b30      	cmp	r3, #48	; 0x30
 8014d18:	f040 80b6 	bne.w	8014e88 <_strtod_l+0x1c0>
 8014d1c:	7873      	ldrb	r3, [r6, #1]
 8014d1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014d22:	2b58      	cmp	r3, #88	; 0x58
 8014d24:	d16d      	bne.n	8014e02 <_strtod_l+0x13a>
 8014d26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d28:	9301      	str	r3, [sp, #4]
 8014d2a:	ab18      	add	r3, sp, #96	; 0x60
 8014d2c:	9702      	str	r7, [sp, #8]
 8014d2e:	9300      	str	r3, [sp, #0]
 8014d30:	4a91      	ldr	r2, [pc, #580]	; (8014f78 <_strtod_l+0x2b0>)
 8014d32:	ab19      	add	r3, sp, #100	; 0x64
 8014d34:	a917      	add	r1, sp, #92	; 0x5c
 8014d36:	4620      	mov	r0, r4
 8014d38:	f001 fcf8 	bl	801672c <__gethex>
 8014d3c:	f010 0507 	ands.w	r5, r0, #7
 8014d40:	4607      	mov	r7, r0
 8014d42:	d005      	beq.n	8014d50 <_strtod_l+0x88>
 8014d44:	2d06      	cmp	r5, #6
 8014d46:	d12b      	bne.n	8014da0 <_strtod_l+0xd8>
 8014d48:	3601      	adds	r6, #1
 8014d4a:	2300      	movs	r3, #0
 8014d4c:	9617      	str	r6, [sp, #92]	; 0x5c
 8014d4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014d50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	f040 856e 	bne.w	8015834 <_strtod_l+0xb6c>
 8014d58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d5a:	b1e3      	cbz	r3, 8014d96 <_strtod_l+0xce>
 8014d5c:	ec49 8b17 	vmov	d7, r8, r9
 8014d60:	eeb1 0b47 	vneg.f64	d0, d7
 8014d64:	b01d      	add	sp, #116	; 0x74
 8014d66:	ecbd 8b0c 	vpop	{d8-d13}
 8014d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d6e:	2a20      	cmp	r2, #32
 8014d70:	d1cd      	bne.n	8014d0e <_strtod_l+0x46>
 8014d72:	3301      	adds	r3, #1
 8014d74:	9317      	str	r3, [sp, #92]	; 0x5c
 8014d76:	e7bf      	b.n	8014cf8 <_strtod_l+0x30>
 8014d78:	2a2d      	cmp	r2, #45	; 0x2d
 8014d7a:	d1c8      	bne.n	8014d0e <_strtod_l+0x46>
 8014d7c:	2201      	movs	r2, #1
 8014d7e:	920b      	str	r2, [sp, #44]	; 0x2c
 8014d80:	1c5a      	adds	r2, r3, #1
 8014d82:	9217      	str	r2, [sp, #92]	; 0x5c
 8014d84:	785b      	ldrb	r3, [r3, #1]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d1c3      	bne.n	8014d12 <_strtod_l+0x4a>
 8014d8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014d8c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	f040 854d 	bne.w	8015830 <_strtod_l+0xb68>
 8014d96:	ec49 8b10 	vmov	d0, r8, r9
 8014d9a:	e7e3      	b.n	8014d64 <_strtod_l+0x9c>
 8014d9c:	2200      	movs	r2, #0
 8014d9e:	e7ee      	b.n	8014d7e <_strtod_l+0xb6>
 8014da0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014da2:	b13a      	cbz	r2, 8014db4 <_strtod_l+0xec>
 8014da4:	2135      	movs	r1, #53	; 0x35
 8014da6:	a81a      	add	r0, sp, #104	; 0x68
 8014da8:	f002 fc6c 	bl	8017684 <__copybits>
 8014dac:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014dae:	4620      	mov	r0, r4
 8014db0:	f002 f830 	bl	8016e14 <_Bfree>
 8014db4:	3d01      	subs	r5, #1
 8014db6:	2d05      	cmp	r5, #5
 8014db8:	d807      	bhi.n	8014dca <_strtod_l+0x102>
 8014dba:	e8df f005 	tbb	[pc, r5]
 8014dbe:	0b0e      	.short	0x0b0e
 8014dc0:	030e1d18 	.word	0x030e1d18
 8014dc4:	f04f 0900 	mov.w	r9, #0
 8014dc8:	46c8      	mov	r8, r9
 8014dca:	073b      	lsls	r3, r7, #28
 8014dcc:	d5c0      	bpl.n	8014d50 <_strtod_l+0x88>
 8014dce:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8014dd2:	e7bd      	b.n	8014d50 <_strtod_l+0x88>
 8014dd4:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8014dd8:	e7f7      	b.n	8014dca <_strtod_l+0x102>
 8014dda:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8014dde:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014de0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014de4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014de8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8014dec:	e7ed      	b.n	8014dca <_strtod_l+0x102>
 8014dee:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8014f7c <_strtod_l+0x2b4>
 8014df2:	f04f 0800 	mov.w	r8, #0
 8014df6:	e7e8      	b.n	8014dca <_strtod_l+0x102>
 8014df8:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8014dfc:	f04f 38ff 	mov.w	r8, #4294967295
 8014e00:	e7e3      	b.n	8014dca <_strtod_l+0x102>
 8014e02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014e04:	1c5a      	adds	r2, r3, #1
 8014e06:	9217      	str	r2, [sp, #92]	; 0x5c
 8014e08:	785b      	ldrb	r3, [r3, #1]
 8014e0a:	2b30      	cmp	r3, #48	; 0x30
 8014e0c:	d0f9      	beq.n	8014e02 <_strtod_l+0x13a>
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d09e      	beq.n	8014d50 <_strtod_l+0x88>
 8014e12:	2301      	movs	r3, #1
 8014e14:	9306      	str	r3, [sp, #24]
 8014e16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014e18:	930c      	str	r3, [sp, #48]	; 0x30
 8014e1a:	2300      	movs	r3, #0
 8014e1c:	9304      	str	r3, [sp, #16]
 8014e1e:	930a      	str	r3, [sp, #40]	; 0x28
 8014e20:	461e      	mov	r6, r3
 8014e22:	220a      	movs	r2, #10
 8014e24:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8014e26:	f890 b000 	ldrb.w	fp, [r0]
 8014e2a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8014e2e:	b2d9      	uxtb	r1, r3
 8014e30:	2909      	cmp	r1, #9
 8014e32:	d92b      	bls.n	8014e8c <_strtod_l+0x1c4>
 8014e34:	9908      	ldr	r1, [sp, #32]
 8014e36:	462a      	mov	r2, r5
 8014e38:	f002 fe96 	bl	8017b68 <strncmp>
 8014e3c:	2800      	cmp	r0, #0
 8014e3e:	d035      	beq.n	8014eac <_strtod_l+0x1e4>
 8014e40:	2000      	movs	r0, #0
 8014e42:	465a      	mov	r2, fp
 8014e44:	4633      	mov	r3, r6
 8014e46:	4683      	mov	fp, r0
 8014e48:	4601      	mov	r1, r0
 8014e4a:	2a65      	cmp	r2, #101	; 0x65
 8014e4c:	d001      	beq.n	8014e52 <_strtod_l+0x18a>
 8014e4e:	2a45      	cmp	r2, #69	; 0x45
 8014e50:	d118      	bne.n	8014e84 <_strtod_l+0x1bc>
 8014e52:	b91b      	cbnz	r3, 8014e5c <_strtod_l+0x194>
 8014e54:	9b06      	ldr	r3, [sp, #24]
 8014e56:	4303      	orrs	r3, r0
 8014e58:	d097      	beq.n	8014d8a <_strtod_l+0xc2>
 8014e5a:	2300      	movs	r3, #0
 8014e5c:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8014e60:	f10a 0201 	add.w	r2, sl, #1
 8014e64:	9217      	str	r2, [sp, #92]	; 0x5c
 8014e66:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8014e6a:	2a2b      	cmp	r2, #43	; 0x2b
 8014e6c:	d077      	beq.n	8014f5e <_strtod_l+0x296>
 8014e6e:	2a2d      	cmp	r2, #45	; 0x2d
 8014e70:	d07d      	beq.n	8014f6e <_strtod_l+0x2a6>
 8014e72:	f04f 0e00 	mov.w	lr, #0
 8014e76:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8014e7a:	2d09      	cmp	r5, #9
 8014e7c:	f240 8084 	bls.w	8014f88 <_strtod_l+0x2c0>
 8014e80:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8014e84:	2500      	movs	r5, #0
 8014e86:	e09f      	b.n	8014fc8 <_strtod_l+0x300>
 8014e88:	2300      	movs	r3, #0
 8014e8a:	e7c3      	b.n	8014e14 <_strtod_l+0x14c>
 8014e8c:	2e08      	cmp	r6, #8
 8014e8e:	bfd5      	itete	le
 8014e90:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8014e92:	9904      	ldrgt	r1, [sp, #16]
 8014e94:	fb02 3301 	mlale	r3, r2, r1, r3
 8014e98:	fb02 3301 	mlagt	r3, r2, r1, r3
 8014e9c:	f100 0001 	add.w	r0, r0, #1
 8014ea0:	bfd4      	ite	le
 8014ea2:	930a      	strle	r3, [sp, #40]	; 0x28
 8014ea4:	9304      	strgt	r3, [sp, #16]
 8014ea6:	3601      	adds	r6, #1
 8014ea8:	9017      	str	r0, [sp, #92]	; 0x5c
 8014eaa:	e7bb      	b.n	8014e24 <_strtod_l+0x15c>
 8014eac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014eae:	195a      	adds	r2, r3, r5
 8014eb0:	9217      	str	r2, [sp, #92]	; 0x5c
 8014eb2:	5d5a      	ldrb	r2, [r3, r5]
 8014eb4:	b3ae      	cbz	r6, 8014f22 <_strtod_l+0x25a>
 8014eb6:	4683      	mov	fp, r0
 8014eb8:	4633      	mov	r3, r6
 8014eba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8014ebe:	2909      	cmp	r1, #9
 8014ec0:	d912      	bls.n	8014ee8 <_strtod_l+0x220>
 8014ec2:	2101      	movs	r1, #1
 8014ec4:	e7c1      	b.n	8014e4a <_strtod_l+0x182>
 8014ec6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014ec8:	1c5a      	adds	r2, r3, #1
 8014eca:	9217      	str	r2, [sp, #92]	; 0x5c
 8014ecc:	785a      	ldrb	r2, [r3, #1]
 8014ece:	3001      	adds	r0, #1
 8014ed0:	2a30      	cmp	r2, #48	; 0x30
 8014ed2:	d0f8      	beq.n	8014ec6 <_strtod_l+0x1fe>
 8014ed4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8014ed8:	2b08      	cmp	r3, #8
 8014eda:	f200 84b0 	bhi.w	801583e <_strtod_l+0xb76>
 8014ede:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014ee0:	930c      	str	r3, [sp, #48]	; 0x30
 8014ee2:	4683      	mov	fp, r0
 8014ee4:	2000      	movs	r0, #0
 8014ee6:	4603      	mov	r3, r0
 8014ee8:	3a30      	subs	r2, #48	; 0x30
 8014eea:	f100 0101 	add.w	r1, r0, #1
 8014eee:	d012      	beq.n	8014f16 <_strtod_l+0x24e>
 8014ef0:	448b      	add	fp, r1
 8014ef2:	eb00 0c03 	add.w	ip, r0, r3
 8014ef6:	4619      	mov	r1, r3
 8014ef8:	250a      	movs	r5, #10
 8014efa:	4561      	cmp	r1, ip
 8014efc:	d113      	bne.n	8014f26 <_strtod_l+0x25e>
 8014efe:	1819      	adds	r1, r3, r0
 8014f00:	2908      	cmp	r1, #8
 8014f02:	f103 0301 	add.w	r3, r3, #1
 8014f06:	4403      	add	r3, r0
 8014f08:	dc1d      	bgt.n	8014f46 <_strtod_l+0x27e>
 8014f0a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014f0c:	210a      	movs	r1, #10
 8014f0e:	fb01 2200 	mla	r2, r1, r0, r2
 8014f12:	920a      	str	r2, [sp, #40]	; 0x28
 8014f14:	2100      	movs	r1, #0
 8014f16:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014f18:	1c50      	adds	r0, r2, #1
 8014f1a:	9017      	str	r0, [sp, #92]	; 0x5c
 8014f1c:	7852      	ldrb	r2, [r2, #1]
 8014f1e:	4608      	mov	r0, r1
 8014f20:	e7cb      	b.n	8014eba <_strtod_l+0x1f2>
 8014f22:	4630      	mov	r0, r6
 8014f24:	e7d4      	b.n	8014ed0 <_strtod_l+0x208>
 8014f26:	2908      	cmp	r1, #8
 8014f28:	dc04      	bgt.n	8014f34 <_strtod_l+0x26c>
 8014f2a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014f2c:	436f      	muls	r7, r5
 8014f2e:	970a      	str	r7, [sp, #40]	; 0x28
 8014f30:	3101      	adds	r1, #1
 8014f32:	e7e2      	b.n	8014efa <_strtod_l+0x232>
 8014f34:	f101 0e01 	add.w	lr, r1, #1
 8014f38:	f1be 0f10 	cmp.w	lr, #16
 8014f3c:	bfde      	ittt	le
 8014f3e:	9f04      	ldrle	r7, [sp, #16]
 8014f40:	436f      	mulle	r7, r5
 8014f42:	9704      	strle	r7, [sp, #16]
 8014f44:	e7f4      	b.n	8014f30 <_strtod_l+0x268>
 8014f46:	2b10      	cmp	r3, #16
 8014f48:	bfdf      	itttt	le
 8014f4a:	9804      	ldrle	r0, [sp, #16]
 8014f4c:	210a      	movle	r1, #10
 8014f4e:	fb01 2200 	mlale	r2, r1, r0, r2
 8014f52:	9204      	strle	r2, [sp, #16]
 8014f54:	e7de      	b.n	8014f14 <_strtod_l+0x24c>
 8014f56:	f04f 0b00 	mov.w	fp, #0
 8014f5a:	2101      	movs	r1, #1
 8014f5c:	e77a      	b.n	8014e54 <_strtod_l+0x18c>
 8014f5e:	f04f 0e00 	mov.w	lr, #0
 8014f62:	f10a 0202 	add.w	r2, sl, #2
 8014f66:	9217      	str	r2, [sp, #92]	; 0x5c
 8014f68:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8014f6c:	e783      	b.n	8014e76 <_strtod_l+0x1ae>
 8014f6e:	f04f 0e01 	mov.w	lr, #1
 8014f72:	e7f6      	b.n	8014f62 <_strtod_l+0x29a>
 8014f74:	080197b4 	.word	0x080197b4
 8014f78:	08019540 	.word	0x08019540
 8014f7c:	7ff00000 	.word	0x7ff00000
 8014f80:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014f82:	1c55      	adds	r5, r2, #1
 8014f84:	9517      	str	r5, [sp, #92]	; 0x5c
 8014f86:	7852      	ldrb	r2, [r2, #1]
 8014f88:	2a30      	cmp	r2, #48	; 0x30
 8014f8a:	d0f9      	beq.n	8014f80 <_strtod_l+0x2b8>
 8014f8c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8014f90:	2d08      	cmp	r5, #8
 8014f92:	f63f af77 	bhi.w	8014e84 <_strtod_l+0x1bc>
 8014f96:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8014f9a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014f9c:	9208      	str	r2, [sp, #32]
 8014f9e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014fa0:	1c55      	adds	r5, r2, #1
 8014fa2:	9517      	str	r5, [sp, #92]	; 0x5c
 8014fa4:	7852      	ldrb	r2, [r2, #1]
 8014fa6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8014faa:	2f09      	cmp	r7, #9
 8014fac:	d937      	bls.n	801501e <_strtod_l+0x356>
 8014fae:	9f08      	ldr	r7, [sp, #32]
 8014fb0:	1bed      	subs	r5, r5, r7
 8014fb2:	2d08      	cmp	r5, #8
 8014fb4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8014fb8:	dc02      	bgt.n	8014fc0 <_strtod_l+0x2f8>
 8014fba:	4565      	cmp	r5, ip
 8014fbc:	bfa8      	it	ge
 8014fbe:	4665      	movge	r5, ip
 8014fc0:	f1be 0f00 	cmp.w	lr, #0
 8014fc4:	d000      	beq.n	8014fc8 <_strtod_l+0x300>
 8014fc6:	426d      	negs	r5, r5
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d14f      	bne.n	801506c <_strtod_l+0x3a4>
 8014fcc:	9b06      	ldr	r3, [sp, #24]
 8014fce:	4303      	orrs	r3, r0
 8014fd0:	f47f aebe 	bne.w	8014d50 <_strtod_l+0x88>
 8014fd4:	2900      	cmp	r1, #0
 8014fd6:	f47f aed8 	bne.w	8014d8a <_strtod_l+0xc2>
 8014fda:	2a69      	cmp	r2, #105	; 0x69
 8014fdc:	d027      	beq.n	801502e <_strtod_l+0x366>
 8014fde:	dc24      	bgt.n	801502a <_strtod_l+0x362>
 8014fe0:	2a49      	cmp	r2, #73	; 0x49
 8014fe2:	d024      	beq.n	801502e <_strtod_l+0x366>
 8014fe4:	2a4e      	cmp	r2, #78	; 0x4e
 8014fe6:	f47f aed0 	bne.w	8014d8a <_strtod_l+0xc2>
 8014fea:	499b      	ldr	r1, [pc, #620]	; (8015258 <_strtod_l+0x590>)
 8014fec:	a817      	add	r0, sp, #92	; 0x5c
 8014fee:	f001 fdf5 	bl	8016bdc <__match>
 8014ff2:	2800      	cmp	r0, #0
 8014ff4:	f43f aec9 	beq.w	8014d8a <_strtod_l+0xc2>
 8014ff8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014ffa:	781b      	ldrb	r3, [r3, #0]
 8014ffc:	2b28      	cmp	r3, #40	; 0x28
 8014ffe:	d12d      	bne.n	801505c <_strtod_l+0x394>
 8015000:	4996      	ldr	r1, [pc, #600]	; (801525c <_strtod_l+0x594>)
 8015002:	aa1a      	add	r2, sp, #104	; 0x68
 8015004:	a817      	add	r0, sp, #92	; 0x5c
 8015006:	f001 fdfd 	bl	8016c04 <__hexnan>
 801500a:	2805      	cmp	r0, #5
 801500c:	d126      	bne.n	801505c <_strtod_l+0x394>
 801500e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015010:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8015014:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8015018:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801501c:	e698      	b.n	8014d50 <_strtod_l+0x88>
 801501e:	250a      	movs	r5, #10
 8015020:	fb05 250c 	mla	r5, r5, ip, r2
 8015024:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8015028:	e7b9      	b.n	8014f9e <_strtod_l+0x2d6>
 801502a:	2a6e      	cmp	r2, #110	; 0x6e
 801502c:	e7db      	b.n	8014fe6 <_strtod_l+0x31e>
 801502e:	498c      	ldr	r1, [pc, #560]	; (8015260 <_strtod_l+0x598>)
 8015030:	a817      	add	r0, sp, #92	; 0x5c
 8015032:	f001 fdd3 	bl	8016bdc <__match>
 8015036:	2800      	cmp	r0, #0
 8015038:	f43f aea7 	beq.w	8014d8a <_strtod_l+0xc2>
 801503c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801503e:	4989      	ldr	r1, [pc, #548]	; (8015264 <_strtod_l+0x59c>)
 8015040:	3b01      	subs	r3, #1
 8015042:	a817      	add	r0, sp, #92	; 0x5c
 8015044:	9317      	str	r3, [sp, #92]	; 0x5c
 8015046:	f001 fdc9 	bl	8016bdc <__match>
 801504a:	b910      	cbnz	r0, 8015052 <_strtod_l+0x38a>
 801504c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801504e:	3301      	adds	r3, #1
 8015050:	9317      	str	r3, [sp, #92]	; 0x5c
 8015052:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8015278 <_strtod_l+0x5b0>
 8015056:	f04f 0800 	mov.w	r8, #0
 801505a:	e679      	b.n	8014d50 <_strtod_l+0x88>
 801505c:	4882      	ldr	r0, [pc, #520]	; (8015268 <_strtod_l+0x5a0>)
 801505e:	f002 fd6b 	bl	8017b38 <nan>
 8015062:	ed8d 0b04 	vstr	d0, [sp, #16]
 8015066:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801506a:	e671      	b.n	8014d50 <_strtod_l+0x88>
 801506c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8015070:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8015074:	eba5 020b 	sub.w	r2, r5, fp
 8015078:	2e00      	cmp	r6, #0
 801507a:	bf08      	it	eq
 801507c:	461e      	moveq	r6, r3
 801507e:	2b10      	cmp	r3, #16
 8015080:	ed8d 7b08 	vstr	d7, [sp, #32]
 8015084:	9206      	str	r2, [sp, #24]
 8015086:	461a      	mov	r2, r3
 8015088:	bfa8      	it	ge
 801508a:	2210      	movge	r2, #16
 801508c:	2b09      	cmp	r3, #9
 801508e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8015092:	dd0e      	ble.n	80150b2 <_strtod_l+0x3ea>
 8015094:	4975      	ldr	r1, [pc, #468]	; (801526c <_strtod_l+0x5a4>)
 8015096:	eddd 7a04 	vldr	s15, [sp, #16]
 801509a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801509e:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 80150a2:	ed9d 5b08 	vldr	d5, [sp, #32]
 80150a6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80150aa:	eea5 7b06 	vfma.f64	d7, d5, d6
 80150ae:	ec59 8b17 	vmov	r8, r9, d7
 80150b2:	2b0f      	cmp	r3, #15
 80150b4:	dc37      	bgt.n	8015126 <_strtod_l+0x45e>
 80150b6:	9906      	ldr	r1, [sp, #24]
 80150b8:	2900      	cmp	r1, #0
 80150ba:	f43f ae49 	beq.w	8014d50 <_strtod_l+0x88>
 80150be:	dd23      	ble.n	8015108 <_strtod_l+0x440>
 80150c0:	2916      	cmp	r1, #22
 80150c2:	dc0b      	bgt.n	80150dc <_strtod_l+0x414>
 80150c4:	4b69      	ldr	r3, [pc, #420]	; (801526c <_strtod_l+0x5a4>)
 80150c6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80150ca:	ed93 7b00 	vldr	d7, [r3]
 80150ce:	ec49 8b16 	vmov	d6, r8, r9
 80150d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80150d6:	ec59 8b17 	vmov	r8, r9, d7
 80150da:	e639      	b.n	8014d50 <_strtod_l+0x88>
 80150dc:	9806      	ldr	r0, [sp, #24]
 80150de:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80150e2:	4281      	cmp	r1, r0
 80150e4:	db1f      	blt.n	8015126 <_strtod_l+0x45e>
 80150e6:	4a61      	ldr	r2, [pc, #388]	; (801526c <_strtod_l+0x5a4>)
 80150e8:	f1c3 030f 	rsb	r3, r3, #15
 80150ec:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80150f0:	ed91 7b00 	vldr	d7, [r1]
 80150f4:	ec49 8b16 	vmov	d6, r8, r9
 80150f8:	1ac3      	subs	r3, r0, r3
 80150fa:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80150fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015102:	ed92 6b00 	vldr	d6, [r2]
 8015106:	e7e4      	b.n	80150d2 <_strtod_l+0x40a>
 8015108:	9906      	ldr	r1, [sp, #24]
 801510a:	3116      	adds	r1, #22
 801510c:	db0b      	blt.n	8015126 <_strtod_l+0x45e>
 801510e:	4b57      	ldr	r3, [pc, #348]	; (801526c <_strtod_l+0x5a4>)
 8015110:	ebab 0505 	sub.w	r5, fp, r5
 8015114:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8015118:	ed95 7b00 	vldr	d7, [r5]
 801511c:	ec49 8b16 	vmov	d6, r8, r9
 8015120:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015124:	e7d7      	b.n	80150d6 <_strtod_l+0x40e>
 8015126:	9906      	ldr	r1, [sp, #24]
 8015128:	1a9a      	subs	r2, r3, r2
 801512a:	440a      	add	r2, r1
 801512c:	2a00      	cmp	r2, #0
 801512e:	dd74      	ble.n	801521a <_strtod_l+0x552>
 8015130:	f012 000f 	ands.w	r0, r2, #15
 8015134:	d00a      	beq.n	801514c <_strtod_l+0x484>
 8015136:	494d      	ldr	r1, [pc, #308]	; (801526c <_strtod_l+0x5a4>)
 8015138:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801513c:	ed91 7b00 	vldr	d7, [r1]
 8015140:	ec49 8b16 	vmov	d6, r8, r9
 8015144:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015148:	ec59 8b17 	vmov	r8, r9, d7
 801514c:	f032 020f 	bics.w	r2, r2, #15
 8015150:	d04f      	beq.n	80151f2 <_strtod_l+0x52a>
 8015152:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8015156:	dd22      	ble.n	801519e <_strtod_l+0x4d6>
 8015158:	2500      	movs	r5, #0
 801515a:	462e      	mov	r6, r5
 801515c:	950a      	str	r5, [sp, #40]	; 0x28
 801515e:	462f      	mov	r7, r5
 8015160:	2322      	movs	r3, #34	; 0x22
 8015162:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8015278 <_strtod_l+0x5b0>
 8015166:	6023      	str	r3, [r4, #0]
 8015168:	f04f 0800 	mov.w	r8, #0
 801516c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801516e:	2b00      	cmp	r3, #0
 8015170:	f43f adee 	beq.w	8014d50 <_strtod_l+0x88>
 8015174:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015176:	4620      	mov	r0, r4
 8015178:	f001 fe4c 	bl	8016e14 <_Bfree>
 801517c:	4639      	mov	r1, r7
 801517e:	4620      	mov	r0, r4
 8015180:	f001 fe48 	bl	8016e14 <_Bfree>
 8015184:	4631      	mov	r1, r6
 8015186:	4620      	mov	r0, r4
 8015188:	f001 fe44 	bl	8016e14 <_Bfree>
 801518c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801518e:	4620      	mov	r0, r4
 8015190:	f001 fe40 	bl	8016e14 <_Bfree>
 8015194:	4629      	mov	r1, r5
 8015196:	4620      	mov	r0, r4
 8015198:	f001 fe3c 	bl	8016e14 <_Bfree>
 801519c:	e5d8      	b.n	8014d50 <_strtod_l+0x88>
 801519e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80151a2:	2000      	movs	r0, #0
 80151a4:	4f32      	ldr	r7, [pc, #200]	; (8015270 <_strtod_l+0x5a8>)
 80151a6:	1112      	asrs	r2, r2, #4
 80151a8:	4601      	mov	r1, r0
 80151aa:	2a01      	cmp	r2, #1
 80151ac:	dc24      	bgt.n	80151f8 <_strtod_l+0x530>
 80151ae:	b108      	cbz	r0, 80151b4 <_strtod_l+0x4ec>
 80151b0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80151b4:	4a2e      	ldr	r2, [pc, #184]	; (8015270 <_strtod_l+0x5a8>)
 80151b6:	482f      	ldr	r0, [pc, #188]	; (8015274 <_strtod_l+0x5ac>)
 80151b8:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80151bc:	ed91 7b00 	vldr	d7, [r1]
 80151c0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80151c4:	ec49 8b16 	vmov	d6, r8, r9
 80151c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80151cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80151d0:	9905      	ldr	r1, [sp, #20]
 80151d2:	4a29      	ldr	r2, [pc, #164]	; (8015278 <_strtod_l+0x5b0>)
 80151d4:	400a      	ands	r2, r1
 80151d6:	4282      	cmp	r2, r0
 80151d8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80151dc:	d8bc      	bhi.n	8015158 <_strtod_l+0x490>
 80151de:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80151e2:	4282      	cmp	r2, r0
 80151e4:	bf86      	itte	hi
 80151e6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 801527c <_strtod_l+0x5b4>
 80151ea:	f04f 38ff 	movhi.w	r8, #4294967295
 80151ee:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 80151f2:	2200      	movs	r2, #0
 80151f4:	9204      	str	r2, [sp, #16]
 80151f6:	e07f      	b.n	80152f8 <_strtod_l+0x630>
 80151f8:	f012 0f01 	tst.w	r2, #1
 80151fc:	d00a      	beq.n	8015214 <_strtod_l+0x54c>
 80151fe:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8015202:	ed90 7b00 	vldr	d7, [r0]
 8015206:	ed9d 6b04 	vldr	d6, [sp, #16]
 801520a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801520e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015212:	2001      	movs	r0, #1
 8015214:	3101      	adds	r1, #1
 8015216:	1052      	asrs	r2, r2, #1
 8015218:	e7c7      	b.n	80151aa <_strtod_l+0x4e2>
 801521a:	d0ea      	beq.n	80151f2 <_strtod_l+0x52a>
 801521c:	4252      	negs	r2, r2
 801521e:	f012 000f 	ands.w	r0, r2, #15
 8015222:	d00a      	beq.n	801523a <_strtod_l+0x572>
 8015224:	4911      	ldr	r1, [pc, #68]	; (801526c <_strtod_l+0x5a4>)
 8015226:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801522a:	ed91 7b00 	vldr	d7, [r1]
 801522e:	ec49 8b16 	vmov	d6, r8, r9
 8015232:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015236:	ec59 8b17 	vmov	r8, r9, d7
 801523a:	1112      	asrs	r2, r2, #4
 801523c:	d0d9      	beq.n	80151f2 <_strtod_l+0x52a>
 801523e:	2a1f      	cmp	r2, #31
 8015240:	dd1e      	ble.n	8015280 <_strtod_l+0x5b8>
 8015242:	2500      	movs	r5, #0
 8015244:	462e      	mov	r6, r5
 8015246:	950a      	str	r5, [sp, #40]	; 0x28
 8015248:	462f      	mov	r7, r5
 801524a:	2322      	movs	r3, #34	; 0x22
 801524c:	f04f 0800 	mov.w	r8, #0
 8015250:	f04f 0900 	mov.w	r9, #0
 8015254:	6023      	str	r3, [r4, #0]
 8015256:	e789      	b.n	801516c <_strtod_l+0x4a4>
 8015258:	08019511 	.word	0x08019511
 801525c:	08019554 	.word	0x08019554
 8015260:	08019509 	.word	0x08019509
 8015264:	080196b9 	.word	0x080196b9
 8015268:	08019970 	.word	0x08019970
 801526c:	08019850 	.word	0x08019850
 8015270:	08019828 	.word	0x08019828
 8015274:	7ca00000 	.word	0x7ca00000
 8015278:	7ff00000 	.word	0x7ff00000
 801527c:	7fefffff 	.word	0x7fefffff
 8015280:	f012 0110 	ands.w	r1, r2, #16
 8015284:	bf18      	it	ne
 8015286:	216a      	movne	r1, #106	; 0x6a
 8015288:	e9cd 8908 	strd	r8, r9, [sp, #32]
 801528c:	9104      	str	r1, [sp, #16]
 801528e:	49c0      	ldr	r1, [pc, #768]	; (8015590 <_strtod_l+0x8c8>)
 8015290:	2000      	movs	r0, #0
 8015292:	07d7      	lsls	r7, r2, #31
 8015294:	d508      	bpl.n	80152a8 <_strtod_l+0x5e0>
 8015296:	ed9d 6b08 	vldr	d6, [sp, #32]
 801529a:	ed91 7b00 	vldr	d7, [r1]
 801529e:	ee26 7b07 	vmul.f64	d7, d6, d7
 80152a2:	ed8d 7b08 	vstr	d7, [sp, #32]
 80152a6:	2001      	movs	r0, #1
 80152a8:	1052      	asrs	r2, r2, #1
 80152aa:	f101 0108 	add.w	r1, r1, #8
 80152ae:	d1f0      	bne.n	8015292 <_strtod_l+0x5ca>
 80152b0:	b108      	cbz	r0, 80152b6 <_strtod_l+0x5ee>
 80152b2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80152b6:	9a04      	ldr	r2, [sp, #16]
 80152b8:	b1ba      	cbz	r2, 80152ea <_strtod_l+0x622>
 80152ba:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80152be:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 80152c2:	2a00      	cmp	r2, #0
 80152c4:	4649      	mov	r1, r9
 80152c6:	dd10      	ble.n	80152ea <_strtod_l+0x622>
 80152c8:	2a1f      	cmp	r2, #31
 80152ca:	f340 8132 	ble.w	8015532 <_strtod_l+0x86a>
 80152ce:	2a34      	cmp	r2, #52	; 0x34
 80152d0:	bfde      	ittt	le
 80152d2:	3a20      	suble	r2, #32
 80152d4:	f04f 30ff 	movle.w	r0, #4294967295
 80152d8:	fa00 f202 	lslle.w	r2, r0, r2
 80152dc:	f04f 0800 	mov.w	r8, #0
 80152e0:	bfcc      	ite	gt
 80152e2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80152e6:	ea02 0901 	andle.w	r9, r2, r1
 80152ea:	ec49 8b17 	vmov	d7, r8, r9
 80152ee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80152f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152f6:	d0a4      	beq.n	8015242 <_strtod_l+0x57a>
 80152f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80152fa:	9200      	str	r2, [sp, #0]
 80152fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80152fe:	4632      	mov	r2, r6
 8015300:	4620      	mov	r0, r4
 8015302:	f001 fdf3 	bl	8016eec <__s2b>
 8015306:	900a      	str	r0, [sp, #40]	; 0x28
 8015308:	2800      	cmp	r0, #0
 801530a:	f43f af25 	beq.w	8015158 <_strtod_l+0x490>
 801530e:	9b06      	ldr	r3, [sp, #24]
 8015310:	ebab 0505 	sub.w	r5, fp, r5
 8015314:	2b00      	cmp	r3, #0
 8015316:	bfb4      	ite	lt
 8015318:	462b      	movlt	r3, r5
 801531a:	2300      	movge	r3, #0
 801531c:	930c      	str	r3, [sp, #48]	; 0x30
 801531e:	9b06      	ldr	r3, [sp, #24]
 8015320:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8015578 <_strtod_l+0x8b0>
 8015324:	ed9f ab96 	vldr	d10, [pc, #600]	; 8015580 <_strtod_l+0x8b8>
 8015328:	ed9f bb97 	vldr	d11, [pc, #604]	; 8015588 <_strtod_l+0x8c0>
 801532c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015330:	2500      	movs	r5, #0
 8015332:	9312      	str	r3, [sp, #72]	; 0x48
 8015334:	462e      	mov	r6, r5
 8015336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015338:	4620      	mov	r0, r4
 801533a:	6859      	ldr	r1, [r3, #4]
 801533c:	f001 fd2a 	bl	8016d94 <_Balloc>
 8015340:	4607      	mov	r7, r0
 8015342:	2800      	cmp	r0, #0
 8015344:	f43f af0c 	beq.w	8015160 <_strtod_l+0x498>
 8015348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801534a:	691a      	ldr	r2, [r3, #16]
 801534c:	3202      	adds	r2, #2
 801534e:	f103 010c 	add.w	r1, r3, #12
 8015352:	0092      	lsls	r2, r2, #2
 8015354:	300c      	adds	r0, #12
 8015356:	f001 fd0f 	bl	8016d78 <memcpy>
 801535a:	ec49 8b10 	vmov	d0, r8, r9
 801535e:	aa1a      	add	r2, sp, #104	; 0x68
 8015360:	a919      	add	r1, sp, #100	; 0x64
 8015362:	4620      	mov	r0, r4
 8015364:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8015368:	f002 f8fc 	bl	8017564 <__d2b>
 801536c:	9018      	str	r0, [sp, #96]	; 0x60
 801536e:	2800      	cmp	r0, #0
 8015370:	f43f aef6 	beq.w	8015160 <_strtod_l+0x498>
 8015374:	2101      	movs	r1, #1
 8015376:	4620      	mov	r0, r4
 8015378:	f001 fe52 	bl	8017020 <__i2b>
 801537c:	4606      	mov	r6, r0
 801537e:	2800      	cmp	r0, #0
 8015380:	f43f aeee 	beq.w	8015160 <_strtod_l+0x498>
 8015384:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015386:	991a      	ldr	r1, [sp, #104]	; 0x68
 8015388:	2b00      	cmp	r3, #0
 801538a:	bfab      	itete	ge
 801538c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801538e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8015390:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 8015394:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8015398:	bfac      	ite	ge
 801539a:	eb03 0b02 	addge.w	fp, r3, r2
 801539e:	eba2 0a03 	sublt.w	sl, r2, r3
 80153a2:	9a04      	ldr	r2, [sp, #16]
 80153a4:	1a9b      	subs	r3, r3, r2
 80153a6:	440b      	add	r3, r1
 80153a8:	4a7a      	ldr	r2, [pc, #488]	; (8015594 <_strtod_l+0x8cc>)
 80153aa:	3b01      	subs	r3, #1
 80153ac:	4293      	cmp	r3, r2
 80153ae:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80153b2:	f280 80d1 	bge.w	8015558 <_strtod_l+0x890>
 80153b6:	1ad2      	subs	r2, r2, r3
 80153b8:	2a1f      	cmp	r2, #31
 80153ba:	eba1 0102 	sub.w	r1, r1, r2
 80153be:	f04f 0001 	mov.w	r0, #1
 80153c2:	f300 80bd 	bgt.w	8015540 <_strtod_l+0x878>
 80153c6:	fa00 f302 	lsl.w	r3, r0, r2
 80153ca:	930e      	str	r3, [sp, #56]	; 0x38
 80153cc:	2300      	movs	r3, #0
 80153ce:	930d      	str	r3, [sp, #52]	; 0x34
 80153d0:	eb0b 0301 	add.w	r3, fp, r1
 80153d4:	9a04      	ldr	r2, [sp, #16]
 80153d6:	459b      	cmp	fp, r3
 80153d8:	448a      	add	sl, r1
 80153da:	4492      	add	sl, r2
 80153dc:	465a      	mov	r2, fp
 80153de:	bfa8      	it	ge
 80153e0:	461a      	movge	r2, r3
 80153e2:	4552      	cmp	r2, sl
 80153e4:	bfa8      	it	ge
 80153e6:	4652      	movge	r2, sl
 80153e8:	2a00      	cmp	r2, #0
 80153ea:	bfc2      	ittt	gt
 80153ec:	1a9b      	subgt	r3, r3, r2
 80153ee:	ebaa 0a02 	subgt.w	sl, sl, r2
 80153f2:	ebab 0b02 	subgt.w	fp, fp, r2
 80153f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80153f8:	2a00      	cmp	r2, #0
 80153fa:	dd18      	ble.n	801542e <_strtod_l+0x766>
 80153fc:	4631      	mov	r1, r6
 80153fe:	4620      	mov	r0, r4
 8015400:	9315      	str	r3, [sp, #84]	; 0x54
 8015402:	f001 fec9 	bl	8017198 <__pow5mult>
 8015406:	4606      	mov	r6, r0
 8015408:	2800      	cmp	r0, #0
 801540a:	f43f aea9 	beq.w	8015160 <_strtod_l+0x498>
 801540e:	4601      	mov	r1, r0
 8015410:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015412:	4620      	mov	r0, r4
 8015414:	f001 fe1a 	bl	801704c <__multiply>
 8015418:	9014      	str	r0, [sp, #80]	; 0x50
 801541a:	2800      	cmp	r0, #0
 801541c:	f43f aea0 	beq.w	8015160 <_strtod_l+0x498>
 8015420:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015422:	4620      	mov	r0, r4
 8015424:	f001 fcf6 	bl	8016e14 <_Bfree>
 8015428:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801542a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801542c:	9218      	str	r2, [sp, #96]	; 0x60
 801542e:	2b00      	cmp	r3, #0
 8015430:	f300 8097 	bgt.w	8015562 <_strtod_l+0x89a>
 8015434:	9b06      	ldr	r3, [sp, #24]
 8015436:	2b00      	cmp	r3, #0
 8015438:	dd08      	ble.n	801544c <_strtod_l+0x784>
 801543a:	4639      	mov	r1, r7
 801543c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801543e:	4620      	mov	r0, r4
 8015440:	f001 feaa 	bl	8017198 <__pow5mult>
 8015444:	4607      	mov	r7, r0
 8015446:	2800      	cmp	r0, #0
 8015448:	f43f ae8a 	beq.w	8015160 <_strtod_l+0x498>
 801544c:	f1ba 0f00 	cmp.w	sl, #0
 8015450:	dd08      	ble.n	8015464 <_strtod_l+0x79c>
 8015452:	4639      	mov	r1, r7
 8015454:	4652      	mov	r2, sl
 8015456:	4620      	mov	r0, r4
 8015458:	f001 fef8 	bl	801724c <__lshift>
 801545c:	4607      	mov	r7, r0
 801545e:	2800      	cmp	r0, #0
 8015460:	f43f ae7e 	beq.w	8015160 <_strtod_l+0x498>
 8015464:	f1bb 0f00 	cmp.w	fp, #0
 8015468:	dd08      	ble.n	801547c <_strtod_l+0x7b4>
 801546a:	4631      	mov	r1, r6
 801546c:	465a      	mov	r2, fp
 801546e:	4620      	mov	r0, r4
 8015470:	f001 feec 	bl	801724c <__lshift>
 8015474:	4606      	mov	r6, r0
 8015476:	2800      	cmp	r0, #0
 8015478:	f43f ae72 	beq.w	8015160 <_strtod_l+0x498>
 801547c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801547e:	463a      	mov	r2, r7
 8015480:	4620      	mov	r0, r4
 8015482:	f001 ff6b 	bl	801735c <__mdiff>
 8015486:	4605      	mov	r5, r0
 8015488:	2800      	cmp	r0, #0
 801548a:	f43f ae69 	beq.w	8015160 <_strtod_l+0x498>
 801548e:	2300      	movs	r3, #0
 8015490:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8015494:	60c3      	str	r3, [r0, #12]
 8015496:	4631      	mov	r1, r6
 8015498:	f001 ff44 	bl	8017324 <__mcmp>
 801549c:	2800      	cmp	r0, #0
 801549e:	da7f      	bge.n	80155a0 <_strtod_l+0x8d8>
 80154a0:	ea5a 0308 	orrs.w	r3, sl, r8
 80154a4:	f040 80a5 	bne.w	80155f2 <_strtod_l+0x92a>
 80154a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	f040 80a0 	bne.w	80155f2 <_strtod_l+0x92a>
 80154b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80154b6:	0d1b      	lsrs	r3, r3, #20
 80154b8:	051b      	lsls	r3, r3, #20
 80154ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80154be:	f240 8098 	bls.w	80155f2 <_strtod_l+0x92a>
 80154c2:	696b      	ldr	r3, [r5, #20]
 80154c4:	b91b      	cbnz	r3, 80154ce <_strtod_l+0x806>
 80154c6:	692b      	ldr	r3, [r5, #16]
 80154c8:	2b01      	cmp	r3, #1
 80154ca:	f340 8092 	ble.w	80155f2 <_strtod_l+0x92a>
 80154ce:	4629      	mov	r1, r5
 80154d0:	2201      	movs	r2, #1
 80154d2:	4620      	mov	r0, r4
 80154d4:	f001 feba 	bl	801724c <__lshift>
 80154d8:	4631      	mov	r1, r6
 80154da:	4605      	mov	r5, r0
 80154dc:	f001 ff22 	bl	8017324 <__mcmp>
 80154e0:	2800      	cmp	r0, #0
 80154e2:	f340 8086 	ble.w	80155f2 <_strtod_l+0x92a>
 80154e6:	9904      	ldr	r1, [sp, #16]
 80154e8:	4a2b      	ldr	r2, [pc, #172]	; (8015598 <_strtod_l+0x8d0>)
 80154ea:	464b      	mov	r3, r9
 80154ec:	2900      	cmp	r1, #0
 80154ee:	f000 80a1 	beq.w	8015634 <_strtod_l+0x96c>
 80154f2:	ea02 0109 	and.w	r1, r2, r9
 80154f6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80154fa:	f300 809b 	bgt.w	8015634 <_strtod_l+0x96c>
 80154fe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8015502:	f77f aea2 	ble.w	801524a <_strtod_l+0x582>
 8015506:	4a25      	ldr	r2, [pc, #148]	; (801559c <_strtod_l+0x8d4>)
 8015508:	2300      	movs	r3, #0
 801550a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 801550e:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8015512:	ec49 8b17 	vmov	d7, r8, r9
 8015516:	ee27 7b06 	vmul.f64	d7, d7, d6
 801551a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801551e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8015522:	4313      	orrs	r3, r2
 8015524:	bf08      	it	eq
 8015526:	2322      	moveq	r3, #34	; 0x22
 8015528:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801552c:	bf08      	it	eq
 801552e:	6023      	streq	r3, [r4, #0]
 8015530:	e620      	b.n	8015174 <_strtod_l+0x4ac>
 8015532:	f04f 31ff 	mov.w	r1, #4294967295
 8015536:	fa01 f202 	lsl.w	r2, r1, r2
 801553a:	ea02 0808 	and.w	r8, r2, r8
 801553e:	e6d4      	b.n	80152ea <_strtod_l+0x622>
 8015540:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8015544:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8015548:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801554c:	33e2      	adds	r3, #226	; 0xe2
 801554e:	fa00 f303 	lsl.w	r3, r0, r3
 8015552:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 8015556:	e73b      	b.n	80153d0 <_strtod_l+0x708>
 8015558:	2000      	movs	r0, #0
 801555a:	2301      	movs	r3, #1
 801555c:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8015560:	e736      	b.n	80153d0 <_strtod_l+0x708>
 8015562:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015564:	461a      	mov	r2, r3
 8015566:	4620      	mov	r0, r4
 8015568:	f001 fe70 	bl	801724c <__lshift>
 801556c:	9018      	str	r0, [sp, #96]	; 0x60
 801556e:	2800      	cmp	r0, #0
 8015570:	f47f af60 	bne.w	8015434 <_strtod_l+0x76c>
 8015574:	e5f4      	b.n	8015160 <_strtod_l+0x498>
 8015576:	bf00      	nop
 8015578:	94a03595 	.word	0x94a03595
 801557c:	3fcfffff 	.word	0x3fcfffff
 8015580:	94a03595 	.word	0x94a03595
 8015584:	3fdfffff 	.word	0x3fdfffff
 8015588:	35afe535 	.word	0x35afe535
 801558c:	3fe00000 	.word	0x3fe00000
 8015590:	08019568 	.word	0x08019568
 8015594:	fffffc02 	.word	0xfffffc02
 8015598:	7ff00000 	.word	0x7ff00000
 801559c:	39500000 	.word	0x39500000
 80155a0:	46cb      	mov	fp, r9
 80155a2:	d165      	bne.n	8015670 <_strtod_l+0x9a8>
 80155a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80155a8:	f1ba 0f00 	cmp.w	sl, #0
 80155ac:	d02a      	beq.n	8015604 <_strtod_l+0x93c>
 80155ae:	4aaa      	ldr	r2, [pc, #680]	; (8015858 <_strtod_l+0xb90>)
 80155b0:	4293      	cmp	r3, r2
 80155b2:	d12b      	bne.n	801560c <_strtod_l+0x944>
 80155b4:	9b04      	ldr	r3, [sp, #16]
 80155b6:	4641      	mov	r1, r8
 80155b8:	b1fb      	cbz	r3, 80155fa <_strtod_l+0x932>
 80155ba:	4aa8      	ldr	r2, [pc, #672]	; (801585c <_strtod_l+0xb94>)
 80155bc:	ea09 0202 	and.w	r2, r9, r2
 80155c0:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80155c4:	f04f 30ff 	mov.w	r0, #4294967295
 80155c8:	d81a      	bhi.n	8015600 <_strtod_l+0x938>
 80155ca:	0d12      	lsrs	r2, r2, #20
 80155cc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80155d0:	fa00 f303 	lsl.w	r3, r0, r3
 80155d4:	4299      	cmp	r1, r3
 80155d6:	d119      	bne.n	801560c <_strtod_l+0x944>
 80155d8:	4ba1      	ldr	r3, [pc, #644]	; (8015860 <_strtod_l+0xb98>)
 80155da:	459b      	cmp	fp, r3
 80155dc:	d102      	bne.n	80155e4 <_strtod_l+0x91c>
 80155de:	3101      	adds	r1, #1
 80155e0:	f43f adbe 	beq.w	8015160 <_strtod_l+0x498>
 80155e4:	4b9d      	ldr	r3, [pc, #628]	; (801585c <_strtod_l+0xb94>)
 80155e6:	ea0b 0303 	and.w	r3, fp, r3
 80155ea:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80155ee:	f04f 0800 	mov.w	r8, #0
 80155f2:	9b04      	ldr	r3, [sp, #16]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d186      	bne.n	8015506 <_strtod_l+0x83e>
 80155f8:	e5bc      	b.n	8015174 <_strtod_l+0x4ac>
 80155fa:	f04f 33ff 	mov.w	r3, #4294967295
 80155fe:	e7e9      	b.n	80155d4 <_strtod_l+0x90c>
 8015600:	4603      	mov	r3, r0
 8015602:	e7e7      	b.n	80155d4 <_strtod_l+0x90c>
 8015604:	ea53 0308 	orrs.w	r3, r3, r8
 8015608:	f43f af6d 	beq.w	80154e6 <_strtod_l+0x81e>
 801560c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801560e:	b1db      	cbz	r3, 8015648 <_strtod_l+0x980>
 8015610:	ea13 0f0b 	tst.w	r3, fp
 8015614:	d0ed      	beq.n	80155f2 <_strtod_l+0x92a>
 8015616:	9a04      	ldr	r2, [sp, #16]
 8015618:	4640      	mov	r0, r8
 801561a:	4649      	mov	r1, r9
 801561c:	f1ba 0f00 	cmp.w	sl, #0
 8015620:	d016      	beq.n	8015650 <_strtod_l+0x988>
 8015622:	f7ff fb34 	bl	8014c8e <sulp>
 8015626:	ed9d 7b08 	vldr	d7, [sp, #32]
 801562a:	ee37 7b00 	vadd.f64	d7, d7, d0
 801562e:	ec59 8b17 	vmov	r8, r9, d7
 8015632:	e7de      	b.n	80155f2 <_strtod_l+0x92a>
 8015634:	4013      	ands	r3, r2
 8015636:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801563a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801563e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8015642:	f04f 38ff 	mov.w	r8, #4294967295
 8015646:	e7d4      	b.n	80155f2 <_strtod_l+0x92a>
 8015648:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801564a:	ea13 0f08 	tst.w	r3, r8
 801564e:	e7e1      	b.n	8015614 <_strtod_l+0x94c>
 8015650:	f7ff fb1d 	bl	8014c8e <sulp>
 8015654:	ed9d 7b08 	vldr	d7, [sp, #32]
 8015658:	ee37 7b40 	vsub.f64	d7, d7, d0
 801565c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015660:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015668:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 801566c:	d1c1      	bne.n	80155f2 <_strtod_l+0x92a>
 801566e:	e5ec      	b.n	801524a <_strtod_l+0x582>
 8015670:	4631      	mov	r1, r6
 8015672:	4628      	mov	r0, r5
 8015674:	f001 ffd2 	bl	801761c <__ratio>
 8015678:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801567c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8015680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015684:	d867      	bhi.n	8015756 <_strtod_l+0xa8e>
 8015686:	f1ba 0f00 	cmp.w	sl, #0
 801568a:	d044      	beq.n	8015716 <_strtod_l+0xa4e>
 801568c:	4b75      	ldr	r3, [pc, #468]	; (8015864 <_strtod_l+0xb9c>)
 801568e:	2200      	movs	r2, #0
 8015690:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8015694:	4971      	ldr	r1, [pc, #452]	; (801585c <_strtod_l+0xb94>)
 8015696:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8015870 <_strtod_l+0xba8>
 801569a:	ea0b 0001 	and.w	r0, fp, r1
 801569e:	4560      	cmp	r0, ip
 80156a0:	900d      	str	r0, [sp, #52]	; 0x34
 80156a2:	f040 808b 	bne.w	80157bc <_strtod_l+0xaf4>
 80156a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80156aa:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80156ae:	ec49 8b10 	vmov	d0, r8, r9
 80156b2:	ec43 2b1c 	vmov	d12, r2, r3
 80156b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80156ba:	f001 fed7 	bl	801746c <__ulp>
 80156be:	ec49 8b1d 	vmov	d13, r8, r9
 80156c2:	eeac db00 	vfma.f64	d13, d12, d0
 80156c6:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 80156ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80156cc:	4963      	ldr	r1, [pc, #396]	; (801585c <_strtod_l+0xb94>)
 80156ce:	4a66      	ldr	r2, [pc, #408]	; (8015868 <_strtod_l+0xba0>)
 80156d0:	4019      	ands	r1, r3
 80156d2:	4291      	cmp	r1, r2
 80156d4:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 80156d8:	d947      	bls.n	801576a <_strtod_l+0xaa2>
 80156da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156dc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80156e0:	4293      	cmp	r3, r2
 80156e2:	d103      	bne.n	80156ec <_strtod_l+0xa24>
 80156e4:	9b08      	ldr	r3, [sp, #32]
 80156e6:	3301      	adds	r3, #1
 80156e8:	f43f ad3a 	beq.w	8015160 <_strtod_l+0x498>
 80156ec:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8015860 <_strtod_l+0xb98>
 80156f0:	f04f 38ff 	mov.w	r8, #4294967295
 80156f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80156f6:	4620      	mov	r0, r4
 80156f8:	f001 fb8c 	bl	8016e14 <_Bfree>
 80156fc:	4639      	mov	r1, r7
 80156fe:	4620      	mov	r0, r4
 8015700:	f001 fb88 	bl	8016e14 <_Bfree>
 8015704:	4631      	mov	r1, r6
 8015706:	4620      	mov	r0, r4
 8015708:	f001 fb84 	bl	8016e14 <_Bfree>
 801570c:	4629      	mov	r1, r5
 801570e:	4620      	mov	r0, r4
 8015710:	f001 fb80 	bl	8016e14 <_Bfree>
 8015714:	e60f      	b.n	8015336 <_strtod_l+0x66e>
 8015716:	f1b8 0f00 	cmp.w	r8, #0
 801571a:	d112      	bne.n	8015742 <_strtod_l+0xa7a>
 801571c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015720:	b9b3      	cbnz	r3, 8015750 <_strtod_l+0xa88>
 8015722:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8015726:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801572a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801572e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8015732:	d401      	bmi.n	8015738 <_strtod_l+0xa70>
 8015734:	ee20 8b08 	vmul.f64	d8, d0, d8
 8015738:	eeb1 7b48 	vneg.f64	d7, d8
 801573c:	ec53 2b17 	vmov	r2, r3, d7
 8015740:	e7a8      	b.n	8015694 <_strtod_l+0x9cc>
 8015742:	f1b8 0f01 	cmp.w	r8, #1
 8015746:	d103      	bne.n	8015750 <_strtod_l+0xa88>
 8015748:	f1b9 0f00 	cmp.w	r9, #0
 801574c:	f43f ad7d 	beq.w	801524a <_strtod_l+0x582>
 8015750:	4b46      	ldr	r3, [pc, #280]	; (801586c <_strtod_l+0xba4>)
 8015752:	2200      	movs	r2, #0
 8015754:	e79c      	b.n	8015690 <_strtod_l+0x9c8>
 8015756:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801575a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801575e:	f1ba 0f00 	cmp.w	sl, #0
 8015762:	d0e9      	beq.n	8015738 <_strtod_l+0xa70>
 8015764:	ec53 2b18 	vmov	r2, r3, d8
 8015768:	e794      	b.n	8015694 <_strtod_l+0x9cc>
 801576a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801576e:	9b04      	ldr	r3, [sp, #16]
 8015770:	2b00      	cmp	r3, #0
 8015772:	d1bf      	bne.n	80156f4 <_strtod_l+0xa2c>
 8015774:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015778:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801577a:	0d1b      	lsrs	r3, r3, #20
 801577c:	051b      	lsls	r3, r3, #20
 801577e:	429a      	cmp	r2, r3
 8015780:	d1b8      	bne.n	80156f4 <_strtod_l+0xa2c>
 8015782:	ec51 0b18 	vmov	r0, r1, d8
 8015786:	f7ea ffd7 	bl	8000738 <__aeabi_d2lz>
 801578a:	f7ea ff8f 	bl	80006ac <__aeabi_l2d>
 801578e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015792:	ec41 0b17 	vmov	d7, r0, r1
 8015796:	ea43 0308 	orr.w	r3, r3, r8
 801579a:	ea53 030a 	orrs.w	r3, r3, sl
 801579e:	ee38 8b47 	vsub.f64	d8, d8, d7
 80157a2:	d03e      	beq.n	8015822 <_strtod_l+0xb5a>
 80157a4:	eeb4 8bca 	vcmpe.f64	d8, d10
 80157a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157ac:	f53f ace2 	bmi.w	8015174 <_strtod_l+0x4ac>
 80157b0:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80157b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157b8:	dd9c      	ble.n	80156f4 <_strtod_l+0xa2c>
 80157ba:	e4db      	b.n	8015174 <_strtod_l+0x4ac>
 80157bc:	9904      	ldr	r1, [sp, #16]
 80157be:	b301      	cbz	r1, 8015802 <_strtod_l+0xb3a>
 80157c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80157c2:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80157c6:	d81c      	bhi.n	8015802 <_strtod_l+0xb3a>
 80157c8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8015850 <_strtod_l+0xb88>
 80157cc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80157d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157d4:	d811      	bhi.n	80157fa <_strtod_l+0xb32>
 80157d6:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80157da:	ee18 3a10 	vmov	r3, s16
 80157de:	2b01      	cmp	r3, #1
 80157e0:	bf38      	it	cc
 80157e2:	2301      	movcc	r3, #1
 80157e4:	ee08 3a10 	vmov	s16, r3
 80157e8:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80157ec:	f1ba 0f00 	cmp.w	sl, #0
 80157f0:	d114      	bne.n	801581c <_strtod_l+0xb54>
 80157f2:	eeb1 7b48 	vneg.f64	d7, d8
 80157f6:	ec53 2b17 	vmov	r2, r3, d7
 80157fa:	980d      	ldr	r0, [sp, #52]	; 0x34
 80157fc:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8015800:	1a0b      	subs	r3, r1, r0
 8015802:	ed9d 0b08 	vldr	d0, [sp, #32]
 8015806:	ec43 2b1c 	vmov	d12, r2, r3
 801580a:	f001 fe2f 	bl	801746c <__ulp>
 801580e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8015812:	eeac 7b00 	vfma.f64	d7, d12, d0
 8015816:	ec59 8b17 	vmov	r8, r9, d7
 801581a:	e7a8      	b.n	801576e <_strtod_l+0xaa6>
 801581c:	ec53 2b18 	vmov	r2, r3, d8
 8015820:	e7eb      	b.n	80157fa <_strtod_l+0xb32>
 8015822:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8015826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801582a:	f57f af63 	bpl.w	80156f4 <_strtod_l+0xa2c>
 801582e:	e4a1      	b.n	8015174 <_strtod_l+0x4ac>
 8015830:	2300      	movs	r3, #0
 8015832:	930b      	str	r3, [sp, #44]	; 0x2c
 8015834:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015836:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015838:	6013      	str	r3, [r2, #0]
 801583a:	f7ff ba8d 	b.w	8014d58 <_strtod_l+0x90>
 801583e:	2a65      	cmp	r2, #101	; 0x65
 8015840:	f43f ab89 	beq.w	8014f56 <_strtod_l+0x28e>
 8015844:	2a45      	cmp	r2, #69	; 0x45
 8015846:	f43f ab86 	beq.w	8014f56 <_strtod_l+0x28e>
 801584a:	2101      	movs	r1, #1
 801584c:	f7ff bbbe 	b.w	8014fcc <_strtod_l+0x304>
 8015850:	ffc00000 	.word	0xffc00000
 8015854:	41dfffff 	.word	0x41dfffff
 8015858:	000fffff 	.word	0x000fffff
 801585c:	7ff00000 	.word	0x7ff00000
 8015860:	7fefffff 	.word	0x7fefffff
 8015864:	3ff00000 	.word	0x3ff00000
 8015868:	7c9fffff 	.word	0x7c9fffff
 801586c:	bff00000 	.word	0xbff00000
 8015870:	7fe00000 	.word	0x7fe00000

08015874 <_strtod_r>:
 8015874:	4b01      	ldr	r3, [pc, #4]	; (801587c <_strtod_r+0x8>)
 8015876:	f7ff ba27 	b.w	8014cc8 <_strtod_l>
 801587a:	bf00      	nop
 801587c:	24000088 	.word	0x24000088

08015880 <strtod>:
 8015880:	460a      	mov	r2, r1
 8015882:	4601      	mov	r1, r0
 8015884:	4802      	ldr	r0, [pc, #8]	; (8015890 <strtod+0x10>)
 8015886:	4b03      	ldr	r3, [pc, #12]	; (8015894 <strtod+0x14>)
 8015888:	6800      	ldr	r0, [r0, #0]
 801588a:	f7ff ba1d 	b.w	8014cc8 <_strtod_l>
 801588e:	bf00      	nop
 8015890:	24000020 	.word	0x24000020
 8015894:	24000088 	.word	0x24000088

08015898 <_strtol_l.isra.0>:
 8015898:	2b01      	cmp	r3, #1
 801589a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801589e:	d001      	beq.n	80158a4 <_strtol_l.isra.0+0xc>
 80158a0:	2b24      	cmp	r3, #36	; 0x24
 80158a2:	d906      	bls.n	80158b2 <_strtol_l.isra.0+0x1a>
 80158a4:	f7fe fb2c 	bl	8013f00 <__errno>
 80158a8:	2316      	movs	r3, #22
 80158aa:	6003      	str	r3, [r0, #0]
 80158ac:	2000      	movs	r0, #0
 80158ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158b2:	4f3a      	ldr	r7, [pc, #232]	; (801599c <_strtol_l.isra.0+0x104>)
 80158b4:	468e      	mov	lr, r1
 80158b6:	4676      	mov	r6, lr
 80158b8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80158bc:	5de5      	ldrb	r5, [r4, r7]
 80158be:	f015 0508 	ands.w	r5, r5, #8
 80158c2:	d1f8      	bne.n	80158b6 <_strtol_l.isra.0+0x1e>
 80158c4:	2c2d      	cmp	r4, #45	; 0x2d
 80158c6:	d134      	bne.n	8015932 <_strtol_l.isra.0+0x9a>
 80158c8:	f89e 4000 	ldrb.w	r4, [lr]
 80158cc:	f04f 0801 	mov.w	r8, #1
 80158d0:	f106 0e02 	add.w	lr, r6, #2
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d05c      	beq.n	8015992 <_strtol_l.isra.0+0xfa>
 80158d8:	2b10      	cmp	r3, #16
 80158da:	d10c      	bne.n	80158f6 <_strtol_l.isra.0+0x5e>
 80158dc:	2c30      	cmp	r4, #48	; 0x30
 80158de:	d10a      	bne.n	80158f6 <_strtol_l.isra.0+0x5e>
 80158e0:	f89e 4000 	ldrb.w	r4, [lr]
 80158e4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80158e8:	2c58      	cmp	r4, #88	; 0x58
 80158ea:	d14d      	bne.n	8015988 <_strtol_l.isra.0+0xf0>
 80158ec:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80158f0:	2310      	movs	r3, #16
 80158f2:	f10e 0e02 	add.w	lr, lr, #2
 80158f6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80158fa:	f10c 3cff 	add.w	ip, ip, #4294967295
 80158fe:	2600      	movs	r6, #0
 8015900:	fbbc f9f3 	udiv	r9, ip, r3
 8015904:	4635      	mov	r5, r6
 8015906:	fb03 ca19 	mls	sl, r3, r9, ip
 801590a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801590e:	2f09      	cmp	r7, #9
 8015910:	d818      	bhi.n	8015944 <_strtol_l.isra.0+0xac>
 8015912:	463c      	mov	r4, r7
 8015914:	42a3      	cmp	r3, r4
 8015916:	dd24      	ble.n	8015962 <_strtol_l.isra.0+0xca>
 8015918:	2e00      	cmp	r6, #0
 801591a:	db1f      	blt.n	801595c <_strtol_l.isra.0+0xc4>
 801591c:	45a9      	cmp	r9, r5
 801591e:	d31d      	bcc.n	801595c <_strtol_l.isra.0+0xc4>
 8015920:	d101      	bne.n	8015926 <_strtol_l.isra.0+0x8e>
 8015922:	45a2      	cmp	sl, r4
 8015924:	db1a      	blt.n	801595c <_strtol_l.isra.0+0xc4>
 8015926:	fb05 4503 	mla	r5, r5, r3, r4
 801592a:	2601      	movs	r6, #1
 801592c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8015930:	e7eb      	b.n	801590a <_strtol_l.isra.0+0x72>
 8015932:	2c2b      	cmp	r4, #43	; 0x2b
 8015934:	bf08      	it	eq
 8015936:	f89e 4000 	ldrbeq.w	r4, [lr]
 801593a:	46a8      	mov	r8, r5
 801593c:	bf08      	it	eq
 801593e:	f106 0e02 	addeq.w	lr, r6, #2
 8015942:	e7c7      	b.n	80158d4 <_strtol_l.isra.0+0x3c>
 8015944:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8015948:	2f19      	cmp	r7, #25
 801594a:	d801      	bhi.n	8015950 <_strtol_l.isra.0+0xb8>
 801594c:	3c37      	subs	r4, #55	; 0x37
 801594e:	e7e1      	b.n	8015914 <_strtol_l.isra.0+0x7c>
 8015950:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8015954:	2f19      	cmp	r7, #25
 8015956:	d804      	bhi.n	8015962 <_strtol_l.isra.0+0xca>
 8015958:	3c57      	subs	r4, #87	; 0x57
 801595a:	e7db      	b.n	8015914 <_strtol_l.isra.0+0x7c>
 801595c:	f04f 36ff 	mov.w	r6, #4294967295
 8015960:	e7e4      	b.n	801592c <_strtol_l.isra.0+0x94>
 8015962:	2e00      	cmp	r6, #0
 8015964:	da05      	bge.n	8015972 <_strtol_l.isra.0+0xda>
 8015966:	2322      	movs	r3, #34	; 0x22
 8015968:	6003      	str	r3, [r0, #0]
 801596a:	4665      	mov	r5, ip
 801596c:	b942      	cbnz	r2, 8015980 <_strtol_l.isra.0+0xe8>
 801596e:	4628      	mov	r0, r5
 8015970:	e79d      	b.n	80158ae <_strtol_l.isra.0+0x16>
 8015972:	f1b8 0f00 	cmp.w	r8, #0
 8015976:	d000      	beq.n	801597a <_strtol_l.isra.0+0xe2>
 8015978:	426d      	negs	r5, r5
 801597a:	2a00      	cmp	r2, #0
 801597c:	d0f7      	beq.n	801596e <_strtol_l.isra.0+0xd6>
 801597e:	b10e      	cbz	r6, 8015984 <_strtol_l.isra.0+0xec>
 8015980:	f10e 31ff 	add.w	r1, lr, #4294967295
 8015984:	6011      	str	r1, [r2, #0]
 8015986:	e7f2      	b.n	801596e <_strtol_l.isra.0+0xd6>
 8015988:	2430      	movs	r4, #48	; 0x30
 801598a:	2b00      	cmp	r3, #0
 801598c:	d1b3      	bne.n	80158f6 <_strtol_l.isra.0+0x5e>
 801598e:	2308      	movs	r3, #8
 8015990:	e7b1      	b.n	80158f6 <_strtol_l.isra.0+0x5e>
 8015992:	2c30      	cmp	r4, #48	; 0x30
 8015994:	d0a4      	beq.n	80158e0 <_strtol_l.isra.0+0x48>
 8015996:	230a      	movs	r3, #10
 8015998:	e7ad      	b.n	80158f6 <_strtol_l.isra.0+0x5e>
 801599a:	bf00      	nop
 801599c:	080195b6 	.word	0x080195b6

080159a0 <_strtol_r>:
 80159a0:	f7ff bf7a 	b.w	8015898 <_strtol_l.isra.0>

080159a4 <strtol>:
 80159a4:	4613      	mov	r3, r2
 80159a6:	460a      	mov	r2, r1
 80159a8:	4601      	mov	r1, r0
 80159aa:	4802      	ldr	r0, [pc, #8]	; (80159b4 <strtol+0x10>)
 80159ac:	6800      	ldr	r0, [r0, #0]
 80159ae:	f7ff bf73 	b.w	8015898 <_strtol_l.isra.0>
 80159b2:	bf00      	nop
 80159b4:	24000020 	.word	0x24000020

080159b8 <__utoa>:
 80159b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159ba:	4c1f      	ldr	r4, [pc, #124]	; (8015a38 <__utoa+0x80>)
 80159bc:	b08b      	sub	sp, #44	; 0x2c
 80159be:	4605      	mov	r5, r0
 80159c0:	460b      	mov	r3, r1
 80159c2:	466e      	mov	r6, sp
 80159c4:	f104 0c20 	add.w	ip, r4, #32
 80159c8:	6820      	ldr	r0, [r4, #0]
 80159ca:	6861      	ldr	r1, [r4, #4]
 80159cc:	4637      	mov	r7, r6
 80159ce:	c703      	stmia	r7!, {r0, r1}
 80159d0:	3408      	adds	r4, #8
 80159d2:	4564      	cmp	r4, ip
 80159d4:	463e      	mov	r6, r7
 80159d6:	d1f7      	bne.n	80159c8 <__utoa+0x10>
 80159d8:	7921      	ldrb	r1, [r4, #4]
 80159da:	7139      	strb	r1, [r7, #4]
 80159dc:	1e91      	subs	r1, r2, #2
 80159de:	6820      	ldr	r0, [r4, #0]
 80159e0:	6038      	str	r0, [r7, #0]
 80159e2:	2922      	cmp	r1, #34	; 0x22
 80159e4:	f04f 0100 	mov.w	r1, #0
 80159e8:	d904      	bls.n	80159f4 <__utoa+0x3c>
 80159ea:	7019      	strb	r1, [r3, #0]
 80159ec:	460b      	mov	r3, r1
 80159ee:	4618      	mov	r0, r3
 80159f0:	b00b      	add	sp, #44	; 0x2c
 80159f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80159f4:	1e58      	subs	r0, r3, #1
 80159f6:	4684      	mov	ip, r0
 80159f8:	fbb5 f7f2 	udiv	r7, r5, r2
 80159fc:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8015a00:	fb02 5617 	mls	r6, r2, r7, r5
 8015a04:	4476      	add	r6, lr
 8015a06:	460c      	mov	r4, r1
 8015a08:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8015a0c:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8015a10:	462e      	mov	r6, r5
 8015a12:	42b2      	cmp	r2, r6
 8015a14:	f101 0101 	add.w	r1, r1, #1
 8015a18:	463d      	mov	r5, r7
 8015a1a:	d9ed      	bls.n	80159f8 <__utoa+0x40>
 8015a1c:	2200      	movs	r2, #0
 8015a1e:	545a      	strb	r2, [r3, r1]
 8015a20:	1919      	adds	r1, r3, r4
 8015a22:	1aa5      	subs	r5, r4, r2
 8015a24:	42aa      	cmp	r2, r5
 8015a26:	dae2      	bge.n	80159ee <__utoa+0x36>
 8015a28:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8015a2c:	780e      	ldrb	r6, [r1, #0]
 8015a2e:	7006      	strb	r6, [r0, #0]
 8015a30:	3201      	adds	r2, #1
 8015a32:	f801 5901 	strb.w	r5, [r1], #-1
 8015a36:	e7f4      	b.n	8015a22 <__utoa+0x6a>
 8015a38:	08019590 	.word	0x08019590

08015a3c <quorem>:
 8015a3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a40:	6903      	ldr	r3, [r0, #16]
 8015a42:	690c      	ldr	r4, [r1, #16]
 8015a44:	42a3      	cmp	r3, r4
 8015a46:	4607      	mov	r7, r0
 8015a48:	f2c0 8081 	blt.w	8015b4e <quorem+0x112>
 8015a4c:	3c01      	subs	r4, #1
 8015a4e:	f101 0814 	add.w	r8, r1, #20
 8015a52:	f100 0514 	add.w	r5, r0, #20
 8015a56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015a5a:	9301      	str	r3, [sp, #4]
 8015a5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015a60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015a64:	3301      	adds	r3, #1
 8015a66:	429a      	cmp	r2, r3
 8015a68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015a6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015a70:	fbb2 f6f3 	udiv	r6, r2, r3
 8015a74:	d331      	bcc.n	8015ada <quorem+0x9e>
 8015a76:	f04f 0e00 	mov.w	lr, #0
 8015a7a:	4640      	mov	r0, r8
 8015a7c:	46ac      	mov	ip, r5
 8015a7e:	46f2      	mov	sl, lr
 8015a80:	f850 2b04 	ldr.w	r2, [r0], #4
 8015a84:	b293      	uxth	r3, r2
 8015a86:	fb06 e303 	mla	r3, r6, r3, lr
 8015a8a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8015a8e:	b29b      	uxth	r3, r3
 8015a90:	ebaa 0303 	sub.w	r3, sl, r3
 8015a94:	0c12      	lsrs	r2, r2, #16
 8015a96:	f8dc a000 	ldr.w	sl, [ip]
 8015a9a:	fb06 e202 	mla	r2, r6, r2, lr
 8015a9e:	fa13 f38a 	uxtah	r3, r3, sl
 8015aa2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015aa6:	fa1f fa82 	uxth.w	sl, r2
 8015aaa:	f8dc 2000 	ldr.w	r2, [ip]
 8015aae:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8015ab2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015ab6:	b29b      	uxth	r3, r3
 8015ab8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015abc:	4581      	cmp	r9, r0
 8015abe:	f84c 3b04 	str.w	r3, [ip], #4
 8015ac2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015ac6:	d2db      	bcs.n	8015a80 <quorem+0x44>
 8015ac8:	f855 300b 	ldr.w	r3, [r5, fp]
 8015acc:	b92b      	cbnz	r3, 8015ada <quorem+0x9e>
 8015ace:	9b01      	ldr	r3, [sp, #4]
 8015ad0:	3b04      	subs	r3, #4
 8015ad2:	429d      	cmp	r5, r3
 8015ad4:	461a      	mov	r2, r3
 8015ad6:	d32e      	bcc.n	8015b36 <quorem+0xfa>
 8015ad8:	613c      	str	r4, [r7, #16]
 8015ada:	4638      	mov	r0, r7
 8015adc:	f001 fc22 	bl	8017324 <__mcmp>
 8015ae0:	2800      	cmp	r0, #0
 8015ae2:	db24      	blt.n	8015b2e <quorem+0xf2>
 8015ae4:	3601      	adds	r6, #1
 8015ae6:	4628      	mov	r0, r5
 8015ae8:	f04f 0c00 	mov.w	ip, #0
 8015aec:	f858 2b04 	ldr.w	r2, [r8], #4
 8015af0:	f8d0 e000 	ldr.w	lr, [r0]
 8015af4:	b293      	uxth	r3, r2
 8015af6:	ebac 0303 	sub.w	r3, ip, r3
 8015afa:	0c12      	lsrs	r2, r2, #16
 8015afc:	fa13 f38e 	uxtah	r3, r3, lr
 8015b00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015b04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015b08:	b29b      	uxth	r3, r3
 8015b0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015b0e:	45c1      	cmp	r9, r8
 8015b10:	f840 3b04 	str.w	r3, [r0], #4
 8015b14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015b18:	d2e8      	bcs.n	8015aec <quorem+0xb0>
 8015b1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015b1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015b22:	b922      	cbnz	r2, 8015b2e <quorem+0xf2>
 8015b24:	3b04      	subs	r3, #4
 8015b26:	429d      	cmp	r5, r3
 8015b28:	461a      	mov	r2, r3
 8015b2a:	d30a      	bcc.n	8015b42 <quorem+0x106>
 8015b2c:	613c      	str	r4, [r7, #16]
 8015b2e:	4630      	mov	r0, r6
 8015b30:	b003      	add	sp, #12
 8015b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b36:	6812      	ldr	r2, [r2, #0]
 8015b38:	3b04      	subs	r3, #4
 8015b3a:	2a00      	cmp	r2, #0
 8015b3c:	d1cc      	bne.n	8015ad8 <quorem+0x9c>
 8015b3e:	3c01      	subs	r4, #1
 8015b40:	e7c7      	b.n	8015ad2 <quorem+0x96>
 8015b42:	6812      	ldr	r2, [r2, #0]
 8015b44:	3b04      	subs	r3, #4
 8015b46:	2a00      	cmp	r2, #0
 8015b48:	d1f0      	bne.n	8015b2c <quorem+0xf0>
 8015b4a:	3c01      	subs	r4, #1
 8015b4c:	e7eb      	b.n	8015b26 <quorem+0xea>
 8015b4e:	2000      	movs	r0, #0
 8015b50:	e7ee      	b.n	8015b30 <quorem+0xf4>
 8015b52:	0000      	movs	r0, r0
 8015b54:	0000      	movs	r0, r0
	...

08015b58 <_dtoa_r>:
 8015b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b5c:	ec59 8b10 	vmov	r8, r9, d0
 8015b60:	b095      	sub	sp, #84	; 0x54
 8015b62:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015b64:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8015b66:	9107      	str	r1, [sp, #28]
 8015b68:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8015b6c:	4606      	mov	r6, r0
 8015b6e:	9209      	str	r2, [sp, #36]	; 0x24
 8015b70:	9310      	str	r3, [sp, #64]	; 0x40
 8015b72:	b975      	cbnz	r5, 8015b92 <_dtoa_r+0x3a>
 8015b74:	2010      	movs	r0, #16
 8015b76:	f001 f8e5 	bl	8016d44 <malloc>
 8015b7a:	4602      	mov	r2, r0
 8015b7c:	6270      	str	r0, [r6, #36]	; 0x24
 8015b7e:	b920      	cbnz	r0, 8015b8a <_dtoa_r+0x32>
 8015b80:	4bab      	ldr	r3, [pc, #684]	; (8015e30 <_dtoa_r+0x2d8>)
 8015b82:	21ea      	movs	r1, #234	; 0xea
 8015b84:	48ab      	ldr	r0, [pc, #684]	; (8015e34 <_dtoa_r+0x2dc>)
 8015b86:	f002 f80f 	bl	8017ba8 <__assert_func>
 8015b8a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015b8e:	6005      	str	r5, [r0, #0]
 8015b90:	60c5      	str	r5, [r0, #12]
 8015b92:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015b94:	6819      	ldr	r1, [r3, #0]
 8015b96:	b151      	cbz	r1, 8015bae <_dtoa_r+0x56>
 8015b98:	685a      	ldr	r2, [r3, #4]
 8015b9a:	604a      	str	r2, [r1, #4]
 8015b9c:	2301      	movs	r3, #1
 8015b9e:	4093      	lsls	r3, r2
 8015ba0:	608b      	str	r3, [r1, #8]
 8015ba2:	4630      	mov	r0, r6
 8015ba4:	f001 f936 	bl	8016e14 <_Bfree>
 8015ba8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015baa:	2200      	movs	r2, #0
 8015bac:	601a      	str	r2, [r3, #0]
 8015bae:	f1b9 0300 	subs.w	r3, r9, #0
 8015bb2:	bfbb      	ittet	lt
 8015bb4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8015bb8:	9303      	strlt	r3, [sp, #12]
 8015bba:	2300      	movge	r3, #0
 8015bbc:	2201      	movlt	r2, #1
 8015bbe:	bfac      	ite	ge
 8015bc0:	6023      	strge	r3, [r4, #0]
 8015bc2:	6022      	strlt	r2, [r4, #0]
 8015bc4:	4b9c      	ldr	r3, [pc, #624]	; (8015e38 <_dtoa_r+0x2e0>)
 8015bc6:	9c03      	ldr	r4, [sp, #12]
 8015bc8:	43a3      	bics	r3, r4
 8015bca:	d11a      	bne.n	8015c02 <_dtoa_r+0xaa>
 8015bcc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015bce:	f242 730f 	movw	r3, #9999	; 0x270f
 8015bd2:	6013      	str	r3, [r2, #0]
 8015bd4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8015bd8:	ea53 0308 	orrs.w	r3, r3, r8
 8015bdc:	f000 8512 	beq.w	8016604 <_dtoa_r+0xaac>
 8015be0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015be2:	b953      	cbnz	r3, 8015bfa <_dtoa_r+0xa2>
 8015be4:	4b95      	ldr	r3, [pc, #596]	; (8015e3c <_dtoa_r+0x2e4>)
 8015be6:	e01f      	b.n	8015c28 <_dtoa_r+0xd0>
 8015be8:	4b95      	ldr	r3, [pc, #596]	; (8015e40 <_dtoa_r+0x2e8>)
 8015bea:	9300      	str	r3, [sp, #0]
 8015bec:	3308      	adds	r3, #8
 8015bee:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8015bf0:	6013      	str	r3, [r2, #0]
 8015bf2:	9800      	ldr	r0, [sp, #0]
 8015bf4:	b015      	add	sp, #84	; 0x54
 8015bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bfa:	4b90      	ldr	r3, [pc, #576]	; (8015e3c <_dtoa_r+0x2e4>)
 8015bfc:	9300      	str	r3, [sp, #0]
 8015bfe:	3303      	adds	r3, #3
 8015c00:	e7f5      	b.n	8015bee <_dtoa_r+0x96>
 8015c02:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015c06:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c0e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8015c12:	d10b      	bne.n	8015c2c <_dtoa_r+0xd4>
 8015c14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015c16:	2301      	movs	r3, #1
 8015c18:	6013      	str	r3, [r2, #0]
 8015c1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	f000 84ee 	beq.w	80165fe <_dtoa_r+0xaa6>
 8015c22:	4888      	ldr	r0, [pc, #544]	; (8015e44 <_dtoa_r+0x2ec>)
 8015c24:	6018      	str	r0, [r3, #0]
 8015c26:	1e43      	subs	r3, r0, #1
 8015c28:	9300      	str	r3, [sp, #0]
 8015c2a:	e7e2      	b.n	8015bf2 <_dtoa_r+0x9a>
 8015c2c:	a913      	add	r1, sp, #76	; 0x4c
 8015c2e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8015c32:	aa12      	add	r2, sp, #72	; 0x48
 8015c34:	4630      	mov	r0, r6
 8015c36:	f001 fc95 	bl	8017564 <__d2b>
 8015c3a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8015c3e:	4605      	mov	r5, r0
 8015c40:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015c42:	2900      	cmp	r1, #0
 8015c44:	d047      	beq.n	8015cd6 <_dtoa_r+0x17e>
 8015c46:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8015c48:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8015c4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015c50:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8015c54:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015c58:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8015c5c:	2400      	movs	r4, #0
 8015c5e:	ec43 2b16 	vmov	d6, r2, r3
 8015c62:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8015c66:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8015e18 <_dtoa_r+0x2c0>
 8015c6a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8015c6e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8015e20 <_dtoa_r+0x2c8>
 8015c72:	eea7 6b05 	vfma.f64	d6, d7, d5
 8015c76:	eeb0 7b46 	vmov.f64	d7, d6
 8015c7a:	ee06 1a90 	vmov	s13, r1
 8015c7e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8015c82:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8015e28 <_dtoa_r+0x2d0>
 8015c86:	eea5 7b06 	vfma.f64	d7, d5, d6
 8015c8a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8015c8e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8015c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c96:	ee16 ba90 	vmov	fp, s13
 8015c9a:	9411      	str	r4, [sp, #68]	; 0x44
 8015c9c:	d508      	bpl.n	8015cb0 <_dtoa_r+0x158>
 8015c9e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8015ca2:	eeb4 6b47 	vcmp.f64	d6, d7
 8015ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015caa:	bf18      	it	ne
 8015cac:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8015cb0:	f1bb 0f16 	cmp.w	fp, #22
 8015cb4:	d832      	bhi.n	8015d1c <_dtoa_r+0x1c4>
 8015cb6:	4b64      	ldr	r3, [pc, #400]	; (8015e48 <_dtoa_r+0x2f0>)
 8015cb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015cbc:	ed93 7b00 	vldr	d7, [r3]
 8015cc0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8015cc4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ccc:	d501      	bpl.n	8015cd2 <_dtoa_r+0x17a>
 8015cce:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	e023      	b.n	8015d1e <_dtoa_r+0x1c6>
 8015cd6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015cd8:	4401      	add	r1, r0
 8015cda:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8015cde:	2b20      	cmp	r3, #32
 8015ce0:	bfc3      	ittte	gt
 8015ce2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015ce6:	fa04 f303 	lslgt.w	r3, r4, r3
 8015cea:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8015cee:	f1c3 0320 	rsble	r3, r3, #32
 8015cf2:	bfc6      	itte	gt
 8015cf4:	fa28 f804 	lsrgt.w	r8, r8, r4
 8015cf8:	ea43 0308 	orrgt.w	r3, r3, r8
 8015cfc:	fa08 f303 	lslle.w	r3, r8, r3
 8015d00:	ee07 3a90 	vmov	s15, r3
 8015d04:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8015d08:	3901      	subs	r1, #1
 8015d0a:	ed8d 7b00 	vstr	d7, [sp]
 8015d0e:	9c01      	ldr	r4, [sp, #4]
 8015d10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015d14:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8015d18:	2401      	movs	r4, #1
 8015d1a:	e7a0      	b.n	8015c5e <_dtoa_r+0x106>
 8015d1c:	2301      	movs	r3, #1
 8015d1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015d20:	1a43      	subs	r3, r0, r1
 8015d22:	1e5a      	subs	r2, r3, #1
 8015d24:	bf45      	ittet	mi
 8015d26:	f1c3 0301 	rsbmi	r3, r3, #1
 8015d2a:	9305      	strmi	r3, [sp, #20]
 8015d2c:	2300      	movpl	r3, #0
 8015d2e:	2300      	movmi	r3, #0
 8015d30:	9206      	str	r2, [sp, #24]
 8015d32:	bf54      	ite	pl
 8015d34:	9305      	strpl	r3, [sp, #20]
 8015d36:	9306      	strmi	r3, [sp, #24]
 8015d38:	f1bb 0f00 	cmp.w	fp, #0
 8015d3c:	db18      	blt.n	8015d70 <_dtoa_r+0x218>
 8015d3e:	9b06      	ldr	r3, [sp, #24]
 8015d40:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8015d44:	445b      	add	r3, fp
 8015d46:	9306      	str	r3, [sp, #24]
 8015d48:	2300      	movs	r3, #0
 8015d4a:	9a07      	ldr	r2, [sp, #28]
 8015d4c:	2a09      	cmp	r2, #9
 8015d4e:	d849      	bhi.n	8015de4 <_dtoa_r+0x28c>
 8015d50:	2a05      	cmp	r2, #5
 8015d52:	bfc4      	itt	gt
 8015d54:	3a04      	subgt	r2, #4
 8015d56:	9207      	strgt	r2, [sp, #28]
 8015d58:	9a07      	ldr	r2, [sp, #28]
 8015d5a:	f1a2 0202 	sub.w	r2, r2, #2
 8015d5e:	bfcc      	ite	gt
 8015d60:	2400      	movgt	r4, #0
 8015d62:	2401      	movle	r4, #1
 8015d64:	2a03      	cmp	r2, #3
 8015d66:	d848      	bhi.n	8015dfa <_dtoa_r+0x2a2>
 8015d68:	e8df f002 	tbb	[pc, r2]
 8015d6c:	3a2c2e0b 	.word	0x3a2c2e0b
 8015d70:	9b05      	ldr	r3, [sp, #20]
 8015d72:	2200      	movs	r2, #0
 8015d74:	eba3 030b 	sub.w	r3, r3, fp
 8015d78:	9305      	str	r3, [sp, #20]
 8015d7a:	920e      	str	r2, [sp, #56]	; 0x38
 8015d7c:	f1cb 0300 	rsb	r3, fp, #0
 8015d80:	e7e3      	b.n	8015d4a <_dtoa_r+0x1f2>
 8015d82:	2200      	movs	r2, #0
 8015d84:	9208      	str	r2, [sp, #32]
 8015d86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015d88:	2a00      	cmp	r2, #0
 8015d8a:	dc39      	bgt.n	8015e00 <_dtoa_r+0x2a8>
 8015d8c:	f04f 0a01 	mov.w	sl, #1
 8015d90:	46d1      	mov	r9, sl
 8015d92:	4652      	mov	r2, sl
 8015d94:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8015d98:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8015d9a:	2100      	movs	r1, #0
 8015d9c:	6079      	str	r1, [r7, #4]
 8015d9e:	2004      	movs	r0, #4
 8015da0:	f100 0c14 	add.w	ip, r0, #20
 8015da4:	4594      	cmp	ip, r2
 8015da6:	6879      	ldr	r1, [r7, #4]
 8015da8:	d92f      	bls.n	8015e0a <_dtoa_r+0x2b2>
 8015daa:	4630      	mov	r0, r6
 8015dac:	930c      	str	r3, [sp, #48]	; 0x30
 8015dae:	f000 fff1 	bl	8016d94 <_Balloc>
 8015db2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015db4:	9000      	str	r0, [sp, #0]
 8015db6:	4602      	mov	r2, r0
 8015db8:	2800      	cmp	r0, #0
 8015dba:	d149      	bne.n	8015e50 <_dtoa_r+0x2f8>
 8015dbc:	4b23      	ldr	r3, [pc, #140]	; (8015e4c <_dtoa_r+0x2f4>)
 8015dbe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015dc2:	e6df      	b.n	8015b84 <_dtoa_r+0x2c>
 8015dc4:	2201      	movs	r2, #1
 8015dc6:	e7dd      	b.n	8015d84 <_dtoa_r+0x22c>
 8015dc8:	2200      	movs	r2, #0
 8015dca:	9208      	str	r2, [sp, #32]
 8015dcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015dce:	eb0b 0a02 	add.w	sl, fp, r2
 8015dd2:	f10a 0901 	add.w	r9, sl, #1
 8015dd6:	464a      	mov	r2, r9
 8015dd8:	2a01      	cmp	r2, #1
 8015dda:	bfb8      	it	lt
 8015ddc:	2201      	movlt	r2, #1
 8015dde:	e7db      	b.n	8015d98 <_dtoa_r+0x240>
 8015de0:	2201      	movs	r2, #1
 8015de2:	e7f2      	b.n	8015dca <_dtoa_r+0x272>
 8015de4:	2401      	movs	r4, #1
 8015de6:	2200      	movs	r2, #0
 8015de8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8015dec:	f04f 3aff 	mov.w	sl, #4294967295
 8015df0:	2100      	movs	r1, #0
 8015df2:	46d1      	mov	r9, sl
 8015df4:	2212      	movs	r2, #18
 8015df6:	9109      	str	r1, [sp, #36]	; 0x24
 8015df8:	e7ce      	b.n	8015d98 <_dtoa_r+0x240>
 8015dfa:	2201      	movs	r2, #1
 8015dfc:	9208      	str	r2, [sp, #32]
 8015dfe:	e7f5      	b.n	8015dec <_dtoa_r+0x294>
 8015e00:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8015e04:	46d1      	mov	r9, sl
 8015e06:	4652      	mov	r2, sl
 8015e08:	e7c6      	b.n	8015d98 <_dtoa_r+0x240>
 8015e0a:	3101      	adds	r1, #1
 8015e0c:	6079      	str	r1, [r7, #4]
 8015e0e:	0040      	lsls	r0, r0, #1
 8015e10:	e7c6      	b.n	8015da0 <_dtoa_r+0x248>
 8015e12:	bf00      	nop
 8015e14:	f3af 8000 	nop.w
 8015e18:	636f4361 	.word	0x636f4361
 8015e1c:	3fd287a7 	.word	0x3fd287a7
 8015e20:	8b60c8b3 	.word	0x8b60c8b3
 8015e24:	3fc68a28 	.word	0x3fc68a28
 8015e28:	509f79fb 	.word	0x509f79fb
 8015e2c:	3fd34413 	.word	0x3fd34413
 8015e30:	080196c3 	.word	0x080196c3
 8015e34:	080196da 	.word	0x080196da
 8015e38:	7ff00000 	.word	0x7ff00000
 8015e3c:	080196bf 	.word	0x080196bf
 8015e40:	080196b6 	.word	0x080196b6
 8015e44:	08019515 	.word	0x08019515
 8015e48:	08019850 	.word	0x08019850
 8015e4c:	08019739 	.word	0x08019739
 8015e50:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8015e52:	9900      	ldr	r1, [sp, #0]
 8015e54:	6011      	str	r1, [r2, #0]
 8015e56:	f1b9 0f0e 	cmp.w	r9, #14
 8015e5a:	d872      	bhi.n	8015f42 <_dtoa_r+0x3ea>
 8015e5c:	2c00      	cmp	r4, #0
 8015e5e:	d070      	beq.n	8015f42 <_dtoa_r+0x3ea>
 8015e60:	f1bb 0f00 	cmp.w	fp, #0
 8015e64:	f340 80a6 	ble.w	8015fb4 <_dtoa_r+0x45c>
 8015e68:	49ca      	ldr	r1, [pc, #808]	; (8016194 <_dtoa_r+0x63c>)
 8015e6a:	f00b 020f 	and.w	r2, fp, #15
 8015e6e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8015e72:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8015e76:	ed92 7b00 	vldr	d7, [r2]
 8015e7a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8015e7e:	f000 808d 	beq.w	8015f9c <_dtoa_r+0x444>
 8015e82:	4ac5      	ldr	r2, [pc, #788]	; (8016198 <_dtoa_r+0x640>)
 8015e84:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8015e88:	ed92 6b08 	vldr	d6, [r2, #32]
 8015e8c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8015e90:	ed8d 6b02 	vstr	d6, [sp, #8]
 8015e94:	f001 010f 	and.w	r1, r1, #15
 8015e98:	2203      	movs	r2, #3
 8015e9a:	48bf      	ldr	r0, [pc, #764]	; (8016198 <_dtoa_r+0x640>)
 8015e9c:	2900      	cmp	r1, #0
 8015e9e:	d17f      	bne.n	8015fa0 <_dtoa_r+0x448>
 8015ea0:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015ea4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015ea8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015eac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015eae:	2900      	cmp	r1, #0
 8015eb0:	f000 80b2 	beq.w	8016018 <_dtoa_r+0x4c0>
 8015eb4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8015eb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015ebc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ec4:	f140 80a8 	bpl.w	8016018 <_dtoa_r+0x4c0>
 8015ec8:	f1b9 0f00 	cmp.w	r9, #0
 8015ecc:	f000 80a4 	beq.w	8016018 <_dtoa_r+0x4c0>
 8015ed0:	f1ba 0f00 	cmp.w	sl, #0
 8015ed4:	dd31      	ble.n	8015f3a <_dtoa_r+0x3e2>
 8015ed6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8015eda:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015ede:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015ee2:	f10b 37ff 	add.w	r7, fp, #4294967295
 8015ee6:	3201      	adds	r2, #1
 8015ee8:	4650      	mov	r0, sl
 8015eea:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015eee:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8015ef2:	ee07 2a90 	vmov	s15, r2
 8015ef6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015efa:	eea7 5b06 	vfma.f64	d5, d7, d6
 8015efe:	ed8d 5b02 	vstr	d5, [sp, #8]
 8015f02:	9c03      	ldr	r4, [sp, #12]
 8015f04:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8015f08:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8015f0c:	2800      	cmp	r0, #0
 8015f0e:	f040 8086 	bne.w	801601e <_dtoa_r+0x4c6>
 8015f12:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8015f16:	ee36 6b47 	vsub.f64	d6, d6, d7
 8015f1a:	ec42 1b17 	vmov	d7, r1, r2
 8015f1e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f26:	f300 8272 	bgt.w	801640e <_dtoa_r+0x8b6>
 8015f2a:	eeb1 7b47 	vneg.f64	d7, d7
 8015f2e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f36:	f100 8267 	bmi.w	8016408 <_dtoa_r+0x8b0>
 8015f3a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8015f3e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8015f42:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015f44:	2a00      	cmp	r2, #0
 8015f46:	f2c0 8129 	blt.w	801619c <_dtoa_r+0x644>
 8015f4a:	f1bb 0f0e 	cmp.w	fp, #14
 8015f4e:	f300 8125 	bgt.w	801619c <_dtoa_r+0x644>
 8015f52:	4b90      	ldr	r3, [pc, #576]	; (8016194 <_dtoa_r+0x63c>)
 8015f54:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015f58:	ed93 6b00 	vldr	d6, [r3]
 8015f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	f280 80c3 	bge.w	80160ea <_dtoa_r+0x592>
 8015f64:	f1b9 0f00 	cmp.w	r9, #0
 8015f68:	f300 80bf 	bgt.w	80160ea <_dtoa_r+0x592>
 8015f6c:	f040 824c 	bne.w	8016408 <_dtoa_r+0x8b0>
 8015f70:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8015f74:	ee26 6b07 	vmul.f64	d6, d6, d7
 8015f78:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015f7c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f84:	464c      	mov	r4, r9
 8015f86:	464f      	mov	r7, r9
 8015f88:	f280 8222 	bge.w	80163d0 <_dtoa_r+0x878>
 8015f8c:	f8dd 8000 	ldr.w	r8, [sp]
 8015f90:	2331      	movs	r3, #49	; 0x31
 8015f92:	f808 3b01 	strb.w	r3, [r8], #1
 8015f96:	f10b 0b01 	add.w	fp, fp, #1
 8015f9a:	e21e      	b.n	80163da <_dtoa_r+0x882>
 8015f9c:	2202      	movs	r2, #2
 8015f9e:	e77c      	b.n	8015e9a <_dtoa_r+0x342>
 8015fa0:	07cc      	lsls	r4, r1, #31
 8015fa2:	d504      	bpl.n	8015fae <_dtoa_r+0x456>
 8015fa4:	ed90 6b00 	vldr	d6, [r0]
 8015fa8:	3201      	adds	r2, #1
 8015faa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015fae:	1049      	asrs	r1, r1, #1
 8015fb0:	3008      	adds	r0, #8
 8015fb2:	e773      	b.n	8015e9c <_dtoa_r+0x344>
 8015fb4:	d02e      	beq.n	8016014 <_dtoa_r+0x4bc>
 8015fb6:	f1cb 0100 	rsb	r1, fp, #0
 8015fba:	4a76      	ldr	r2, [pc, #472]	; (8016194 <_dtoa_r+0x63c>)
 8015fbc:	f001 000f 	and.w	r0, r1, #15
 8015fc0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8015fc4:	ed92 7b00 	vldr	d7, [r2]
 8015fc8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8015fcc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8015fd0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8015fd4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8015fd8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8015fdc:	486e      	ldr	r0, [pc, #440]	; (8016198 <_dtoa_r+0x640>)
 8015fde:	1109      	asrs	r1, r1, #4
 8015fe0:	2400      	movs	r4, #0
 8015fe2:	2202      	movs	r2, #2
 8015fe4:	b939      	cbnz	r1, 8015ff6 <_dtoa_r+0x49e>
 8015fe6:	2c00      	cmp	r4, #0
 8015fe8:	f43f af60 	beq.w	8015eac <_dtoa_r+0x354>
 8015fec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015ff0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015ff4:	e75a      	b.n	8015eac <_dtoa_r+0x354>
 8015ff6:	07cf      	lsls	r7, r1, #31
 8015ff8:	d509      	bpl.n	801600e <_dtoa_r+0x4b6>
 8015ffa:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8015ffe:	ed90 7b00 	vldr	d7, [r0]
 8016002:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016006:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801600a:	3201      	adds	r2, #1
 801600c:	2401      	movs	r4, #1
 801600e:	1049      	asrs	r1, r1, #1
 8016010:	3008      	adds	r0, #8
 8016012:	e7e7      	b.n	8015fe4 <_dtoa_r+0x48c>
 8016014:	2202      	movs	r2, #2
 8016016:	e749      	b.n	8015eac <_dtoa_r+0x354>
 8016018:	465f      	mov	r7, fp
 801601a:	4648      	mov	r0, r9
 801601c:	e765      	b.n	8015eea <_dtoa_r+0x392>
 801601e:	ec42 1b17 	vmov	d7, r1, r2
 8016022:	4a5c      	ldr	r2, [pc, #368]	; (8016194 <_dtoa_r+0x63c>)
 8016024:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8016028:	ed12 4b02 	vldr	d4, [r2, #-8]
 801602c:	9a00      	ldr	r2, [sp, #0]
 801602e:	1814      	adds	r4, r2, r0
 8016030:	9a08      	ldr	r2, [sp, #32]
 8016032:	b352      	cbz	r2, 801608a <_dtoa_r+0x532>
 8016034:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8016038:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801603c:	f8dd 8000 	ldr.w	r8, [sp]
 8016040:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8016044:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8016048:	ee35 7b47 	vsub.f64	d7, d5, d7
 801604c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8016050:	ee14 2a90 	vmov	r2, s9
 8016054:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8016058:	3230      	adds	r2, #48	; 0x30
 801605a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801605e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016066:	f808 2b01 	strb.w	r2, [r8], #1
 801606a:	d439      	bmi.n	80160e0 <_dtoa_r+0x588>
 801606c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8016070:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8016074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016078:	d472      	bmi.n	8016160 <_dtoa_r+0x608>
 801607a:	45a0      	cmp	r8, r4
 801607c:	f43f af5d 	beq.w	8015f3a <_dtoa_r+0x3e2>
 8016080:	ee27 7b03 	vmul.f64	d7, d7, d3
 8016084:	ee26 6b03 	vmul.f64	d6, d6, d3
 8016088:	e7e0      	b.n	801604c <_dtoa_r+0x4f4>
 801608a:	f8dd 8000 	ldr.w	r8, [sp]
 801608e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8016092:	4621      	mov	r1, r4
 8016094:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8016098:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801609c:	ee14 2a90 	vmov	r2, s9
 80160a0:	3230      	adds	r2, #48	; 0x30
 80160a2:	f808 2b01 	strb.w	r2, [r8], #1
 80160a6:	45a0      	cmp	r8, r4
 80160a8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80160ac:	ee36 6b45 	vsub.f64	d6, d6, d5
 80160b0:	d118      	bne.n	80160e4 <_dtoa_r+0x58c>
 80160b2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80160b6:	ee37 4b05 	vadd.f64	d4, d7, d5
 80160ba:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80160be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160c2:	dc4d      	bgt.n	8016160 <_dtoa_r+0x608>
 80160c4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80160c8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80160cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160d0:	f57f af33 	bpl.w	8015f3a <_dtoa_r+0x3e2>
 80160d4:	4688      	mov	r8, r1
 80160d6:	3901      	subs	r1, #1
 80160d8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80160dc:	2b30      	cmp	r3, #48	; 0x30
 80160de:	d0f9      	beq.n	80160d4 <_dtoa_r+0x57c>
 80160e0:	46bb      	mov	fp, r7
 80160e2:	e02a      	b.n	801613a <_dtoa_r+0x5e2>
 80160e4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80160e8:	e7d6      	b.n	8016098 <_dtoa_r+0x540>
 80160ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80160ee:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80160f2:	f8dd 8000 	ldr.w	r8, [sp]
 80160f6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80160fa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80160fe:	ee15 3a10 	vmov	r3, s10
 8016102:	3330      	adds	r3, #48	; 0x30
 8016104:	f808 3b01 	strb.w	r3, [r8], #1
 8016108:	9b00      	ldr	r3, [sp, #0]
 801610a:	eba8 0303 	sub.w	r3, r8, r3
 801610e:	4599      	cmp	r9, r3
 8016110:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8016114:	eea3 7b46 	vfms.f64	d7, d3, d6
 8016118:	d133      	bne.n	8016182 <_dtoa_r+0x62a>
 801611a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801611e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8016122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016126:	dc1a      	bgt.n	801615e <_dtoa_r+0x606>
 8016128:	eeb4 7b46 	vcmp.f64	d7, d6
 801612c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016130:	d103      	bne.n	801613a <_dtoa_r+0x5e2>
 8016132:	ee15 3a10 	vmov	r3, s10
 8016136:	07d9      	lsls	r1, r3, #31
 8016138:	d411      	bmi.n	801615e <_dtoa_r+0x606>
 801613a:	4629      	mov	r1, r5
 801613c:	4630      	mov	r0, r6
 801613e:	f000 fe69 	bl	8016e14 <_Bfree>
 8016142:	2300      	movs	r3, #0
 8016144:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016146:	f888 3000 	strb.w	r3, [r8]
 801614a:	f10b 0301 	add.w	r3, fp, #1
 801614e:	6013      	str	r3, [r2, #0]
 8016150:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016152:	2b00      	cmp	r3, #0
 8016154:	f43f ad4d 	beq.w	8015bf2 <_dtoa_r+0x9a>
 8016158:	f8c3 8000 	str.w	r8, [r3]
 801615c:	e549      	b.n	8015bf2 <_dtoa_r+0x9a>
 801615e:	465f      	mov	r7, fp
 8016160:	4643      	mov	r3, r8
 8016162:	4698      	mov	r8, r3
 8016164:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016168:	2a39      	cmp	r2, #57	; 0x39
 801616a:	d106      	bne.n	801617a <_dtoa_r+0x622>
 801616c:	9a00      	ldr	r2, [sp, #0]
 801616e:	429a      	cmp	r2, r3
 8016170:	d1f7      	bne.n	8016162 <_dtoa_r+0x60a>
 8016172:	9900      	ldr	r1, [sp, #0]
 8016174:	2230      	movs	r2, #48	; 0x30
 8016176:	3701      	adds	r7, #1
 8016178:	700a      	strb	r2, [r1, #0]
 801617a:	781a      	ldrb	r2, [r3, #0]
 801617c:	3201      	adds	r2, #1
 801617e:	701a      	strb	r2, [r3, #0]
 8016180:	e7ae      	b.n	80160e0 <_dtoa_r+0x588>
 8016182:	ee27 7b04 	vmul.f64	d7, d7, d4
 8016186:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801618a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801618e:	d1b2      	bne.n	80160f6 <_dtoa_r+0x59e>
 8016190:	e7d3      	b.n	801613a <_dtoa_r+0x5e2>
 8016192:	bf00      	nop
 8016194:	08019850 	.word	0x08019850
 8016198:	08019828 	.word	0x08019828
 801619c:	9908      	ldr	r1, [sp, #32]
 801619e:	2900      	cmp	r1, #0
 80161a0:	f000 80d1 	beq.w	8016346 <_dtoa_r+0x7ee>
 80161a4:	9907      	ldr	r1, [sp, #28]
 80161a6:	2901      	cmp	r1, #1
 80161a8:	f300 80b4 	bgt.w	8016314 <_dtoa_r+0x7bc>
 80161ac:	9911      	ldr	r1, [sp, #68]	; 0x44
 80161ae:	2900      	cmp	r1, #0
 80161b0:	f000 80ac 	beq.w	801630c <_dtoa_r+0x7b4>
 80161b4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80161b8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80161bc:	461c      	mov	r4, r3
 80161be:	930a      	str	r3, [sp, #40]	; 0x28
 80161c0:	9b05      	ldr	r3, [sp, #20]
 80161c2:	4413      	add	r3, r2
 80161c4:	9305      	str	r3, [sp, #20]
 80161c6:	9b06      	ldr	r3, [sp, #24]
 80161c8:	2101      	movs	r1, #1
 80161ca:	4413      	add	r3, r2
 80161cc:	4630      	mov	r0, r6
 80161ce:	9306      	str	r3, [sp, #24]
 80161d0:	f000 ff26 	bl	8017020 <__i2b>
 80161d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161d6:	4607      	mov	r7, r0
 80161d8:	f1b8 0f00 	cmp.w	r8, #0
 80161dc:	dd0d      	ble.n	80161fa <_dtoa_r+0x6a2>
 80161de:	9a06      	ldr	r2, [sp, #24]
 80161e0:	2a00      	cmp	r2, #0
 80161e2:	dd0a      	ble.n	80161fa <_dtoa_r+0x6a2>
 80161e4:	4542      	cmp	r2, r8
 80161e6:	9905      	ldr	r1, [sp, #20]
 80161e8:	bfa8      	it	ge
 80161ea:	4642      	movge	r2, r8
 80161ec:	1a89      	subs	r1, r1, r2
 80161ee:	9105      	str	r1, [sp, #20]
 80161f0:	9906      	ldr	r1, [sp, #24]
 80161f2:	eba8 0802 	sub.w	r8, r8, r2
 80161f6:	1a8a      	subs	r2, r1, r2
 80161f8:	9206      	str	r2, [sp, #24]
 80161fa:	b303      	cbz	r3, 801623e <_dtoa_r+0x6e6>
 80161fc:	9a08      	ldr	r2, [sp, #32]
 80161fe:	2a00      	cmp	r2, #0
 8016200:	f000 80a6 	beq.w	8016350 <_dtoa_r+0x7f8>
 8016204:	2c00      	cmp	r4, #0
 8016206:	dd13      	ble.n	8016230 <_dtoa_r+0x6d8>
 8016208:	4639      	mov	r1, r7
 801620a:	4622      	mov	r2, r4
 801620c:	4630      	mov	r0, r6
 801620e:	930c      	str	r3, [sp, #48]	; 0x30
 8016210:	f000 ffc2 	bl	8017198 <__pow5mult>
 8016214:	462a      	mov	r2, r5
 8016216:	4601      	mov	r1, r0
 8016218:	4607      	mov	r7, r0
 801621a:	4630      	mov	r0, r6
 801621c:	f000 ff16 	bl	801704c <__multiply>
 8016220:	4629      	mov	r1, r5
 8016222:	900a      	str	r0, [sp, #40]	; 0x28
 8016224:	4630      	mov	r0, r6
 8016226:	f000 fdf5 	bl	8016e14 <_Bfree>
 801622a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801622c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801622e:	4615      	mov	r5, r2
 8016230:	1b1a      	subs	r2, r3, r4
 8016232:	d004      	beq.n	801623e <_dtoa_r+0x6e6>
 8016234:	4629      	mov	r1, r5
 8016236:	4630      	mov	r0, r6
 8016238:	f000 ffae 	bl	8017198 <__pow5mult>
 801623c:	4605      	mov	r5, r0
 801623e:	2101      	movs	r1, #1
 8016240:	4630      	mov	r0, r6
 8016242:	f000 feed 	bl	8017020 <__i2b>
 8016246:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016248:	2b00      	cmp	r3, #0
 801624a:	4604      	mov	r4, r0
 801624c:	f340 8082 	ble.w	8016354 <_dtoa_r+0x7fc>
 8016250:	461a      	mov	r2, r3
 8016252:	4601      	mov	r1, r0
 8016254:	4630      	mov	r0, r6
 8016256:	f000 ff9f 	bl	8017198 <__pow5mult>
 801625a:	9b07      	ldr	r3, [sp, #28]
 801625c:	2b01      	cmp	r3, #1
 801625e:	4604      	mov	r4, r0
 8016260:	dd7b      	ble.n	801635a <_dtoa_r+0x802>
 8016262:	2300      	movs	r3, #0
 8016264:	930a      	str	r3, [sp, #40]	; 0x28
 8016266:	6922      	ldr	r2, [r4, #16]
 8016268:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801626c:	6910      	ldr	r0, [r2, #16]
 801626e:	f000 fe87 	bl	8016f80 <__hi0bits>
 8016272:	f1c0 0020 	rsb	r0, r0, #32
 8016276:	9b06      	ldr	r3, [sp, #24]
 8016278:	4418      	add	r0, r3
 801627a:	f010 001f 	ands.w	r0, r0, #31
 801627e:	f000 808d 	beq.w	801639c <_dtoa_r+0x844>
 8016282:	f1c0 0220 	rsb	r2, r0, #32
 8016286:	2a04      	cmp	r2, #4
 8016288:	f340 8086 	ble.w	8016398 <_dtoa_r+0x840>
 801628c:	f1c0 001c 	rsb	r0, r0, #28
 8016290:	9b05      	ldr	r3, [sp, #20]
 8016292:	4403      	add	r3, r0
 8016294:	9305      	str	r3, [sp, #20]
 8016296:	9b06      	ldr	r3, [sp, #24]
 8016298:	4403      	add	r3, r0
 801629a:	4480      	add	r8, r0
 801629c:	9306      	str	r3, [sp, #24]
 801629e:	9b05      	ldr	r3, [sp, #20]
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	dd05      	ble.n	80162b0 <_dtoa_r+0x758>
 80162a4:	4629      	mov	r1, r5
 80162a6:	461a      	mov	r2, r3
 80162a8:	4630      	mov	r0, r6
 80162aa:	f000 ffcf 	bl	801724c <__lshift>
 80162ae:	4605      	mov	r5, r0
 80162b0:	9b06      	ldr	r3, [sp, #24]
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	dd05      	ble.n	80162c2 <_dtoa_r+0x76a>
 80162b6:	4621      	mov	r1, r4
 80162b8:	461a      	mov	r2, r3
 80162ba:	4630      	mov	r0, r6
 80162bc:	f000 ffc6 	bl	801724c <__lshift>
 80162c0:	4604      	mov	r4, r0
 80162c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d06b      	beq.n	80163a0 <_dtoa_r+0x848>
 80162c8:	4621      	mov	r1, r4
 80162ca:	4628      	mov	r0, r5
 80162cc:	f001 f82a 	bl	8017324 <__mcmp>
 80162d0:	2800      	cmp	r0, #0
 80162d2:	da65      	bge.n	80163a0 <_dtoa_r+0x848>
 80162d4:	2300      	movs	r3, #0
 80162d6:	4629      	mov	r1, r5
 80162d8:	220a      	movs	r2, #10
 80162da:	4630      	mov	r0, r6
 80162dc:	f000 fdbc 	bl	8016e58 <__multadd>
 80162e0:	9b08      	ldr	r3, [sp, #32]
 80162e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80162e6:	4605      	mov	r5, r0
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	f000 8192 	beq.w	8016612 <_dtoa_r+0xaba>
 80162ee:	4639      	mov	r1, r7
 80162f0:	2300      	movs	r3, #0
 80162f2:	220a      	movs	r2, #10
 80162f4:	4630      	mov	r0, r6
 80162f6:	f000 fdaf 	bl	8016e58 <__multadd>
 80162fa:	f1ba 0f00 	cmp.w	sl, #0
 80162fe:	4607      	mov	r7, r0
 8016300:	f300 808e 	bgt.w	8016420 <_dtoa_r+0x8c8>
 8016304:	9b07      	ldr	r3, [sp, #28]
 8016306:	2b02      	cmp	r3, #2
 8016308:	dc51      	bgt.n	80163ae <_dtoa_r+0x856>
 801630a:	e089      	b.n	8016420 <_dtoa_r+0x8c8>
 801630c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801630e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016312:	e751      	b.n	80161b8 <_dtoa_r+0x660>
 8016314:	f109 34ff 	add.w	r4, r9, #4294967295
 8016318:	42a3      	cmp	r3, r4
 801631a:	bfbf      	itttt	lt
 801631c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 801631e:	1ae3      	sublt	r3, r4, r3
 8016320:	18d2      	addlt	r2, r2, r3
 8016322:	4613      	movlt	r3, r2
 8016324:	bfb7      	itett	lt
 8016326:	930e      	strlt	r3, [sp, #56]	; 0x38
 8016328:	1b1c      	subge	r4, r3, r4
 801632a:	4623      	movlt	r3, r4
 801632c:	2400      	movlt	r4, #0
 801632e:	f1b9 0f00 	cmp.w	r9, #0
 8016332:	bfb5      	itete	lt
 8016334:	9a05      	ldrlt	r2, [sp, #20]
 8016336:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 801633a:	eba2 0809 	sublt.w	r8, r2, r9
 801633e:	464a      	movge	r2, r9
 8016340:	bfb8      	it	lt
 8016342:	2200      	movlt	r2, #0
 8016344:	e73b      	b.n	80161be <_dtoa_r+0x666>
 8016346:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801634a:	9f08      	ldr	r7, [sp, #32]
 801634c:	461c      	mov	r4, r3
 801634e:	e743      	b.n	80161d8 <_dtoa_r+0x680>
 8016350:	461a      	mov	r2, r3
 8016352:	e76f      	b.n	8016234 <_dtoa_r+0x6dc>
 8016354:	9b07      	ldr	r3, [sp, #28]
 8016356:	2b01      	cmp	r3, #1
 8016358:	dc18      	bgt.n	801638c <_dtoa_r+0x834>
 801635a:	9b02      	ldr	r3, [sp, #8]
 801635c:	b9b3      	cbnz	r3, 801638c <_dtoa_r+0x834>
 801635e:	9b03      	ldr	r3, [sp, #12]
 8016360:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8016364:	b9a2      	cbnz	r2, 8016390 <_dtoa_r+0x838>
 8016366:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801636a:	0d12      	lsrs	r2, r2, #20
 801636c:	0512      	lsls	r2, r2, #20
 801636e:	b18a      	cbz	r2, 8016394 <_dtoa_r+0x83c>
 8016370:	9b05      	ldr	r3, [sp, #20]
 8016372:	3301      	adds	r3, #1
 8016374:	9305      	str	r3, [sp, #20]
 8016376:	9b06      	ldr	r3, [sp, #24]
 8016378:	3301      	adds	r3, #1
 801637a:	9306      	str	r3, [sp, #24]
 801637c:	2301      	movs	r3, #1
 801637e:	930a      	str	r3, [sp, #40]	; 0x28
 8016380:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016382:	2b00      	cmp	r3, #0
 8016384:	f47f af6f 	bne.w	8016266 <_dtoa_r+0x70e>
 8016388:	2001      	movs	r0, #1
 801638a:	e774      	b.n	8016276 <_dtoa_r+0x71e>
 801638c:	2300      	movs	r3, #0
 801638e:	e7f6      	b.n	801637e <_dtoa_r+0x826>
 8016390:	9b02      	ldr	r3, [sp, #8]
 8016392:	e7f4      	b.n	801637e <_dtoa_r+0x826>
 8016394:	920a      	str	r2, [sp, #40]	; 0x28
 8016396:	e7f3      	b.n	8016380 <_dtoa_r+0x828>
 8016398:	d081      	beq.n	801629e <_dtoa_r+0x746>
 801639a:	4610      	mov	r0, r2
 801639c:	301c      	adds	r0, #28
 801639e:	e777      	b.n	8016290 <_dtoa_r+0x738>
 80163a0:	f1b9 0f00 	cmp.w	r9, #0
 80163a4:	dc37      	bgt.n	8016416 <_dtoa_r+0x8be>
 80163a6:	9b07      	ldr	r3, [sp, #28]
 80163a8:	2b02      	cmp	r3, #2
 80163aa:	dd34      	ble.n	8016416 <_dtoa_r+0x8be>
 80163ac:	46ca      	mov	sl, r9
 80163ae:	f1ba 0f00 	cmp.w	sl, #0
 80163b2:	d10d      	bne.n	80163d0 <_dtoa_r+0x878>
 80163b4:	4621      	mov	r1, r4
 80163b6:	4653      	mov	r3, sl
 80163b8:	2205      	movs	r2, #5
 80163ba:	4630      	mov	r0, r6
 80163bc:	f000 fd4c 	bl	8016e58 <__multadd>
 80163c0:	4601      	mov	r1, r0
 80163c2:	4604      	mov	r4, r0
 80163c4:	4628      	mov	r0, r5
 80163c6:	f000 ffad 	bl	8017324 <__mcmp>
 80163ca:	2800      	cmp	r0, #0
 80163cc:	f73f adde 	bgt.w	8015f8c <_dtoa_r+0x434>
 80163d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163d2:	f8dd 8000 	ldr.w	r8, [sp]
 80163d6:	ea6f 0b03 	mvn.w	fp, r3
 80163da:	f04f 0900 	mov.w	r9, #0
 80163de:	4621      	mov	r1, r4
 80163e0:	4630      	mov	r0, r6
 80163e2:	f000 fd17 	bl	8016e14 <_Bfree>
 80163e6:	2f00      	cmp	r7, #0
 80163e8:	f43f aea7 	beq.w	801613a <_dtoa_r+0x5e2>
 80163ec:	f1b9 0f00 	cmp.w	r9, #0
 80163f0:	d005      	beq.n	80163fe <_dtoa_r+0x8a6>
 80163f2:	45b9      	cmp	r9, r7
 80163f4:	d003      	beq.n	80163fe <_dtoa_r+0x8a6>
 80163f6:	4649      	mov	r1, r9
 80163f8:	4630      	mov	r0, r6
 80163fa:	f000 fd0b 	bl	8016e14 <_Bfree>
 80163fe:	4639      	mov	r1, r7
 8016400:	4630      	mov	r0, r6
 8016402:	f000 fd07 	bl	8016e14 <_Bfree>
 8016406:	e698      	b.n	801613a <_dtoa_r+0x5e2>
 8016408:	2400      	movs	r4, #0
 801640a:	4627      	mov	r7, r4
 801640c:	e7e0      	b.n	80163d0 <_dtoa_r+0x878>
 801640e:	46bb      	mov	fp, r7
 8016410:	4604      	mov	r4, r0
 8016412:	4607      	mov	r7, r0
 8016414:	e5ba      	b.n	8015f8c <_dtoa_r+0x434>
 8016416:	9b08      	ldr	r3, [sp, #32]
 8016418:	46ca      	mov	sl, r9
 801641a:	2b00      	cmp	r3, #0
 801641c:	f000 8100 	beq.w	8016620 <_dtoa_r+0xac8>
 8016420:	f1b8 0f00 	cmp.w	r8, #0
 8016424:	dd05      	ble.n	8016432 <_dtoa_r+0x8da>
 8016426:	4639      	mov	r1, r7
 8016428:	4642      	mov	r2, r8
 801642a:	4630      	mov	r0, r6
 801642c:	f000 ff0e 	bl	801724c <__lshift>
 8016430:	4607      	mov	r7, r0
 8016432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016434:	2b00      	cmp	r3, #0
 8016436:	d05d      	beq.n	80164f4 <_dtoa_r+0x99c>
 8016438:	6879      	ldr	r1, [r7, #4]
 801643a:	4630      	mov	r0, r6
 801643c:	f000 fcaa 	bl	8016d94 <_Balloc>
 8016440:	4680      	mov	r8, r0
 8016442:	b928      	cbnz	r0, 8016450 <_dtoa_r+0x8f8>
 8016444:	4b82      	ldr	r3, [pc, #520]	; (8016650 <_dtoa_r+0xaf8>)
 8016446:	4602      	mov	r2, r0
 8016448:	f240 21ea 	movw	r1, #746	; 0x2ea
 801644c:	f7ff bb9a 	b.w	8015b84 <_dtoa_r+0x2c>
 8016450:	693a      	ldr	r2, [r7, #16]
 8016452:	3202      	adds	r2, #2
 8016454:	0092      	lsls	r2, r2, #2
 8016456:	f107 010c 	add.w	r1, r7, #12
 801645a:	300c      	adds	r0, #12
 801645c:	f000 fc8c 	bl	8016d78 <memcpy>
 8016460:	2201      	movs	r2, #1
 8016462:	4641      	mov	r1, r8
 8016464:	4630      	mov	r0, r6
 8016466:	f000 fef1 	bl	801724c <__lshift>
 801646a:	9b00      	ldr	r3, [sp, #0]
 801646c:	3301      	adds	r3, #1
 801646e:	9305      	str	r3, [sp, #20]
 8016470:	9b00      	ldr	r3, [sp, #0]
 8016472:	4453      	add	r3, sl
 8016474:	9309      	str	r3, [sp, #36]	; 0x24
 8016476:	9b02      	ldr	r3, [sp, #8]
 8016478:	f003 0301 	and.w	r3, r3, #1
 801647c:	46b9      	mov	r9, r7
 801647e:	9308      	str	r3, [sp, #32]
 8016480:	4607      	mov	r7, r0
 8016482:	9b05      	ldr	r3, [sp, #20]
 8016484:	4621      	mov	r1, r4
 8016486:	3b01      	subs	r3, #1
 8016488:	4628      	mov	r0, r5
 801648a:	9302      	str	r3, [sp, #8]
 801648c:	f7ff fad6 	bl	8015a3c <quorem>
 8016490:	4603      	mov	r3, r0
 8016492:	3330      	adds	r3, #48	; 0x30
 8016494:	9006      	str	r0, [sp, #24]
 8016496:	4649      	mov	r1, r9
 8016498:	4628      	mov	r0, r5
 801649a:	930a      	str	r3, [sp, #40]	; 0x28
 801649c:	f000 ff42 	bl	8017324 <__mcmp>
 80164a0:	463a      	mov	r2, r7
 80164a2:	4682      	mov	sl, r0
 80164a4:	4621      	mov	r1, r4
 80164a6:	4630      	mov	r0, r6
 80164a8:	f000 ff58 	bl	801735c <__mdiff>
 80164ac:	68c2      	ldr	r2, [r0, #12]
 80164ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80164b0:	4680      	mov	r8, r0
 80164b2:	bb0a      	cbnz	r2, 80164f8 <_dtoa_r+0x9a0>
 80164b4:	4601      	mov	r1, r0
 80164b6:	4628      	mov	r0, r5
 80164b8:	f000 ff34 	bl	8017324 <__mcmp>
 80164bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80164be:	4602      	mov	r2, r0
 80164c0:	4641      	mov	r1, r8
 80164c2:	4630      	mov	r0, r6
 80164c4:	920e      	str	r2, [sp, #56]	; 0x38
 80164c6:	930a      	str	r3, [sp, #40]	; 0x28
 80164c8:	f000 fca4 	bl	8016e14 <_Bfree>
 80164cc:	9b07      	ldr	r3, [sp, #28]
 80164ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80164d0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80164d4:	ea43 0102 	orr.w	r1, r3, r2
 80164d8:	9b08      	ldr	r3, [sp, #32]
 80164da:	430b      	orrs	r3, r1
 80164dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80164de:	d10d      	bne.n	80164fc <_dtoa_r+0x9a4>
 80164e0:	2b39      	cmp	r3, #57	; 0x39
 80164e2:	d029      	beq.n	8016538 <_dtoa_r+0x9e0>
 80164e4:	f1ba 0f00 	cmp.w	sl, #0
 80164e8:	dd01      	ble.n	80164ee <_dtoa_r+0x996>
 80164ea:	9b06      	ldr	r3, [sp, #24]
 80164ec:	3331      	adds	r3, #49	; 0x31
 80164ee:	9a02      	ldr	r2, [sp, #8]
 80164f0:	7013      	strb	r3, [r2, #0]
 80164f2:	e774      	b.n	80163de <_dtoa_r+0x886>
 80164f4:	4638      	mov	r0, r7
 80164f6:	e7b8      	b.n	801646a <_dtoa_r+0x912>
 80164f8:	2201      	movs	r2, #1
 80164fa:	e7e1      	b.n	80164c0 <_dtoa_r+0x968>
 80164fc:	f1ba 0f00 	cmp.w	sl, #0
 8016500:	db06      	blt.n	8016510 <_dtoa_r+0x9b8>
 8016502:	9907      	ldr	r1, [sp, #28]
 8016504:	ea41 0a0a 	orr.w	sl, r1, sl
 8016508:	9908      	ldr	r1, [sp, #32]
 801650a:	ea5a 0101 	orrs.w	r1, sl, r1
 801650e:	d120      	bne.n	8016552 <_dtoa_r+0x9fa>
 8016510:	2a00      	cmp	r2, #0
 8016512:	ddec      	ble.n	80164ee <_dtoa_r+0x996>
 8016514:	4629      	mov	r1, r5
 8016516:	2201      	movs	r2, #1
 8016518:	4630      	mov	r0, r6
 801651a:	9305      	str	r3, [sp, #20]
 801651c:	f000 fe96 	bl	801724c <__lshift>
 8016520:	4621      	mov	r1, r4
 8016522:	4605      	mov	r5, r0
 8016524:	f000 fefe 	bl	8017324 <__mcmp>
 8016528:	2800      	cmp	r0, #0
 801652a:	9b05      	ldr	r3, [sp, #20]
 801652c:	dc02      	bgt.n	8016534 <_dtoa_r+0x9dc>
 801652e:	d1de      	bne.n	80164ee <_dtoa_r+0x996>
 8016530:	07da      	lsls	r2, r3, #31
 8016532:	d5dc      	bpl.n	80164ee <_dtoa_r+0x996>
 8016534:	2b39      	cmp	r3, #57	; 0x39
 8016536:	d1d8      	bne.n	80164ea <_dtoa_r+0x992>
 8016538:	9a02      	ldr	r2, [sp, #8]
 801653a:	2339      	movs	r3, #57	; 0x39
 801653c:	7013      	strb	r3, [r2, #0]
 801653e:	4643      	mov	r3, r8
 8016540:	4698      	mov	r8, r3
 8016542:	3b01      	subs	r3, #1
 8016544:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8016548:	2a39      	cmp	r2, #57	; 0x39
 801654a:	d051      	beq.n	80165f0 <_dtoa_r+0xa98>
 801654c:	3201      	adds	r2, #1
 801654e:	701a      	strb	r2, [r3, #0]
 8016550:	e745      	b.n	80163de <_dtoa_r+0x886>
 8016552:	2a00      	cmp	r2, #0
 8016554:	dd03      	ble.n	801655e <_dtoa_r+0xa06>
 8016556:	2b39      	cmp	r3, #57	; 0x39
 8016558:	d0ee      	beq.n	8016538 <_dtoa_r+0x9e0>
 801655a:	3301      	adds	r3, #1
 801655c:	e7c7      	b.n	80164ee <_dtoa_r+0x996>
 801655e:	9a05      	ldr	r2, [sp, #20]
 8016560:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016562:	f802 3c01 	strb.w	r3, [r2, #-1]
 8016566:	428a      	cmp	r2, r1
 8016568:	d02b      	beq.n	80165c2 <_dtoa_r+0xa6a>
 801656a:	4629      	mov	r1, r5
 801656c:	2300      	movs	r3, #0
 801656e:	220a      	movs	r2, #10
 8016570:	4630      	mov	r0, r6
 8016572:	f000 fc71 	bl	8016e58 <__multadd>
 8016576:	45b9      	cmp	r9, r7
 8016578:	4605      	mov	r5, r0
 801657a:	f04f 0300 	mov.w	r3, #0
 801657e:	f04f 020a 	mov.w	r2, #10
 8016582:	4649      	mov	r1, r9
 8016584:	4630      	mov	r0, r6
 8016586:	d107      	bne.n	8016598 <_dtoa_r+0xa40>
 8016588:	f000 fc66 	bl	8016e58 <__multadd>
 801658c:	4681      	mov	r9, r0
 801658e:	4607      	mov	r7, r0
 8016590:	9b05      	ldr	r3, [sp, #20]
 8016592:	3301      	adds	r3, #1
 8016594:	9305      	str	r3, [sp, #20]
 8016596:	e774      	b.n	8016482 <_dtoa_r+0x92a>
 8016598:	f000 fc5e 	bl	8016e58 <__multadd>
 801659c:	4639      	mov	r1, r7
 801659e:	4681      	mov	r9, r0
 80165a0:	2300      	movs	r3, #0
 80165a2:	220a      	movs	r2, #10
 80165a4:	4630      	mov	r0, r6
 80165a6:	f000 fc57 	bl	8016e58 <__multadd>
 80165aa:	4607      	mov	r7, r0
 80165ac:	e7f0      	b.n	8016590 <_dtoa_r+0xa38>
 80165ae:	f1ba 0f00 	cmp.w	sl, #0
 80165b2:	9a00      	ldr	r2, [sp, #0]
 80165b4:	bfcc      	ite	gt
 80165b6:	46d0      	movgt	r8, sl
 80165b8:	f04f 0801 	movle.w	r8, #1
 80165bc:	4490      	add	r8, r2
 80165be:	f04f 0900 	mov.w	r9, #0
 80165c2:	4629      	mov	r1, r5
 80165c4:	2201      	movs	r2, #1
 80165c6:	4630      	mov	r0, r6
 80165c8:	9302      	str	r3, [sp, #8]
 80165ca:	f000 fe3f 	bl	801724c <__lshift>
 80165ce:	4621      	mov	r1, r4
 80165d0:	4605      	mov	r5, r0
 80165d2:	f000 fea7 	bl	8017324 <__mcmp>
 80165d6:	2800      	cmp	r0, #0
 80165d8:	dcb1      	bgt.n	801653e <_dtoa_r+0x9e6>
 80165da:	d102      	bne.n	80165e2 <_dtoa_r+0xa8a>
 80165dc:	9b02      	ldr	r3, [sp, #8]
 80165de:	07db      	lsls	r3, r3, #31
 80165e0:	d4ad      	bmi.n	801653e <_dtoa_r+0x9e6>
 80165e2:	4643      	mov	r3, r8
 80165e4:	4698      	mov	r8, r3
 80165e6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80165ea:	2a30      	cmp	r2, #48	; 0x30
 80165ec:	d0fa      	beq.n	80165e4 <_dtoa_r+0xa8c>
 80165ee:	e6f6      	b.n	80163de <_dtoa_r+0x886>
 80165f0:	9a00      	ldr	r2, [sp, #0]
 80165f2:	429a      	cmp	r2, r3
 80165f4:	d1a4      	bne.n	8016540 <_dtoa_r+0x9e8>
 80165f6:	f10b 0b01 	add.w	fp, fp, #1
 80165fa:	2331      	movs	r3, #49	; 0x31
 80165fc:	e778      	b.n	80164f0 <_dtoa_r+0x998>
 80165fe:	4b15      	ldr	r3, [pc, #84]	; (8016654 <_dtoa_r+0xafc>)
 8016600:	f7ff bb12 	b.w	8015c28 <_dtoa_r+0xd0>
 8016604:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016606:	2b00      	cmp	r3, #0
 8016608:	f47f aaee 	bne.w	8015be8 <_dtoa_r+0x90>
 801660c:	4b12      	ldr	r3, [pc, #72]	; (8016658 <_dtoa_r+0xb00>)
 801660e:	f7ff bb0b 	b.w	8015c28 <_dtoa_r+0xd0>
 8016612:	f1ba 0f00 	cmp.w	sl, #0
 8016616:	dc03      	bgt.n	8016620 <_dtoa_r+0xac8>
 8016618:	9b07      	ldr	r3, [sp, #28]
 801661a:	2b02      	cmp	r3, #2
 801661c:	f73f aec7 	bgt.w	80163ae <_dtoa_r+0x856>
 8016620:	f8dd 8000 	ldr.w	r8, [sp]
 8016624:	4621      	mov	r1, r4
 8016626:	4628      	mov	r0, r5
 8016628:	f7ff fa08 	bl	8015a3c <quorem>
 801662c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8016630:	f808 3b01 	strb.w	r3, [r8], #1
 8016634:	9a00      	ldr	r2, [sp, #0]
 8016636:	eba8 0202 	sub.w	r2, r8, r2
 801663a:	4592      	cmp	sl, r2
 801663c:	ddb7      	ble.n	80165ae <_dtoa_r+0xa56>
 801663e:	4629      	mov	r1, r5
 8016640:	2300      	movs	r3, #0
 8016642:	220a      	movs	r2, #10
 8016644:	4630      	mov	r0, r6
 8016646:	f000 fc07 	bl	8016e58 <__multadd>
 801664a:	4605      	mov	r5, r0
 801664c:	e7ea      	b.n	8016624 <_dtoa_r+0xacc>
 801664e:	bf00      	nop
 8016650:	08019739 	.word	0x08019739
 8016654:	08019514 	.word	0x08019514
 8016658:	080196b6 	.word	0x080196b6

0801665c <rshift>:
 801665c:	6903      	ldr	r3, [r0, #16]
 801665e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016662:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016666:	ea4f 1261 	mov.w	r2, r1, asr #5
 801666a:	f100 0414 	add.w	r4, r0, #20
 801666e:	dd45      	ble.n	80166fc <rshift+0xa0>
 8016670:	f011 011f 	ands.w	r1, r1, #31
 8016674:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016678:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801667c:	d10c      	bne.n	8016698 <rshift+0x3c>
 801667e:	f100 0710 	add.w	r7, r0, #16
 8016682:	4629      	mov	r1, r5
 8016684:	42b1      	cmp	r1, r6
 8016686:	d334      	bcc.n	80166f2 <rshift+0x96>
 8016688:	1a9b      	subs	r3, r3, r2
 801668a:	009b      	lsls	r3, r3, #2
 801668c:	1eea      	subs	r2, r5, #3
 801668e:	4296      	cmp	r6, r2
 8016690:	bf38      	it	cc
 8016692:	2300      	movcc	r3, #0
 8016694:	4423      	add	r3, r4
 8016696:	e015      	b.n	80166c4 <rshift+0x68>
 8016698:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801669c:	f1c1 0820 	rsb	r8, r1, #32
 80166a0:	40cf      	lsrs	r7, r1
 80166a2:	f105 0e04 	add.w	lr, r5, #4
 80166a6:	46a1      	mov	r9, r4
 80166a8:	4576      	cmp	r6, lr
 80166aa:	46f4      	mov	ip, lr
 80166ac:	d815      	bhi.n	80166da <rshift+0x7e>
 80166ae:	1a9b      	subs	r3, r3, r2
 80166b0:	009a      	lsls	r2, r3, #2
 80166b2:	3a04      	subs	r2, #4
 80166b4:	3501      	adds	r5, #1
 80166b6:	42ae      	cmp	r6, r5
 80166b8:	bf38      	it	cc
 80166ba:	2200      	movcc	r2, #0
 80166bc:	18a3      	adds	r3, r4, r2
 80166be:	50a7      	str	r7, [r4, r2]
 80166c0:	b107      	cbz	r7, 80166c4 <rshift+0x68>
 80166c2:	3304      	adds	r3, #4
 80166c4:	1b1a      	subs	r2, r3, r4
 80166c6:	42a3      	cmp	r3, r4
 80166c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80166cc:	bf08      	it	eq
 80166ce:	2300      	moveq	r3, #0
 80166d0:	6102      	str	r2, [r0, #16]
 80166d2:	bf08      	it	eq
 80166d4:	6143      	streq	r3, [r0, #20]
 80166d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80166da:	f8dc c000 	ldr.w	ip, [ip]
 80166de:	fa0c fc08 	lsl.w	ip, ip, r8
 80166e2:	ea4c 0707 	orr.w	r7, ip, r7
 80166e6:	f849 7b04 	str.w	r7, [r9], #4
 80166ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 80166ee:	40cf      	lsrs	r7, r1
 80166f0:	e7da      	b.n	80166a8 <rshift+0x4c>
 80166f2:	f851 cb04 	ldr.w	ip, [r1], #4
 80166f6:	f847 cf04 	str.w	ip, [r7, #4]!
 80166fa:	e7c3      	b.n	8016684 <rshift+0x28>
 80166fc:	4623      	mov	r3, r4
 80166fe:	e7e1      	b.n	80166c4 <rshift+0x68>

08016700 <__hexdig_fun>:
 8016700:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016704:	2b09      	cmp	r3, #9
 8016706:	d802      	bhi.n	801670e <__hexdig_fun+0xe>
 8016708:	3820      	subs	r0, #32
 801670a:	b2c0      	uxtb	r0, r0
 801670c:	4770      	bx	lr
 801670e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8016712:	2b05      	cmp	r3, #5
 8016714:	d801      	bhi.n	801671a <__hexdig_fun+0x1a>
 8016716:	3847      	subs	r0, #71	; 0x47
 8016718:	e7f7      	b.n	801670a <__hexdig_fun+0xa>
 801671a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801671e:	2b05      	cmp	r3, #5
 8016720:	d801      	bhi.n	8016726 <__hexdig_fun+0x26>
 8016722:	3827      	subs	r0, #39	; 0x27
 8016724:	e7f1      	b.n	801670a <__hexdig_fun+0xa>
 8016726:	2000      	movs	r0, #0
 8016728:	4770      	bx	lr
	...

0801672c <__gethex>:
 801672c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016730:	ed2d 8b02 	vpush	{d8}
 8016734:	b089      	sub	sp, #36	; 0x24
 8016736:	ee08 0a10 	vmov	s16, r0
 801673a:	9304      	str	r3, [sp, #16]
 801673c:	4bbc      	ldr	r3, [pc, #752]	; (8016a30 <__gethex+0x304>)
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	9301      	str	r3, [sp, #4]
 8016742:	4618      	mov	r0, r3
 8016744:	468b      	mov	fp, r1
 8016746:	4690      	mov	r8, r2
 8016748:	f7e9 fdca 	bl	80002e0 <strlen>
 801674c:	9b01      	ldr	r3, [sp, #4]
 801674e:	f8db 2000 	ldr.w	r2, [fp]
 8016752:	4403      	add	r3, r0
 8016754:	4682      	mov	sl, r0
 8016756:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801675a:	9305      	str	r3, [sp, #20]
 801675c:	1c93      	adds	r3, r2, #2
 801675e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8016762:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016766:	32fe      	adds	r2, #254	; 0xfe
 8016768:	18d1      	adds	r1, r2, r3
 801676a:	461f      	mov	r7, r3
 801676c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016770:	9100      	str	r1, [sp, #0]
 8016772:	2830      	cmp	r0, #48	; 0x30
 8016774:	d0f8      	beq.n	8016768 <__gethex+0x3c>
 8016776:	f7ff ffc3 	bl	8016700 <__hexdig_fun>
 801677a:	4604      	mov	r4, r0
 801677c:	2800      	cmp	r0, #0
 801677e:	d13a      	bne.n	80167f6 <__gethex+0xca>
 8016780:	9901      	ldr	r1, [sp, #4]
 8016782:	4652      	mov	r2, sl
 8016784:	4638      	mov	r0, r7
 8016786:	f001 f9ef 	bl	8017b68 <strncmp>
 801678a:	4605      	mov	r5, r0
 801678c:	2800      	cmp	r0, #0
 801678e:	d168      	bne.n	8016862 <__gethex+0x136>
 8016790:	f817 000a 	ldrb.w	r0, [r7, sl]
 8016794:	eb07 060a 	add.w	r6, r7, sl
 8016798:	f7ff ffb2 	bl	8016700 <__hexdig_fun>
 801679c:	2800      	cmp	r0, #0
 801679e:	d062      	beq.n	8016866 <__gethex+0x13a>
 80167a0:	4633      	mov	r3, r6
 80167a2:	7818      	ldrb	r0, [r3, #0]
 80167a4:	2830      	cmp	r0, #48	; 0x30
 80167a6:	461f      	mov	r7, r3
 80167a8:	f103 0301 	add.w	r3, r3, #1
 80167ac:	d0f9      	beq.n	80167a2 <__gethex+0x76>
 80167ae:	f7ff ffa7 	bl	8016700 <__hexdig_fun>
 80167b2:	2301      	movs	r3, #1
 80167b4:	fab0 f480 	clz	r4, r0
 80167b8:	0964      	lsrs	r4, r4, #5
 80167ba:	4635      	mov	r5, r6
 80167bc:	9300      	str	r3, [sp, #0]
 80167be:	463a      	mov	r2, r7
 80167c0:	4616      	mov	r6, r2
 80167c2:	3201      	adds	r2, #1
 80167c4:	7830      	ldrb	r0, [r6, #0]
 80167c6:	f7ff ff9b 	bl	8016700 <__hexdig_fun>
 80167ca:	2800      	cmp	r0, #0
 80167cc:	d1f8      	bne.n	80167c0 <__gethex+0x94>
 80167ce:	9901      	ldr	r1, [sp, #4]
 80167d0:	4652      	mov	r2, sl
 80167d2:	4630      	mov	r0, r6
 80167d4:	f001 f9c8 	bl	8017b68 <strncmp>
 80167d8:	b980      	cbnz	r0, 80167fc <__gethex+0xd0>
 80167da:	b94d      	cbnz	r5, 80167f0 <__gethex+0xc4>
 80167dc:	eb06 050a 	add.w	r5, r6, sl
 80167e0:	462a      	mov	r2, r5
 80167e2:	4616      	mov	r6, r2
 80167e4:	3201      	adds	r2, #1
 80167e6:	7830      	ldrb	r0, [r6, #0]
 80167e8:	f7ff ff8a 	bl	8016700 <__hexdig_fun>
 80167ec:	2800      	cmp	r0, #0
 80167ee:	d1f8      	bne.n	80167e2 <__gethex+0xb6>
 80167f0:	1bad      	subs	r5, r5, r6
 80167f2:	00ad      	lsls	r5, r5, #2
 80167f4:	e004      	b.n	8016800 <__gethex+0xd4>
 80167f6:	2400      	movs	r4, #0
 80167f8:	4625      	mov	r5, r4
 80167fa:	e7e0      	b.n	80167be <__gethex+0x92>
 80167fc:	2d00      	cmp	r5, #0
 80167fe:	d1f7      	bne.n	80167f0 <__gethex+0xc4>
 8016800:	7833      	ldrb	r3, [r6, #0]
 8016802:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016806:	2b50      	cmp	r3, #80	; 0x50
 8016808:	d13b      	bne.n	8016882 <__gethex+0x156>
 801680a:	7873      	ldrb	r3, [r6, #1]
 801680c:	2b2b      	cmp	r3, #43	; 0x2b
 801680e:	d02c      	beq.n	801686a <__gethex+0x13e>
 8016810:	2b2d      	cmp	r3, #45	; 0x2d
 8016812:	d02e      	beq.n	8016872 <__gethex+0x146>
 8016814:	1c71      	adds	r1, r6, #1
 8016816:	f04f 0900 	mov.w	r9, #0
 801681a:	7808      	ldrb	r0, [r1, #0]
 801681c:	f7ff ff70 	bl	8016700 <__hexdig_fun>
 8016820:	1e43      	subs	r3, r0, #1
 8016822:	b2db      	uxtb	r3, r3
 8016824:	2b18      	cmp	r3, #24
 8016826:	d82c      	bhi.n	8016882 <__gethex+0x156>
 8016828:	f1a0 0210 	sub.w	r2, r0, #16
 801682c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016830:	f7ff ff66 	bl	8016700 <__hexdig_fun>
 8016834:	1e43      	subs	r3, r0, #1
 8016836:	b2db      	uxtb	r3, r3
 8016838:	2b18      	cmp	r3, #24
 801683a:	d91d      	bls.n	8016878 <__gethex+0x14c>
 801683c:	f1b9 0f00 	cmp.w	r9, #0
 8016840:	d000      	beq.n	8016844 <__gethex+0x118>
 8016842:	4252      	negs	r2, r2
 8016844:	4415      	add	r5, r2
 8016846:	f8cb 1000 	str.w	r1, [fp]
 801684a:	b1e4      	cbz	r4, 8016886 <__gethex+0x15a>
 801684c:	9b00      	ldr	r3, [sp, #0]
 801684e:	2b00      	cmp	r3, #0
 8016850:	bf14      	ite	ne
 8016852:	2700      	movne	r7, #0
 8016854:	2706      	moveq	r7, #6
 8016856:	4638      	mov	r0, r7
 8016858:	b009      	add	sp, #36	; 0x24
 801685a:	ecbd 8b02 	vpop	{d8}
 801685e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016862:	463e      	mov	r6, r7
 8016864:	4625      	mov	r5, r4
 8016866:	2401      	movs	r4, #1
 8016868:	e7ca      	b.n	8016800 <__gethex+0xd4>
 801686a:	f04f 0900 	mov.w	r9, #0
 801686e:	1cb1      	adds	r1, r6, #2
 8016870:	e7d3      	b.n	801681a <__gethex+0xee>
 8016872:	f04f 0901 	mov.w	r9, #1
 8016876:	e7fa      	b.n	801686e <__gethex+0x142>
 8016878:	230a      	movs	r3, #10
 801687a:	fb03 0202 	mla	r2, r3, r2, r0
 801687e:	3a10      	subs	r2, #16
 8016880:	e7d4      	b.n	801682c <__gethex+0x100>
 8016882:	4631      	mov	r1, r6
 8016884:	e7df      	b.n	8016846 <__gethex+0x11a>
 8016886:	1bf3      	subs	r3, r6, r7
 8016888:	3b01      	subs	r3, #1
 801688a:	4621      	mov	r1, r4
 801688c:	2b07      	cmp	r3, #7
 801688e:	dc0b      	bgt.n	80168a8 <__gethex+0x17c>
 8016890:	ee18 0a10 	vmov	r0, s16
 8016894:	f000 fa7e 	bl	8016d94 <_Balloc>
 8016898:	4604      	mov	r4, r0
 801689a:	b940      	cbnz	r0, 80168ae <__gethex+0x182>
 801689c:	4b65      	ldr	r3, [pc, #404]	; (8016a34 <__gethex+0x308>)
 801689e:	4602      	mov	r2, r0
 80168a0:	21de      	movs	r1, #222	; 0xde
 80168a2:	4865      	ldr	r0, [pc, #404]	; (8016a38 <__gethex+0x30c>)
 80168a4:	f001 f980 	bl	8017ba8 <__assert_func>
 80168a8:	3101      	adds	r1, #1
 80168aa:	105b      	asrs	r3, r3, #1
 80168ac:	e7ee      	b.n	801688c <__gethex+0x160>
 80168ae:	f100 0914 	add.w	r9, r0, #20
 80168b2:	f04f 0b00 	mov.w	fp, #0
 80168b6:	f1ca 0301 	rsb	r3, sl, #1
 80168ba:	f8cd 9008 	str.w	r9, [sp, #8]
 80168be:	f8cd b000 	str.w	fp, [sp]
 80168c2:	9306      	str	r3, [sp, #24]
 80168c4:	42b7      	cmp	r7, r6
 80168c6:	d340      	bcc.n	801694a <__gethex+0x21e>
 80168c8:	9802      	ldr	r0, [sp, #8]
 80168ca:	9b00      	ldr	r3, [sp, #0]
 80168cc:	f840 3b04 	str.w	r3, [r0], #4
 80168d0:	eba0 0009 	sub.w	r0, r0, r9
 80168d4:	1080      	asrs	r0, r0, #2
 80168d6:	0146      	lsls	r6, r0, #5
 80168d8:	6120      	str	r0, [r4, #16]
 80168da:	4618      	mov	r0, r3
 80168dc:	f000 fb50 	bl	8016f80 <__hi0bits>
 80168e0:	1a30      	subs	r0, r6, r0
 80168e2:	f8d8 6000 	ldr.w	r6, [r8]
 80168e6:	42b0      	cmp	r0, r6
 80168e8:	dd63      	ble.n	80169b2 <__gethex+0x286>
 80168ea:	1b87      	subs	r7, r0, r6
 80168ec:	4639      	mov	r1, r7
 80168ee:	4620      	mov	r0, r4
 80168f0:	f000 feeb 	bl	80176ca <__any_on>
 80168f4:	4682      	mov	sl, r0
 80168f6:	b1a8      	cbz	r0, 8016924 <__gethex+0x1f8>
 80168f8:	1e7b      	subs	r3, r7, #1
 80168fa:	1159      	asrs	r1, r3, #5
 80168fc:	f003 021f 	and.w	r2, r3, #31
 8016900:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8016904:	f04f 0a01 	mov.w	sl, #1
 8016908:	fa0a f202 	lsl.w	r2, sl, r2
 801690c:	420a      	tst	r2, r1
 801690e:	d009      	beq.n	8016924 <__gethex+0x1f8>
 8016910:	4553      	cmp	r3, sl
 8016912:	dd05      	ble.n	8016920 <__gethex+0x1f4>
 8016914:	1eb9      	subs	r1, r7, #2
 8016916:	4620      	mov	r0, r4
 8016918:	f000 fed7 	bl	80176ca <__any_on>
 801691c:	2800      	cmp	r0, #0
 801691e:	d145      	bne.n	80169ac <__gethex+0x280>
 8016920:	f04f 0a02 	mov.w	sl, #2
 8016924:	4639      	mov	r1, r7
 8016926:	4620      	mov	r0, r4
 8016928:	f7ff fe98 	bl	801665c <rshift>
 801692c:	443d      	add	r5, r7
 801692e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016932:	42ab      	cmp	r3, r5
 8016934:	da4c      	bge.n	80169d0 <__gethex+0x2a4>
 8016936:	ee18 0a10 	vmov	r0, s16
 801693a:	4621      	mov	r1, r4
 801693c:	f000 fa6a 	bl	8016e14 <_Bfree>
 8016940:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016942:	2300      	movs	r3, #0
 8016944:	6013      	str	r3, [r2, #0]
 8016946:	27a3      	movs	r7, #163	; 0xa3
 8016948:	e785      	b.n	8016856 <__gethex+0x12a>
 801694a:	1e73      	subs	r3, r6, #1
 801694c:	9a05      	ldr	r2, [sp, #20]
 801694e:	9303      	str	r3, [sp, #12]
 8016950:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016954:	4293      	cmp	r3, r2
 8016956:	d019      	beq.n	801698c <__gethex+0x260>
 8016958:	f1bb 0f20 	cmp.w	fp, #32
 801695c:	d107      	bne.n	801696e <__gethex+0x242>
 801695e:	9b02      	ldr	r3, [sp, #8]
 8016960:	9a00      	ldr	r2, [sp, #0]
 8016962:	f843 2b04 	str.w	r2, [r3], #4
 8016966:	9302      	str	r3, [sp, #8]
 8016968:	2300      	movs	r3, #0
 801696a:	9300      	str	r3, [sp, #0]
 801696c:	469b      	mov	fp, r3
 801696e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8016972:	f7ff fec5 	bl	8016700 <__hexdig_fun>
 8016976:	9b00      	ldr	r3, [sp, #0]
 8016978:	f000 000f 	and.w	r0, r0, #15
 801697c:	fa00 f00b 	lsl.w	r0, r0, fp
 8016980:	4303      	orrs	r3, r0
 8016982:	9300      	str	r3, [sp, #0]
 8016984:	f10b 0b04 	add.w	fp, fp, #4
 8016988:	9b03      	ldr	r3, [sp, #12]
 801698a:	e00d      	b.n	80169a8 <__gethex+0x27c>
 801698c:	9b03      	ldr	r3, [sp, #12]
 801698e:	9a06      	ldr	r2, [sp, #24]
 8016990:	4413      	add	r3, r2
 8016992:	42bb      	cmp	r3, r7
 8016994:	d3e0      	bcc.n	8016958 <__gethex+0x22c>
 8016996:	4618      	mov	r0, r3
 8016998:	9901      	ldr	r1, [sp, #4]
 801699a:	9307      	str	r3, [sp, #28]
 801699c:	4652      	mov	r2, sl
 801699e:	f001 f8e3 	bl	8017b68 <strncmp>
 80169a2:	9b07      	ldr	r3, [sp, #28]
 80169a4:	2800      	cmp	r0, #0
 80169a6:	d1d7      	bne.n	8016958 <__gethex+0x22c>
 80169a8:	461e      	mov	r6, r3
 80169aa:	e78b      	b.n	80168c4 <__gethex+0x198>
 80169ac:	f04f 0a03 	mov.w	sl, #3
 80169b0:	e7b8      	b.n	8016924 <__gethex+0x1f8>
 80169b2:	da0a      	bge.n	80169ca <__gethex+0x29e>
 80169b4:	1a37      	subs	r7, r6, r0
 80169b6:	4621      	mov	r1, r4
 80169b8:	ee18 0a10 	vmov	r0, s16
 80169bc:	463a      	mov	r2, r7
 80169be:	f000 fc45 	bl	801724c <__lshift>
 80169c2:	1bed      	subs	r5, r5, r7
 80169c4:	4604      	mov	r4, r0
 80169c6:	f100 0914 	add.w	r9, r0, #20
 80169ca:	f04f 0a00 	mov.w	sl, #0
 80169ce:	e7ae      	b.n	801692e <__gethex+0x202>
 80169d0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80169d4:	42a8      	cmp	r0, r5
 80169d6:	dd72      	ble.n	8016abe <__gethex+0x392>
 80169d8:	1b45      	subs	r5, r0, r5
 80169da:	42ae      	cmp	r6, r5
 80169dc:	dc36      	bgt.n	8016a4c <__gethex+0x320>
 80169de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80169e2:	2b02      	cmp	r3, #2
 80169e4:	d02a      	beq.n	8016a3c <__gethex+0x310>
 80169e6:	2b03      	cmp	r3, #3
 80169e8:	d02c      	beq.n	8016a44 <__gethex+0x318>
 80169ea:	2b01      	cmp	r3, #1
 80169ec:	d115      	bne.n	8016a1a <__gethex+0x2ee>
 80169ee:	42ae      	cmp	r6, r5
 80169f0:	d113      	bne.n	8016a1a <__gethex+0x2ee>
 80169f2:	2e01      	cmp	r6, #1
 80169f4:	d10b      	bne.n	8016a0e <__gethex+0x2e2>
 80169f6:	9a04      	ldr	r2, [sp, #16]
 80169f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80169fc:	6013      	str	r3, [r2, #0]
 80169fe:	2301      	movs	r3, #1
 8016a00:	6123      	str	r3, [r4, #16]
 8016a02:	f8c9 3000 	str.w	r3, [r9]
 8016a06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016a08:	2762      	movs	r7, #98	; 0x62
 8016a0a:	601c      	str	r4, [r3, #0]
 8016a0c:	e723      	b.n	8016856 <__gethex+0x12a>
 8016a0e:	1e71      	subs	r1, r6, #1
 8016a10:	4620      	mov	r0, r4
 8016a12:	f000 fe5a 	bl	80176ca <__any_on>
 8016a16:	2800      	cmp	r0, #0
 8016a18:	d1ed      	bne.n	80169f6 <__gethex+0x2ca>
 8016a1a:	ee18 0a10 	vmov	r0, s16
 8016a1e:	4621      	mov	r1, r4
 8016a20:	f000 f9f8 	bl	8016e14 <_Bfree>
 8016a24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016a26:	2300      	movs	r3, #0
 8016a28:	6013      	str	r3, [r2, #0]
 8016a2a:	2750      	movs	r7, #80	; 0x50
 8016a2c:	e713      	b.n	8016856 <__gethex+0x12a>
 8016a2e:	bf00      	nop
 8016a30:	080197b4 	.word	0x080197b4
 8016a34:	08019739 	.word	0x08019739
 8016a38:	0801974a 	.word	0x0801974a
 8016a3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d1eb      	bne.n	8016a1a <__gethex+0x2ee>
 8016a42:	e7d8      	b.n	80169f6 <__gethex+0x2ca>
 8016a44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d1d5      	bne.n	80169f6 <__gethex+0x2ca>
 8016a4a:	e7e6      	b.n	8016a1a <__gethex+0x2ee>
 8016a4c:	1e6f      	subs	r7, r5, #1
 8016a4e:	f1ba 0f00 	cmp.w	sl, #0
 8016a52:	d131      	bne.n	8016ab8 <__gethex+0x38c>
 8016a54:	b127      	cbz	r7, 8016a60 <__gethex+0x334>
 8016a56:	4639      	mov	r1, r7
 8016a58:	4620      	mov	r0, r4
 8016a5a:	f000 fe36 	bl	80176ca <__any_on>
 8016a5e:	4682      	mov	sl, r0
 8016a60:	117b      	asrs	r3, r7, #5
 8016a62:	2101      	movs	r1, #1
 8016a64:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8016a68:	f007 071f 	and.w	r7, r7, #31
 8016a6c:	fa01 f707 	lsl.w	r7, r1, r7
 8016a70:	421f      	tst	r7, r3
 8016a72:	4629      	mov	r1, r5
 8016a74:	4620      	mov	r0, r4
 8016a76:	bf18      	it	ne
 8016a78:	f04a 0a02 	orrne.w	sl, sl, #2
 8016a7c:	1b76      	subs	r6, r6, r5
 8016a7e:	f7ff fded 	bl	801665c <rshift>
 8016a82:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016a86:	2702      	movs	r7, #2
 8016a88:	f1ba 0f00 	cmp.w	sl, #0
 8016a8c:	d048      	beq.n	8016b20 <__gethex+0x3f4>
 8016a8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016a92:	2b02      	cmp	r3, #2
 8016a94:	d015      	beq.n	8016ac2 <__gethex+0x396>
 8016a96:	2b03      	cmp	r3, #3
 8016a98:	d017      	beq.n	8016aca <__gethex+0x39e>
 8016a9a:	2b01      	cmp	r3, #1
 8016a9c:	d109      	bne.n	8016ab2 <__gethex+0x386>
 8016a9e:	f01a 0f02 	tst.w	sl, #2
 8016aa2:	d006      	beq.n	8016ab2 <__gethex+0x386>
 8016aa4:	f8d9 0000 	ldr.w	r0, [r9]
 8016aa8:	ea4a 0a00 	orr.w	sl, sl, r0
 8016aac:	f01a 0f01 	tst.w	sl, #1
 8016ab0:	d10e      	bne.n	8016ad0 <__gethex+0x3a4>
 8016ab2:	f047 0710 	orr.w	r7, r7, #16
 8016ab6:	e033      	b.n	8016b20 <__gethex+0x3f4>
 8016ab8:	f04f 0a01 	mov.w	sl, #1
 8016abc:	e7d0      	b.n	8016a60 <__gethex+0x334>
 8016abe:	2701      	movs	r7, #1
 8016ac0:	e7e2      	b.n	8016a88 <__gethex+0x35c>
 8016ac2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016ac4:	f1c3 0301 	rsb	r3, r3, #1
 8016ac8:	9315      	str	r3, [sp, #84]	; 0x54
 8016aca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d0f0      	beq.n	8016ab2 <__gethex+0x386>
 8016ad0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016ad4:	f104 0314 	add.w	r3, r4, #20
 8016ad8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016adc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8016ae0:	f04f 0c00 	mov.w	ip, #0
 8016ae4:	4618      	mov	r0, r3
 8016ae6:	f853 2b04 	ldr.w	r2, [r3], #4
 8016aea:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016aee:	d01c      	beq.n	8016b2a <__gethex+0x3fe>
 8016af0:	3201      	adds	r2, #1
 8016af2:	6002      	str	r2, [r0, #0]
 8016af4:	2f02      	cmp	r7, #2
 8016af6:	f104 0314 	add.w	r3, r4, #20
 8016afa:	d13f      	bne.n	8016b7c <__gethex+0x450>
 8016afc:	f8d8 2000 	ldr.w	r2, [r8]
 8016b00:	3a01      	subs	r2, #1
 8016b02:	42b2      	cmp	r2, r6
 8016b04:	d10a      	bne.n	8016b1c <__gethex+0x3f0>
 8016b06:	1171      	asrs	r1, r6, #5
 8016b08:	2201      	movs	r2, #1
 8016b0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016b0e:	f006 061f 	and.w	r6, r6, #31
 8016b12:	fa02 f606 	lsl.w	r6, r2, r6
 8016b16:	421e      	tst	r6, r3
 8016b18:	bf18      	it	ne
 8016b1a:	4617      	movne	r7, r2
 8016b1c:	f047 0720 	orr.w	r7, r7, #32
 8016b20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016b22:	601c      	str	r4, [r3, #0]
 8016b24:	9b04      	ldr	r3, [sp, #16]
 8016b26:	601d      	str	r5, [r3, #0]
 8016b28:	e695      	b.n	8016856 <__gethex+0x12a>
 8016b2a:	4299      	cmp	r1, r3
 8016b2c:	f843 cc04 	str.w	ip, [r3, #-4]
 8016b30:	d8d8      	bhi.n	8016ae4 <__gethex+0x3b8>
 8016b32:	68a3      	ldr	r3, [r4, #8]
 8016b34:	459b      	cmp	fp, r3
 8016b36:	db19      	blt.n	8016b6c <__gethex+0x440>
 8016b38:	6861      	ldr	r1, [r4, #4]
 8016b3a:	ee18 0a10 	vmov	r0, s16
 8016b3e:	3101      	adds	r1, #1
 8016b40:	f000 f928 	bl	8016d94 <_Balloc>
 8016b44:	4681      	mov	r9, r0
 8016b46:	b918      	cbnz	r0, 8016b50 <__gethex+0x424>
 8016b48:	4b1a      	ldr	r3, [pc, #104]	; (8016bb4 <__gethex+0x488>)
 8016b4a:	4602      	mov	r2, r0
 8016b4c:	2184      	movs	r1, #132	; 0x84
 8016b4e:	e6a8      	b.n	80168a2 <__gethex+0x176>
 8016b50:	6922      	ldr	r2, [r4, #16]
 8016b52:	3202      	adds	r2, #2
 8016b54:	f104 010c 	add.w	r1, r4, #12
 8016b58:	0092      	lsls	r2, r2, #2
 8016b5a:	300c      	adds	r0, #12
 8016b5c:	f000 f90c 	bl	8016d78 <memcpy>
 8016b60:	4621      	mov	r1, r4
 8016b62:	ee18 0a10 	vmov	r0, s16
 8016b66:	f000 f955 	bl	8016e14 <_Bfree>
 8016b6a:	464c      	mov	r4, r9
 8016b6c:	6923      	ldr	r3, [r4, #16]
 8016b6e:	1c5a      	adds	r2, r3, #1
 8016b70:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016b74:	6122      	str	r2, [r4, #16]
 8016b76:	2201      	movs	r2, #1
 8016b78:	615a      	str	r2, [r3, #20]
 8016b7a:	e7bb      	b.n	8016af4 <__gethex+0x3c8>
 8016b7c:	6922      	ldr	r2, [r4, #16]
 8016b7e:	455a      	cmp	r2, fp
 8016b80:	dd0b      	ble.n	8016b9a <__gethex+0x46e>
 8016b82:	2101      	movs	r1, #1
 8016b84:	4620      	mov	r0, r4
 8016b86:	f7ff fd69 	bl	801665c <rshift>
 8016b8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016b8e:	3501      	adds	r5, #1
 8016b90:	42ab      	cmp	r3, r5
 8016b92:	f6ff aed0 	blt.w	8016936 <__gethex+0x20a>
 8016b96:	2701      	movs	r7, #1
 8016b98:	e7c0      	b.n	8016b1c <__gethex+0x3f0>
 8016b9a:	f016 061f 	ands.w	r6, r6, #31
 8016b9e:	d0fa      	beq.n	8016b96 <__gethex+0x46a>
 8016ba0:	449a      	add	sl, r3
 8016ba2:	f1c6 0620 	rsb	r6, r6, #32
 8016ba6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8016baa:	f000 f9e9 	bl	8016f80 <__hi0bits>
 8016bae:	42b0      	cmp	r0, r6
 8016bb0:	dbe7      	blt.n	8016b82 <__gethex+0x456>
 8016bb2:	e7f0      	b.n	8016b96 <__gethex+0x46a>
 8016bb4:	08019739 	.word	0x08019739

08016bb8 <L_shift>:
 8016bb8:	f1c2 0208 	rsb	r2, r2, #8
 8016bbc:	0092      	lsls	r2, r2, #2
 8016bbe:	b570      	push	{r4, r5, r6, lr}
 8016bc0:	f1c2 0620 	rsb	r6, r2, #32
 8016bc4:	6843      	ldr	r3, [r0, #4]
 8016bc6:	6804      	ldr	r4, [r0, #0]
 8016bc8:	fa03 f506 	lsl.w	r5, r3, r6
 8016bcc:	432c      	orrs	r4, r5
 8016bce:	40d3      	lsrs	r3, r2
 8016bd0:	6004      	str	r4, [r0, #0]
 8016bd2:	f840 3f04 	str.w	r3, [r0, #4]!
 8016bd6:	4288      	cmp	r0, r1
 8016bd8:	d3f4      	bcc.n	8016bc4 <L_shift+0xc>
 8016bda:	bd70      	pop	{r4, r5, r6, pc}

08016bdc <__match>:
 8016bdc:	b530      	push	{r4, r5, lr}
 8016bde:	6803      	ldr	r3, [r0, #0]
 8016be0:	3301      	adds	r3, #1
 8016be2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016be6:	b914      	cbnz	r4, 8016bee <__match+0x12>
 8016be8:	6003      	str	r3, [r0, #0]
 8016bea:	2001      	movs	r0, #1
 8016bec:	bd30      	pop	{r4, r5, pc}
 8016bee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016bf2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016bf6:	2d19      	cmp	r5, #25
 8016bf8:	bf98      	it	ls
 8016bfa:	3220      	addls	r2, #32
 8016bfc:	42a2      	cmp	r2, r4
 8016bfe:	d0f0      	beq.n	8016be2 <__match+0x6>
 8016c00:	2000      	movs	r0, #0
 8016c02:	e7f3      	b.n	8016bec <__match+0x10>

08016c04 <__hexnan>:
 8016c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c08:	680b      	ldr	r3, [r1, #0]
 8016c0a:	6801      	ldr	r1, [r0, #0]
 8016c0c:	115e      	asrs	r6, r3, #5
 8016c0e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016c12:	f013 031f 	ands.w	r3, r3, #31
 8016c16:	b087      	sub	sp, #28
 8016c18:	bf18      	it	ne
 8016c1a:	3604      	addne	r6, #4
 8016c1c:	2500      	movs	r5, #0
 8016c1e:	1f37      	subs	r7, r6, #4
 8016c20:	4682      	mov	sl, r0
 8016c22:	4690      	mov	r8, r2
 8016c24:	9301      	str	r3, [sp, #4]
 8016c26:	f846 5c04 	str.w	r5, [r6, #-4]
 8016c2a:	46b9      	mov	r9, r7
 8016c2c:	463c      	mov	r4, r7
 8016c2e:	9502      	str	r5, [sp, #8]
 8016c30:	46ab      	mov	fp, r5
 8016c32:	784a      	ldrb	r2, [r1, #1]
 8016c34:	1c4b      	adds	r3, r1, #1
 8016c36:	9303      	str	r3, [sp, #12]
 8016c38:	b342      	cbz	r2, 8016c8c <__hexnan+0x88>
 8016c3a:	4610      	mov	r0, r2
 8016c3c:	9105      	str	r1, [sp, #20]
 8016c3e:	9204      	str	r2, [sp, #16]
 8016c40:	f7ff fd5e 	bl	8016700 <__hexdig_fun>
 8016c44:	2800      	cmp	r0, #0
 8016c46:	d14f      	bne.n	8016ce8 <__hexnan+0xe4>
 8016c48:	9a04      	ldr	r2, [sp, #16]
 8016c4a:	9905      	ldr	r1, [sp, #20]
 8016c4c:	2a20      	cmp	r2, #32
 8016c4e:	d818      	bhi.n	8016c82 <__hexnan+0x7e>
 8016c50:	9b02      	ldr	r3, [sp, #8]
 8016c52:	459b      	cmp	fp, r3
 8016c54:	dd13      	ble.n	8016c7e <__hexnan+0x7a>
 8016c56:	454c      	cmp	r4, r9
 8016c58:	d206      	bcs.n	8016c68 <__hexnan+0x64>
 8016c5a:	2d07      	cmp	r5, #7
 8016c5c:	dc04      	bgt.n	8016c68 <__hexnan+0x64>
 8016c5e:	462a      	mov	r2, r5
 8016c60:	4649      	mov	r1, r9
 8016c62:	4620      	mov	r0, r4
 8016c64:	f7ff ffa8 	bl	8016bb8 <L_shift>
 8016c68:	4544      	cmp	r4, r8
 8016c6a:	d950      	bls.n	8016d0e <__hexnan+0x10a>
 8016c6c:	2300      	movs	r3, #0
 8016c6e:	f1a4 0904 	sub.w	r9, r4, #4
 8016c72:	f844 3c04 	str.w	r3, [r4, #-4]
 8016c76:	f8cd b008 	str.w	fp, [sp, #8]
 8016c7a:	464c      	mov	r4, r9
 8016c7c:	461d      	mov	r5, r3
 8016c7e:	9903      	ldr	r1, [sp, #12]
 8016c80:	e7d7      	b.n	8016c32 <__hexnan+0x2e>
 8016c82:	2a29      	cmp	r2, #41	; 0x29
 8016c84:	d156      	bne.n	8016d34 <__hexnan+0x130>
 8016c86:	3102      	adds	r1, #2
 8016c88:	f8ca 1000 	str.w	r1, [sl]
 8016c8c:	f1bb 0f00 	cmp.w	fp, #0
 8016c90:	d050      	beq.n	8016d34 <__hexnan+0x130>
 8016c92:	454c      	cmp	r4, r9
 8016c94:	d206      	bcs.n	8016ca4 <__hexnan+0xa0>
 8016c96:	2d07      	cmp	r5, #7
 8016c98:	dc04      	bgt.n	8016ca4 <__hexnan+0xa0>
 8016c9a:	462a      	mov	r2, r5
 8016c9c:	4649      	mov	r1, r9
 8016c9e:	4620      	mov	r0, r4
 8016ca0:	f7ff ff8a 	bl	8016bb8 <L_shift>
 8016ca4:	4544      	cmp	r4, r8
 8016ca6:	d934      	bls.n	8016d12 <__hexnan+0x10e>
 8016ca8:	f1a8 0204 	sub.w	r2, r8, #4
 8016cac:	4623      	mov	r3, r4
 8016cae:	f853 1b04 	ldr.w	r1, [r3], #4
 8016cb2:	f842 1f04 	str.w	r1, [r2, #4]!
 8016cb6:	429f      	cmp	r7, r3
 8016cb8:	d2f9      	bcs.n	8016cae <__hexnan+0xaa>
 8016cba:	1b3b      	subs	r3, r7, r4
 8016cbc:	f023 0303 	bic.w	r3, r3, #3
 8016cc0:	3304      	adds	r3, #4
 8016cc2:	3401      	adds	r4, #1
 8016cc4:	3e03      	subs	r6, #3
 8016cc6:	42b4      	cmp	r4, r6
 8016cc8:	bf88      	it	hi
 8016cca:	2304      	movhi	r3, #4
 8016ccc:	4443      	add	r3, r8
 8016cce:	2200      	movs	r2, #0
 8016cd0:	f843 2b04 	str.w	r2, [r3], #4
 8016cd4:	429f      	cmp	r7, r3
 8016cd6:	d2fb      	bcs.n	8016cd0 <__hexnan+0xcc>
 8016cd8:	683b      	ldr	r3, [r7, #0]
 8016cda:	b91b      	cbnz	r3, 8016ce4 <__hexnan+0xe0>
 8016cdc:	4547      	cmp	r7, r8
 8016cde:	d127      	bne.n	8016d30 <__hexnan+0x12c>
 8016ce0:	2301      	movs	r3, #1
 8016ce2:	603b      	str	r3, [r7, #0]
 8016ce4:	2005      	movs	r0, #5
 8016ce6:	e026      	b.n	8016d36 <__hexnan+0x132>
 8016ce8:	3501      	adds	r5, #1
 8016cea:	2d08      	cmp	r5, #8
 8016cec:	f10b 0b01 	add.w	fp, fp, #1
 8016cf0:	dd06      	ble.n	8016d00 <__hexnan+0xfc>
 8016cf2:	4544      	cmp	r4, r8
 8016cf4:	d9c3      	bls.n	8016c7e <__hexnan+0x7a>
 8016cf6:	2300      	movs	r3, #0
 8016cf8:	f844 3c04 	str.w	r3, [r4, #-4]
 8016cfc:	2501      	movs	r5, #1
 8016cfe:	3c04      	subs	r4, #4
 8016d00:	6822      	ldr	r2, [r4, #0]
 8016d02:	f000 000f 	and.w	r0, r0, #15
 8016d06:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8016d0a:	6022      	str	r2, [r4, #0]
 8016d0c:	e7b7      	b.n	8016c7e <__hexnan+0x7a>
 8016d0e:	2508      	movs	r5, #8
 8016d10:	e7b5      	b.n	8016c7e <__hexnan+0x7a>
 8016d12:	9b01      	ldr	r3, [sp, #4]
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	d0df      	beq.n	8016cd8 <__hexnan+0xd4>
 8016d18:	f04f 32ff 	mov.w	r2, #4294967295
 8016d1c:	f1c3 0320 	rsb	r3, r3, #32
 8016d20:	fa22 f303 	lsr.w	r3, r2, r3
 8016d24:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016d28:	401a      	ands	r2, r3
 8016d2a:	f846 2c04 	str.w	r2, [r6, #-4]
 8016d2e:	e7d3      	b.n	8016cd8 <__hexnan+0xd4>
 8016d30:	3f04      	subs	r7, #4
 8016d32:	e7d1      	b.n	8016cd8 <__hexnan+0xd4>
 8016d34:	2004      	movs	r0, #4
 8016d36:	b007      	add	sp, #28
 8016d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016d3c <_localeconv_r>:
 8016d3c:	4800      	ldr	r0, [pc, #0]	; (8016d40 <_localeconv_r+0x4>)
 8016d3e:	4770      	bx	lr
 8016d40:	24000178 	.word	0x24000178

08016d44 <malloc>:
 8016d44:	4b02      	ldr	r3, [pc, #8]	; (8016d50 <malloc+0xc>)
 8016d46:	4601      	mov	r1, r0
 8016d48:	6818      	ldr	r0, [r3, #0]
 8016d4a:	f000 bd3f 	b.w	80177cc <_malloc_r>
 8016d4e:	bf00      	nop
 8016d50:	24000020 	.word	0x24000020

08016d54 <__ascii_mbtowc>:
 8016d54:	b082      	sub	sp, #8
 8016d56:	b901      	cbnz	r1, 8016d5a <__ascii_mbtowc+0x6>
 8016d58:	a901      	add	r1, sp, #4
 8016d5a:	b142      	cbz	r2, 8016d6e <__ascii_mbtowc+0x1a>
 8016d5c:	b14b      	cbz	r3, 8016d72 <__ascii_mbtowc+0x1e>
 8016d5e:	7813      	ldrb	r3, [r2, #0]
 8016d60:	600b      	str	r3, [r1, #0]
 8016d62:	7812      	ldrb	r2, [r2, #0]
 8016d64:	1e10      	subs	r0, r2, #0
 8016d66:	bf18      	it	ne
 8016d68:	2001      	movne	r0, #1
 8016d6a:	b002      	add	sp, #8
 8016d6c:	4770      	bx	lr
 8016d6e:	4610      	mov	r0, r2
 8016d70:	e7fb      	b.n	8016d6a <__ascii_mbtowc+0x16>
 8016d72:	f06f 0001 	mvn.w	r0, #1
 8016d76:	e7f8      	b.n	8016d6a <__ascii_mbtowc+0x16>

08016d78 <memcpy>:
 8016d78:	440a      	add	r2, r1
 8016d7a:	4291      	cmp	r1, r2
 8016d7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8016d80:	d100      	bne.n	8016d84 <memcpy+0xc>
 8016d82:	4770      	bx	lr
 8016d84:	b510      	push	{r4, lr}
 8016d86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016d8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016d8e:	4291      	cmp	r1, r2
 8016d90:	d1f9      	bne.n	8016d86 <memcpy+0xe>
 8016d92:	bd10      	pop	{r4, pc}

08016d94 <_Balloc>:
 8016d94:	b570      	push	{r4, r5, r6, lr}
 8016d96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016d98:	4604      	mov	r4, r0
 8016d9a:	460d      	mov	r5, r1
 8016d9c:	b976      	cbnz	r6, 8016dbc <_Balloc+0x28>
 8016d9e:	2010      	movs	r0, #16
 8016da0:	f7ff ffd0 	bl	8016d44 <malloc>
 8016da4:	4602      	mov	r2, r0
 8016da6:	6260      	str	r0, [r4, #36]	; 0x24
 8016da8:	b920      	cbnz	r0, 8016db4 <_Balloc+0x20>
 8016daa:	4b18      	ldr	r3, [pc, #96]	; (8016e0c <_Balloc+0x78>)
 8016dac:	4818      	ldr	r0, [pc, #96]	; (8016e10 <_Balloc+0x7c>)
 8016dae:	2166      	movs	r1, #102	; 0x66
 8016db0:	f000 fefa 	bl	8017ba8 <__assert_func>
 8016db4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016db8:	6006      	str	r6, [r0, #0]
 8016dba:	60c6      	str	r6, [r0, #12]
 8016dbc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016dbe:	68f3      	ldr	r3, [r6, #12]
 8016dc0:	b183      	cbz	r3, 8016de4 <_Balloc+0x50>
 8016dc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016dc4:	68db      	ldr	r3, [r3, #12]
 8016dc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016dca:	b9b8      	cbnz	r0, 8016dfc <_Balloc+0x68>
 8016dcc:	2101      	movs	r1, #1
 8016dce:	fa01 f605 	lsl.w	r6, r1, r5
 8016dd2:	1d72      	adds	r2, r6, #5
 8016dd4:	0092      	lsls	r2, r2, #2
 8016dd6:	4620      	mov	r0, r4
 8016dd8:	f000 fc98 	bl	801770c <_calloc_r>
 8016ddc:	b160      	cbz	r0, 8016df8 <_Balloc+0x64>
 8016dde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016de2:	e00e      	b.n	8016e02 <_Balloc+0x6e>
 8016de4:	2221      	movs	r2, #33	; 0x21
 8016de6:	2104      	movs	r1, #4
 8016de8:	4620      	mov	r0, r4
 8016dea:	f000 fc8f 	bl	801770c <_calloc_r>
 8016dee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016df0:	60f0      	str	r0, [r6, #12]
 8016df2:	68db      	ldr	r3, [r3, #12]
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d1e4      	bne.n	8016dc2 <_Balloc+0x2e>
 8016df8:	2000      	movs	r0, #0
 8016dfa:	bd70      	pop	{r4, r5, r6, pc}
 8016dfc:	6802      	ldr	r2, [r0, #0]
 8016dfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016e02:	2300      	movs	r3, #0
 8016e04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016e08:	e7f7      	b.n	8016dfa <_Balloc+0x66>
 8016e0a:	bf00      	nop
 8016e0c:	080196c3 	.word	0x080196c3
 8016e10:	080197c8 	.word	0x080197c8

08016e14 <_Bfree>:
 8016e14:	b570      	push	{r4, r5, r6, lr}
 8016e16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016e18:	4605      	mov	r5, r0
 8016e1a:	460c      	mov	r4, r1
 8016e1c:	b976      	cbnz	r6, 8016e3c <_Bfree+0x28>
 8016e1e:	2010      	movs	r0, #16
 8016e20:	f7ff ff90 	bl	8016d44 <malloc>
 8016e24:	4602      	mov	r2, r0
 8016e26:	6268      	str	r0, [r5, #36]	; 0x24
 8016e28:	b920      	cbnz	r0, 8016e34 <_Bfree+0x20>
 8016e2a:	4b09      	ldr	r3, [pc, #36]	; (8016e50 <_Bfree+0x3c>)
 8016e2c:	4809      	ldr	r0, [pc, #36]	; (8016e54 <_Bfree+0x40>)
 8016e2e:	218a      	movs	r1, #138	; 0x8a
 8016e30:	f000 feba 	bl	8017ba8 <__assert_func>
 8016e34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016e38:	6006      	str	r6, [r0, #0]
 8016e3a:	60c6      	str	r6, [r0, #12]
 8016e3c:	b13c      	cbz	r4, 8016e4e <_Bfree+0x3a>
 8016e3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016e40:	6862      	ldr	r2, [r4, #4]
 8016e42:	68db      	ldr	r3, [r3, #12]
 8016e44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016e48:	6021      	str	r1, [r4, #0]
 8016e4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016e4e:	bd70      	pop	{r4, r5, r6, pc}
 8016e50:	080196c3 	.word	0x080196c3
 8016e54:	080197c8 	.word	0x080197c8

08016e58 <__multadd>:
 8016e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e5c:	690e      	ldr	r6, [r1, #16]
 8016e5e:	4607      	mov	r7, r0
 8016e60:	4698      	mov	r8, r3
 8016e62:	460c      	mov	r4, r1
 8016e64:	f101 0014 	add.w	r0, r1, #20
 8016e68:	2300      	movs	r3, #0
 8016e6a:	6805      	ldr	r5, [r0, #0]
 8016e6c:	b2a9      	uxth	r1, r5
 8016e6e:	fb02 8101 	mla	r1, r2, r1, r8
 8016e72:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8016e76:	0c2d      	lsrs	r5, r5, #16
 8016e78:	fb02 c505 	mla	r5, r2, r5, ip
 8016e7c:	b289      	uxth	r1, r1
 8016e7e:	3301      	adds	r3, #1
 8016e80:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8016e84:	429e      	cmp	r6, r3
 8016e86:	f840 1b04 	str.w	r1, [r0], #4
 8016e8a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8016e8e:	dcec      	bgt.n	8016e6a <__multadd+0x12>
 8016e90:	f1b8 0f00 	cmp.w	r8, #0
 8016e94:	d022      	beq.n	8016edc <__multadd+0x84>
 8016e96:	68a3      	ldr	r3, [r4, #8]
 8016e98:	42b3      	cmp	r3, r6
 8016e9a:	dc19      	bgt.n	8016ed0 <__multadd+0x78>
 8016e9c:	6861      	ldr	r1, [r4, #4]
 8016e9e:	4638      	mov	r0, r7
 8016ea0:	3101      	adds	r1, #1
 8016ea2:	f7ff ff77 	bl	8016d94 <_Balloc>
 8016ea6:	4605      	mov	r5, r0
 8016ea8:	b928      	cbnz	r0, 8016eb6 <__multadd+0x5e>
 8016eaa:	4602      	mov	r2, r0
 8016eac:	4b0d      	ldr	r3, [pc, #52]	; (8016ee4 <__multadd+0x8c>)
 8016eae:	480e      	ldr	r0, [pc, #56]	; (8016ee8 <__multadd+0x90>)
 8016eb0:	21b5      	movs	r1, #181	; 0xb5
 8016eb2:	f000 fe79 	bl	8017ba8 <__assert_func>
 8016eb6:	6922      	ldr	r2, [r4, #16]
 8016eb8:	3202      	adds	r2, #2
 8016eba:	f104 010c 	add.w	r1, r4, #12
 8016ebe:	0092      	lsls	r2, r2, #2
 8016ec0:	300c      	adds	r0, #12
 8016ec2:	f7ff ff59 	bl	8016d78 <memcpy>
 8016ec6:	4621      	mov	r1, r4
 8016ec8:	4638      	mov	r0, r7
 8016eca:	f7ff ffa3 	bl	8016e14 <_Bfree>
 8016ece:	462c      	mov	r4, r5
 8016ed0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8016ed4:	3601      	adds	r6, #1
 8016ed6:	f8c3 8014 	str.w	r8, [r3, #20]
 8016eda:	6126      	str	r6, [r4, #16]
 8016edc:	4620      	mov	r0, r4
 8016ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ee2:	bf00      	nop
 8016ee4:	08019739 	.word	0x08019739
 8016ee8:	080197c8 	.word	0x080197c8

08016eec <__s2b>:
 8016eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ef0:	460c      	mov	r4, r1
 8016ef2:	4615      	mov	r5, r2
 8016ef4:	461f      	mov	r7, r3
 8016ef6:	2209      	movs	r2, #9
 8016ef8:	3308      	adds	r3, #8
 8016efa:	4606      	mov	r6, r0
 8016efc:	fb93 f3f2 	sdiv	r3, r3, r2
 8016f00:	2100      	movs	r1, #0
 8016f02:	2201      	movs	r2, #1
 8016f04:	429a      	cmp	r2, r3
 8016f06:	db09      	blt.n	8016f1c <__s2b+0x30>
 8016f08:	4630      	mov	r0, r6
 8016f0a:	f7ff ff43 	bl	8016d94 <_Balloc>
 8016f0e:	b940      	cbnz	r0, 8016f22 <__s2b+0x36>
 8016f10:	4602      	mov	r2, r0
 8016f12:	4b19      	ldr	r3, [pc, #100]	; (8016f78 <__s2b+0x8c>)
 8016f14:	4819      	ldr	r0, [pc, #100]	; (8016f7c <__s2b+0x90>)
 8016f16:	21ce      	movs	r1, #206	; 0xce
 8016f18:	f000 fe46 	bl	8017ba8 <__assert_func>
 8016f1c:	0052      	lsls	r2, r2, #1
 8016f1e:	3101      	adds	r1, #1
 8016f20:	e7f0      	b.n	8016f04 <__s2b+0x18>
 8016f22:	9b08      	ldr	r3, [sp, #32]
 8016f24:	6143      	str	r3, [r0, #20]
 8016f26:	2d09      	cmp	r5, #9
 8016f28:	f04f 0301 	mov.w	r3, #1
 8016f2c:	6103      	str	r3, [r0, #16]
 8016f2e:	dd16      	ble.n	8016f5e <__s2b+0x72>
 8016f30:	f104 0909 	add.w	r9, r4, #9
 8016f34:	46c8      	mov	r8, r9
 8016f36:	442c      	add	r4, r5
 8016f38:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016f3c:	4601      	mov	r1, r0
 8016f3e:	3b30      	subs	r3, #48	; 0x30
 8016f40:	220a      	movs	r2, #10
 8016f42:	4630      	mov	r0, r6
 8016f44:	f7ff ff88 	bl	8016e58 <__multadd>
 8016f48:	45a0      	cmp	r8, r4
 8016f4a:	d1f5      	bne.n	8016f38 <__s2b+0x4c>
 8016f4c:	f1a5 0408 	sub.w	r4, r5, #8
 8016f50:	444c      	add	r4, r9
 8016f52:	1b2d      	subs	r5, r5, r4
 8016f54:	1963      	adds	r3, r4, r5
 8016f56:	42bb      	cmp	r3, r7
 8016f58:	db04      	blt.n	8016f64 <__s2b+0x78>
 8016f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f5e:	340a      	adds	r4, #10
 8016f60:	2509      	movs	r5, #9
 8016f62:	e7f6      	b.n	8016f52 <__s2b+0x66>
 8016f64:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016f68:	4601      	mov	r1, r0
 8016f6a:	3b30      	subs	r3, #48	; 0x30
 8016f6c:	220a      	movs	r2, #10
 8016f6e:	4630      	mov	r0, r6
 8016f70:	f7ff ff72 	bl	8016e58 <__multadd>
 8016f74:	e7ee      	b.n	8016f54 <__s2b+0x68>
 8016f76:	bf00      	nop
 8016f78:	08019739 	.word	0x08019739
 8016f7c:	080197c8 	.word	0x080197c8

08016f80 <__hi0bits>:
 8016f80:	0c03      	lsrs	r3, r0, #16
 8016f82:	041b      	lsls	r3, r3, #16
 8016f84:	b9d3      	cbnz	r3, 8016fbc <__hi0bits+0x3c>
 8016f86:	0400      	lsls	r0, r0, #16
 8016f88:	2310      	movs	r3, #16
 8016f8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016f8e:	bf04      	itt	eq
 8016f90:	0200      	lsleq	r0, r0, #8
 8016f92:	3308      	addeq	r3, #8
 8016f94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016f98:	bf04      	itt	eq
 8016f9a:	0100      	lsleq	r0, r0, #4
 8016f9c:	3304      	addeq	r3, #4
 8016f9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016fa2:	bf04      	itt	eq
 8016fa4:	0080      	lsleq	r0, r0, #2
 8016fa6:	3302      	addeq	r3, #2
 8016fa8:	2800      	cmp	r0, #0
 8016faa:	db05      	blt.n	8016fb8 <__hi0bits+0x38>
 8016fac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016fb0:	f103 0301 	add.w	r3, r3, #1
 8016fb4:	bf08      	it	eq
 8016fb6:	2320      	moveq	r3, #32
 8016fb8:	4618      	mov	r0, r3
 8016fba:	4770      	bx	lr
 8016fbc:	2300      	movs	r3, #0
 8016fbe:	e7e4      	b.n	8016f8a <__hi0bits+0xa>

08016fc0 <__lo0bits>:
 8016fc0:	6803      	ldr	r3, [r0, #0]
 8016fc2:	f013 0207 	ands.w	r2, r3, #7
 8016fc6:	4601      	mov	r1, r0
 8016fc8:	d00b      	beq.n	8016fe2 <__lo0bits+0x22>
 8016fca:	07da      	lsls	r2, r3, #31
 8016fcc:	d424      	bmi.n	8017018 <__lo0bits+0x58>
 8016fce:	0798      	lsls	r0, r3, #30
 8016fd0:	bf49      	itett	mi
 8016fd2:	085b      	lsrmi	r3, r3, #1
 8016fd4:	089b      	lsrpl	r3, r3, #2
 8016fd6:	2001      	movmi	r0, #1
 8016fd8:	600b      	strmi	r3, [r1, #0]
 8016fda:	bf5c      	itt	pl
 8016fdc:	600b      	strpl	r3, [r1, #0]
 8016fde:	2002      	movpl	r0, #2
 8016fe0:	4770      	bx	lr
 8016fe2:	b298      	uxth	r0, r3
 8016fe4:	b9b0      	cbnz	r0, 8017014 <__lo0bits+0x54>
 8016fe6:	0c1b      	lsrs	r3, r3, #16
 8016fe8:	2010      	movs	r0, #16
 8016fea:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016fee:	bf04      	itt	eq
 8016ff0:	0a1b      	lsreq	r3, r3, #8
 8016ff2:	3008      	addeq	r0, #8
 8016ff4:	071a      	lsls	r2, r3, #28
 8016ff6:	bf04      	itt	eq
 8016ff8:	091b      	lsreq	r3, r3, #4
 8016ffa:	3004      	addeq	r0, #4
 8016ffc:	079a      	lsls	r2, r3, #30
 8016ffe:	bf04      	itt	eq
 8017000:	089b      	lsreq	r3, r3, #2
 8017002:	3002      	addeq	r0, #2
 8017004:	07da      	lsls	r2, r3, #31
 8017006:	d403      	bmi.n	8017010 <__lo0bits+0x50>
 8017008:	085b      	lsrs	r3, r3, #1
 801700a:	f100 0001 	add.w	r0, r0, #1
 801700e:	d005      	beq.n	801701c <__lo0bits+0x5c>
 8017010:	600b      	str	r3, [r1, #0]
 8017012:	4770      	bx	lr
 8017014:	4610      	mov	r0, r2
 8017016:	e7e8      	b.n	8016fea <__lo0bits+0x2a>
 8017018:	2000      	movs	r0, #0
 801701a:	4770      	bx	lr
 801701c:	2020      	movs	r0, #32
 801701e:	4770      	bx	lr

08017020 <__i2b>:
 8017020:	b510      	push	{r4, lr}
 8017022:	460c      	mov	r4, r1
 8017024:	2101      	movs	r1, #1
 8017026:	f7ff feb5 	bl	8016d94 <_Balloc>
 801702a:	4602      	mov	r2, r0
 801702c:	b928      	cbnz	r0, 801703a <__i2b+0x1a>
 801702e:	4b05      	ldr	r3, [pc, #20]	; (8017044 <__i2b+0x24>)
 8017030:	4805      	ldr	r0, [pc, #20]	; (8017048 <__i2b+0x28>)
 8017032:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8017036:	f000 fdb7 	bl	8017ba8 <__assert_func>
 801703a:	2301      	movs	r3, #1
 801703c:	6144      	str	r4, [r0, #20]
 801703e:	6103      	str	r3, [r0, #16]
 8017040:	bd10      	pop	{r4, pc}
 8017042:	bf00      	nop
 8017044:	08019739 	.word	0x08019739
 8017048:	080197c8 	.word	0x080197c8

0801704c <__multiply>:
 801704c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017050:	4614      	mov	r4, r2
 8017052:	690a      	ldr	r2, [r1, #16]
 8017054:	6923      	ldr	r3, [r4, #16]
 8017056:	429a      	cmp	r2, r3
 8017058:	bfb8      	it	lt
 801705a:	460b      	movlt	r3, r1
 801705c:	460d      	mov	r5, r1
 801705e:	bfbc      	itt	lt
 8017060:	4625      	movlt	r5, r4
 8017062:	461c      	movlt	r4, r3
 8017064:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8017068:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801706c:	68ab      	ldr	r3, [r5, #8]
 801706e:	6869      	ldr	r1, [r5, #4]
 8017070:	eb0a 0709 	add.w	r7, sl, r9
 8017074:	42bb      	cmp	r3, r7
 8017076:	b085      	sub	sp, #20
 8017078:	bfb8      	it	lt
 801707a:	3101      	addlt	r1, #1
 801707c:	f7ff fe8a 	bl	8016d94 <_Balloc>
 8017080:	b930      	cbnz	r0, 8017090 <__multiply+0x44>
 8017082:	4602      	mov	r2, r0
 8017084:	4b42      	ldr	r3, [pc, #264]	; (8017190 <__multiply+0x144>)
 8017086:	4843      	ldr	r0, [pc, #268]	; (8017194 <__multiply+0x148>)
 8017088:	f240 115d 	movw	r1, #349	; 0x15d
 801708c:	f000 fd8c 	bl	8017ba8 <__assert_func>
 8017090:	f100 0614 	add.w	r6, r0, #20
 8017094:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8017098:	4633      	mov	r3, r6
 801709a:	2200      	movs	r2, #0
 801709c:	4543      	cmp	r3, r8
 801709e:	d31e      	bcc.n	80170de <__multiply+0x92>
 80170a0:	f105 0c14 	add.w	ip, r5, #20
 80170a4:	f104 0314 	add.w	r3, r4, #20
 80170a8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80170ac:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80170b0:	9202      	str	r2, [sp, #8]
 80170b2:	ebac 0205 	sub.w	r2, ip, r5
 80170b6:	3a15      	subs	r2, #21
 80170b8:	f022 0203 	bic.w	r2, r2, #3
 80170bc:	3204      	adds	r2, #4
 80170be:	f105 0115 	add.w	r1, r5, #21
 80170c2:	458c      	cmp	ip, r1
 80170c4:	bf38      	it	cc
 80170c6:	2204      	movcc	r2, #4
 80170c8:	9201      	str	r2, [sp, #4]
 80170ca:	9a02      	ldr	r2, [sp, #8]
 80170cc:	9303      	str	r3, [sp, #12]
 80170ce:	429a      	cmp	r2, r3
 80170d0:	d808      	bhi.n	80170e4 <__multiply+0x98>
 80170d2:	2f00      	cmp	r7, #0
 80170d4:	dc55      	bgt.n	8017182 <__multiply+0x136>
 80170d6:	6107      	str	r7, [r0, #16]
 80170d8:	b005      	add	sp, #20
 80170da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170de:	f843 2b04 	str.w	r2, [r3], #4
 80170e2:	e7db      	b.n	801709c <__multiply+0x50>
 80170e4:	f8b3 a000 	ldrh.w	sl, [r3]
 80170e8:	f1ba 0f00 	cmp.w	sl, #0
 80170ec:	d020      	beq.n	8017130 <__multiply+0xe4>
 80170ee:	f105 0e14 	add.w	lr, r5, #20
 80170f2:	46b1      	mov	r9, r6
 80170f4:	2200      	movs	r2, #0
 80170f6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80170fa:	f8d9 b000 	ldr.w	fp, [r9]
 80170fe:	b2a1      	uxth	r1, r4
 8017100:	fa1f fb8b 	uxth.w	fp, fp
 8017104:	fb0a b101 	mla	r1, sl, r1, fp
 8017108:	4411      	add	r1, r2
 801710a:	f8d9 2000 	ldr.w	r2, [r9]
 801710e:	0c24      	lsrs	r4, r4, #16
 8017110:	0c12      	lsrs	r2, r2, #16
 8017112:	fb0a 2404 	mla	r4, sl, r4, r2
 8017116:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801711a:	b289      	uxth	r1, r1
 801711c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8017120:	45f4      	cmp	ip, lr
 8017122:	f849 1b04 	str.w	r1, [r9], #4
 8017126:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801712a:	d8e4      	bhi.n	80170f6 <__multiply+0xaa>
 801712c:	9901      	ldr	r1, [sp, #4]
 801712e:	5072      	str	r2, [r6, r1]
 8017130:	9a03      	ldr	r2, [sp, #12]
 8017132:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8017136:	3304      	adds	r3, #4
 8017138:	f1b9 0f00 	cmp.w	r9, #0
 801713c:	d01f      	beq.n	801717e <__multiply+0x132>
 801713e:	6834      	ldr	r4, [r6, #0]
 8017140:	f105 0114 	add.w	r1, r5, #20
 8017144:	46b6      	mov	lr, r6
 8017146:	f04f 0a00 	mov.w	sl, #0
 801714a:	880a      	ldrh	r2, [r1, #0]
 801714c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8017150:	fb09 b202 	mla	r2, r9, r2, fp
 8017154:	4492      	add	sl, r2
 8017156:	b2a4      	uxth	r4, r4
 8017158:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801715c:	f84e 4b04 	str.w	r4, [lr], #4
 8017160:	f851 4b04 	ldr.w	r4, [r1], #4
 8017164:	f8be 2000 	ldrh.w	r2, [lr]
 8017168:	0c24      	lsrs	r4, r4, #16
 801716a:	fb09 2404 	mla	r4, r9, r4, r2
 801716e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8017172:	458c      	cmp	ip, r1
 8017174:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8017178:	d8e7      	bhi.n	801714a <__multiply+0xfe>
 801717a:	9a01      	ldr	r2, [sp, #4]
 801717c:	50b4      	str	r4, [r6, r2]
 801717e:	3604      	adds	r6, #4
 8017180:	e7a3      	b.n	80170ca <__multiply+0x7e>
 8017182:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017186:	2b00      	cmp	r3, #0
 8017188:	d1a5      	bne.n	80170d6 <__multiply+0x8a>
 801718a:	3f01      	subs	r7, #1
 801718c:	e7a1      	b.n	80170d2 <__multiply+0x86>
 801718e:	bf00      	nop
 8017190:	08019739 	.word	0x08019739
 8017194:	080197c8 	.word	0x080197c8

08017198 <__pow5mult>:
 8017198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801719c:	4615      	mov	r5, r2
 801719e:	f012 0203 	ands.w	r2, r2, #3
 80171a2:	4606      	mov	r6, r0
 80171a4:	460f      	mov	r7, r1
 80171a6:	d007      	beq.n	80171b8 <__pow5mult+0x20>
 80171a8:	4c25      	ldr	r4, [pc, #148]	; (8017240 <__pow5mult+0xa8>)
 80171aa:	3a01      	subs	r2, #1
 80171ac:	2300      	movs	r3, #0
 80171ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80171b2:	f7ff fe51 	bl	8016e58 <__multadd>
 80171b6:	4607      	mov	r7, r0
 80171b8:	10ad      	asrs	r5, r5, #2
 80171ba:	d03d      	beq.n	8017238 <__pow5mult+0xa0>
 80171bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80171be:	b97c      	cbnz	r4, 80171e0 <__pow5mult+0x48>
 80171c0:	2010      	movs	r0, #16
 80171c2:	f7ff fdbf 	bl	8016d44 <malloc>
 80171c6:	4602      	mov	r2, r0
 80171c8:	6270      	str	r0, [r6, #36]	; 0x24
 80171ca:	b928      	cbnz	r0, 80171d8 <__pow5mult+0x40>
 80171cc:	4b1d      	ldr	r3, [pc, #116]	; (8017244 <__pow5mult+0xac>)
 80171ce:	481e      	ldr	r0, [pc, #120]	; (8017248 <__pow5mult+0xb0>)
 80171d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80171d4:	f000 fce8 	bl	8017ba8 <__assert_func>
 80171d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80171dc:	6004      	str	r4, [r0, #0]
 80171de:	60c4      	str	r4, [r0, #12]
 80171e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80171e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80171e8:	b94c      	cbnz	r4, 80171fe <__pow5mult+0x66>
 80171ea:	f240 2171 	movw	r1, #625	; 0x271
 80171ee:	4630      	mov	r0, r6
 80171f0:	f7ff ff16 	bl	8017020 <__i2b>
 80171f4:	2300      	movs	r3, #0
 80171f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80171fa:	4604      	mov	r4, r0
 80171fc:	6003      	str	r3, [r0, #0]
 80171fe:	f04f 0900 	mov.w	r9, #0
 8017202:	07eb      	lsls	r3, r5, #31
 8017204:	d50a      	bpl.n	801721c <__pow5mult+0x84>
 8017206:	4639      	mov	r1, r7
 8017208:	4622      	mov	r2, r4
 801720a:	4630      	mov	r0, r6
 801720c:	f7ff ff1e 	bl	801704c <__multiply>
 8017210:	4639      	mov	r1, r7
 8017212:	4680      	mov	r8, r0
 8017214:	4630      	mov	r0, r6
 8017216:	f7ff fdfd 	bl	8016e14 <_Bfree>
 801721a:	4647      	mov	r7, r8
 801721c:	106d      	asrs	r5, r5, #1
 801721e:	d00b      	beq.n	8017238 <__pow5mult+0xa0>
 8017220:	6820      	ldr	r0, [r4, #0]
 8017222:	b938      	cbnz	r0, 8017234 <__pow5mult+0x9c>
 8017224:	4622      	mov	r2, r4
 8017226:	4621      	mov	r1, r4
 8017228:	4630      	mov	r0, r6
 801722a:	f7ff ff0f 	bl	801704c <__multiply>
 801722e:	6020      	str	r0, [r4, #0]
 8017230:	f8c0 9000 	str.w	r9, [r0]
 8017234:	4604      	mov	r4, r0
 8017236:	e7e4      	b.n	8017202 <__pow5mult+0x6a>
 8017238:	4638      	mov	r0, r7
 801723a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801723e:	bf00      	nop
 8017240:	08019918 	.word	0x08019918
 8017244:	080196c3 	.word	0x080196c3
 8017248:	080197c8 	.word	0x080197c8

0801724c <__lshift>:
 801724c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017250:	460c      	mov	r4, r1
 8017252:	6849      	ldr	r1, [r1, #4]
 8017254:	6923      	ldr	r3, [r4, #16]
 8017256:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801725a:	68a3      	ldr	r3, [r4, #8]
 801725c:	4607      	mov	r7, r0
 801725e:	4691      	mov	r9, r2
 8017260:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017264:	f108 0601 	add.w	r6, r8, #1
 8017268:	42b3      	cmp	r3, r6
 801726a:	db0b      	blt.n	8017284 <__lshift+0x38>
 801726c:	4638      	mov	r0, r7
 801726e:	f7ff fd91 	bl	8016d94 <_Balloc>
 8017272:	4605      	mov	r5, r0
 8017274:	b948      	cbnz	r0, 801728a <__lshift+0x3e>
 8017276:	4602      	mov	r2, r0
 8017278:	4b28      	ldr	r3, [pc, #160]	; (801731c <__lshift+0xd0>)
 801727a:	4829      	ldr	r0, [pc, #164]	; (8017320 <__lshift+0xd4>)
 801727c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8017280:	f000 fc92 	bl	8017ba8 <__assert_func>
 8017284:	3101      	adds	r1, #1
 8017286:	005b      	lsls	r3, r3, #1
 8017288:	e7ee      	b.n	8017268 <__lshift+0x1c>
 801728a:	2300      	movs	r3, #0
 801728c:	f100 0114 	add.w	r1, r0, #20
 8017290:	f100 0210 	add.w	r2, r0, #16
 8017294:	4618      	mov	r0, r3
 8017296:	4553      	cmp	r3, sl
 8017298:	db33      	blt.n	8017302 <__lshift+0xb6>
 801729a:	6920      	ldr	r0, [r4, #16]
 801729c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80172a0:	f104 0314 	add.w	r3, r4, #20
 80172a4:	f019 091f 	ands.w	r9, r9, #31
 80172a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80172ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80172b0:	d02b      	beq.n	801730a <__lshift+0xbe>
 80172b2:	f1c9 0e20 	rsb	lr, r9, #32
 80172b6:	468a      	mov	sl, r1
 80172b8:	2200      	movs	r2, #0
 80172ba:	6818      	ldr	r0, [r3, #0]
 80172bc:	fa00 f009 	lsl.w	r0, r0, r9
 80172c0:	4302      	orrs	r2, r0
 80172c2:	f84a 2b04 	str.w	r2, [sl], #4
 80172c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80172ca:	459c      	cmp	ip, r3
 80172cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80172d0:	d8f3      	bhi.n	80172ba <__lshift+0x6e>
 80172d2:	ebac 0304 	sub.w	r3, ip, r4
 80172d6:	3b15      	subs	r3, #21
 80172d8:	f023 0303 	bic.w	r3, r3, #3
 80172dc:	3304      	adds	r3, #4
 80172de:	f104 0015 	add.w	r0, r4, #21
 80172e2:	4584      	cmp	ip, r0
 80172e4:	bf38      	it	cc
 80172e6:	2304      	movcc	r3, #4
 80172e8:	50ca      	str	r2, [r1, r3]
 80172ea:	b10a      	cbz	r2, 80172f0 <__lshift+0xa4>
 80172ec:	f108 0602 	add.w	r6, r8, #2
 80172f0:	3e01      	subs	r6, #1
 80172f2:	4638      	mov	r0, r7
 80172f4:	612e      	str	r6, [r5, #16]
 80172f6:	4621      	mov	r1, r4
 80172f8:	f7ff fd8c 	bl	8016e14 <_Bfree>
 80172fc:	4628      	mov	r0, r5
 80172fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017302:	f842 0f04 	str.w	r0, [r2, #4]!
 8017306:	3301      	adds	r3, #1
 8017308:	e7c5      	b.n	8017296 <__lshift+0x4a>
 801730a:	3904      	subs	r1, #4
 801730c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017310:	f841 2f04 	str.w	r2, [r1, #4]!
 8017314:	459c      	cmp	ip, r3
 8017316:	d8f9      	bhi.n	801730c <__lshift+0xc0>
 8017318:	e7ea      	b.n	80172f0 <__lshift+0xa4>
 801731a:	bf00      	nop
 801731c:	08019739 	.word	0x08019739
 8017320:	080197c8 	.word	0x080197c8

08017324 <__mcmp>:
 8017324:	b530      	push	{r4, r5, lr}
 8017326:	6902      	ldr	r2, [r0, #16]
 8017328:	690c      	ldr	r4, [r1, #16]
 801732a:	1b12      	subs	r2, r2, r4
 801732c:	d10e      	bne.n	801734c <__mcmp+0x28>
 801732e:	f100 0314 	add.w	r3, r0, #20
 8017332:	3114      	adds	r1, #20
 8017334:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8017338:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801733c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8017340:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8017344:	42a5      	cmp	r5, r4
 8017346:	d003      	beq.n	8017350 <__mcmp+0x2c>
 8017348:	d305      	bcc.n	8017356 <__mcmp+0x32>
 801734a:	2201      	movs	r2, #1
 801734c:	4610      	mov	r0, r2
 801734e:	bd30      	pop	{r4, r5, pc}
 8017350:	4283      	cmp	r3, r0
 8017352:	d3f3      	bcc.n	801733c <__mcmp+0x18>
 8017354:	e7fa      	b.n	801734c <__mcmp+0x28>
 8017356:	f04f 32ff 	mov.w	r2, #4294967295
 801735a:	e7f7      	b.n	801734c <__mcmp+0x28>

0801735c <__mdiff>:
 801735c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017360:	460c      	mov	r4, r1
 8017362:	4606      	mov	r6, r0
 8017364:	4611      	mov	r1, r2
 8017366:	4620      	mov	r0, r4
 8017368:	4617      	mov	r7, r2
 801736a:	f7ff ffdb 	bl	8017324 <__mcmp>
 801736e:	1e05      	subs	r5, r0, #0
 8017370:	d110      	bne.n	8017394 <__mdiff+0x38>
 8017372:	4629      	mov	r1, r5
 8017374:	4630      	mov	r0, r6
 8017376:	f7ff fd0d 	bl	8016d94 <_Balloc>
 801737a:	b930      	cbnz	r0, 801738a <__mdiff+0x2e>
 801737c:	4b39      	ldr	r3, [pc, #228]	; (8017464 <__mdiff+0x108>)
 801737e:	4602      	mov	r2, r0
 8017380:	f240 2132 	movw	r1, #562	; 0x232
 8017384:	4838      	ldr	r0, [pc, #224]	; (8017468 <__mdiff+0x10c>)
 8017386:	f000 fc0f 	bl	8017ba8 <__assert_func>
 801738a:	2301      	movs	r3, #1
 801738c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017390:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017394:	bfa4      	itt	ge
 8017396:	463b      	movge	r3, r7
 8017398:	4627      	movge	r7, r4
 801739a:	4630      	mov	r0, r6
 801739c:	6879      	ldr	r1, [r7, #4]
 801739e:	bfa6      	itte	ge
 80173a0:	461c      	movge	r4, r3
 80173a2:	2500      	movge	r5, #0
 80173a4:	2501      	movlt	r5, #1
 80173a6:	f7ff fcf5 	bl	8016d94 <_Balloc>
 80173aa:	b920      	cbnz	r0, 80173b6 <__mdiff+0x5a>
 80173ac:	4b2d      	ldr	r3, [pc, #180]	; (8017464 <__mdiff+0x108>)
 80173ae:	4602      	mov	r2, r0
 80173b0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80173b4:	e7e6      	b.n	8017384 <__mdiff+0x28>
 80173b6:	693e      	ldr	r6, [r7, #16]
 80173b8:	60c5      	str	r5, [r0, #12]
 80173ba:	6925      	ldr	r5, [r4, #16]
 80173bc:	f107 0114 	add.w	r1, r7, #20
 80173c0:	f104 0914 	add.w	r9, r4, #20
 80173c4:	f100 0e14 	add.w	lr, r0, #20
 80173c8:	f107 0210 	add.w	r2, r7, #16
 80173cc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80173d0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80173d4:	46f2      	mov	sl, lr
 80173d6:	2700      	movs	r7, #0
 80173d8:	f859 3b04 	ldr.w	r3, [r9], #4
 80173dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80173e0:	fa1f f883 	uxth.w	r8, r3
 80173e4:	fa17 f78b 	uxtah	r7, r7, fp
 80173e8:	0c1b      	lsrs	r3, r3, #16
 80173ea:	eba7 0808 	sub.w	r8, r7, r8
 80173ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80173f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80173f6:	fa1f f888 	uxth.w	r8, r8
 80173fa:	141f      	asrs	r7, r3, #16
 80173fc:	454d      	cmp	r5, r9
 80173fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8017402:	f84a 3b04 	str.w	r3, [sl], #4
 8017406:	d8e7      	bhi.n	80173d8 <__mdiff+0x7c>
 8017408:	1b2b      	subs	r3, r5, r4
 801740a:	3b15      	subs	r3, #21
 801740c:	f023 0303 	bic.w	r3, r3, #3
 8017410:	3304      	adds	r3, #4
 8017412:	3415      	adds	r4, #21
 8017414:	42a5      	cmp	r5, r4
 8017416:	bf38      	it	cc
 8017418:	2304      	movcc	r3, #4
 801741a:	4419      	add	r1, r3
 801741c:	4473      	add	r3, lr
 801741e:	469e      	mov	lr, r3
 8017420:	460d      	mov	r5, r1
 8017422:	4565      	cmp	r5, ip
 8017424:	d30e      	bcc.n	8017444 <__mdiff+0xe8>
 8017426:	f10c 0203 	add.w	r2, ip, #3
 801742a:	1a52      	subs	r2, r2, r1
 801742c:	f022 0203 	bic.w	r2, r2, #3
 8017430:	3903      	subs	r1, #3
 8017432:	458c      	cmp	ip, r1
 8017434:	bf38      	it	cc
 8017436:	2200      	movcc	r2, #0
 8017438:	441a      	add	r2, r3
 801743a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801743e:	b17b      	cbz	r3, 8017460 <__mdiff+0x104>
 8017440:	6106      	str	r6, [r0, #16]
 8017442:	e7a5      	b.n	8017390 <__mdiff+0x34>
 8017444:	f855 8b04 	ldr.w	r8, [r5], #4
 8017448:	fa17 f488 	uxtah	r4, r7, r8
 801744c:	1422      	asrs	r2, r4, #16
 801744e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8017452:	b2a4      	uxth	r4, r4
 8017454:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8017458:	f84e 4b04 	str.w	r4, [lr], #4
 801745c:	1417      	asrs	r7, r2, #16
 801745e:	e7e0      	b.n	8017422 <__mdiff+0xc6>
 8017460:	3e01      	subs	r6, #1
 8017462:	e7ea      	b.n	801743a <__mdiff+0xde>
 8017464:	08019739 	.word	0x08019739
 8017468:	080197c8 	.word	0x080197c8

0801746c <__ulp>:
 801746c:	b082      	sub	sp, #8
 801746e:	ed8d 0b00 	vstr	d0, [sp]
 8017472:	9b01      	ldr	r3, [sp, #4]
 8017474:	4912      	ldr	r1, [pc, #72]	; (80174c0 <__ulp+0x54>)
 8017476:	4019      	ands	r1, r3
 8017478:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801747c:	2900      	cmp	r1, #0
 801747e:	dd05      	ble.n	801748c <__ulp+0x20>
 8017480:	2200      	movs	r2, #0
 8017482:	460b      	mov	r3, r1
 8017484:	ec43 2b10 	vmov	d0, r2, r3
 8017488:	b002      	add	sp, #8
 801748a:	4770      	bx	lr
 801748c:	4249      	negs	r1, r1
 801748e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8017492:	ea4f 5021 	mov.w	r0, r1, asr #20
 8017496:	f04f 0200 	mov.w	r2, #0
 801749a:	f04f 0300 	mov.w	r3, #0
 801749e:	da04      	bge.n	80174aa <__ulp+0x3e>
 80174a0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80174a4:	fa41 f300 	asr.w	r3, r1, r0
 80174a8:	e7ec      	b.n	8017484 <__ulp+0x18>
 80174aa:	f1a0 0114 	sub.w	r1, r0, #20
 80174ae:	291e      	cmp	r1, #30
 80174b0:	bfda      	itte	le
 80174b2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80174b6:	fa20 f101 	lsrle.w	r1, r0, r1
 80174ba:	2101      	movgt	r1, #1
 80174bc:	460a      	mov	r2, r1
 80174be:	e7e1      	b.n	8017484 <__ulp+0x18>
 80174c0:	7ff00000 	.word	0x7ff00000

080174c4 <__b2d>:
 80174c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174c6:	6905      	ldr	r5, [r0, #16]
 80174c8:	f100 0714 	add.w	r7, r0, #20
 80174cc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80174d0:	1f2e      	subs	r6, r5, #4
 80174d2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80174d6:	4620      	mov	r0, r4
 80174d8:	f7ff fd52 	bl	8016f80 <__hi0bits>
 80174dc:	f1c0 0320 	rsb	r3, r0, #32
 80174e0:	280a      	cmp	r0, #10
 80174e2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8017560 <__b2d+0x9c>
 80174e6:	600b      	str	r3, [r1, #0]
 80174e8:	dc14      	bgt.n	8017514 <__b2d+0x50>
 80174ea:	f1c0 0e0b 	rsb	lr, r0, #11
 80174ee:	fa24 f10e 	lsr.w	r1, r4, lr
 80174f2:	42b7      	cmp	r7, r6
 80174f4:	ea41 030c 	orr.w	r3, r1, ip
 80174f8:	bf34      	ite	cc
 80174fa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80174fe:	2100      	movcs	r1, #0
 8017500:	3015      	adds	r0, #21
 8017502:	fa04 f000 	lsl.w	r0, r4, r0
 8017506:	fa21 f10e 	lsr.w	r1, r1, lr
 801750a:	ea40 0201 	orr.w	r2, r0, r1
 801750e:	ec43 2b10 	vmov	d0, r2, r3
 8017512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017514:	42b7      	cmp	r7, r6
 8017516:	bf3a      	itte	cc
 8017518:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801751c:	f1a5 0608 	subcc.w	r6, r5, #8
 8017520:	2100      	movcs	r1, #0
 8017522:	380b      	subs	r0, #11
 8017524:	d017      	beq.n	8017556 <__b2d+0x92>
 8017526:	f1c0 0c20 	rsb	ip, r0, #32
 801752a:	fa04 f500 	lsl.w	r5, r4, r0
 801752e:	42be      	cmp	r6, r7
 8017530:	fa21 f40c 	lsr.w	r4, r1, ip
 8017534:	ea45 0504 	orr.w	r5, r5, r4
 8017538:	bf8c      	ite	hi
 801753a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801753e:	2400      	movls	r4, #0
 8017540:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8017544:	fa01 f000 	lsl.w	r0, r1, r0
 8017548:	fa24 f40c 	lsr.w	r4, r4, ip
 801754c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017550:	ea40 0204 	orr.w	r2, r0, r4
 8017554:	e7db      	b.n	801750e <__b2d+0x4a>
 8017556:	ea44 030c 	orr.w	r3, r4, ip
 801755a:	460a      	mov	r2, r1
 801755c:	e7d7      	b.n	801750e <__b2d+0x4a>
 801755e:	bf00      	nop
 8017560:	3ff00000 	.word	0x3ff00000

08017564 <__d2b>:
 8017564:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017568:	4689      	mov	r9, r1
 801756a:	2101      	movs	r1, #1
 801756c:	ec57 6b10 	vmov	r6, r7, d0
 8017570:	4690      	mov	r8, r2
 8017572:	f7ff fc0f 	bl	8016d94 <_Balloc>
 8017576:	4604      	mov	r4, r0
 8017578:	b930      	cbnz	r0, 8017588 <__d2b+0x24>
 801757a:	4602      	mov	r2, r0
 801757c:	4b25      	ldr	r3, [pc, #148]	; (8017614 <__d2b+0xb0>)
 801757e:	4826      	ldr	r0, [pc, #152]	; (8017618 <__d2b+0xb4>)
 8017580:	f240 310a 	movw	r1, #778	; 0x30a
 8017584:	f000 fb10 	bl	8017ba8 <__assert_func>
 8017588:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801758c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017590:	bb35      	cbnz	r5, 80175e0 <__d2b+0x7c>
 8017592:	2e00      	cmp	r6, #0
 8017594:	9301      	str	r3, [sp, #4]
 8017596:	d028      	beq.n	80175ea <__d2b+0x86>
 8017598:	4668      	mov	r0, sp
 801759a:	9600      	str	r6, [sp, #0]
 801759c:	f7ff fd10 	bl	8016fc0 <__lo0bits>
 80175a0:	9900      	ldr	r1, [sp, #0]
 80175a2:	b300      	cbz	r0, 80175e6 <__d2b+0x82>
 80175a4:	9a01      	ldr	r2, [sp, #4]
 80175a6:	f1c0 0320 	rsb	r3, r0, #32
 80175aa:	fa02 f303 	lsl.w	r3, r2, r3
 80175ae:	430b      	orrs	r3, r1
 80175b0:	40c2      	lsrs	r2, r0
 80175b2:	6163      	str	r3, [r4, #20]
 80175b4:	9201      	str	r2, [sp, #4]
 80175b6:	9b01      	ldr	r3, [sp, #4]
 80175b8:	61a3      	str	r3, [r4, #24]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	bf14      	ite	ne
 80175be:	2202      	movne	r2, #2
 80175c0:	2201      	moveq	r2, #1
 80175c2:	6122      	str	r2, [r4, #16]
 80175c4:	b1d5      	cbz	r5, 80175fc <__d2b+0x98>
 80175c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80175ca:	4405      	add	r5, r0
 80175cc:	f8c9 5000 	str.w	r5, [r9]
 80175d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80175d4:	f8c8 0000 	str.w	r0, [r8]
 80175d8:	4620      	mov	r0, r4
 80175da:	b003      	add	sp, #12
 80175dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80175e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80175e4:	e7d5      	b.n	8017592 <__d2b+0x2e>
 80175e6:	6161      	str	r1, [r4, #20]
 80175e8:	e7e5      	b.n	80175b6 <__d2b+0x52>
 80175ea:	a801      	add	r0, sp, #4
 80175ec:	f7ff fce8 	bl	8016fc0 <__lo0bits>
 80175f0:	9b01      	ldr	r3, [sp, #4]
 80175f2:	6163      	str	r3, [r4, #20]
 80175f4:	2201      	movs	r2, #1
 80175f6:	6122      	str	r2, [r4, #16]
 80175f8:	3020      	adds	r0, #32
 80175fa:	e7e3      	b.n	80175c4 <__d2b+0x60>
 80175fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017600:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017604:	f8c9 0000 	str.w	r0, [r9]
 8017608:	6918      	ldr	r0, [r3, #16]
 801760a:	f7ff fcb9 	bl	8016f80 <__hi0bits>
 801760e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017612:	e7df      	b.n	80175d4 <__d2b+0x70>
 8017614:	08019739 	.word	0x08019739
 8017618:	080197c8 	.word	0x080197c8

0801761c <__ratio>:
 801761c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017620:	468a      	mov	sl, r1
 8017622:	4669      	mov	r1, sp
 8017624:	4683      	mov	fp, r0
 8017626:	f7ff ff4d 	bl	80174c4 <__b2d>
 801762a:	a901      	add	r1, sp, #4
 801762c:	4650      	mov	r0, sl
 801762e:	ec59 8b10 	vmov	r8, r9, d0
 8017632:	ee10 6a10 	vmov	r6, s0
 8017636:	f7ff ff45 	bl	80174c4 <__b2d>
 801763a:	f8db 3010 	ldr.w	r3, [fp, #16]
 801763e:	f8da 2010 	ldr.w	r2, [sl, #16]
 8017642:	eba3 0c02 	sub.w	ip, r3, r2
 8017646:	e9dd 3200 	ldrd	r3, r2, [sp]
 801764a:	1a9b      	subs	r3, r3, r2
 801764c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8017650:	ec55 4b10 	vmov	r4, r5, d0
 8017654:	2b00      	cmp	r3, #0
 8017656:	ee10 0a10 	vmov	r0, s0
 801765a:	bfce      	itee	gt
 801765c:	464a      	movgt	r2, r9
 801765e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017662:	462a      	movle	r2, r5
 8017664:	464f      	mov	r7, r9
 8017666:	4629      	mov	r1, r5
 8017668:	bfcc      	ite	gt
 801766a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801766e:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8017672:	ec47 6b17 	vmov	d7, r6, r7
 8017676:	ec41 0b16 	vmov	d6, r0, r1
 801767a:	ee87 0b06 	vdiv.f64	d0, d7, d6
 801767e:	b003      	add	sp, #12
 8017680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017684 <__copybits>:
 8017684:	3901      	subs	r1, #1
 8017686:	b570      	push	{r4, r5, r6, lr}
 8017688:	1149      	asrs	r1, r1, #5
 801768a:	6914      	ldr	r4, [r2, #16]
 801768c:	3101      	adds	r1, #1
 801768e:	f102 0314 	add.w	r3, r2, #20
 8017692:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017696:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801769a:	1f05      	subs	r5, r0, #4
 801769c:	42a3      	cmp	r3, r4
 801769e:	d30c      	bcc.n	80176ba <__copybits+0x36>
 80176a0:	1aa3      	subs	r3, r4, r2
 80176a2:	3b11      	subs	r3, #17
 80176a4:	f023 0303 	bic.w	r3, r3, #3
 80176a8:	3211      	adds	r2, #17
 80176aa:	42a2      	cmp	r2, r4
 80176ac:	bf88      	it	hi
 80176ae:	2300      	movhi	r3, #0
 80176b0:	4418      	add	r0, r3
 80176b2:	2300      	movs	r3, #0
 80176b4:	4288      	cmp	r0, r1
 80176b6:	d305      	bcc.n	80176c4 <__copybits+0x40>
 80176b8:	bd70      	pop	{r4, r5, r6, pc}
 80176ba:	f853 6b04 	ldr.w	r6, [r3], #4
 80176be:	f845 6f04 	str.w	r6, [r5, #4]!
 80176c2:	e7eb      	b.n	801769c <__copybits+0x18>
 80176c4:	f840 3b04 	str.w	r3, [r0], #4
 80176c8:	e7f4      	b.n	80176b4 <__copybits+0x30>

080176ca <__any_on>:
 80176ca:	f100 0214 	add.w	r2, r0, #20
 80176ce:	6900      	ldr	r0, [r0, #16]
 80176d0:	114b      	asrs	r3, r1, #5
 80176d2:	4298      	cmp	r0, r3
 80176d4:	b510      	push	{r4, lr}
 80176d6:	db11      	blt.n	80176fc <__any_on+0x32>
 80176d8:	dd0a      	ble.n	80176f0 <__any_on+0x26>
 80176da:	f011 011f 	ands.w	r1, r1, #31
 80176de:	d007      	beq.n	80176f0 <__any_on+0x26>
 80176e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80176e4:	fa24 f001 	lsr.w	r0, r4, r1
 80176e8:	fa00 f101 	lsl.w	r1, r0, r1
 80176ec:	428c      	cmp	r4, r1
 80176ee:	d10b      	bne.n	8017708 <__any_on+0x3e>
 80176f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80176f4:	4293      	cmp	r3, r2
 80176f6:	d803      	bhi.n	8017700 <__any_on+0x36>
 80176f8:	2000      	movs	r0, #0
 80176fa:	bd10      	pop	{r4, pc}
 80176fc:	4603      	mov	r3, r0
 80176fe:	e7f7      	b.n	80176f0 <__any_on+0x26>
 8017700:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017704:	2900      	cmp	r1, #0
 8017706:	d0f5      	beq.n	80176f4 <__any_on+0x2a>
 8017708:	2001      	movs	r0, #1
 801770a:	e7f6      	b.n	80176fa <__any_on+0x30>

0801770c <_calloc_r>:
 801770c:	b513      	push	{r0, r1, r4, lr}
 801770e:	434a      	muls	r2, r1
 8017710:	4611      	mov	r1, r2
 8017712:	9201      	str	r2, [sp, #4]
 8017714:	f000 f85a 	bl	80177cc <_malloc_r>
 8017718:	4604      	mov	r4, r0
 801771a:	b118      	cbz	r0, 8017724 <_calloc_r+0x18>
 801771c:	9a01      	ldr	r2, [sp, #4]
 801771e:	2100      	movs	r1, #0
 8017720:	f7fc fc32 	bl	8013f88 <memset>
 8017724:	4620      	mov	r0, r4
 8017726:	b002      	add	sp, #8
 8017728:	bd10      	pop	{r4, pc}
	...

0801772c <_free_r>:
 801772c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801772e:	2900      	cmp	r1, #0
 8017730:	d048      	beq.n	80177c4 <_free_r+0x98>
 8017732:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017736:	9001      	str	r0, [sp, #4]
 8017738:	2b00      	cmp	r3, #0
 801773a:	f1a1 0404 	sub.w	r4, r1, #4
 801773e:	bfb8      	it	lt
 8017740:	18e4      	addlt	r4, r4, r3
 8017742:	f000 fa7b 	bl	8017c3c <__malloc_lock>
 8017746:	4a20      	ldr	r2, [pc, #128]	; (80177c8 <_free_r+0x9c>)
 8017748:	9801      	ldr	r0, [sp, #4]
 801774a:	6813      	ldr	r3, [r2, #0]
 801774c:	4615      	mov	r5, r2
 801774e:	b933      	cbnz	r3, 801775e <_free_r+0x32>
 8017750:	6063      	str	r3, [r4, #4]
 8017752:	6014      	str	r4, [r2, #0]
 8017754:	b003      	add	sp, #12
 8017756:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801775a:	f000 ba75 	b.w	8017c48 <__malloc_unlock>
 801775e:	42a3      	cmp	r3, r4
 8017760:	d90b      	bls.n	801777a <_free_r+0x4e>
 8017762:	6821      	ldr	r1, [r4, #0]
 8017764:	1862      	adds	r2, r4, r1
 8017766:	4293      	cmp	r3, r2
 8017768:	bf04      	itt	eq
 801776a:	681a      	ldreq	r2, [r3, #0]
 801776c:	685b      	ldreq	r3, [r3, #4]
 801776e:	6063      	str	r3, [r4, #4]
 8017770:	bf04      	itt	eq
 8017772:	1852      	addeq	r2, r2, r1
 8017774:	6022      	streq	r2, [r4, #0]
 8017776:	602c      	str	r4, [r5, #0]
 8017778:	e7ec      	b.n	8017754 <_free_r+0x28>
 801777a:	461a      	mov	r2, r3
 801777c:	685b      	ldr	r3, [r3, #4]
 801777e:	b10b      	cbz	r3, 8017784 <_free_r+0x58>
 8017780:	42a3      	cmp	r3, r4
 8017782:	d9fa      	bls.n	801777a <_free_r+0x4e>
 8017784:	6811      	ldr	r1, [r2, #0]
 8017786:	1855      	adds	r5, r2, r1
 8017788:	42a5      	cmp	r5, r4
 801778a:	d10b      	bne.n	80177a4 <_free_r+0x78>
 801778c:	6824      	ldr	r4, [r4, #0]
 801778e:	4421      	add	r1, r4
 8017790:	1854      	adds	r4, r2, r1
 8017792:	42a3      	cmp	r3, r4
 8017794:	6011      	str	r1, [r2, #0]
 8017796:	d1dd      	bne.n	8017754 <_free_r+0x28>
 8017798:	681c      	ldr	r4, [r3, #0]
 801779a:	685b      	ldr	r3, [r3, #4]
 801779c:	6053      	str	r3, [r2, #4]
 801779e:	4421      	add	r1, r4
 80177a0:	6011      	str	r1, [r2, #0]
 80177a2:	e7d7      	b.n	8017754 <_free_r+0x28>
 80177a4:	d902      	bls.n	80177ac <_free_r+0x80>
 80177a6:	230c      	movs	r3, #12
 80177a8:	6003      	str	r3, [r0, #0]
 80177aa:	e7d3      	b.n	8017754 <_free_r+0x28>
 80177ac:	6825      	ldr	r5, [r4, #0]
 80177ae:	1961      	adds	r1, r4, r5
 80177b0:	428b      	cmp	r3, r1
 80177b2:	bf04      	itt	eq
 80177b4:	6819      	ldreq	r1, [r3, #0]
 80177b6:	685b      	ldreq	r3, [r3, #4]
 80177b8:	6063      	str	r3, [r4, #4]
 80177ba:	bf04      	itt	eq
 80177bc:	1949      	addeq	r1, r1, r5
 80177be:	6021      	streq	r1, [r4, #0]
 80177c0:	6054      	str	r4, [r2, #4]
 80177c2:	e7c7      	b.n	8017754 <_free_r+0x28>
 80177c4:	b003      	add	sp, #12
 80177c6:	bd30      	pop	{r4, r5, pc}
 80177c8:	24000304 	.word	0x24000304

080177cc <_malloc_r>:
 80177cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177ce:	1ccd      	adds	r5, r1, #3
 80177d0:	f025 0503 	bic.w	r5, r5, #3
 80177d4:	3508      	adds	r5, #8
 80177d6:	2d0c      	cmp	r5, #12
 80177d8:	bf38      	it	cc
 80177da:	250c      	movcc	r5, #12
 80177dc:	2d00      	cmp	r5, #0
 80177de:	4606      	mov	r6, r0
 80177e0:	db01      	blt.n	80177e6 <_malloc_r+0x1a>
 80177e2:	42a9      	cmp	r1, r5
 80177e4:	d903      	bls.n	80177ee <_malloc_r+0x22>
 80177e6:	230c      	movs	r3, #12
 80177e8:	6033      	str	r3, [r6, #0]
 80177ea:	2000      	movs	r0, #0
 80177ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80177ee:	f000 fa25 	bl	8017c3c <__malloc_lock>
 80177f2:	4921      	ldr	r1, [pc, #132]	; (8017878 <_malloc_r+0xac>)
 80177f4:	680a      	ldr	r2, [r1, #0]
 80177f6:	4614      	mov	r4, r2
 80177f8:	b99c      	cbnz	r4, 8017822 <_malloc_r+0x56>
 80177fa:	4f20      	ldr	r7, [pc, #128]	; (801787c <_malloc_r+0xb0>)
 80177fc:	683b      	ldr	r3, [r7, #0]
 80177fe:	b923      	cbnz	r3, 801780a <_malloc_r+0x3e>
 8017800:	4621      	mov	r1, r4
 8017802:	4630      	mov	r0, r6
 8017804:	f000 f9a0 	bl	8017b48 <_sbrk_r>
 8017808:	6038      	str	r0, [r7, #0]
 801780a:	4629      	mov	r1, r5
 801780c:	4630      	mov	r0, r6
 801780e:	f000 f99b 	bl	8017b48 <_sbrk_r>
 8017812:	1c43      	adds	r3, r0, #1
 8017814:	d123      	bne.n	801785e <_malloc_r+0x92>
 8017816:	230c      	movs	r3, #12
 8017818:	6033      	str	r3, [r6, #0]
 801781a:	4630      	mov	r0, r6
 801781c:	f000 fa14 	bl	8017c48 <__malloc_unlock>
 8017820:	e7e3      	b.n	80177ea <_malloc_r+0x1e>
 8017822:	6823      	ldr	r3, [r4, #0]
 8017824:	1b5b      	subs	r3, r3, r5
 8017826:	d417      	bmi.n	8017858 <_malloc_r+0x8c>
 8017828:	2b0b      	cmp	r3, #11
 801782a:	d903      	bls.n	8017834 <_malloc_r+0x68>
 801782c:	6023      	str	r3, [r4, #0]
 801782e:	441c      	add	r4, r3
 8017830:	6025      	str	r5, [r4, #0]
 8017832:	e004      	b.n	801783e <_malloc_r+0x72>
 8017834:	6863      	ldr	r3, [r4, #4]
 8017836:	42a2      	cmp	r2, r4
 8017838:	bf0c      	ite	eq
 801783a:	600b      	streq	r3, [r1, #0]
 801783c:	6053      	strne	r3, [r2, #4]
 801783e:	4630      	mov	r0, r6
 8017840:	f000 fa02 	bl	8017c48 <__malloc_unlock>
 8017844:	f104 000b 	add.w	r0, r4, #11
 8017848:	1d23      	adds	r3, r4, #4
 801784a:	f020 0007 	bic.w	r0, r0, #7
 801784e:	1ac2      	subs	r2, r0, r3
 8017850:	d0cc      	beq.n	80177ec <_malloc_r+0x20>
 8017852:	1a1b      	subs	r3, r3, r0
 8017854:	50a3      	str	r3, [r4, r2]
 8017856:	e7c9      	b.n	80177ec <_malloc_r+0x20>
 8017858:	4622      	mov	r2, r4
 801785a:	6864      	ldr	r4, [r4, #4]
 801785c:	e7cc      	b.n	80177f8 <_malloc_r+0x2c>
 801785e:	1cc4      	adds	r4, r0, #3
 8017860:	f024 0403 	bic.w	r4, r4, #3
 8017864:	42a0      	cmp	r0, r4
 8017866:	d0e3      	beq.n	8017830 <_malloc_r+0x64>
 8017868:	1a21      	subs	r1, r4, r0
 801786a:	4630      	mov	r0, r6
 801786c:	f000 f96c 	bl	8017b48 <_sbrk_r>
 8017870:	3001      	adds	r0, #1
 8017872:	d1dd      	bne.n	8017830 <_malloc_r+0x64>
 8017874:	e7cf      	b.n	8017816 <_malloc_r+0x4a>
 8017876:	bf00      	nop
 8017878:	24000304 	.word	0x24000304
 801787c:	24000308 	.word	0x24000308

08017880 <__ssputs_r>:
 8017880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017884:	688e      	ldr	r6, [r1, #8]
 8017886:	429e      	cmp	r6, r3
 8017888:	4682      	mov	sl, r0
 801788a:	460c      	mov	r4, r1
 801788c:	4690      	mov	r8, r2
 801788e:	461f      	mov	r7, r3
 8017890:	d838      	bhi.n	8017904 <__ssputs_r+0x84>
 8017892:	898a      	ldrh	r2, [r1, #12]
 8017894:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017898:	d032      	beq.n	8017900 <__ssputs_r+0x80>
 801789a:	6825      	ldr	r5, [r4, #0]
 801789c:	6909      	ldr	r1, [r1, #16]
 801789e:	eba5 0901 	sub.w	r9, r5, r1
 80178a2:	6965      	ldr	r5, [r4, #20]
 80178a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80178a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80178ac:	3301      	adds	r3, #1
 80178ae:	444b      	add	r3, r9
 80178b0:	106d      	asrs	r5, r5, #1
 80178b2:	429d      	cmp	r5, r3
 80178b4:	bf38      	it	cc
 80178b6:	461d      	movcc	r5, r3
 80178b8:	0553      	lsls	r3, r2, #21
 80178ba:	d531      	bpl.n	8017920 <__ssputs_r+0xa0>
 80178bc:	4629      	mov	r1, r5
 80178be:	f7ff ff85 	bl	80177cc <_malloc_r>
 80178c2:	4606      	mov	r6, r0
 80178c4:	b950      	cbnz	r0, 80178dc <__ssputs_r+0x5c>
 80178c6:	230c      	movs	r3, #12
 80178c8:	f8ca 3000 	str.w	r3, [sl]
 80178cc:	89a3      	ldrh	r3, [r4, #12]
 80178ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80178d2:	81a3      	strh	r3, [r4, #12]
 80178d4:	f04f 30ff 	mov.w	r0, #4294967295
 80178d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178dc:	6921      	ldr	r1, [r4, #16]
 80178de:	464a      	mov	r2, r9
 80178e0:	f7ff fa4a 	bl	8016d78 <memcpy>
 80178e4:	89a3      	ldrh	r3, [r4, #12]
 80178e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80178ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80178ee:	81a3      	strh	r3, [r4, #12]
 80178f0:	6126      	str	r6, [r4, #16]
 80178f2:	6165      	str	r5, [r4, #20]
 80178f4:	444e      	add	r6, r9
 80178f6:	eba5 0509 	sub.w	r5, r5, r9
 80178fa:	6026      	str	r6, [r4, #0]
 80178fc:	60a5      	str	r5, [r4, #8]
 80178fe:	463e      	mov	r6, r7
 8017900:	42be      	cmp	r6, r7
 8017902:	d900      	bls.n	8017906 <__ssputs_r+0x86>
 8017904:	463e      	mov	r6, r7
 8017906:	4632      	mov	r2, r6
 8017908:	6820      	ldr	r0, [r4, #0]
 801790a:	4641      	mov	r1, r8
 801790c:	f000 f97c 	bl	8017c08 <memmove>
 8017910:	68a3      	ldr	r3, [r4, #8]
 8017912:	6822      	ldr	r2, [r4, #0]
 8017914:	1b9b      	subs	r3, r3, r6
 8017916:	4432      	add	r2, r6
 8017918:	60a3      	str	r3, [r4, #8]
 801791a:	6022      	str	r2, [r4, #0]
 801791c:	2000      	movs	r0, #0
 801791e:	e7db      	b.n	80178d8 <__ssputs_r+0x58>
 8017920:	462a      	mov	r2, r5
 8017922:	f000 f997 	bl	8017c54 <_realloc_r>
 8017926:	4606      	mov	r6, r0
 8017928:	2800      	cmp	r0, #0
 801792a:	d1e1      	bne.n	80178f0 <__ssputs_r+0x70>
 801792c:	6921      	ldr	r1, [r4, #16]
 801792e:	4650      	mov	r0, sl
 8017930:	f7ff fefc 	bl	801772c <_free_r>
 8017934:	e7c7      	b.n	80178c6 <__ssputs_r+0x46>
	...

08017938 <_svfiprintf_r>:
 8017938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801793c:	4698      	mov	r8, r3
 801793e:	898b      	ldrh	r3, [r1, #12]
 8017940:	061b      	lsls	r3, r3, #24
 8017942:	b09d      	sub	sp, #116	; 0x74
 8017944:	4607      	mov	r7, r0
 8017946:	460d      	mov	r5, r1
 8017948:	4614      	mov	r4, r2
 801794a:	d50e      	bpl.n	801796a <_svfiprintf_r+0x32>
 801794c:	690b      	ldr	r3, [r1, #16]
 801794e:	b963      	cbnz	r3, 801796a <_svfiprintf_r+0x32>
 8017950:	2140      	movs	r1, #64	; 0x40
 8017952:	f7ff ff3b 	bl	80177cc <_malloc_r>
 8017956:	6028      	str	r0, [r5, #0]
 8017958:	6128      	str	r0, [r5, #16]
 801795a:	b920      	cbnz	r0, 8017966 <_svfiprintf_r+0x2e>
 801795c:	230c      	movs	r3, #12
 801795e:	603b      	str	r3, [r7, #0]
 8017960:	f04f 30ff 	mov.w	r0, #4294967295
 8017964:	e0d1      	b.n	8017b0a <_svfiprintf_r+0x1d2>
 8017966:	2340      	movs	r3, #64	; 0x40
 8017968:	616b      	str	r3, [r5, #20]
 801796a:	2300      	movs	r3, #0
 801796c:	9309      	str	r3, [sp, #36]	; 0x24
 801796e:	2320      	movs	r3, #32
 8017970:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017974:	f8cd 800c 	str.w	r8, [sp, #12]
 8017978:	2330      	movs	r3, #48	; 0x30
 801797a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017b24 <_svfiprintf_r+0x1ec>
 801797e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017982:	f04f 0901 	mov.w	r9, #1
 8017986:	4623      	mov	r3, r4
 8017988:	469a      	mov	sl, r3
 801798a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801798e:	b10a      	cbz	r2, 8017994 <_svfiprintf_r+0x5c>
 8017990:	2a25      	cmp	r2, #37	; 0x25
 8017992:	d1f9      	bne.n	8017988 <_svfiprintf_r+0x50>
 8017994:	ebba 0b04 	subs.w	fp, sl, r4
 8017998:	d00b      	beq.n	80179b2 <_svfiprintf_r+0x7a>
 801799a:	465b      	mov	r3, fp
 801799c:	4622      	mov	r2, r4
 801799e:	4629      	mov	r1, r5
 80179a0:	4638      	mov	r0, r7
 80179a2:	f7ff ff6d 	bl	8017880 <__ssputs_r>
 80179a6:	3001      	adds	r0, #1
 80179a8:	f000 80aa 	beq.w	8017b00 <_svfiprintf_r+0x1c8>
 80179ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80179ae:	445a      	add	r2, fp
 80179b0:	9209      	str	r2, [sp, #36]	; 0x24
 80179b2:	f89a 3000 	ldrb.w	r3, [sl]
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	f000 80a2 	beq.w	8017b00 <_svfiprintf_r+0x1c8>
 80179bc:	2300      	movs	r3, #0
 80179be:	f04f 32ff 	mov.w	r2, #4294967295
 80179c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80179c6:	f10a 0a01 	add.w	sl, sl, #1
 80179ca:	9304      	str	r3, [sp, #16]
 80179cc:	9307      	str	r3, [sp, #28]
 80179ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80179d2:	931a      	str	r3, [sp, #104]	; 0x68
 80179d4:	4654      	mov	r4, sl
 80179d6:	2205      	movs	r2, #5
 80179d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80179dc:	4851      	ldr	r0, [pc, #324]	; (8017b24 <_svfiprintf_r+0x1ec>)
 80179de:	f7e8 fc87 	bl	80002f0 <memchr>
 80179e2:	9a04      	ldr	r2, [sp, #16]
 80179e4:	b9d8      	cbnz	r0, 8017a1e <_svfiprintf_r+0xe6>
 80179e6:	06d0      	lsls	r0, r2, #27
 80179e8:	bf44      	itt	mi
 80179ea:	2320      	movmi	r3, #32
 80179ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80179f0:	0711      	lsls	r1, r2, #28
 80179f2:	bf44      	itt	mi
 80179f4:	232b      	movmi	r3, #43	; 0x2b
 80179f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80179fa:	f89a 3000 	ldrb.w	r3, [sl]
 80179fe:	2b2a      	cmp	r3, #42	; 0x2a
 8017a00:	d015      	beq.n	8017a2e <_svfiprintf_r+0xf6>
 8017a02:	9a07      	ldr	r2, [sp, #28]
 8017a04:	4654      	mov	r4, sl
 8017a06:	2000      	movs	r0, #0
 8017a08:	f04f 0c0a 	mov.w	ip, #10
 8017a0c:	4621      	mov	r1, r4
 8017a0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017a12:	3b30      	subs	r3, #48	; 0x30
 8017a14:	2b09      	cmp	r3, #9
 8017a16:	d94e      	bls.n	8017ab6 <_svfiprintf_r+0x17e>
 8017a18:	b1b0      	cbz	r0, 8017a48 <_svfiprintf_r+0x110>
 8017a1a:	9207      	str	r2, [sp, #28]
 8017a1c:	e014      	b.n	8017a48 <_svfiprintf_r+0x110>
 8017a1e:	eba0 0308 	sub.w	r3, r0, r8
 8017a22:	fa09 f303 	lsl.w	r3, r9, r3
 8017a26:	4313      	orrs	r3, r2
 8017a28:	9304      	str	r3, [sp, #16]
 8017a2a:	46a2      	mov	sl, r4
 8017a2c:	e7d2      	b.n	80179d4 <_svfiprintf_r+0x9c>
 8017a2e:	9b03      	ldr	r3, [sp, #12]
 8017a30:	1d19      	adds	r1, r3, #4
 8017a32:	681b      	ldr	r3, [r3, #0]
 8017a34:	9103      	str	r1, [sp, #12]
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	bfbb      	ittet	lt
 8017a3a:	425b      	neglt	r3, r3
 8017a3c:	f042 0202 	orrlt.w	r2, r2, #2
 8017a40:	9307      	strge	r3, [sp, #28]
 8017a42:	9307      	strlt	r3, [sp, #28]
 8017a44:	bfb8      	it	lt
 8017a46:	9204      	strlt	r2, [sp, #16]
 8017a48:	7823      	ldrb	r3, [r4, #0]
 8017a4a:	2b2e      	cmp	r3, #46	; 0x2e
 8017a4c:	d10c      	bne.n	8017a68 <_svfiprintf_r+0x130>
 8017a4e:	7863      	ldrb	r3, [r4, #1]
 8017a50:	2b2a      	cmp	r3, #42	; 0x2a
 8017a52:	d135      	bne.n	8017ac0 <_svfiprintf_r+0x188>
 8017a54:	9b03      	ldr	r3, [sp, #12]
 8017a56:	1d1a      	adds	r2, r3, #4
 8017a58:	681b      	ldr	r3, [r3, #0]
 8017a5a:	9203      	str	r2, [sp, #12]
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	bfb8      	it	lt
 8017a60:	f04f 33ff 	movlt.w	r3, #4294967295
 8017a64:	3402      	adds	r4, #2
 8017a66:	9305      	str	r3, [sp, #20]
 8017a68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017b34 <_svfiprintf_r+0x1fc>
 8017a6c:	7821      	ldrb	r1, [r4, #0]
 8017a6e:	2203      	movs	r2, #3
 8017a70:	4650      	mov	r0, sl
 8017a72:	f7e8 fc3d 	bl	80002f0 <memchr>
 8017a76:	b140      	cbz	r0, 8017a8a <_svfiprintf_r+0x152>
 8017a78:	2340      	movs	r3, #64	; 0x40
 8017a7a:	eba0 000a 	sub.w	r0, r0, sl
 8017a7e:	fa03 f000 	lsl.w	r0, r3, r0
 8017a82:	9b04      	ldr	r3, [sp, #16]
 8017a84:	4303      	orrs	r3, r0
 8017a86:	3401      	adds	r4, #1
 8017a88:	9304      	str	r3, [sp, #16]
 8017a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a8e:	4826      	ldr	r0, [pc, #152]	; (8017b28 <_svfiprintf_r+0x1f0>)
 8017a90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017a94:	2206      	movs	r2, #6
 8017a96:	f7e8 fc2b 	bl	80002f0 <memchr>
 8017a9a:	2800      	cmp	r0, #0
 8017a9c:	d038      	beq.n	8017b10 <_svfiprintf_r+0x1d8>
 8017a9e:	4b23      	ldr	r3, [pc, #140]	; (8017b2c <_svfiprintf_r+0x1f4>)
 8017aa0:	bb1b      	cbnz	r3, 8017aea <_svfiprintf_r+0x1b2>
 8017aa2:	9b03      	ldr	r3, [sp, #12]
 8017aa4:	3307      	adds	r3, #7
 8017aa6:	f023 0307 	bic.w	r3, r3, #7
 8017aaa:	3308      	adds	r3, #8
 8017aac:	9303      	str	r3, [sp, #12]
 8017aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ab0:	4433      	add	r3, r6
 8017ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8017ab4:	e767      	b.n	8017986 <_svfiprintf_r+0x4e>
 8017ab6:	fb0c 3202 	mla	r2, ip, r2, r3
 8017aba:	460c      	mov	r4, r1
 8017abc:	2001      	movs	r0, #1
 8017abe:	e7a5      	b.n	8017a0c <_svfiprintf_r+0xd4>
 8017ac0:	2300      	movs	r3, #0
 8017ac2:	3401      	adds	r4, #1
 8017ac4:	9305      	str	r3, [sp, #20]
 8017ac6:	4619      	mov	r1, r3
 8017ac8:	f04f 0c0a 	mov.w	ip, #10
 8017acc:	4620      	mov	r0, r4
 8017ace:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017ad2:	3a30      	subs	r2, #48	; 0x30
 8017ad4:	2a09      	cmp	r2, #9
 8017ad6:	d903      	bls.n	8017ae0 <_svfiprintf_r+0x1a8>
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d0c5      	beq.n	8017a68 <_svfiprintf_r+0x130>
 8017adc:	9105      	str	r1, [sp, #20]
 8017ade:	e7c3      	b.n	8017a68 <_svfiprintf_r+0x130>
 8017ae0:	fb0c 2101 	mla	r1, ip, r1, r2
 8017ae4:	4604      	mov	r4, r0
 8017ae6:	2301      	movs	r3, #1
 8017ae8:	e7f0      	b.n	8017acc <_svfiprintf_r+0x194>
 8017aea:	ab03      	add	r3, sp, #12
 8017aec:	9300      	str	r3, [sp, #0]
 8017aee:	462a      	mov	r2, r5
 8017af0:	4b0f      	ldr	r3, [pc, #60]	; (8017b30 <_svfiprintf_r+0x1f8>)
 8017af2:	a904      	add	r1, sp, #16
 8017af4:	4638      	mov	r0, r7
 8017af6:	f7fc fadf 	bl	80140b8 <_printf_float>
 8017afa:	1c42      	adds	r2, r0, #1
 8017afc:	4606      	mov	r6, r0
 8017afe:	d1d6      	bne.n	8017aae <_svfiprintf_r+0x176>
 8017b00:	89ab      	ldrh	r3, [r5, #12]
 8017b02:	065b      	lsls	r3, r3, #25
 8017b04:	f53f af2c 	bmi.w	8017960 <_svfiprintf_r+0x28>
 8017b08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017b0a:	b01d      	add	sp, #116	; 0x74
 8017b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b10:	ab03      	add	r3, sp, #12
 8017b12:	9300      	str	r3, [sp, #0]
 8017b14:	462a      	mov	r2, r5
 8017b16:	4b06      	ldr	r3, [pc, #24]	; (8017b30 <_svfiprintf_r+0x1f8>)
 8017b18:	a904      	add	r1, sp, #16
 8017b1a:	4638      	mov	r0, r7
 8017b1c:	f7fc fd58 	bl	80145d0 <_printf_i>
 8017b20:	e7eb      	b.n	8017afa <_svfiprintf_r+0x1c2>
 8017b22:	bf00      	nop
 8017b24:	08019924 	.word	0x08019924
 8017b28:	0801992e 	.word	0x0801992e
 8017b2c:	080140b9 	.word	0x080140b9
 8017b30:	08017881 	.word	0x08017881
 8017b34:	0801992a 	.word	0x0801992a

08017b38 <nan>:
 8017b38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017b40 <nan+0x8>
 8017b3c:	4770      	bx	lr
 8017b3e:	bf00      	nop
 8017b40:	00000000 	.word	0x00000000
 8017b44:	7ff80000 	.word	0x7ff80000

08017b48 <_sbrk_r>:
 8017b48:	b538      	push	{r3, r4, r5, lr}
 8017b4a:	4d06      	ldr	r5, [pc, #24]	; (8017b64 <_sbrk_r+0x1c>)
 8017b4c:	2300      	movs	r3, #0
 8017b4e:	4604      	mov	r4, r0
 8017b50:	4608      	mov	r0, r1
 8017b52:	602b      	str	r3, [r5, #0]
 8017b54:	f7ed fc74 	bl	8005440 <_sbrk>
 8017b58:	1c43      	adds	r3, r0, #1
 8017b5a:	d102      	bne.n	8017b62 <_sbrk_r+0x1a>
 8017b5c:	682b      	ldr	r3, [r5, #0]
 8017b5e:	b103      	cbz	r3, 8017b62 <_sbrk_r+0x1a>
 8017b60:	6023      	str	r3, [r4, #0]
 8017b62:	bd38      	pop	{r3, r4, r5, pc}
 8017b64:	24023c58 	.word	0x24023c58

08017b68 <strncmp>:
 8017b68:	b510      	push	{r4, lr}
 8017b6a:	b16a      	cbz	r2, 8017b88 <strncmp+0x20>
 8017b6c:	3901      	subs	r1, #1
 8017b6e:	1884      	adds	r4, r0, r2
 8017b70:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017b74:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017b78:	4293      	cmp	r3, r2
 8017b7a:	d103      	bne.n	8017b84 <strncmp+0x1c>
 8017b7c:	42a0      	cmp	r0, r4
 8017b7e:	d001      	beq.n	8017b84 <strncmp+0x1c>
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d1f5      	bne.n	8017b70 <strncmp+0x8>
 8017b84:	1a98      	subs	r0, r3, r2
 8017b86:	bd10      	pop	{r4, pc}
 8017b88:	4610      	mov	r0, r2
 8017b8a:	e7fc      	b.n	8017b86 <strncmp+0x1e>

08017b8c <__ascii_wctomb>:
 8017b8c:	b149      	cbz	r1, 8017ba2 <__ascii_wctomb+0x16>
 8017b8e:	2aff      	cmp	r2, #255	; 0xff
 8017b90:	bf85      	ittet	hi
 8017b92:	238a      	movhi	r3, #138	; 0x8a
 8017b94:	6003      	strhi	r3, [r0, #0]
 8017b96:	700a      	strbls	r2, [r1, #0]
 8017b98:	f04f 30ff 	movhi.w	r0, #4294967295
 8017b9c:	bf98      	it	ls
 8017b9e:	2001      	movls	r0, #1
 8017ba0:	4770      	bx	lr
 8017ba2:	4608      	mov	r0, r1
 8017ba4:	4770      	bx	lr
	...

08017ba8 <__assert_func>:
 8017ba8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017baa:	4614      	mov	r4, r2
 8017bac:	461a      	mov	r2, r3
 8017bae:	4b09      	ldr	r3, [pc, #36]	; (8017bd4 <__assert_func+0x2c>)
 8017bb0:	681b      	ldr	r3, [r3, #0]
 8017bb2:	4605      	mov	r5, r0
 8017bb4:	68d8      	ldr	r0, [r3, #12]
 8017bb6:	b14c      	cbz	r4, 8017bcc <__assert_func+0x24>
 8017bb8:	4b07      	ldr	r3, [pc, #28]	; (8017bd8 <__assert_func+0x30>)
 8017bba:	9100      	str	r1, [sp, #0]
 8017bbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017bc0:	4906      	ldr	r1, [pc, #24]	; (8017bdc <__assert_func+0x34>)
 8017bc2:	462b      	mov	r3, r5
 8017bc4:	f000 f80e 	bl	8017be4 <fiprintf>
 8017bc8:	f000 fa84 	bl	80180d4 <abort>
 8017bcc:	4b04      	ldr	r3, [pc, #16]	; (8017be0 <__assert_func+0x38>)
 8017bce:	461c      	mov	r4, r3
 8017bd0:	e7f3      	b.n	8017bba <__assert_func+0x12>
 8017bd2:	bf00      	nop
 8017bd4:	24000020 	.word	0x24000020
 8017bd8:	08019935 	.word	0x08019935
 8017bdc:	08019942 	.word	0x08019942
 8017be0:	08019970 	.word	0x08019970

08017be4 <fiprintf>:
 8017be4:	b40e      	push	{r1, r2, r3}
 8017be6:	b503      	push	{r0, r1, lr}
 8017be8:	4601      	mov	r1, r0
 8017bea:	ab03      	add	r3, sp, #12
 8017bec:	4805      	ldr	r0, [pc, #20]	; (8017c04 <fiprintf+0x20>)
 8017bee:	f853 2b04 	ldr.w	r2, [r3], #4
 8017bf2:	6800      	ldr	r0, [r0, #0]
 8017bf4:	9301      	str	r3, [sp, #4]
 8017bf6:	f000 f87d 	bl	8017cf4 <_vfiprintf_r>
 8017bfa:	b002      	add	sp, #8
 8017bfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8017c00:	b003      	add	sp, #12
 8017c02:	4770      	bx	lr
 8017c04:	24000020 	.word	0x24000020

08017c08 <memmove>:
 8017c08:	4288      	cmp	r0, r1
 8017c0a:	b510      	push	{r4, lr}
 8017c0c:	eb01 0402 	add.w	r4, r1, r2
 8017c10:	d902      	bls.n	8017c18 <memmove+0x10>
 8017c12:	4284      	cmp	r4, r0
 8017c14:	4623      	mov	r3, r4
 8017c16:	d807      	bhi.n	8017c28 <memmove+0x20>
 8017c18:	1e43      	subs	r3, r0, #1
 8017c1a:	42a1      	cmp	r1, r4
 8017c1c:	d008      	beq.n	8017c30 <memmove+0x28>
 8017c1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017c22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017c26:	e7f8      	b.n	8017c1a <memmove+0x12>
 8017c28:	4402      	add	r2, r0
 8017c2a:	4601      	mov	r1, r0
 8017c2c:	428a      	cmp	r2, r1
 8017c2e:	d100      	bne.n	8017c32 <memmove+0x2a>
 8017c30:	bd10      	pop	{r4, pc}
 8017c32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017c36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017c3a:	e7f7      	b.n	8017c2c <memmove+0x24>

08017c3c <__malloc_lock>:
 8017c3c:	4801      	ldr	r0, [pc, #4]	; (8017c44 <__malloc_lock+0x8>)
 8017c3e:	f000 bc09 	b.w	8018454 <__retarget_lock_acquire_recursive>
 8017c42:	bf00      	nop
 8017c44:	24023c60 	.word	0x24023c60

08017c48 <__malloc_unlock>:
 8017c48:	4801      	ldr	r0, [pc, #4]	; (8017c50 <__malloc_unlock+0x8>)
 8017c4a:	f000 bc04 	b.w	8018456 <__retarget_lock_release_recursive>
 8017c4e:	bf00      	nop
 8017c50:	24023c60 	.word	0x24023c60

08017c54 <_realloc_r>:
 8017c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c56:	4607      	mov	r7, r0
 8017c58:	4614      	mov	r4, r2
 8017c5a:	460e      	mov	r6, r1
 8017c5c:	b921      	cbnz	r1, 8017c68 <_realloc_r+0x14>
 8017c5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017c62:	4611      	mov	r1, r2
 8017c64:	f7ff bdb2 	b.w	80177cc <_malloc_r>
 8017c68:	b922      	cbnz	r2, 8017c74 <_realloc_r+0x20>
 8017c6a:	f7ff fd5f 	bl	801772c <_free_r>
 8017c6e:	4625      	mov	r5, r4
 8017c70:	4628      	mov	r0, r5
 8017c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c74:	f000 fc54 	bl	8018520 <_malloc_usable_size_r>
 8017c78:	42a0      	cmp	r0, r4
 8017c7a:	d20f      	bcs.n	8017c9c <_realloc_r+0x48>
 8017c7c:	4621      	mov	r1, r4
 8017c7e:	4638      	mov	r0, r7
 8017c80:	f7ff fda4 	bl	80177cc <_malloc_r>
 8017c84:	4605      	mov	r5, r0
 8017c86:	2800      	cmp	r0, #0
 8017c88:	d0f2      	beq.n	8017c70 <_realloc_r+0x1c>
 8017c8a:	4631      	mov	r1, r6
 8017c8c:	4622      	mov	r2, r4
 8017c8e:	f7ff f873 	bl	8016d78 <memcpy>
 8017c92:	4631      	mov	r1, r6
 8017c94:	4638      	mov	r0, r7
 8017c96:	f7ff fd49 	bl	801772c <_free_r>
 8017c9a:	e7e9      	b.n	8017c70 <_realloc_r+0x1c>
 8017c9c:	4635      	mov	r5, r6
 8017c9e:	e7e7      	b.n	8017c70 <_realloc_r+0x1c>

08017ca0 <__sfputc_r>:
 8017ca0:	6893      	ldr	r3, [r2, #8]
 8017ca2:	3b01      	subs	r3, #1
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	b410      	push	{r4}
 8017ca8:	6093      	str	r3, [r2, #8]
 8017caa:	da08      	bge.n	8017cbe <__sfputc_r+0x1e>
 8017cac:	6994      	ldr	r4, [r2, #24]
 8017cae:	42a3      	cmp	r3, r4
 8017cb0:	db01      	blt.n	8017cb6 <__sfputc_r+0x16>
 8017cb2:	290a      	cmp	r1, #10
 8017cb4:	d103      	bne.n	8017cbe <__sfputc_r+0x1e>
 8017cb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017cba:	f000 b94b 	b.w	8017f54 <__swbuf_r>
 8017cbe:	6813      	ldr	r3, [r2, #0]
 8017cc0:	1c58      	adds	r0, r3, #1
 8017cc2:	6010      	str	r0, [r2, #0]
 8017cc4:	7019      	strb	r1, [r3, #0]
 8017cc6:	4608      	mov	r0, r1
 8017cc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017ccc:	4770      	bx	lr

08017cce <__sfputs_r>:
 8017cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cd0:	4606      	mov	r6, r0
 8017cd2:	460f      	mov	r7, r1
 8017cd4:	4614      	mov	r4, r2
 8017cd6:	18d5      	adds	r5, r2, r3
 8017cd8:	42ac      	cmp	r4, r5
 8017cda:	d101      	bne.n	8017ce0 <__sfputs_r+0x12>
 8017cdc:	2000      	movs	r0, #0
 8017cde:	e007      	b.n	8017cf0 <__sfputs_r+0x22>
 8017ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ce4:	463a      	mov	r2, r7
 8017ce6:	4630      	mov	r0, r6
 8017ce8:	f7ff ffda 	bl	8017ca0 <__sfputc_r>
 8017cec:	1c43      	adds	r3, r0, #1
 8017cee:	d1f3      	bne.n	8017cd8 <__sfputs_r+0xa>
 8017cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017cf4 <_vfiprintf_r>:
 8017cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cf8:	460d      	mov	r5, r1
 8017cfa:	b09d      	sub	sp, #116	; 0x74
 8017cfc:	4614      	mov	r4, r2
 8017cfe:	4698      	mov	r8, r3
 8017d00:	4606      	mov	r6, r0
 8017d02:	b118      	cbz	r0, 8017d0c <_vfiprintf_r+0x18>
 8017d04:	6983      	ldr	r3, [r0, #24]
 8017d06:	b90b      	cbnz	r3, 8017d0c <_vfiprintf_r+0x18>
 8017d08:	f000 fb06 	bl	8018318 <__sinit>
 8017d0c:	4b89      	ldr	r3, [pc, #548]	; (8017f34 <_vfiprintf_r+0x240>)
 8017d0e:	429d      	cmp	r5, r3
 8017d10:	d11b      	bne.n	8017d4a <_vfiprintf_r+0x56>
 8017d12:	6875      	ldr	r5, [r6, #4]
 8017d14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017d16:	07d9      	lsls	r1, r3, #31
 8017d18:	d405      	bmi.n	8017d26 <_vfiprintf_r+0x32>
 8017d1a:	89ab      	ldrh	r3, [r5, #12]
 8017d1c:	059a      	lsls	r2, r3, #22
 8017d1e:	d402      	bmi.n	8017d26 <_vfiprintf_r+0x32>
 8017d20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017d22:	f000 fb97 	bl	8018454 <__retarget_lock_acquire_recursive>
 8017d26:	89ab      	ldrh	r3, [r5, #12]
 8017d28:	071b      	lsls	r3, r3, #28
 8017d2a:	d501      	bpl.n	8017d30 <_vfiprintf_r+0x3c>
 8017d2c:	692b      	ldr	r3, [r5, #16]
 8017d2e:	b9eb      	cbnz	r3, 8017d6c <_vfiprintf_r+0x78>
 8017d30:	4629      	mov	r1, r5
 8017d32:	4630      	mov	r0, r6
 8017d34:	f000 f960 	bl	8017ff8 <__swsetup_r>
 8017d38:	b1c0      	cbz	r0, 8017d6c <_vfiprintf_r+0x78>
 8017d3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017d3c:	07dc      	lsls	r4, r3, #31
 8017d3e:	d50e      	bpl.n	8017d5e <_vfiprintf_r+0x6a>
 8017d40:	f04f 30ff 	mov.w	r0, #4294967295
 8017d44:	b01d      	add	sp, #116	; 0x74
 8017d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d4a:	4b7b      	ldr	r3, [pc, #492]	; (8017f38 <_vfiprintf_r+0x244>)
 8017d4c:	429d      	cmp	r5, r3
 8017d4e:	d101      	bne.n	8017d54 <_vfiprintf_r+0x60>
 8017d50:	68b5      	ldr	r5, [r6, #8]
 8017d52:	e7df      	b.n	8017d14 <_vfiprintf_r+0x20>
 8017d54:	4b79      	ldr	r3, [pc, #484]	; (8017f3c <_vfiprintf_r+0x248>)
 8017d56:	429d      	cmp	r5, r3
 8017d58:	bf08      	it	eq
 8017d5a:	68f5      	ldreq	r5, [r6, #12]
 8017d5c:	e7da      	b.n	8017d14 <_vfiprintf_r+0x20>
 8017d5e:	89ab      	ldrh	r3, [r5, #12]
 8017d60:	0598      	lsls	r0, r3, #22
 8017d62:	d4ed      	bmi.n	8017d40 <_vfiprintf_r+0x4c>
 8017d64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017d66:	f000 fb76 	bl	8018456 <__retarget_lock_release_recursive>
 8017d6a:	e7e9      	b.n	8017d40 <_vfiprintf_r+0x4c>
 8017d6c:	2300      	movs	r3, #0
 8017d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8017d70:	2320      	movs	r3, #32
 8017d72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017d76:	f8cd 800c 	str.w	r8, [sp, #12]
 8017d7a:	2330      	movs	r3, #48	; 0x30
 8017d7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017f40 <_vfiprintf_r+0x24c>
 8017d80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017d84:	f04f 0901 	mov.w	r9, #1
 8017d88:	4623      	mov	r3, r4
 8017d8a:	469a      	mov	sl, r3
 8017d8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017d90:	b10a      	cbz	r2, 8017d96 <_vfiprintf_r+0xa2>
 8017d92:	2a25      	cmp	r2, #37	; 0x25
 8017d94:	d1f9      	bne.n	8017d8a <_vfiprintf_r+0x96>
 8017d96:	ebba 0b04 	subs.w	fp, sl, r4
 8017d9a:	d00b      	beq.n	8017db4 <_vfiprintf_r+0xc0>
 8017d9c:	465b      	mov	r3, fp
 8017d9e:	4622      	mov	r2, r4
 8017da0:	4629      	mov	r1, r5
 8017da2:	4630      	mov	r0, r6
 8017da4:	f7ff ff93 	bl	8017cce <__sfputs_r>
 8017da8:	3001      	adds	r0, #1
 8017daa:	f000 80aa 	beq.w	8017f02 <_vfiprintf_r+0x20e>
 8017dae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017db0:	445a      	add	r2, fp
 8017db2:	9209      	str	r2, [sp, #36]	; 0x24
 8017db4:	f89a 3000 	ldrb.w	r3, [sl]
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	f000 80a2 	beq.w	8017f02 <_vfiprintf_r+0x20e>
 8017dbe:	2300      	movs	r3, #0
 8017dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8017dc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017dc8:	f10a 0a01 	add.w	sl, sl, #1
 8017dcc:	9304      	str	r3, [sp, #16]
 8017dce:	9307      	str	r3, [sp, #28]
 8017dd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017dd4:	931a      	str	r3, [sp, #104]	; 0x68
 8017dd6:	4654      	mov	r4, sl
 8017dd8:	2205      	movs	r2, #5
 8017dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017dde:	4858      	ldr	r0, [pc, #352]	; (8017f40 <_vfiprintf_r+0x24c>)
 8017de0:	f7e8 fa86 	bl	80002f0 <memchr>
 8017de4:	9a04      	ldr	r2, [sp, #16]
 8017de6:	b9d8      	cbnz	r0, 8017e20 <_vfiprintf_r+0x12c>
 8017de8:	06d1      	lsls	r1, r2, #27
 8017dea:	bf44      	itt	mi
 8017dec:	2320      	movmi	r3, #32
 8017dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017df2:	0713      	lsls	r3, r2, #28
 8017df4:	bf44      	itt	mi
 8017df6:	232b      	movmi	r3, #43	; 0x2b
 8017df8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8017e00:	2b2a      	cmp	r3, #42	; 0x2a
 8017e02:	d015      	beq.n	8017e30 <_vfiprintf_r+0x13c>
 8017e04:	9a07      	ldr	r2, [sp, #28]
 8017e06:	4654      	mov	r4, sl
 8017e08:	2000      	movs	r0, #0
 8017e0a:	f04f 0c0a 	mov.w	ip, #10
 8017e0e:	4621      	mov	r1, r4
 8017e10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017e14:	3b30      	subs	r3, #48	; 0x30
 8017e16:	2b09      	cmp	r3, #9
 8017e18:	d94e      	bls.n	8017eb8 <_vfiprintf_r+0x1c4>
 8017e1a:	b1b0      	cbz	r0, 8017e4a <_vfiprintf_r+0x156>
 8017e1c:	9207      	str	r2, [sp, #28]
 8017e1e:	e014      	b.n	8017e4a <_vfiprintf_r+0x156>
 8017e20:	eba0 0308 	sub.w	r3, r0, r8
 8017e24:	fa09 f303 	lsl.w	r3, r9, r3
 8017e28:	4313      	orrs	r3, r2
 8017e2a:	9304      	str	r3, [sp, #16]
 8017e2c:	46a2      	mov	sl, r4
 8017e2e:	e7d2      	b.n	8017dd6 <_vfiprintf_r+0xe2>
 8017e30:	9b03      	ldr	r3, [sp, #12]
 8017e32:	1d19      	adds	r1, r3, #4
 8017e34:	681b      	ldr	r3, [r3, #0]
 8017e36:	9103      	str	r1, [sp, #12]
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	bfbb      	ittet	lt
 8017e3c:	425b      	neglt	r3, r3
 8017e3e:	f042 0202 	orrlt.w	r2, r2, #2
 8017e42:	9307      	strge	r3, [sp, #28]
 8017e44:	9307      	strlt	r3, [sp, #28]
 8017e46:	bfb8      	it	lt
 8017e48:	9204      	strlt	r2, [sp, #16]
 8017e4a:	7823      	ldrb	r3, [r4, #0]
 8017e4c:	2b2e      	cmp	r3, #46	; 0x2e
 8017e4e:	d10c      	bne.n	8017e6a <_vfiprintf_r+0x176>
 8017e50:	7863      	ldrb	r3, [r4, #1]
 8017e52:	2b2a      	cmp	r3, #42	; 0x2a
 8017e54:	d135      	bne.n	8017ec2 <_vfiprintf_r+0x1ce>
 8017e56:	9b03      	ldr	r3, [sp, #12]
 8017e58:	1d1a      	adds	r2, r3, #4
 8017e5a:	681b      	ldr	r3, [r3, #0]
 8017e5c:	9203      	str	r2, [sp, #12]
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	bfb8      	it	lt
 8017e62:	f04f 33ff 	movlt.w	r3, #4294967295
 8017e66:	3402      	adds	r4, #2
 8017e68:	9305      	str	r3, [sp, #20]
 8017e6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017f50 <_vfiprintf_r+0x25c>
 8017e6e:	7821      	ldrb	r1, [r4, #0]
 8017e70:	2203      	movs	r2, #3
 8017e72:	4650      	mov	r0, sl
 8017e74:	f7e8 fa3c 	bl	80002f0 <memchr>
 8017e78:	b140      	cbz	r0, 8017e8c <_vfiprintf_r+0x198>
 8017e7a:	2340      	movs	r3, #64	; 0x40
 8017e7c:	eba0 000a 	sub.w	r0, r0, sl
 8017e80:	fa03 f000 	lsl.w	r0, r3, r0
 8017e84:	9b04      	ldr	r3, [sp, #16]
 8017e86:	4303      	orrs	r3, r0
 8017e88:	3401      	adds	r4, #1
 8017e8a:	9304      	str	r3, [sp, #16]
 8017e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e90:	482c      	ldr	r0, [pc, #176]	; (8017f44 <_vfiprintf_r+0x250>)
 8017e92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017e96:	2206      	movs	r2, #6
 8017e98:	f7e8 fa2a 	bl	80002f0 <memchr>
 8017e9c:	2800      	cmp	r0, #0
 8017e9e:	d03f      	beq.n	8017f20 <_vfiprintf_r+0x22c>
 8017ea0:	4b29      	ldr	r3, [pc, #164]	; (8017f48 <_vfiprintf_r+0x254>)
 8017ea2:	bb1b      	cbnz	r3, 8017eec <_vfiprintf_r+0x1f8>
 8017ea4:	9b03      	ldr	r3, [sp, #12]
 8017ea6:	3307      	adds	r3, #7
 8017ea8:	f023 0307 	bic.w	r3, r3, #7
 8017eac:	3308      	adds	r3, #8
 8017eae:	9303      	str	r3, [sp, #12]
 8017eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017eb2:	443b      	add	r3, r7
 8017eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8017eb6:	e767      	b.n	8017d88 <_vfiprintf_r+0x94>
 8017eb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8017ebc:	460c      	mov	r4, r1
 8017ebe:	2001      	movs	r0, #1
 8017ec0:	e7a5      	b.n	8017e0e <_vfiprintf_r+0x11a>
 8017ec2:	2300      	movs	r3, #0
 8017ec4:	3401      	adds	r4, #1
 8017ec6:	9305      	str	r3, [sp, #20]
 8017ec8:	4619      	mov	r1, r3
 8017eca:	f04f 0c0a 	mov.w	ip, #10
 8017ece:	4620      	mov	r0, r4
 8017ed0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017ed4:	3a30      	subs	r2, #48	; 0x30
 8017ed6:	2a09      	cmp	r2, #9
 8017ed8:	d903      	bls.n	8017ee2 <_vfiprintf_r+0x1ee>
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	d0c5      	beq.n	8017e6a <_vfiprintf_r+0x176>
 8017ede:	9105      	str	r1, [sp, #20]
 8017ee0:	e7c3      	b.n	8017e6a <_vfiprintf_r+0x176>
 8017ee2:	fb0c 2101 	mla	r1, ip, r1, r2
 8017ee6:	4604      	mov	r4, r0
 8017ee8:	2301      	movs	r3, #1
 8017eea:	e7f0      	b.n	8017ece <_vfiprintf_r+0x1da>
 8017eec:	ab03      	add	r3, sp, #12
 8017eee:	9300      	str	r3, [sp, #0]
 8017ef0:	462a      	mov	r2, r5
 8017ef2:	4b16      	ldr	r3, [pc, #88]	; (8017f4c <_vfiprintf_r+0x258>)
 8017ef4:	a904      	add	r1, sp, #16
 8017ef6:	4630      	mov	r0, r6
 8017ef8:	f7fc f8de 	bl	80140b8 <_printf_float>
 8017efc:	4607      	mov	r7, r0
 8017efe:	1c78      	adds	r0, r7, #1
 8017f00:	d1d6      	bne.n	8017eb0 <_vfiprintf_r+0x1bc>
 8017f02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017f04:	07d9      	lsls	r1, r3, #31
 8017f06:	d405      	bmi.n	8017f14 <_vfiprintf_r+0x220>
 8017f08:	89ab      	ldrh	r3, [r5, #12]
 8017f0a:	059a      	lsls	r2, r3, #22
 8017f0c:	d402      	bmi.n	8017f14 <_vfiprintf_r+0x220>
 8017f0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017f10:	f000 faa1 	bl	8018456 <__retarget_lock_release_recursive>
 8017f14:	89ab      	ldrh	r3, [r5, #12]
 8017f16:	065b      	lsls	r3, r3, #25
 8017f18:	f53f af12 	bmi.w	8017d40 <_vfiprintf_r+0x4c>
 8017f1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017f1e:	e711      	b.n	8017d44 <_vfiprintf_r+0x50>
 8017f20:	ab03      	add	r3, sp, #12
 8017f22:	9300      	str	r3, [sp, #0]
 8017f24:	462a      	mov	r2, r5
 8017f26:	4b09      	ldr	r3, [pc, #36]	; (8017f4c <_vfiprintf_r+0x258>)
 8017f28:	a904      	add	r1, sp, #16
 8017f2a:	4630      	mov	r0, r6
 8017f2c:	f7fc fb50 	bl	80145d0 <_printf_i>
 8017f30:	e7e4      	b.n	8017efc <_vfiprintf_r+0x208>
 8017f32:	bf00      	nop
 8017f34:	08019994 	.word	0x08019994
 8017f38:	080199b4 	.word	0x080199b4
 8017f3c:	08019974 	.word	0x08019974
 8017f40:	08019924 	.word	0x08019924
 8017f44:	0801992e 	.word	0x0801992e
 8017f48:	080140b9 	.word	0x080140b9
 8017f4c:	08017ccf 	.word	0x08017ccf
 8017f50:	0801992a 	.word	0x0801992a

08017f54 <__swbuf_r>:
 8017f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f56:	460e      	mov	r6, r1
 8017f58:	4614      	mov	r4, r2
 8017f5a:	4605      	mov	r5, r0
 8017f5c:	b118      	cbz	r0, 8017f66 <__swbuf_r+0x12>
 8017f5e:	6983      	ldr	r3, [r0, #24]
 8017f60:	b90b      	cbnz	r3, 8017f66 <__swbuf_r+0x12>
 8017f62:	f000 f9d9 	bl	8018318 <__sinit>
 8017f66:	4b21      	ldr	r3, [pc, #132]	; (8017fec <__swbuf_r+0x98>)
 8017f68:	429c      	cmp	r4, r3
 8017f6a:	d12b      	bne.n	8017fc4 <__swbuf_r+0x70>
 8017f6c:	686c      	ldr	r4, [r5, #4]
 8017f6e:	69a3      	ldr	r3, [r4, #24]
 8017f70:	60a3      	str	r3, [r4, #8]
 8017f72:	89a3      	ldrh	r3, [r4, #12]
 8017f74:	071a      	lsls	r2, r3, #28
 8017f76:	d52f      	bpl.n	8017fd8 <__swbuf_r+0x84>
 8017f78:	6923      	ldr	r3, [r4, #16]
 8017f7a:	b36b      	cbz	r3, 8017fd8 <__swbuf_r+0x84>
 8017f7c:	6923      	ldr	r3, [r4, #16]
 8017f7e:	6820      	ldr	r0, [r4, #0]
 8017f80:	1ac0      	subs	r0, r0, r3
 8017f82:	6963      	ldr	r3, [r4, #20]
 8017f84:	b2f6      	uxtb	r6, r6
 8017f86:	4283      	cmp	r3, r0
 8017f88:	4637      	mov	r7, r6
 8017f8a:	dc04      	bgt.n	8017f96 <__swbuf_r+0x42>
 8017f8c:	4621      	mov	r1, r4
 8017f8e:	4628      	mov	r0, r5
 8017f90:	f000 f92e 	bl	80181f0 <_fflush_r>
 8017f94:	bb30      	cbnz	r0, 8017fe4 <__swbuf_r+0x90>
 8017f96:	68a3      	ldr	r3, [r4, #8]
 8017f98:	3b01      	subs	r3, #1
 8017f9a:	60a3      	str	r3, [r4, #8]
 8017f9c:	6823      	ldr	r3, [r4, #0]
 8017f9e:	1c5a      	adds	r2, r3, #1
 8017fa0:	6022      	str	r2, [r4, #0]
 8017fa2:	701e      	strb	r6, [r3, #0]
 8017fa4:	6963      	ldr	r3, [r4, #20]
 8017fa6:	3001      	adds	r0, #1
 8017fa8:	4283      	cmp	r3, r0
 8017faa:	d004      	beq.n	8017fb6 <__swbuf_r+0x62>
 8017fac:	89a3      	ldrh	r3, [r4, #12]
 8017fae:	07db      	lsls	r3, r3, #31
 8017fb0:	d506      	bpl.n	8017fc0 <__swbuf_r+0x6c>
 8017fb2:	2e0a      	cmp	r6, #10
 8017fb4:	d104      	bne.n	8017fc0 <__swbuf_r+0x6c>
 8017fb6:	4621      	mov	r1, r4
 8017fb8:	4628      	mov	r0, r5
 8017fba:	f000 f919 	bl	80181f0 <_fflush_r>
 8017fbe:	b988      	cbnz	r0, 8017fe4 <__swbuf_r+0x90>
 8017fc0:	4638      	mov	r0, r7
 8017fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017fc4:	4b0a      	ldr	r3, [pc, #40]	; (8017ff0 <__swbuf_r+0x9c>)
 8017fc6:	429c      	cmp	r4, r3
 8017fc8:	d101      	bne.n	8017fce <__swbuf_r+0x7a>
 8017fca:	68ac      	ldr	r4, [r5, #8]
 8017fcc:	e7cf      	b.n	8017f6e <__swbuf_r+0x1a>
 8017fce:	4b09      	ldr	r3, [pc, #36]	; (8017ff4 <__swbuf_r+0xa0>)
 8017fd0:	429c      	cmp	r4, r3
 8017fd2:	bf08      	it	eq
 8017fd4:	68ec      	ldreq	r4, [r5, #12]
 8017fd6:	e7ca      	b.n	8017f6e <__swbuf_r+0x1a>
 8017fd8:	4621      	mov	r1, r4
 8017fda:	4628      	mov	r0, r5
 8017fdc:	f000 f80c 	bl	8017ff8 <__swsetup_r>
 8017fe0:	2800      	cmp	r0, #0
 8017fe2:	d0cb      	beq.n	8017f7c <__swbuf_r+0x28>
 8017fe4:	f04f 37ff 	mov.w	r7, #4294967295
 8017fe8:	e7ea      	b.n	8017fc0 <__swbuf_r+0x6c>
 8017fea:	bf00      	nop
 8017fec:	08019994 	.word	0x08019994
 8017ff0:	080199b4 	.word	0x080199b4
 8017ff4:	08019974 	.word	0x08019974

08017ff8 <__swsetup_r>:
 8017ff8:	4b32      	ldr	r3, [pc, #200]	; (80180c4 <__swsetup_r+0xcc>)
 8017ffa:	b570      	push	{r4, r5, r6, lr}
 8017ffc:	681d      	ldr	r5, [r3, #0]
 8017ffe:	4606      	mov	r6, r0
 8018000:	460c      	mov	r4, r1
 8018002:	b125      	cbz	r5, 801800e <__swsetup_r+0x16>
 8018004:	69ab      	ldr	r3, [r5, #24]
 8018006:	b913      	cbnz	r3, 801800e <__swsetup_r+0x16>
 8018008:	4628      	mov	r0, r5
 801800a:	f000 f985 	bl	8018318 <__sinit>
 801800e:	4b2e      	ldr	r3, [pc, #184]	; (80180c8 <__swsetup_r+0xd0>)
 8018010:	429c      	cmp	r4, r3
 8018012:	d10f      	bne.n	8018034 <__swsetup_r+0x3c>
 8018014:	686c      	ldr	r4, [r5, #4]
 8018016:	89a3      	ldrh	r3, [r4, #12]
 8018018:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801801c:	0719      	lsls	r1, r3, #28
 801801e:	d42c      	bmi.n	801807a <__swsetup_r+0x82>
 8018020:	06dd      	lsls	r5, r3, #27
 8018022:	d411      	bmi.n	8018048 <__swsetup_r+0x50>
 8018024:	2309      	movs	r3, #9
 8018026:	6033      	str	r3, [r6, #0]
 8018028:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801802c:	81a3      	strh	r3, [r4, #12]
 801802e:	f04f 30ff 	mov.w	r0, #4294967295
 8018032:	e03e      	b.n	80180b2 <__swsetup_r+0xba>
 8018034:	4b25      	ldr	r3, [pc, #148]	; (80180cc <__swsetup_r+0xd4>)
 8018036:	429c      	cmp	r4, r3
 8018038:	d101      	bne.n	801803e <__swsetup_r+0x46>
 801803a:	68ac      	ldr	r4, [r5, #8]
 801803c:	e7eb      	b.n	8018016 <__swsetup_r+0x1e>
 801803e:	4b24      	ldr	r3, [pc, #144]	; (80180d0 <__swsetup_r+0xd8>)
 8018040:	429c      	cmp	r4, r3
 8018042:	bf08      	it	eq
 8018044:	68ec      	ldreq	r4, [r5, #12]
 8018046:	e7e6      	b.n	8018016 <__swsetup_r+0x1e>
 8018048:	0758      	lsls	r0, r3, #29
 801804a:	d512      	bpl.n	8018072 <__swsetup_r+0x7a>
 801804c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801804e:	b141      	cbz	r1, 8018062 <__swsetup_r+0x6a>
 8018050:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018054:	4299      	cmp	r1, r3
 8018056:	d002      	beq.n	801805e <__swsetup_r+0x66>
 8018058:	4630      	mov	r0, r6
 801805a:	f7ff fb67 	bl	801772c <_free_r>
 801805e:	2300      	movs	r3, #0
 8018060:	6363      	str	r3, [r4, #52]	; 0x34
 8018062:	89a3      	ldrh	r3, [r4, #12]
 8018064:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018068:	81a3      	strh	r3, [r4, #12]
 801806a:	2300      	movs	r3, #0
 801806c:	6063      	str	r3, [r4, #4]
 801806e:	6923      	ldr	r3, [r4, #16]
 8018070:	6023      	str	r3, [r4, #0]
 8018072:	89a3      	ldrh	r3, [r4, #12]
 8018074:	f043 0308 	orr.w	r3, r3, #8
 8018078:	81a3      	strh	r3, [r4, #12]
 801807a:	6923      	ldr	r3, [r4, #16]
 801807c:	b94b      	cbnz	r3, 8018092 <__swsetup_r+0x9a>
 801807e:	89a3      	ldrh	r3, [r4, #12]
 8018080:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018088:	d003      	beq.n	8018092 <__swsetup_r+0x9a>
 801808a:	4621      	mov	r1, r4
 801808c:	4630      	mov	r0, r6
 801808e:	f000 fa07 	bl	80184a0 <__smakebuf_r>
 8018092:	89a0      	ldrh	r0, [r4, #12]
 8018094:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018098:	f010 0301 	ands.w	r3, r0, #1
 801809c:	d00a      	beq.n	80180b4 <__swsetup_r+0xbc>
 801809e:	2300      	movs	r3, #0
 80180a0:	60a3      	str	r3, [r4, #8]
 80180a2:	6963      	ldr	r3, [r4, #20]
 80180a4:	425b      	negs	r3, r3
 80180a6:	61a3      	str	r3, [r4, #24]
 80180a8:	6923      	ldr	r3, [r4, #16]
 80180aa:	b943      	cbnz	r3, 80180be <__swsetup_r+0xc6>
 80180ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80180b0:	d1ba      	bne.n	8018028 <__swsetup_r+0x30>
 80180b2:	bd70      	pop	{r4, r5, r6, pc}
 80180b4:	0781      	lsls	r1, r0, #30
 80180b6:	bf58      	it	pl
 80180b8:	6963      	ldrpl	r3, [r4, #20]
 80180ba:	60a3      	str	r3, [r4, #8]
 80180bc:	e7f4      	b.n	80180a8 <__swsetup_r+0xb0>
 80180be:	2000      	movs	r0, #0
 80180c0:	e7f7      	b.n	80180b2 <__swsetup_r+0xba>
 80180c2:	bf00      	nop
 80180c4:	24000020 	.word	0x24000020
 80180c8:	08019994 	.word	0x08019994
 80180cc:	080199b4 	.word	0x080199b4
 80180d0:	08019974 	.word	0x08019974

080180d4 <abort>:
 80180d4:	b508      	push	{r3, lr}
 80180d6:	2006      	movs	r0, #6
 80180d8:	f000 fa52 	bl	8018580 <raise>
 80180dc:	2001      	movs	r0, #1
 80180de:	f7ed f937 	bl	8005350 <_exit>
	...

080180e4 <__sflush_r>:
 80180e4:	898a      	ldrh	r2, [r1, #12]
 80180e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180ea:	4605      	mov	r5, r0
 80180ec:	0710      	lsls	r0, r2, #28
 80180ee:	460c      	mov	r4, r1
 80180f0:	d458      	bmi.n	80181a4 <__sflush_r+0xc0>
 80180f2:	684b      	ldr	r3, [r1, #4]
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	dc05      	bgt.n	8018104 <__sflush_r+0x20>
 80180f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	dc02      	bgt.n	8018104 <__sflush_r+0x20>
 80180fe:	2000      	movs	r0, #0
 8018100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018104:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018106:	2e00      	cmp	r6, #0
 8018108:	d0f9      	beq.n	80180fe <__sflush_r+0x1a>
 801810a:	2300      	movs	r3, #0
 801810c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018110:	682f      	ldr	r7, [r5, #0]
 8018112:	602b      	str	r3, [r5, #0]
 8018114:	d032      	beq.n	801817c <__sflush_r+0x98>
 8018116:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018118:	89a3      	ldrh	r3, [r4, #12]
 801811a:	075a      	lsls	r2, r3, #29
 801811c:	d505      	bpl.n	801812a <__sflush_r+0x46>
 801811e:	6863      	ldr	r3, [r4, #4]
 8018120:	1ac0      	subs	r0, r0, r3
 8018122:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018124:	b10b      	cbz	r3, 801812a <__sflush_r+0x46>
 8018126:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018128:	1ac0      	subs	r0, r0, r3
 801812a:	2300      	movs	r3, #0
 801812c:	4602      	mov	r2, r0
 801812e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018130:	6a21      	ldr	r1, [r4, #32]
 8018132:	4628      	mov	r0, r5
 8018134:	47b0      	blx	r6
 8018136:	1c43      	adds	r3, r0, #1
 8018138:	89a3      	ldrh	r3, [r4, #12]
 801813a:	d106      	bne.n	801814a <__sflush_r+0x66>
 801813c:	6829      	ldr	r1, [r5, #0]
 801813e:	291d      	cmp	r1, #29
 8018140:	d82c      	bhi.n	801819c <__sflush_r+0xb8>
 8018142:	4a2a      	ldr	r2, [pc, #168]	; (80181ec <__sflush_r+0x108>)
 8018144:	40ca      	lsrs	r2, r1
 8018146:	07d6      	lsls	r6, r2, #31
 8018148:	d528      	bpl.n	801819c <__sflush_r+0xb8>
 801814a:	2200      	movs	r2, #0
 801814c:	6062      	str	r2, [r4, #4]
 801814e:	04d9      	lsls	r1, r3, #19
 8018150:	6922      	ldr	r2, [r4, #16]
 8018152:	6022      	str	r2, [r4, #0]
 8018154:	d504      	bpl.n	8018160 <__sflush_r+0x7c>
 8018156:	1c42      	adds	r2, r0, #1
 8018158:	d101      	bne.n	801815e <__sflush_r+0x7a>
 801815a:	682b      	ldr	r3, [r5, #0]
 801815c:	b903      	cbnz	r3, 8018160 <__sflush_r+0x7c>
 801815e:	6560      	str	r0, [r4, #84]	; 0x54
 8018160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018162:	602f      	str	r7, [r5, #0]
 8018164:	2900      	cmp	r1, #0
 8018166:	d0ca      	beq.n	80180fe <__sflush_r+0x1a>
 8018168:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801816c:	4299      	cmp	r1, r3
 801816e:	d002      	beq.n	8018176 <__sflush_r+0x92>
 8018170:	4628      	mov	r0, r5
 8018172:	f7ff fadb 	bl	801772c <_free_r>
 8018176:	2000      	movs	r0, #0
 8018178:	6360      	str	r0, [r4, #52]	; 0x34
 801817a:	e7c1      	b.n	8018100 <__sflush_r+0x1c>
 801817c:	6a21      	ldr	r1, [r4, #32]
 801817e:	2301      	movs	r3, #1
 8018180:	4628      	mov	r0, r5
 8018182:	47b0      	blx	r6
 8018184:	1c41      	adds	r1, r0, #1
 8018186:	d1c7      	bne.n	8018118 <__sflush_r+0x34>
 8018188:	682b      	ldr	r3, [r5, #0]
 801818a:	2b00      	cmp	r3, #0
 801818c:	d0c4      	beq.n	8018118 <__sflush_r+0x34>
 801818e:	2b1d      	cmp	r3, #29
 8018190:	d001      	beq.n	8018196 <__sflush_r+0xb2>
 8018192:	2b16      	cmp	r3, #22
 8018194:	d101      	bne.n	801819a <__sflush_r+0xb6>
 8018196:	602f      	str	r7, [r5, #0]
 8018198:	e7b1      	b.n	80180fe <__sflush_r+0x1a>
 801819a:	89a3      	ldrh	r3, [r4, #12]
 801819c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80181a0:	81a3      	strh	r3, [r4, #12]
 80181a2:	e7ad      	b.n	8018100 <__sflush_r+0x1c>
 80181a4:	690f      	ldr	r7, [r1, #16]
 80181a6:	2f00      	cmp	r7, #0
 80181a8:	d0a9      	beq.n	80180fe <__sflush_r+0x1a>
 80181aa:	0793      	lsls	r3, r2, #30
 80181ac:	680e      	ldr	r6, [r1, #0]
 80181ae:	bf08      	it	eq
 80181b0:	694b      	ldreq	r3, [r1, #20]
 80181b2:	600f      	str	r7, [r1, #0]
 80181b4:	bf18      	it	ne
 80181b6:	2300      	movne	r3, #0
 80181b8:	eba6 0807 	sub.w	r8, r6, r7
 80181bc:	608b      	str	r3, [r1, #8]
 80181be:	f1b8 0f00 	cmp.w	r8, #0
 80181c2:	dd9c      	ble.n	80180fe <__sflush_r+0x1a>
 80181c4:	6a21      	ldr	r1, [r4, #32]
 80181c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80181c8:	4643      	mov	r3, r8
 80181ca:	463a      	mov	r2, r7
 80181cc:	4628      	mov	r0, r5
 80181ce:	47b0      	blx	r6
 80181d0:	2800      	cmp	r0, #0
 80181d2:	dc06      	bgt.n	80181e2 <__sflush_r+0xfe>
 80181d4:	89a3      	ldrh	r3, [r4, #12]
 80181d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80181da:	81a3      	strh	r3, [r4, #12]
 80181dc:	f04f 30ff 	mov.w	r0, #4294967295
 80181e0:	e78e      	b.n	8018100 <__sflush_r+0x1c>
 80181e2:	4407      	add	r7, r0
 80181e4:	eba8 0800 	sub.w	r8, r8, r0
 80181e8:	e7e9      	b.n	80181be <__sflush_r+0xda>
 80181ea:	bf00      	nop
 80181ec:	20400001 	.word	0x20400001

080181f0 <_fflush_r>:
 80181f0:	b538      	push	{r3, r4, r5, lr}
 80181f2:	690b      	ldr	r3, [r1, #16]
 80181f4:	4605      	mov	r5, r0
 80181f6:	460c      	mov	r4, r1
 80181f8:	b913      	cbnz	r3, 8018200 <_fflush_r+0x10>
 80181fa:	2500      	movs	r5, #0
 80181fc:	4628      	mov	r0, r5
 80181fe:	bd38      	pop	{r3, r4, r5, pc}
 8018200:	b118      	cbz	r0, 801820a <_fflush_r+0x1a>
 8018202:	6983      	ldr	r3, [r0, #24]
 8018204:	b90b      	cbnz	r3, 801820a <_fflush_r+0x1a>
 8018206:	f000 f887 	bl	8018318 <__sinit>
 801820a:	4b14      	ldr	r3, [pc, #80]	; (801825c <_fflush_r+0x6c>)
 801820c:	429c      	cmp	r4, r3
 801820e:	d11b      	bne.n	8018248 <_fflush_r+0x58>
 8018210:	686c      	ldr	r4, [r5, #4]
 8018212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018216:	2b00      	cmp	r3, #0
 8018218:	d0ef      	beq.n	80181fa <_fflush_r+0xa>
 801821a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801821c:	07d0      	lsls	r0, r2, #31
 801821e:	d404      	bmi.n	801822a <_fflush_r+0x3a>
 8018220:	0599      	lsls	r1, r3, #22
 8018222:	d402      	bmi.n	801822a <_fflush_r+0x3a>
 8018224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018226:	f000 f915 	bl	8018454 <__retarget_lock_acquire_recursive>
 801822a:	4628      	mov	r0, r5
 801822c:	4621      	mov	r1, r4
 801822e:	f7ff ff59 	bl	80180e4 <__sflush_r>
 8018232:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018234:	07da      	lsls	r2, r3, #31
 8018236:	4605      	mov	r5, r0
 8018238:	d4e0      	bmi.n	80181fc <_fflush_r+0xc>
 801823a:	89a3      	ldrh	r3, [r4, #12]
 801823c:	059b      	lsls	r3, r3, #22
 801823e:	d4dd      	bmi.n	80181fc <_fflush_r+0xc>
 8018240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018242:	f000 f908 	bl	8018456 <__retarget_lock_release_recursive>
 8018246:	e7d9      	b.n	80181fc <_fflush_r+0xc>
 8018248:	4b05      	ldr	r3, [pc, #20]	; (8018260 <_fflush_r+0x70>)
 801824a:	429c      	cmp	r4, r3
 801824c:	d101      	bne.n	8018252 <_fflush_r+0x62>
 801824e:	68ac      	ldr	r4, [r5, #8]
 8018250:	e7df      	b.n	8018212 <_fflush_r+0x22>
 8018252:	4b04      	ldr	r3, [pc, #16]	; (8018264 <_fflush_r+0x74>)
 8018254:	429c      	cmp	r4, r3
 8018256:	bf08      	it	eq
 8018258:	68ec      	ldreq	r4, [r5, #12]
 801825a:	e7da      	b.n	8018212 <_fflush_r+0x22>
 801825c:	08019994 	.word	0x08019994
 8018260:	080199b4 	.word	0x080199b4
 8018264:	08019974 	.word	0x08019974

08018268 <std>:
 8018268:	2300      	movs	r3, #0
 801826a:	b510      	push	{r4, lr}
 801826c:	4604      	mov	r4, r0
 801826e:	e9c0 3300 	strd	r3, r3, [r0]
 8018272:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018276:	6083      	str	r3, [r0, #8]
 8018278:	8181      	strh	r1, [r0, #12]
 801827a:	6643      	str	r3, [r0, #100]	; 0x64
 801827c:	81c2      	strh	r2, [r0, #14]
 801827e:	6183      	str	r3, [r0, #24]
 8018280:	4619      	mov	r1, r3
 8018282:	2208      	movs	r2, #8
 8018284:	305c      	adds	r0, #92	; 0x5c
 8018286:	f7fb fe7f 	bl	8013f88 <memset>
 801828a:	4b05      	ldr	r3, [pc, #20]	; (80182a0 <std+0x38>)
 801828c:	6263      	str	r3, [r4, #36]	; 0x24
 801828e:	4b05      	ldr	r3, [pc, #20]	; (80182a4 <std+0x3c>)
 8018290:	62a3      	str	r3, [r4, #40]	; 0x28
 8018292:	4b05      	ldr	r3, [pc, #20]	; (80182a8 <std+0x40>)
 8018294:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018296:	4b05      	ldr	r3, [pc, #20]	; (80182ac <std+0x44>)
 8018298:	6224      	str	r4, [r4, #32]
 801829a:	6323      	str	r3, [r4, #48]	; 0x30
 801829c:	bd10      	pop	{r4, pc}
 801829e:	bf00      	nop
 80182a0:	080185b9 	.word	0x080185b9
 80182a4:	080185db 	.word	0x080185db
 80182a8:	08018613 	.word	0x08018613
 80182ac:	08018637 	.word	0x08018637

080182b0 <_cleanup_r>:
 80182b0:	4901      	ldr	r1, [pc, #4]	; (80182b8 <_cleanup_r+0x8>)
 80182b2:	f000 b8af 	b.w	8018414 <_fwalk_reent>
 80182b6:	bf00      	nop
 80182b8:	080181f1 	.word	0x080181f1

080182bc <__sfmoreglue>:
 80182bc:	b570      	push	{r4, r5, r6, lr}
 80182be:	1e4a      	subs	r2, r1, #1
 80182c0:	2568      	movs	r5, #104	; 0x68
 80182c2:	4355      	muls	r5, r2
 80182c4:	460e      	mov	r6, r1
 80182c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80182ca:	f7ff fa7f 	bl	80177cc <_malloc_r>
 80182ce:	4604      	mov	r4, r0
 80182d0:	b140      	cbz	r0, 80182e4 <__sfmoreglue+0x28>
 80182d2:	2100      	movs	r1, #0
 80182d4:	e9c0 1600 	strd	r1, r6, [r0]
 80182d8:	300c      	adds	r0, #12
 80182da:	60a0      	str	r0, [r4, #8]
 80182dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80182e0:	f7fb fe52 	bl	8013f88 <memset>
 80182e4:	4620      	mov	r0, r4
 80182e6:	bd70      	pop	{r4, r5, r6, pc}

080182e8 <__sfp_lock_acquire>:
 80182e8:	4801      	ldr	r0, [pc, #4]	; (80182f0 <__sfp_lock_acquire+0x8>)
 80182ea:	f000 b8b3 	b.w	8018454 <__retarget_lock_acquire_recursive>
 80182ee:	bf00      	nop
 80182f0:	24023c64 	.word	0x24023c64

080182f4 <__sfp_lock_release>:
 80182f4:	4801      	ldr	r0, [pc, #4]	; (80182fc <__sfp_lock_release+0x8>)
 80182f6:	f000 b8ae 	b.w	8018456 <__retarget_lock_release_recursive>
 80182fa:	bf00      	nop
 80182fc:	24023c64 	.word	0x24023c64

08018300 <__sinit_lock_acquire>:
 8018300:	4801      	ldr	r0, [pc, #4]	; (8018308 <__sinit_lock_acquire+0x8>)
 8018302:	f000 b8a7 	b.w	8018454 <__retarget_lock_acquire_recursive>
 8018306:	bf00      	nop
 8018308:	24023c5f 	.word	0x24023c5f

0801830c <__sinit_lock_release>:
 801830c:	4801      	ldr	r0, [pc, #4]	; (8018314 <__sinit_lock_release+0x8>)
 801830e:	f000 b8a2 	b.w	8018456 <__retarget_lock_release_recursive>
 8018312:	bf00      	nop
 8018314:	24023c5f 	.word	0x24023c5f

08018318 <__sinit>:
 8018318:	b510      	push	{r4, lr}
 801831a:	4604      	mov	r4, r0
 801831c:	f7ff fff0 	bl	8018300 <__sinit_lock_acquire>
 8018320:	69a3      	ldr	r3, [r4, #24]
 8018322:	b11b      	cbz	r3, 801832c <__sinit+0x14>
 8018324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018328:	f7ff bff0 	b.w	801830c <__sinit_lock_release>
 801832c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018330:	6523      	str	r3, [r4, #80]	; 0x50
 8018332:	4b13      	ldr	r3, [pc, #76]	; (8018380 <__sinit+0x68>)
 8018334:	4a13      	ldr	r2, [pc, #76]	; (8018384 <__sinit+0x6c>)
 8018336:	681b      	ldr	r3, [r3, #0]
 8018338:	62a2      	str	r2, [r4, #40]	; 0x28
 801833a:	42a3      	cmp	r3, r4
 801833c:	bf04      	itt	eq
 801833e:	2301      	moveq	r3, #1
 8018340:	61a3      	streq	r3, [r4, #24]
 8018342:	4620      	mov	r0, r4
 8018344:	f000 f820 	bl	8018388 <__sfp>
 8018348:	6060      	str	r0, [r4, #4]
 801834a:	4620      	mov	r0, r4
 801834c:	f000 f81c 	bl	8018388 <__sfp>
 8018350:	60a0      	str	r0, [r4, #8]
 8018352:	4620      	mov	r0, r4
 8018354:	f000 f818 	bl	8018388 <__sfp>
 8018358:	2200      	movs	r2, #0
 801835a:	60e0      	str	r0, [r4, #12]
 801835c:	2104      	movs	r1, #4
 801835e:	6860      	ldr	r0, [r4, #4]
 8018360:	f7ff ff82 	bl	8018268 <std>
 8018364:	68a0      	ldr	r0, [r4, #8]
 8018366:	2201      	movs	r2, #1
 8018368:	2109      	movs	r1, #9
 801836a:	f7ff ff7d 	bl	8018268 <std>
 801836e:	68e0      	ldr	r0, [r4, #12]
 8018370:	2202      	movs	r2, #2
 8018372:	2112      	movs	r1, #18
 8018374:	f7ff ff78 	bl	8018268 <std>
 8018378:	2301      	movs	r3, #1
 801837a:	61a3      	str	r3, [r4, #24]
 801837c:	e7d2      	b.n	8018324 <__sinit+0xc>
 801837e:	bf00      	nop
 8018380:	08019500 	.word	0x08019500
 8018384:	080182b1 	.word	0x080182b1

08018388 <__sfp>:
 8018388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801838a:	4607      	mov	r7, r0
 801838c:	f7ff ffac 	bl	80182e8 <__sfp_lock_acquire>
 8018390:	4b1e      	ldr	r3, [pc, #120]	; (801840c <__sfp+0x84>)
 8018392:	681e      	ldr	r6, [r3, #0]
 8018394:	69b3      	ldr	r3, [r6, #24]
 8018396:	b913      	cbnz	r3, 801839e <__sfp+0x16>
 8018398:	4630      	mov	r0, r6
 801839a:	f7ff ffbd 	bl	8018318 <__sinit>
 801839e:	3648      	adds	r6, #72	; 0x48
 80183a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80183a4:	3b01      	subs	r3, #1
 80183a6:	d503      	bpl.n	80183b0 <__sfp+0x28>
 80183a8:	6833      	ldr	r3, [r6, #0]
 80183aa:	b30b      	cbz	r3, 80183f0 <__sfp+0x68>
 80183ac:	6836      	ldr	r6, [r6, #0]
 80183ae:	e7f7      	b.n	80183a0 <__sfp+0x18>
 80183b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80183b4:	b9d5      	cbnz	r5, 80183ec <__sfp+0x64>
 80183b6:	4b16      	ldr	r3, [pc, #88]	; (8018410 <__sfp+0x88>)
 80183b8:	60e3      	str	r3, [r4, #12]
 80183ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80183be:	6665      	str	r5, [r4, #100]	; 0x64
 80183c0:	f000 f847 	bl	8018452 <__retarget_lock_init_recursive>
 80183c4:	f7ff ff96 	bl	80182f4 <__sfp_lock_release>
 80183c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80183cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80183d0:	6025      	str	r5, [r4, #0]
 80183d2:	61a5      	str	r5, [r4, #24]
 80183d4:	2208      	movs	r2, #8
 80183d6:	4629      	mov	r1, r5
 80183d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80183dc:	f7fb fdd4 	bl	8013f88 <memset>
 80183e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80183e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80183e8:	4620      	mov	r0, r4
 80183ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80183ec:	3468      	adds	r4, #104	; 0x68
 80183ee:	e7d9      	b.n	80183a4 <__sfp+0x1c>
 80183f0:	2104      	movs	r1, #4
 80183f2:	4638      	mov	r0, r7
 80183f4:	f7ff ff62 	bl	80182bc <__sfmoreglue>
 80183f8:	4604      	mov	r4, r0
 80183fa:	6030      	str	r0, [r6, #0]
 80183fc:	2800      	cmp	r0, #0
 80183fe:	d1d5      	bne.n	80183ac <__sfp+0x24>
 8018400:	f7ff ff78 	bl	80182f4 <__sfp_lock_release>
 8018404:	230c      	movs	r3, #12
 8018406:	603b      	str	r3, [r7, #0]
 8018408:	e7ee      	b.n	80183e8 <__sfp+0x60>
 801840a:	bf00      	nop
 801840c:	08019500 	.word	0x08019500
 8018410:	ffff0001 	.word	0xffff0001

08018414 <_fwalk_reent>:
 8018414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018418:	4606      	mov	r6, r0
 801841a:	4688      	mov	r8, r1
 801841c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018420:	2700      	movs	r7, #0
 8018422:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018426:	f1b9 0901 	subs.w	r9, r9, #1
 801842a:	d505      	bpl.n	8018438 <_fwalk_reent+0x24>
 801842c:	6824      	ldr	r4, [r4, #0]
 801842e:	2c00      	cmp	r4, #0
 8018430:	d1f7      	bne.n	8018422 <_fwalk_reent+0xe>
 8018432:	4638      	mov	r0, r7
 8018434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018438:	89ab      	ldrh	r3, [r5, #12]
 801843a:	2b01      	cmp	r3, #1
 801843c:	d907      	bls.n	801844e <_fwalk_reent+0x3a>
 801843e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018442:	3301      	adds	r3, #1
 8018444:	d003      	beq.n	801844e <_fwalk_reent+0x3a>
 8018446:	4629      	mov	r1, r5
 8018448:	4630      	mov	r0, r6
 801844a:	47c0      	blx	r8
 801844c:	4307      	orrs	r7, r0
 801844e:	3568      	adds	r5, #104	; 0x68
 8018450:	e7e9      	b.n	8018426 <_fwalk_reent+0x12>

08018452 <__retarget_lock_init_recursive>:
 8018452:	4770      	bx	lr

08018454 <__retarget_lock_acquire_recursive>:
 8018454:	4770      	bx	lr

08018456 <__retarget_lock_release_recursive>:
 8018456:	4770      	bx	lr

08018458 <__swhatbuf_r>:
 8018458:	b570      	push	{r4, r5, r6, lr}
 801845a:	460e      	mov	r6, r1
 801845c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018460:	2900      	cmp	r1, #0
 8018462:	b096      	sub	sp, #88	; 0x58
 8018464:	4614      	mov	r4, r2
 8018466:	461d      	mov	r5, r3
 8018468:	da07      	bge.n	801847a <__swhatbuf_r+0x22>
 801846a:	2300      	movs	r3, #0
 801846c:	602b      	str	r3, [r5, #0]
 801846e:	89b3      	ldrh	r3, [r6, #12]
 8018470:	061a      	lsls	r2, r3, #24
 8018472:	d410      	bmi.n	8018496 <__swhatbuf_r+0x3e>
 8018474:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018478:	e00e      	b.n	8018498 <__swhatbuf_r+0x40>
 801847a:	466a      	mov	r2, sp
 801847c:	f000 f902 	bl	8018684 <_fstat_r>
 8018480:	2800      	cmp	r0, #0
 8018482:	dbf2      	blt.n	801846a <__swhatbuf_r+0x12>
 8018484:	9a01      	ldr	r2, [sp, #4]
 8018486:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801848a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801848e:	425a      	negs	r2, r3
 8018490:	415a      	adcs	r2, r3
 8018492:	602a      	str	r2, [r5, #0]
 8018494:	e7ee      	b.n	8018474 <__swhatbuf_r+0x1c>
 8018496:	2340      	movs	r3, #64	; 0x40
 8018498:	2000      	movs	r0, #0
 801849a:	6023      	str	r3, [r4, #0]
 801849c:	b016      	add	sp, #88	; 0x58
 801849e:	bd70      	pop	{r4, r5, r6, pc}

080184a0 <__smakebuf_r>:
 80184a0:	898b      	ldrh	r3, [r1, #12]
 80184a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80184a4:	079d      	lsls	r5, r3, #30
 80184a6:	4606      	mov	r6, r0
 80184a8:	460c      	mov	r4, r1
 80184aa:	d507      	bpl.n	80184bc <__smakebuf_r+0x1c>
 80184ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80184b0:	6023      	str	r3, [r4, #0]
 80184b2:	6123      	str	r3, [r4, #16]
 80184b4:	2301      	movs	r3, #1
 80184b6:	6163      	str	r3, [r4, #20]
 80184b8:	b002      	add	sp, #8
 80184ba:	bd70      	pop	{r4, r5, r6, pc}
 80184bc:	ab01      	add	r3, sp, #4
 80184be:	466a      	mov	r2, sp
 80184c0:	f7ff ffca 	bl	8018458 <__swhatbuf_r>
 80184c4:	9900      	ldr	r1, [sp, #0]
 80184c6:	4605      	mov	r5, r0
 80184c8:	4630      	mov	r0, r6
 80184ca:	f7ff f97f 	bl	80177cc <_malloc_r>
 80184ce:	b948      	cbnz	r0, 80184e4 <__smakebuf_r+0x44>
 80184d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80184d4:	059a      	lsls	r2, r3, #22
 80184d6:	d4ef      	bmi.n	80184b8 <__smakebuf_r+0x18>
 80184d8:	f023 0303 	bic.w	r3, r3, #3
 80184dc:	f043 0302 	orr.w	r3, r3, #2
 80184e0:	81a3      	strh	r3, [r4, #12]
 80184e2:	e7e3      	b.n	80184ac <__smakebuf_r+0xc>
 80184e4:	4b0d      	ldr	r3, [pc, #52]	; (801851c <__smakebuf_r+0x7c>)
 80184e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80184e8:	89a3      	ldrh	r3, [r4, #12]
 80184ea:	6020      	str	r0, [r4, #0]
 80184ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80184f0:	81a3      	strh	r3, [r4, #12]
 80184f2:	9b00      	ldr	r3, [sp, #0]
 80184f4:	6163      	str	r3, [r4, #20]
 80184f6:	9b01      	ldr	r3, [sp, #4]
 80184f8:	6120      	str	r0, [r4, #16]
 80184fa:	b15b      	cbz	r3, 8018514 <__smakebuf_r+0x74>
 80184fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018500:	4630      	mov	r0, r6
 8018502:	f000 f8d1 	bl	80186a8 <_isatty_r>
 8018506:	b128      	cbz	r0, 8018514 <__smakebuf_r+0x74>
 8018508:	89a3      	ldrh	r3, [r4, #12]
 801850a:	f023 0303 	bic.w	r3, r3, #3
 801850e:	f043 0301 	orr.w	r3, r3, #1
 8018512:	81a3      	strh	r3, [r4, #12]
 8018514:	89a0      	ldrh	r0, [r4, #12]
 8018516:	4305      	orrs	r5, r0
 8018518:	81a5      	strh	r5, [r4, #12]
 801851a:	e7cd      	b.n	80184b8 <__smakebuf_r+0x18>
 801851c:	080182b1 	.word	0x080182b1

08018520 <_malloc_usable_size_r>:
 8018520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018524:	1f18      	subs	r0, r3, #4
 8018526:	2b00      	cmp	r3, #0
 8018528:	bfbc      	itt	lt
 801852a:	580b      	ldrlt	r3, [r1, r0]
 801852c:	18c0      	addlt	r0, r0, r3
 801852e:	4770      	bx	lr

08018530 <_raise_r>:
 8018530:	291f      	cmp	r1, #31
 8018532:	b538      	push	{r3, r4, r5, lr}
 8018534:	4604      	mov	r4, r0
 8018536:	460d      	mov	r5, r1
 8018538:	d904      	bls.n	8018544 <_raise_r+0x14>
 801853a:	2316      	movs	r3, #22
 801853c:	6003      	str	r3, [r0, #0]
 801853e:	f04f 30ff 	mov.w	r0, #4294967295
 8018542:	bd38      	pop	{r3, r4, r5, pc}
 8018544:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018546:	b112      	cbz	r2, 801854e <_raise_r+0x1e>
 8018548:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801854c:	b94b      	cbnz	r3, 8018562 <_raise_r+0x32>
 801854e:	4620      	mov	r0, r4
 8018550:	f000 f830 	bl	80185b4 <_getpid_r>
 8018554:	462a      	mov	r2, r5
 8018556:	4601      	mov	r1, r0
 8018558:	4620      	mov	r0, r4
 801855a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801855e:	f000 b817 	b.w	8018590 <_kill_r>
 8018562:	2b01      	cmp	r3, #1
 8018564:	d00a      	beq.n	801857c <_raise_r+0x4c>
 8018566:	1c59      	adds	r1, r3, #1
 8018568:	d103      	bne.n	8018572 <_raise_r+0x42>
 801856a:	2316      	movs	r3, #22
 801856c:	6003      	str	r3, [r0, #0]
 801856e:	2001      	movs	r0, #1
 8018570:	e7e7      	b.n	8018542 <_raise_r+0x12>
 8018572:	2400      	movs	r4, #0
 8018574:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018578:	4628      	mov	r0, r5
 801857a:	4798      	blx	r3
 801857c:	2000      	movs	r0, #0
 801857e:	e7e0      	b.n	8018542 <_raise_r+0x12>

08018580 <raise>:
 8018580:	4b02      	ldr	r3, [pc, #8]	; (801858c <raise+0xc>)
 8018582:	4601      	mov	r1, r0
 8018584:	6818      	ldr	r0, [r3, #0]
 8018586:	f7ff bfd3 	b.w	8018530 <_raise_r>
 801858a:	bf00      	nop
 801858c:	24000020 	.word	0x24000020

08018590 <_kill_r>:
 8018590:	b538      	push	{r3, r4, r5, lr}
 8018592:	4d07      	ldr	r5, [pc, #28]	; (80185b0 <_kill_r+0x20>)
 8018594:	2300      	movs	r3, #0
 8018596:	4604      	mov	r4, r0
 8018598:	4608      	mov	r0, r1
 801859a:	4611      	mov	r1, r2
 801859c:	602b      	str	r3, [r5, #0]
 801859e:	f7ec fec7 	bl	8005330 <_kill>
 80185a2:	1c43      	adds	r3, r0, #1
 80185a4:	d102      	bne.n	80185ac <_kill_r+0x1c>
 80185a6:	682b      	ldr	r3, [r5, #0]
 80185a8:	b103      	cbz	r3, 80185ac <_kill_r+0x1c>
 80185aa:	6023      	str	r3, [r4, #0]
 80185ac:	bd38      	pop	{r3, r4, r5, pc}
 80185ae:	bf00      	nop
 80185b0:	24023c58 	.word	0x24023c58

080185b4 <_getpid_r>:
 80185b4:	f7ec beb4 	b.w	8005320 <_getpid>

080185b8 <__sread>:
 80185b8:	b510      	push	{r4, lr}
 80185ba:	460c      	mov	r4, r1
 80185bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80185c0:	f000 f894 	bl	80186ec <_read_r>
 80185c4:	2800      	cmp	r0, #0
 80185c6:	bfab      	itete	ge
 80185c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80185ca:	89a3      	ldrhlt	r3, [r4, #12]
 80185cc:	181b      	addge	r3, r3, r0
 80185ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80185d2:	bfac      	ite	ge
 80185d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80185d6:	81a3      	strhlt	r3, [r4, #12]
 80185d8:	bd10      	pop	{r4, pc}

080185da <__swrite>:
 80185da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185de:	461f      	mov	r7, r3
 80185e0:	898b      	ldrh	r3, [r1, #12]
 80185e2:	05db      	lsls	r3, r3, #23
 80185e4:	4605      	mov	r5, r0
 80185e6:	460c      	mov	r4, r1
 80185e8:	4616      	mov	r6, r2
 80185ea:	d505      	bpl.n	80185f8 <__swrite+0x1e>
 80185ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80185f0:	2302      	movs	r3, #2
 80185f2:	2200      	movs	r2, #0
 80185f4:	f000 f868 	bl	80186c8 <_lseek_r>
 80185f8:	89a3      	ldrh	r3, [r4, #12]
 80185fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80185fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018602:	81a3      	strh	r3, [r4, #12]
 8018604:	4632      	mov	r2, r6
 8018606:	463b      	mov	r3, r7
 8018608:	4628      	mov	r0, r5
 801860a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801860e:	f000 b817 	b.w	8018640 <_write_r>

08018612 <__sseek>:
 8018612:	b510      	push	{r4, lr}
 8018614:	460c      	mov	r4, r1
 8018616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801861a:	f000 f855 	bl	80186c8 <_lseek_r>
 801861e:	1c43      	adds	r3, r0, #1
 8018620:	89a3      	ldrh	r3, [r4, #12]
 8018622:	bf15      	itete	ne
 8018624:	6560      	strne	r0, [r4, #84]	; 0x54
 8018626:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801862a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801862e:	81a3      	strheq	r3, [r4, #12]
 8018630:	bf18      	it	ne
 8018632:	81a3      	strhne	r3, [r4, #12]
 8018634:	bd10      	pop	{r4, pc}

08018636 <__sclose>:
 8018636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801863a:	f000 b813 	b.w	8018664 <_close_r>
	...

08018640 <_write_r>:
 8018640:	b538      	push	{r3, r4, r5, lr}
 8018642:	4d07      	ldr	r5, [pc, #28]	; (8018660 <_write_r+0x20>)
 8018644:	4604      	mov	r4, r0
 8018646:	4608      	mov	r0, r1
 8018648:	4611      	mov	r1, r2
 801864a:	2200      	movs	r2, #0
 801864c:	602a      	str	r2, [r5, #0]
 801864e:	461a      	mov	r2, r3
 8018650:	f7ec fea5 	bl	800539e <_write>
 8018654:	1c43      	adds	r3, r0, #1
 8018656:	d102      	bne.n	801865e <_write_r+0x1e>
 8018658:	682b      	ldr	r3, [r5, #0]
 801865a:	b103      	cbz	r3, 801865e <_write_r+0x1e>
 801865c:	6023      	str	r3, [r4, #0]
 801865e:	bd38      	pop	{r3, r4, r5, pc}
 8018660:	24023c58 	.word	0x24023c58

08018664 <_close_r>:
 8018664:	b538      	push	{r3, r4, r5, lr}
 8018666:	4d06      	ldr	r5, [pc, #24]	; (8018680 <_close_r+0x1c>)
 8018668:	2300      	movs	r3, #0
 801866a:	4604      	mov	r4, r0
 801866c:	4608      	mov	r0, r1
 801866e:	602b      	str	r3, [r5, #0]
 8018670:	f7ec feb1 	bl	80053d6 <_close>
 8018674:	1c43      	adds	r3, r0, #1
 8018676:	d102      	bne.n	801867e <_close_r+0x1a>
 8018678:	682b      	ldr	r3, [r5, #0]
 801867a:	b103      	cbz	r3, 801867e <_close_r+0x1a>
 801867c:	6023      	str	r3, [r4, #0]
 801867e:	bd38      	pop	{r3, r4, r5, pc}
 8018680:	24023c58 	.word	0x24023c58

08018684 <_fstat_r>:
 8018684:	b538      	push	{r3, r4, r5, lr}
 8018686:	4d07      	ldr	r5, [pc, #28]	; (80186a4 <_fstat_r+0x20>)
 8018688:	2300      	movs	r3, #0
 801868a:	4604      	mov	r4, r0
 801868c:	4608      	mov	r0, r1
 801868e:	4611      	mov	r1, r2
 8018690:	602b      	str	r3, [r5, #0]
 8018692:	f7ec feac 	bl	80053ee <_fstat>
 8018696:	1c43      	adds	r3, r0, #1
 8018698:	d102      	bne.n	80186a0 <_fstat_r+0x1c>
 801869a:	682b      	ldr	r3, [r5, #0]
 801869c:	b103      	cbz	r3, 80186a0 <_fstat_r+0x1c>
 801869e:	6023      	str	r3, [r4, #0]
 80186a0:	bd38      	pop	{r3, r4, r5, pc}
 80186a2:	bf00      	nop
 80186a4:	24023c58 	.word	0x24023c58

080186a8 <_isatty_r>:
 80186a8:	b538      	push	{r3, r4, r5, lr}
 80186aa:	4d06      	ldr	r5, [pc, #24]	; (80186c4 <_isatty_r+0x1c>)
 80186ac:	2300      	movs	r3, #0
 80186ae:	4604      	mov	r4, r0
 80186b0:	4608      	mov	r0, r1
 80186b2:	602b      	str	r3, [r5, #0]
 80186b4:	f7ec feab 	bl	800540e <_isatty>
 80186b8:	1c43      	adds	r3, r0, #1
 80186ba:	d102      	bne.n	80186c2 <_isatty_r+0x1a>
 80186bc:	682b      	ldr	r3, [r5, #0]
 80186be:	b103      	cbz	r3, 80186c2 <_isatty_r+0x1a>
 80186c0:	6023      	str	r3, [r4, #0]
 80186c2:	bd38      	pop	{r3, r4, r5, pc}
 80186c4:	24023c58 	.word	0x24023c58

080186c8 <_lseek_r>:
 80186c8:	b538      	push	{r3, r4, r5, lr}
 80186ca:	4d07      	ldr	r5, [pc, #28]	; (80186e8 <_lseek_r+0x20>)
 80186cc:	4604      	mov	r4, r0
 80186ce:	4608      	mov	r0, r1
 80186d0:	4611      	mov	r1, r2
 80186d2:	2200      	movs	r2, #0
 80186d4:	602a      	str	r2, [r5, #0]
 80186d6:	461a      	mov	r2, r3
 80186d8:	f7ec fea4 	bl	8005424 <_lseek>
 80186dc:	1c43      	adds	r3, r0, #1
 80186de:	d102      	bne.n	80186e6 <_lseek_r+0x1e>
 80186e0:	682b      	ldr	r3, [r5, #0]
 80186e2:	b103      	cbz	r3, 80186e6 <_lseek_r+0x1e>
 80186e4:	6023      	str	r3, [r4, #0]
 80186e6:	bd38      	pop	{r3, r4, r5, pc}
 80186e8:	24023c58 	.word	0x24023c58

080186ec <_read_r>:
 80186ec:	b538      	push	{r3, r4, r5, lr}
 80186ee:	4d07      	ldr	r5, [pc, #28]	; (801870c <_read_r+0x20>)
 80186f0:	4604      	mov	r4, r0
 80186f2:	4608      	mov	r0, r1
 80186f4:	4611      	mov	r1, r2
 80186f6:	2200      	movs	r2, #0
 80186f8:	602a      	str	r2, [r5, #0]
 80186fa:	461a      	mov	r2, r3
 80186fc:	f7ec fe32 	bl	8005364 <_read>
 8018700:	1c43      	adds	r3, r0, #1
 8018702:	d102      	bne.n	801870a <_read_r+0x1e>
 8018704:	682b      	ldr	r3, [r5, #0]
 8018706:	b103      	cbz	r3, 801870a <_read_r+0x1e>
 8018708:	6023      	str	r3, [r4, #0]
 801870a:	bd38      	pop	{r3, r4, r5, pc}
 801870c:	24023c58 	.word	0x24023c58

08018710 <cos>:
 8018710:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018712:	eeb0 7b40 	vmov.f64	d7, d0
 8018716:	ee17 3a90 	vmov	r3, s15
 801871a:	4a1f      	ldr	r2, [pc, #124]	; (8018798 <cos+0x88>)
 801871c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018720:	4293      	cmp	r3, r2
 8018722:	dc04      	bgt.n	801872e <cos+0x1e>
 8018724:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8018790 <cos+0x80>
 8018728:	f000 f9c2 	bl	8018ab0 <__kernel_cos>
 801872c:	e004      	b.n	8018738 <cos+0x28>
 801872e:	4a1b      	ldr	r2, [pc, #108]	; (801879c <cos+0x8c>)
 8018730:	4293      	cmp	r3, r2
 8018732:	dd04      	ble.n	801873e <cos+0x2e>
 8018734:	ee30 0b40 	vsub.f64	d0, d0, d0
 8018738:	b005      	add	sp, #20
 801873a:	f85d fb04 	ldr.w	pc, [sp], #4
 801873e:	4668      	mov	r0, sp
 8018740:	f000 f876 	bl	8018830 <__ieee754_rem_pio2>
 8018744:	f000 0003 	and.w	r0, r0, #3
 8018748:	2801      	cmp	r0, #1
 801874a:	d007      	beq.n	801875c <cos+0x4c>
 801874c:	2802      	cmp	r0, #2
 801874e:	d00e      	beq.n	801876e <cos+0x5e>
 8018750:	b9a0      	cbnz	r0, 801877c <cos+0x6c>
 8018752:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018756:	ed9d 0b00 	vldr	d0, [sp]
 801875a:	e7e5      	b.n	8018728 <cos+0x18>
 801875c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018760:	ed9d 0b00 	vldr	d0, [sp]
 8018764:	f000 fc90 	bl	8019088 <__kernel_sin>
 8018768:	eeb1 0b40 	vneg.f64	d0, d0
 801876c:	e7e4      	b.n	8018738 <cos+0x28>
 801876e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018772:	ed9d 0b00 	vldr	d0, [sp]
 8018776:	f000 f99b 	bl	8018ab0 <__kernel_cos>
 801877a:	e7f5      	b.n	8018768 <cos+0x58>
 801877c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018780:	ed9d 0b00 	vldr	d0, [sp]
 8018784:	2001      	movs	r0, #1
 8018786:	f000 fc7f 	bl	8019088 <__kernel_sin>
 801878a:	e7d5      	b.n	8018738 <cos+0x28>
 801878c:	f3af 8000 	nop.w
	...
 8018798:	3fe921fb 	.word	0x3fe921fb
 801879c:	7fefffff 	.word	0x7fefffff

080187a0 <sin>:
 80187a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80187a2:	eeb0 7b40 	vmov.f64	d7, d0
 80187a6:	ee17 3a90 	vmov	r3, s15
 80187aa:	4a1f      	ldr	r2, [pc, #124]	; (8018828 <sin+0x88>)
 80187ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80187b0:	4293      	cmp	r3, r2
 80187b2:	dc05      	bgt.n	80187c0 <sin+0x20>
 80187b4:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8018820 <sin+0x80>
 80187b8:	2000      	movs	r0, #0
 80187ba:	f000 fc65 	bl	8019088 <__kernel_sin>
 80187be:	e004      	b.n	80187ca <sin+0x2a>
 80187c0:	4a1a      	ldr	r2, [pc, #104]	; (801882c <sin+0x8c>)
 80187c2:	4293      	cmp	r3, r2
 80187c4:	dd04      	ble.n	80187d0 <sin+0x30>
 80187c6:	ee30 0b40 	vsub.f64	d0, d0, d0
 80187ca:	b005      	add	sp, #20
 80187cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80187d0:	4668      	mov	r0, sp
 80187d2:	f000 f82d 	bl	8018830 <__ieee754_rem_pio2>
 80187d6:	f000 0003 	and.w	r0, r0, #3
 80187da:	2801      	cmp	r0, #1
 80187dc:	d008      	beq.n	80187f0 <sin+0x50>
 80187de:	2802      	cmp	r0, #2
 80187e0:	d00d      	beq.n	80187fe <sin+0x5e>
 80187e2:	b9b0      	cbnz	r0, 8018812 <sin+0x72>
 80187e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80187e8:	ed9d 0b00 	vldr	d0, [sp]
 80187ec:	2001      	movs	r0, #1
 80187ee:	e7e4      	b.n	80187ba <sin+0x1a>
 80187f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80187f4:	ed9d 0b00 	vldr	d0, [sp]
 80187f8:	f000 f95a 	bl	8018ab0 <__kernel_cos>
 80187fc:	e7e5      	b.n	80187ca <sin+0x2a>
 80187fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018802:	ed9d 0b00 	vldr	d0, [sp]
 8018806:	2001      	movs	r0, #1
 8018808:	f000 fc3e 	bl	8019088 <__kernel_sin>
 801880c:	eeb1 0b40 	vneg.f64	d0, d0
 8018810:	e7db      	b.n	80187ca <sin+0x2a>
 8018812:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018816:	ed9d 0b00 	vldr	d0, [sp]
 801881a:	f000 f949 	bl	8018ab0 <__kernel_cos>
 801881e:	e7f5      	b.n	801880c <sin+0x6c>
	...
 8018828:	3fe921fb 	.word	0x3fe921fb
 801882c:	7fefffff 	.word	0x7fefffff

08018830 <__ieee754_rem_pio2>:
 8018830:	b570      	push	{r4, r5, r6, lr}
 8018832:	eeb0 7b40 	vmov.f64	d7, d0
 8018836:	ee17 5a90 	vmov	r5, s15
 801883a:	4b97      	ldr	r3, [pc, #604]	; (8018a98 <__ieee754_rem_pio2+0x268>)
 801883c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8018840:	429e      	cmp	r6, r3
 8018842:	b088      	sub	sp, #32
 8018844:	4604      	mov	r4, r0
 8018846:	dc07      	bgt.n	8018858 <__ieee754_rem_pio2+0x28>
 8018848:	2200      	movs	r2, #0
 801884a:	2300      	movs	r3, #0
 801884c:	ed84 0b00 	vstr	d0, [r4]
 8018850:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8018854:	2000      	movs	r0, #0
 8018856:	e01b      	b.n	8018890 <__ieee754_rem_pio2+0x60>
 8018858:	4b90      	ldr	r3, [pc, #576]	; (8018a9c <__ieee754_rem_pio2+0x26c>)
 801885a:	429e      	cmp	r6, r3
 801885c:	dc3b      	bgt.n	80188d6 <__ieee754_rem_pio2+0xa6>
 801885e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8018862:	2d00      	cmp	r5, #0
 8018864:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8018a58 <__ieee754_rem_pio2+0x228>
 8018868:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801886c:	dd19      	ble.n	80188a2 <__ieee754_rem_pio2+0x72>
 801886e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8018872:	429e      	cmp	r6, r3
 8018874:	d00e      	beq.n	8018894 <__ieee754_rem_pio2+0x64>
 8018876:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8018a60 <__ieee754_rem_pio2+0x230>
 801887a:	ee37 5b46 	vsub.f64	d5, d7, d6
 801887e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8018882:	ed84 5b00 	vstr	d5, [r4]
 8018886:	ee37 7b46 	vsub.f64	d7, d7, d6
 801888a:	ed84 7b02 	vstr	d7, [r4, #8]
 801888e:	2001      	movs	r0, #1
 8018890:	b008      	add	sp, #32
 8018892:	bd70      	pop	{r4, r5, r6, pc}
 8018894:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8018a68 <__ieee754_rem_pio2+0x238>
 8018898:	ee37 7b46 	vsub.f64	d7, d7, d6
 801889c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8018a70 <__ieee754_rem_pio2+0x240>
 80188a0:	e7eb      	b.n	801887a <__ieee754_rem_pio2+0x4a>
 80188a2:	429e      	cmp	r6, r3
 80188a4:	ee30 7b06 	vadd.f64	d7, d0, d6
 80188a8:	d00e      	beq.n	80188c8 <__ieee754_rem_pio2+0x98>
 80188aa:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8018a60 <__ieee754_rem_pio2+0x230>
 80188ae:	ee37 5b06 	vadd.f64	d5, d7, d6
 80188b2:	ee37 7b45 	vsub.f64	d7, d7, d5
 80188b6:	ed84 5b00 	vstr	d5, [r4]
 80188ba:	ee37 7b06 	vadd.f64	d7, d7, d6
 80188be:	f04f 30ff 	mov.w	r0, #4294967295
 80188c2:	ed84 7b02 	vstr	d7, [r4, #8]
 80188c6:	e7e3      	b.n	8018890 <__ieee754_rem_pio2+0x60>
 80188c8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8018a68 <__ieee754_rem_pio2+0x238>
 80188cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80188d0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8018a70 <__ieee754_rem_pio2+0x240>
 80188d4:	e7eb      	b.n	80188ae <__ieee754_rem_pio2+0x7e>
 80188d6:	4b72      	ldr	r3, [pc, #456]	; (8018aa0 <__ieee754_rem_pio2+0x270>)
 80188d8:	429e      	cmp	r6, r3
 80188da:	dc6e      	bgt.n	80189ba <__ieee754_rem_pio2+0x18a>
 80188dc:	f000 fc2c 	bl	8019138 <fabs>
 80188e0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80188e4:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8018a78 <__ieee754_rem_pio2+0x248>
 80188e8:	eea0 7b06 	vfma.f64	d7, d0, d6
 80188ec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80188f0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80188f4:	ee17 0a90 	vmov	r0, s15
 80188f8:	eeb1 4b45 	vneg.f64	d4, d5
 80188fc:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8018a58 <__ieee754_rem_pio2+0x228>
 8018900:	eea5 0b47 	vfms.f64	d0, d5, d7
 8018904:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8018a60 <__ieee754_rem_pio2+0x230>
 8018908:	281f      	cmp	r0, #31
 801890a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801890e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8018912:	dc08      	bgt.n	8018926 <__ieee754_rem_pio2+0xf6>
 8018914:	4b63      	ldr	r3, [pc, #396]	; (8018aa4 <__ieee754_rem_pio2+0x274>)
 8018916:	1e42      	subs	r2, r0, #1
 8018918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801891c:	42b3      	cmp	r3, r6
 801891e:	d002      	beq.n	8018926 <__ieee754_rem_pio2+0xf6>
 8018920:	ed84 6b00 	vstr	d6, [r4]
 8018924:	e024      	b.n	8018970 <__ieee754_rem_pio2+0x140>
 8018926:	ee16 3a90 	vmov	r3, s13
 801892a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801892e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8018932:	2b10      	cmp	r3, #16
 8018934:	ea4f 5226 	mov.w	r2, r6, asr #20
 8018938:	ddf2      	ble.n	8018920 <__ieee754_rem_pio2+0xf0>
 801893a:	eeb0 6b40 	vmov.f64	d6, d0
 801893e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8018a68 <__ieee754_rem_pio2+0x238>
 8018942:	eea4 6b03 	vfma.f64	d6, d4, d3
 8018946:	ee30 7b46 	vsub.f64	d7, d0, d6
 801894a:	eea4 7b03 	vfma.f64	d7, d4, d3
 801894e:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8018a70 <__ieee754_rem_pio2+0x240>
 8018952:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8018956:	ee36 3b47 	vsub.f64	d3, d6, d7
 801895a:	ee13 3a90 	vmov	r3, s7
 801895e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8018962:	1ad3      	subs	r3, r2, r3
 8018964:	2b31      	cmp	r3, #49	; 0x31
 8018966:	dc17      	bgt.n	8018998 <__ieee754_rem_pio2+0x168>
 8018968:	eeb0 0b46 	vmov.f64	d0, d6
 801896c:	ed84 3b00 	vstr	d3, [r4]
 8018970:	ed94 6b00 	vldr	d6, [r4]
 8018974:	2d00      	cmp	r5, #0
 8018976:	ee30 0b46 	vsub.f64	d0, d0, d6
 801897a:	ee30 7b47 	vsub.f64	d7, d0, d7
 801897e:	ed84 7b02 	vstr	d7, [r4, #8]
 8018982:	da85      	bge.n	8018890 <__ieee754_rem_pio2+0x60>
 8018984:	eeb1 6b46 	vneg.f64	d6, d6
 8018988:	ed84 6b00 	vstr	d6, [r4]
 801898c:	eeb1 7b47 	vneg.f64	d7, d7
 8018990:	4240      	negs	r0, r0
 8018992:	ed84 7b02 	vstr	d7, [r4, #8]
 8018996:	e77b      	b.n	8018890 <__ieee754_rem_pio2+0x60>
 8018998:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8018a80 <__ieee754_rem_pio2+0x250>
 801899c:	eeb0 0b46 	vmov.f64	d0, d6
 80189a0:	eea4 0b03 	vfma.f64	d0, d4, d3
 80189a4:	ee36 7b40 	vsub.f64	d7, d6, d0
 80189a8:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8018a88 <__ieee754_rem_pio2+0x258>
 80189ac:	eea4 7b03 	vfma.f64	d7, d4, d3
 80189b0:	ee95 7b06 	vfnms.f64	d7, d5, d6
 80189b4:	ee30 6b47 	vsub.f64	d6, d0, d7
 80189b8:	e7b2      	b.n	8018920 <__ieee754_rem_pio2+0xf0>
 80189ba:	4b3b      	ldr	r3, [pc, #236]	; (8018aa8 <__ieee754_rem_pio2+0x278>)
 80189bc:	429e      	cmp	r6, r3
 80189be:	dd06      	ble.n	80189ce <__ieee754_rem_pio2+0x19e>
 80189c0:	ee30 7b40 	vsub.f64	d7, d0, d0
 80189c4:	ed80 7b02 	vstr	d7, [r0, #8]
 80189c8:	ed80 7b00 	vstr	d7, [r0]
 80189cc:	e742      	b.n	8018854 <__ieee754_rem_pio2+0x24>
 80189ce:	1532      	asrs	r2, r6, #20
 80189d0:	ee10 0a10 	vmov	r0, s0
 80189d4:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80189d8:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80189dc:	ec41 0b17 	vmov	d7, r0, r1
 80189e0:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80189e4:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8018a90 <__ieee754_rem_pio2+0x260>
 80189e8:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80189ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 80189f0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80189f4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80189f8:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80189fc:	a902      	add	r1, sp, #8
 80189fe:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8018a02:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018a06:	ed8d 6b04 	vstr	d6, [sp, #16]
 8018a0a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8018a0e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8018a12:	2603      	movs	r6, #3
 8018a14:	4608      	mov	r0, r1
 8018a16:	ed91 7b04 	vldr	d7, [r1, #16]
 8018a1a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a22:	4633      	mov	r3, r6
 8018a24:	f1a1 0108 	sub.w	r1, r1, #8
 8018a28:	f106 36ff 	add.w	r6, r6, #4294967295
 8018a2c:	d0f3      	beq.n	8018a16 <__ieee754_rem_pio2+0x1e6>
 8018a2e:	491f      	ldr	r1, [pc, #124]	; (8018aac <__ieee754_rem_pio2+0x27c>)
 8018a30:	9101      	str	r1, [sp, #4]
 8018a32:	2102      	movs	r1, #2
 8018a34:	9100      	str	r1, [sp, #0]
 8018a36:	4621      	mov	r1, r4
 8018a38:	f000 f8a6 	bl	8018b88 <__kernel_rem_pio2>
 8018a3c:	2d00      	cmp	r5, #0
 8018a3e:	f6bf af27 	bge.w	8018890 <__ieee754_rem_pio2+0x60>
 8018a42:	ed94 7b00 	vldr	d7, [r4]
 8018a46:	eeb1 7b47 	vneg.f64	d7, d7
 8018a4a:	ed84 7b00 	vstr	d7, [r4]
 8018a4e:	ed94 7b02 	vldr	d7, [r4, #8]
 8018a52:	e79b      	b.n	801898c <__ieee754_rem_pio2+0x15c>
 8018a54:	f3af 8000 	nop.w
 8018a58:	54400000 	.word	0x54400000
 8018a5c:	3ff921fb 	.word	0x3ff921fb
 8018a60:	1a626331 	.word	0x1a626331
 8018a64:	3dd0b461 	.word	0x3dd0b461
 8018a68:	1a600000 	.word	0x1a600000
 8018a6c:	3dd0b461 	.word	0x3dd0b461
 8018a70:	2e037073 	.word	0x2e037073
 8018a74:	3ba3198a 	.word	0x3ba3198a
 8018a78:	6dc9c883 	.word	0x6dc9c883
 8018a7c:	3fe45f30 	.word	0x3fe45f30
 8018a80:	2e000000 	.word	0x2e000000
 8018a84:	3ba3198a 	.word	0x3ba3198a
 8018a88:	252049c1 	.word	0x252049c1
 8018a8c:	397b839a 	.word	0x397b839a
 8018a90:	00000000 	.word	0x00000000
 8018a94:	41700000 	.word	0x41700000
 8018a98:	3fe921fb 	.word	0x3fe921fb
 8018a9c:	4002d97b 	.word	0x4002d97b
 8018aa0:	413921fb 	.word	0x413921fb
 8018aa4:	080199d4 	.word	0x080199d4
 8018aa8:	7fefffff 	.word	0x7fefffff
 8018aac:	08019a54 	.word	0x08019a54

08018ab0 <__kernel_cos>:
 8018ab0:	ee10 1a90 	vmov	r1, s1
 8018ab4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8018ab8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8018abc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8018ac0:	da05      	bge.n	8018ace <__kernel_cos+0x1e>
 8018ac2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8018ac6:	ee17 3a90 	vmov	r3, s15
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	d03d      	beq.n	8018b4a <__kernel_cos+0x9a>
 8018ace:	ee20 3b00 	vmul.f64	d3, d0, d0
 8018ad2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8018b50 <__kernel_cos+0xa0>
 8018ad6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8018b58 <__kernel_cos+0xa8>
 8018ada:	eea3 6b07 	vfma.f64	d6, d3, d7
 8018ade:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8018b60 <__kernel_cos+0xb0>
 8018ae2:	eea6 7b03 	vfma.f64	d7, d6, d3
 8018ae6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8018b68 <__kernel_cos+0xb8>
 8018aea:	eea7 6b03 	vfma.f64	d6, d7, d3
 8018aee:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8018b70 <__kernel_cos+0xc0>
 8018af2:	4b23      	ldr	r3, [pc, #140]	; (8018b80 <__kernel_cos+0xd0>)
 8018af4:	eea6 7b03 	vfma.f64	d7, d6, d3
 8018af8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8018b78 <__kernel_cos+0xc8>
 8018afc:	4299      	cmp	r1, r3
 8018afe:	eea7 6b03 	vfma.f64	d6, d7, d3
 8018b02:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8018b06:	ee26 5b03 	vmul.f64	d5, d6, d3
 8018b0a:	ee23 7b07 	vmul.f64	d7, d3, d7
 8018b0e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8018b12:	eea3 6b05 	vfma.f64	d6, d3, d5
 8018b16:	dc04      	bgt.n	8018b22 <__kernel_cos+0x72>
 8018b18:	ee37 6b46 	vsub.f64	d6, d7, d6
 8018b1c:	ee34 0b46 	vsub.f64	d0, d4, d6
 8018b20:	4770      	bx	lr
 8018b22:	4b18      	ldr	r3, [pc, #96]	; (8018b84 <__kernel_cos+0xd4>)
 8018b24:	4299      	cmp	r1, r3
 8018b26:	dc0d      	bgt.n	8018b44 <__kernel_cos+0x94>
 8018b28:	2200      	movs	r2, #0
 8018b2a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8018b2e:	ec43 2b15 	vmov	d5, r2, r3
 8018b32:	ee34 0b45 	vsub.f64	d0, d4, d5
 8018b36:	ee37 7b45 	vsub.f64	d7, d7, d5
 8018b3a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018b3e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8018b42:	4770      	bx	lr
 8018b44:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8018b48:	e7f3      	b.n	8018b32 <__kernel_cos+0x82>
 8018b4a:	eeb0 0b44 	vmov.f64	d0, d4
 8018b4e:	4770      	bx	lr
 8018b50:	be8838d4 	.word	0xbe8838d4
 8018b54:	bda8fae9 	.word	0xbda8fae9
 8018b58:	bdb4b1c4 	.word	0xbdb4b1c4
 8018b5c:	3e21ee9e 	.word	0x3e21ee9e
 8018b60:	809c52ad 	.word	0x809c52ad
 8018b64:	be927e4f 	.word	0xbe927e4f
 8018b68:	19cb1590 	.word	0x19cb1590
 8018b6c:	3efa01a0 	.word	0x3efa01a0
 8018b70:	16c15177 	.word	0x16c15177
 8018b74:	bf56c16c 	.word	0xbf56c16c
 8018b78:	5555554c 	.word	0x5555554c
 8018b7c:	3fa55555 	.word	0x3fa55555
 8018b80:	3fd33332 	.word	0x3fd33332
 8018b84:	3fe90000 	.word	0x3fe90000

08018b88 <__kernel_rem_pio2>:
 8018b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b8c:	ed2d 8b06 	vpush	{d8-d10}
 8018b90:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8018b94:	469b      	mov	fp, r3
 8018b96:	460f      	mov	r7, r1
 8018b98:	4bcf      	ldr	r3, [pc, #828]	; (8018ed8 <__kernel_rem_pio2+0x350>)
 8018b9a:	99a0      	ldr	r1, [sp, #640]	; 0x280
 8018b9c:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8018ba0:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8018ba4:	9000      	str	r0, [sp, #0]
 8018ba6:	f112 0f14 	cmn.w	r2, #20
 8018baa:	bfa8      	it	ge
 8018bac:	2318      	movge	r3, #24
 8018bae:	f10b 31ff 	add.w	r1, fp, #4294967295
 8018bb2:	bfb8      	it	lt
 8018bb4:	2300      	movlt	r3, #0
 8018bb6:	f06f 0417 	mvn.w	r4, #23
 8018bba:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8018ec0 <__kernel_rem_pio2+0x338>
 8018bbe:	bfa4      	itt	ge
 8018bc0:	f1a2 0a03 	subge.w	sl, r2, #3
 8018bc4:	fb9a f3f3 	sdivge	r3, sl, r3
 8018bc8:	fb03 4404 	mla	r4, r3, r4, r4
 8018bcc:	1a5d      	subs	r5, r3, r1
 8018bce:	4414      	add	r4, r2
 8018bd0:	eb09 0601 	add.w	r6, r9, r1
 8018bd4:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8018bd8:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 8018bdc:	2200      	movs	r2, #0
 8018bde:	42b2      	cmp	r2, r6
 8018be0:	dd12      	ble.n	8018c08 <__kernel_rem_pio2+0x80>
 8018be2:	aa18      	add	r2, sp, #96	; 0x60
 8018be4:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8018be8:	460e      	mov	r6, r1
 8018bea:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 8018bee:	f1cb 0a01 	rsb	sl, fp, #1
 8018bf2:	eb0a 0006 	add.w	r0, sl, r6
 8018bf6:	4581      	cmp	r9, r0
 8018bf8:	db25      	blt.n	8018c46 <__kernel_rem_pio2+0xbe>
 8018bfa:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8018ec0 <__kernel_rem_pio2+0x338>
 8018bfe:	f8dd e000 	ldr.w	lr, [sp]
 8018c02:	4615      	mov	r5, r2
 8018c04:	2000      	movs	r0, #0
 8018c06:	e015      	b.n	8018c34 <__kernel_rem_pio2+0xac>
 8018c08:	42d5      	cmn	r5, r2
 8018c0a:	d409      	bmi.n	8018c20 <__kernel_rem_pio2+0x98>
 8018c0c:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8018c10:	ee07 0a90 	vmov	s15, r0
 8018c14:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8018c18:	eca8 7b02 	vstmia	r8!, {d7}
 8018c1c:	3201      	adds	r2, #1
 8018c1e:	e7de      	b.n	8018bde <__kernel_rem_pio2+0x56>
 8018c20:	eeb0 7b46 	vmov.f64	d7, d6
 8018c24:	e7f8      	b.n	8018c18 <__kernel_rem_pio2+0x90>
 8018c26:	ecbe 5b02 	vldmia	lr!, {d5}
 8018c2a:	ed95 6b00 	vldr	d6, [r5]
 8018c2e:	3001      	adds	r0, #1
 8018c30:	eea5 7b06 	vfma.f64	d7, d5, d6
 8018c34:	4288      	cmp	r0, r1
 8018c36:	f1a5 0508 	sub.w	r5, r5, #8
 8018c3a:	ddf4      	ble.n	8018c26 <__kernel_rem_pio2+0x9e>
 8018c3c:	eca8 7b02 	vstmia	r8!, {d7}
 8018c40:	3208      	adds	r2, #8
 8018c42:	3601      	adds	r6, #1
 8018c44:	e7d5      	b.n	8018bf2 <__kernel_rem_pio2+0x6a>
 8018c46:	aa04      	add	r2, sp, #16
 8018c48:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8018ec8 <__kernel_rem_pio2+0x340>
 8018c4c:	ed9f aba0 	vldr	d10, [pc, #640]	; 8018ed0 <__kernel_rem_pio2+0x348>
 8018c50:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8018c54:	9201      	str	r2, [sp, #4]
 8018c56:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 8018c5a:	464e      	mov	r6, r9
 8018c5c:	ab90      	add	r3, sp, #576	; 0x240
 8018c5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8018c62:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8018c66:	ab04      	add	r3, sp, #16
 8018c68:	4618      	mov	r0, r3
 8018c6a:	4632      	mov	r2, r6
 8018c6c:	2a00      	cmp	r2, #0
 8018c6e:	dc4e      	bgt.n	8018d0e <__kernel_rem_pio2+0x186>
 8018c70:	4620      	mov	r0, r4
 8018c72:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8018c76:	f000 fadf 	bl	8019238 <scalbn>
 8018c7a:	eeb0 8b40 	vmov.f64	d8, d0
 8018c7e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8018c82:	ee28 0b00 	vmul.f64	d0, d8, d0
 8018c86:	f000 fa63 	bl	8019150 <floor>
 8018c8a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8018c8e:	eea0 8b47 	vfms.f64	d8, d0, d7
 8018c92:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8018c96:	2c00      	cmp	r4, #0
 8018c98:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8018c9c:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8018ca0:	ee38 8b40 	vsub.f64	d8, d8, d0
 8018ca4:	ee17 8a90 	vmov	r8, s15
 8018ca8:	dd46      	ble.n	8018d38 <__kernel_rem_pio2+0x1b0>
 8018caa:	1e70      	subs	r0, r6, #1
 8018cac:	aa04      	add	r2, sp, #16
 8018cae:	f1c4 0c18 	rsb	ip, r4, #24
 8018cb2:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8018cb6:	fa45 f20c 	asr.w	r2, r5, ip
 8018cba:	4490      	add	r8, r2
 8018cbc:	fa02 f20c 	lsl.w	r2, r2, ip
 8018cc0:	1aad      	subs	r5, r5, r2
 8018cc2:	aa04      	add	r2, sp, #16
 8018cc4:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8018cc8:	f1c4 0217 	rsb	r2, r4, #23
 8018ccc:	4115      	asrs	r5, r2
 8018cce:	2d00      	cmp	r5, #0
 8018cd0:	dd41      	ble.n	8018d56 <__kernel_rem_pio2+0x1ce>
 8018cd2:	f04f 0c00 	mov.w	ip, #0
 8018cd6:	f108 0801 	add.w	r8, r8, #1
 8018cda:	4660      	mov	r0, ip
 8018cdc:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8018ce0:	4566      	cmp	r6, ip
 8018ce2:	dc69      	bgt.n	8018db8 <__kernel_rem_pio2+0x230>
 8018ce4:	2c00      	cmp	r4, #0
 8018ce6:	dd03      	ble.n	8018cf0 <__kernel_rem_pio2+0x168>
 8018ce8:	2c01      	cmp	r4, #1
 8018cea:	d076      	beq.n	8018dda <__kernel_rem_pio2+0x252>
 8018cec:	2c02      	cmp	r4, #2
 8018cee:	d07f      	beq.n	8018df0 <__kernel_rem_pio2+0x268>
 8018cf0:	2d02      	cmp	r5, #2
 8018cf2:	d130      	bne.n	8018d56 <__kernel_rem_pio2+0x1ce>
 8018cf4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8018cf8:	ee30 8b48 	vsub.f64	d8, d0, d8
 8018cfc:	b358      	cbz	r0, 8018d56 <__kernel_rem_pio2+0x1ce>
 8018cfe:	4620      	mov	r0, r4
 8018d00:	9102      	str	r1, [sp, #8]
 8018d02:	f000 fa99 	bl	8019238 <scalbn>
 8018d06:	9902      	ldr	r1, [sp, #8]
 8018d08:	ee38 8b40 	vsub.f64	d8, d8, d0
 8018d0c:	e023      	b.n	8018d56 <__kernel_rem_pio2+0x1ce>
 8018d0e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8018d12:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8018d16:	3a01      	subs	r2, #1
 8018d18:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8018d1c:	ad68      	add	r5, sp, #416	; 0x1a0
 8018d1e:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8018d22:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8018d26:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8018d2a:	eca0 0a01 	vstmia	r0!, {s0}
 8018d2e:	ed95 0b00 	vldr	d0, [r5]
 8018d32:	ee37 0b00 	vadd.f64	d0, d7, d0
 8018d36:	e799      	b.n	8018c6c <__kernel_rem_pio2+0xe4>
 8018d38:	d105      	bne.n	8018d46 <__kernel_rem_pio2+0x1be>
 8018d3a:	1e72      	subs	r2, r6, #1
 8018d3c:	a804      	add	r0, sp, #16
 8018d3e:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8018d42:	15ed      	asrs	r5, r5, #23
 8018d44:	e7c3      	b.n	8018cce <__kernel_rem_pio2+0x146>
 8018d46:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8018d4a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8018d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d52:	da2f      	bge.n	8018db4 <__kernel_rem_pio2+0x22c>
 8018d54:	2500      	movs	r5, #0
 8018d56:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d5e:	f040 8087 	bne.w	8018e70 <__kernel_rem_pio2+0x2e8>
 8018d62:	1e73      	subs	r3, r6, #1
 8018d64:	4618      	mov	r0, r3
 8018d66:	f04f 0c00 	mov.w	ip, #0
 8018d6a:	4548      	cmp	r0, r9
 8018d6c:	da47      	bge.n	8018dfe <__kernel_rem_pio2+0x276>
 8018d6e:	f1bc 0f00 	cmp.w	ip, #0
 8018d72:	d070      	beq.n	8018e56 <__kernel_rem_pio2+0x2ce>
 8018d74:	aa04      	add	r2, sp, #16
 8018d76:	3c18      	subs	r4, #24
 8018d78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8018d7c:	2a00      	cmp	r2, #0
 8018d7e:	d075      	beq.n	8018e6c <__kernel_rem_pio2+0x2e4>
 8018d80:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8018d84:	4620      	mov	r0, r4
 8018d86:	9300      	str	r3, [sp, #0]
 8018d88:	f000 fa56 	bl	8019238 <scalbn>
 8018d8c:	9b00      	ldr	r3, [sp, #0]
 8018d8e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8018ec8 <__kernel_rem_pio2+0x340>
 8018d92:	461a      	mov	r2, r3
 8018d94:	2a00      	cmp	r2, #0
 8018d96:	f280 80ac 	bge.w	8018ef2 <__kernel_rem_pio2+0x36a>
 8018d9a:	4619      	mov	r1, r3
 8018d9c:	2000      	movs	r0, #0
 8018d9e:	2900      	cmp	r1, #0
 8018da0:	f2c0 80cd 	blt.w	8018f3e <__kernel_rem_pio2+0x3b6>
 8018da4:	aa68      	add	r2, sp, #416	; 0x1a0
 8018da6:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 8018daa:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8018ec0 <__kernel_rem_pio2+0x338>
 8018dae:	4e4b      	ldr	r6, [pc, #300]	; (8018edc <__kernel_rem_pio2+0x354>)
 8018db0:	2200      	movs	r2, #0
 8018db2:	e0b8      	b.n	8018f26 <__kernel_rem_pio2+0x39e>
 8018db4:	2502      	movs	r5, #2
 8018db6:	e78c      	b.n	8018cd2 <__kernel_rem_pio2+0x14a>
 8018db8:	681a      	ldr	r2, [r3, #0]
 8018dba:	b948      	cbnz	r0, 8018dd0 <__kernel_rem_pio2+0x248>
 8018dbc:	b11a      	cbz	r2, 8018dc6 <__kernel_rem_pio2+0x23e>
 8018dbe:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8018dc2:	601a      	str	r2, [r3, #0]
 8018dc4:	2201      	movs	r2, #1
 8018dc6:	f10c 0c01 	add.w	ip, ip, #1
 8018dca:	3304      	adds	r3, #4
 8018dcc:	4610      	mov	r0, r2
 8018dce:	e787      	b.n	8018ce0 <__kernel_rem_pio2+0x158>
 8018dd0:	ebae 0202 	sub.w	r2, lr, r2
 8018dd4:	601a      	str	r2, [r3, #0]
 8018dd6:	4602      	mov	r2, r0
 8018dd8:	e7f5      	b.n	8018dc6 <__kernel_rem_pio2+0x23e>
 8018dda:	1e72      	subs	r2, r6, #1
 8018ddc:	ab04      	add	r3, sp, #16
 8018dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018de2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8018de6:	f10d 0c10 	add.w	ip, sp, #16
 8018dea:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 8018dee:	e77f      	b.n	8018cf0 <__kernel_rem_pio2+0x168>
 8018df0:	1e72      	subs	r2, r6, #1
 8018df2:	ab04      	add	r3, sp, #16
 8018df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018df8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8018dfc:	e7f3      	b.n	8018de6 <__kernel_rem_pio2+0x25e>
 8018dfe:	aa04      	add	r2, sp, #16
 8018e00:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8018e04:	3801      	subs	r0, #1
 8018e06:	ea4c 0c02 	orr.w	ip, ip, r2
 8018e0a:	e7ae      	b.n	8018d6a <__kernel_rem_pio2+0x1e2>
 8018e0c:	3001      	adds	r0, #1
 8018e0e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8018e12:	2a00      	cmp	r2, #0
 8018e14:	d0fa      	beq.n	8018e0c <__kernel_rem_pio2+0x284>
 8018e16:	eb06 020b 	add.w	r2, r6, fp
 8018e1a:	ad18      	add	r5, sp, #96	; 0x60
 8018e1c:	1c73      	adds	r3, r6, #1
 8018e1e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8018e22:	4406      	add	r6, r0
 8018e24:	429e      	cmp	r6, r3
 8018e26:	f6ff af19 	blt.w	8018c5c <__kernel_rem_pio2+0xd4>
 8018e2a:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8018e2e:	9d00      	ldr	r5, [sp, #0]
 8018e30:	ee07 0a90 	vmov	s15, r0
 8018e34:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8018e38:	2000      	movs	r0, #0
 8018e3a:	eca2 7b02 	vstmia	r2!, {d7}
 8018e3e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8018ec0 <__kernel_rem_pio2+0x338>
 8018e42:	4694      	mov	ip, r2
 8018e44:	4288      	cmp	r0, r1
 8018e46:	dd09      	ble.n	8018e5c <__kernel_rem_pio2+0x2d4>
 8018e48:	a868      	add	r0, sp, #416	; 0x1a0
 8018e4a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8018e4e:	ed80 7b00 	vstr	d7, [r0]
 8018e52:	3301      	adds	r3, #1
 8018e54:	e7e6      	b.n	8018e24 <__kernel_rem_pio2+0x29c>
 8018e56:	9b01      	ldr	r3, [sp, #4]
 8018e58:	2001      	movs	r0, #1
 8018e5a:	e7d8      	b.n	8018e0e <__kernel_rem_pio2+0x286>
 8018e5c:	ecb5 5b02 	vldmia	r5!, {d5}
 8018e60:	ed3c 6b02 	vldmdb	ip!, {d6}
 8018e64:	3001      	adds	r0, #1
 8018e66:	eea5 7b06 	vfma.f64	d7, d5, d6
 8018e6a:	e7eb      	b.n	8018e44 <__kernel_rem_pio2+0x2bc>
 8018e6c:	3b01      	subs	r3, #1
 8018e6e:	e781      	b.n	8018d74 <__kernel_rem_pio2+0x1ec>
 8018e70:	4260      	negs	r0, r4
 8018e72:	eeb0 0b48 	vmov.f64	d0, d8
 8018e76:	f000 f9df 	bl	8019238 <scalbn>
 8018e7a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8018ed0 <__kernel_rem_pio2+0x348>
 8018e7e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8018e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e86:	db2b      	blt.n	8018ee0 <__kernel_rem_pio2+0x358>
 8018e88:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8018ec8 <__kernel_rem_pio2+0x340>
 8018e8c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8018e90:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8018e94:	aa04      	add	r2, sp, #16
 8018e96:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8018e9a:	eea5 0b46 	vfms.f64	d0, d5, d6
 8018e9e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8018ea2:	a904      	add	r1, sp, #16
 8018ea4:	ee10 3a10 	vmov	r3, s0
 8018ea8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8018eac:	ee17 2a10 	vmov	r2, s14
 8018eb0:	1c73      	adds	r3, r6, #1
 8018eb2:	3418      	adds	r4, #24
 8018eb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018eb8:	e762      	b.n	8018d80 <__kernel_rem_pio2+0x1f8>
 8018eba:	bf00      	nop
 8018ebc:	f3af 8000 	nop.w
	...
 8018ecc:	3e700000 	.word	0x3e700000
 8018ed0:	00000000 	.word	0x00000000
 8018ed4:	41700000 	.word	0x41700000
 8018ed8:	08019ba0 	.word	0x08019ba0
 8018edc:	08019b60 	.word	0x08019b60
 8018ee0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8018ee4:	aa04      	add	r2, sp, #16
 8018ee6:	ee10 3a10 	vmov	r3, s0
 8018eea:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8018eee:	4633      	mov	r3, r6
 8018ef0:	e746      	b.n	8018d80 <__kernel_rem_pio2+0x1f8>
 8018ef2:	a804      	add	r0, sp, #16
 8018ef4:	a968      	add	r1, sp, #416	; 0x1a0
 8018ef6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8018efa:	9000      	str	r0, [sp, #0]
 8018efc:	ee07 0a90 	vmov	s15, r0
 8018f00:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8018f04:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8018f08:	3a01      	subs	r2, #1
 8018f0a:	ee27 7b00 	vmul.f64	d7, d7, d0
 8018f0e:	ee20 0b06 	vmul.f64	d0, d0, d6
 8018f12:	ed81 7b00 	vstr	d7, [r1]
 8018f16:	e73d      	b.n	8018d94 <__kernel_rem_pio2+0x20c>
 8018f18:	ecb6 5b02 	vldmia	r6!, {d5}
 8018f1c:	ecb4 6b02 	vldmia	r4!, {d6}
 8018f20:	3201      	adds	r2, #1
 8018f22:	eea5 7b06 	vfma.f64	d7, d5, d6
 8018f26:	454a      	cmp	r2, r9
 8018f28:	dc01      	bgt.n	8018f2e <__kernel_rem_pio2+0x3a6>
 8018f2a:	4290      	cmp	r0, r2
 8018f2c:	daf4      	bge.n	8018f18 <__kernel_rem_pio2+0x390>
 8018f2e:	aa40      	add	r2, sp, #256	; 0x100
 8018f30:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8018f34:	ed82 7b00 	vstr	d7, [r2]
 8018f38:	3901      	subs	r1, #1
 8018f3a:	3001      	adds	r0, #1
 8018f3c:	e72f      	b.n	8018d9e <__kernel_rem_pio2+0x216>
 8018f3e:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8018f40:	2a02      	cmp	r2, #2
 8018f42:	dc0a      	bgt.n	8018f5a <__kernel_rem_pio2+0x3d2>
 8018f44:	2a00      	cmp	r2, #0
 8018f46:	dc5a      	bgt.n	8018ffe <__kernel_rem_pio2+0x476>
 8018f48:	d039      	beq.n	8018fbe <__kernel_rem_pio2+0x436>
 8018f4a:	f008 0007 	and.w	r0, r8, #7
 8018f4e:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8018f52:	ecbd 8b06 	vpop	{d8-d10}
 8018f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f5a:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8018f5c:	2a03      	cmp	r2, #3
 8018f5e:	d1f4      	bne.n	8018f4a <__kernel_rem_pio2+0x3c2>
 8018f60:	aa40      	add	r2, sp, #256	; 0x100
 8018f62:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8018f66:	4611      	mov	r1, r2
 8018f68:	4618      	mov	r0, r3
 8018f6a:	2800      	cmp	r0, #0
 8018f6c:	f1a1 0108 	sub.w	r1, r1, #8
 8018f70:	dc52      	bgt.n	8019018 <__kernel_rem_pio2+0x490>
 8018f72:	4619      	mov	r1, r3
 8018f74:	2901      	cmp	r1, #1
 8018f76:	f1a2 0208 	sub.w	r2, r2, #8
 8018f7a:	dc5d      	bgt.n	8019038 <__kernel_rem_pio2+0x4b0>
 8018f7c:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8019080 <__kernel_rem_pio2+0x4f8>
 8018f80:	2b01      	cmp	r3, #1
 8018f82:	dc69      	bgt.n	8019058 <__kernel_rem_pio2+0x4d0>
 8018f84:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8018f88:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 8018f8c:	2d00      	cmp	r5, #0
 8018f8e:	d16c      	bne.n	801906a <__kernel_rem_pio2+0x4e2>
 8018f90:	ed87 5b00 	vstr	d5, [r7]
 8018f94:	ed87 6b02 	vstr	d6, [r7, #8]
 8018f98:	ed87 7b04 	vstr	d7, [r7, #16]
 8018f9c:	e7d5      	b.n	8018f4a <__kernel_rem_pio2+0x3c2>
 8018f9e:	aa40      	add	r2, sp, #256	; 0x100
 8018fa0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8018fa4:	ed92 6b00 	vldr	d6, [r2]
 8018fa8:	3b01      	subs	r3, #1
 8018faa:	ee37 7b06 	vadd.f64	d7, d7, d6
 8018fae:	2b00      	cmp	r3, #0
 8018fb0:	daf5      	bge.n	8018f9e <__kernel_rem_pio2+0x416>
 8018fb2:	b10d      	cbz	r5, 8018fb8 <__kernel_rem_pio2+0x430>
 8018fb4:	eeb1 7b47 	vneg.f64	d7, d7
 8018fb8:	ed87 7b00 	vstr	d7, [r7]
 8018fbc:	e7c5      	b.n	8018f4a <__kernel_rem_pio2+0x3c2>
 8018fbe:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8019080 <__kernel_rem_pio2+0x4f8>
 8018fc2:	e7f4      	b.n	8018fae <__kernel_rem_pio2+0x426>
 8018fc4:	a940      	add	r1, sp, #256	; 0x100
 8018fc6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8018fca:	ed91 7b00 	vldr	d7, [r1]
 8018fce:	3a01      	subs	r2, #1
 8018fd0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8018fd4:	2a00      	cmp	r2, #0
 8018fd6:	daf5      	bge.n	8018fc4 <__kernel_rem_pio2+0x43c>
 8018fd8:	b1ad      	cbz	r5, 8019006 <__kernel_rem_pio2+0x47e>
 8018fda:	eeb1 7b46 	vneg.f64	d7, d6
 8018fde:	ed87 7b00 	vstr	d7, [r7]
 8018fe2:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8018fe6:	a942      	add	r1, sp, #264	; 0x108
 8018fe8:	2201      	movs	r2, #1
 8018fea:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018fee:	4293      	cmp	r3, r2
 8018ff0:	da0c      	bge.n	801900c <__kernel_rem_pio2+0x484>
 8018ff2:	b10d      	cbz	r5, 8018ff8 <__kernel_rem_pio2+0x470>
 8018ff4:	eeb1 7b47 	vneg.f64	d7, d7
 8018ff8:	ed87 7b02 	vstr	d7, [r7, #8]
 8018ffc:	e7a5      	b.n	8018f4a <__kernel_rem_pio2+0x3c2>
 8018ffe:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8019080 <__kernel_rem_pio2+0x4f8>
 8019002:	461a      	mov	r2, r3
 8019004:	e7e6      	b.n	8018fd4 <__kernel_rem_pio2+0x44c>
 8019006:	eeb0 7b46 	vmov.f64	d7, d6
 801900a:	e7e8      	b.n	8018fde <__kernel_rem_pio2+0x456>
 801900c:	ecb1 6b02 	vldmia	r1!, {d6}
 8019010:	3201      	adds	r2, #1
 8019012:	ee37 7b06 	vadd.f64	d7, d7, d6
 8019016:	e7ea      	b.n	8018fee <__kernel_rem_pio2+0x466>
 8019018:	ed91 7b00 	vldr	d7, [r1]
 801901c:	ed91 5b02 	vldr	d5, [r1, #8]
 8019020:	3801      	subs	r0, #1
 8019022:	ee37 6b05 	vadd.f64	d6, d7, d5
 8019026:	ee37 7b46 	vsub.f64	d7, d7, d6
 801902a:	ed81 6b00 	vstr	d6, [r1]
 801902e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8019032:	ed81 7b02 	vstr	d7, [r1, #8]
 8019036:	e798      	b.n	8018f6a <__kernel_rem_pio2+0x3e2>
 8019038:	ed92 7b00 	vldr	d7, [r2]
 801903c:	ed92 5b02 	vldr	d5, [r2, #8]
 8019040:	3901      	subs	r1, #1
 8019042:	ee37 6b05 	vadd.f64	d6, d7, d5
 8019046:	ee37 7b46 	vsub.f64	d7, d7, d6
 801904a:	ed82 6b00 	vstr	d6, [r2]
 801904e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8019052:	ed82 7b02 	vstr	d7, [r2, #8]
 8019056:	e78d      	b.n	8018f74 <__kernel_rem_pio2+0x3ec>
 8019058:	aa40      	add	r2, sp, #256	; 0x100
 801905a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801905e:	ed92 6b00 	vldr	d6, [r2]
 8019062:	3b01      	subs	r3, #1
 8019064:	ee37 7b06 	vadd.f64	d7, d7, d6
 8019068:	e78a      	b.n	8018f80 <__kernel_rem_pio2+0x3f8>
 801906a:	eeb1 5b45 	vneg.f64	d5, d5
 801906e:	eeb1 6b46 	vneg.f64	d6, d6
 8019072:	ed87 5b00 	vstr	d5, [r7]
 8019076:	eeb1 7b47 	vneg.f64	d7, d7
 801907a:	ed87 6b02 	vstr	d6, [r7, #8]
 801907e:	e78b      	b.n	8018f98 <__kernel_rem_pio2+0x410>
	...

08019088 <__kernel_sin>:
 8019088:	ee10 3a90 	vmov	r3, s1
 801908c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019090:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8019094:	da04      	bge.n	80190a0 <__kernel_sin+0x18>
 8019096:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801909a:	ee17 3a90 	vmov	r3, s15
 801909e:	b35b      	cbz	r3, 80190f8 <__kernel_sin+0x70>
 80190a0:	ee20 6b00 	vmul.f64	d6, d0, d0
 80190a4:	ee20 5b06 	vmul.f64	d5, d0, d6
 80190a8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8019100 <__kernel_sin+0x78>
 80190ac:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8019108 <__kernel_sin+0x80>
 80190b0:	eea6 4b07 	vfma.f64	d4, d6, d7
 80190b4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8019110 <__kernel_sin+0x88>
 80190b8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80190bc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8019118 <__kernel_sin+0x90>
 80190c0:	eea7 4b06 	vfma.f64	d4, d7, d6
 80190c4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8019120 <__kernel_sin+0x98>
 80190c8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80190cc:	b930      	cbnz	r0, 80190dc <__kernel_sin+0x54>
 80190ce:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8019128 <__kernel_sin+0xa0>
 80190d2:	eea6 4b07 	vfma.f64	d4, d6, d7
 80190d6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80190da:	4770      	bx	lr
 80190dc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80190e0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80190e4:	eea1 7b04 	vfma.f64	d7, d1, d4
 80190e8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80190ec:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8019130 <__kernel_sin+0xa8>
 80190f0:	eea5 1b07 	vfma.f64	d1, d5, d7
 80190f4:	ee30 0b41 	vsub.f64	d0, d0, d1
 80190f8:	4770      	bx	lr
 80190fa:	bf00      	nop
 80190fc:	f3af 8000 	nop.w
 8019100:	5acfd57c 	.word	0x5acfd57c
 8019104:	3de5d93a 	.word	0x3de5d93a
 8019108:	8a2b9ceb 	.word	0x8a2b9ceb
 801910c:	be5ae5e6 	.word	0xbe5ae5e6
 8019110:	57b1fe7d 	.word	0x57b1fe7d
 8019114:	3ec71de3 	.word	0x3ec71de3
 8019118:	19c161d5 	.word	0x19c161d5
 801911c:	bf2a01a0 	.word	0xbf2a01a0
 8019120:	1110f8a6 	.word	0x1110f8a6
 8019124:	3f811111 	.word	0x3f811111
 8019128:	55555549 	.word	0x55555549
 801912c:	bfc55555 	.word	0xbfc55555
 8019130:	55555549 	.word	0x55555549
 8019134:	3fc55555 	.word	0x3fc55555

08019138 <fabs>:
 8019138:	ec51 0b10 	vmov	r0, r1, d0
 801913c:	ee10 2a10 	vmov	r2, s0
 8019140:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019144:	ec43 2b10 	vmov	d0, r2, r3
 8019148:	4770      	bx	lr
 801914a:	0000      	movs	r0, r0
 801914c:	0000      	movs	r0, r0
	...

08019150 <floor>:
 8019150:	ee10 1a90 	vmov	r1, s1
 8019154:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8019158:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801915c:	2b13      	cmp	r3, #19
 801915e:	b530      	push	{r4, r5, lr}
 8019160:	ee10 0a10 	vmov	r0, s0
 8019164:	ee10 5a10 	vmov	r5, s0
 8019168:	dc31      	bgt.n	80191ce <floor+0x7e>
 801916a:	2b00      	cmp	r3, #0
 801916c:	da15      	bge.n	801919a <floor+0x4a>
 801916e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8019228 <floor+0xd8>
 8019172:	ee30 0b07 	vadd.f64	d0, d0, d7
 8019176:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801917a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801917e:	dd07      	ble.n	8019190 <floor+0x40>
 8019180:	2900      	cmp	r1, #0
 8019182:	da4e      	bge.n	8019222 <floor+0xd2>
 8019184:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019188:	4318      	orrs	r0, r3
 801918a:	d001      	beq.n	8019190 <floor+0x40>
 801918c:	4928      	ldr	r1, [pc, #160]	; (8019230 <floor+0xe0>)
 801918e:	2000      	movs	r0, #0
 8019190:	460b      	mov	r3, r1
 8019192:	4602      	mov	r2, r0
 8019194:	ec43 2b10 	vmov	d0, r2, r3
 8019198:	e020      	b.n	80191dc <floor+0x8c>
 801919a:	4a26      	ldr	r2, [pc, #152]	; (8019234 <floor+0xe4>)
 801919c:	411a      	asrs	r2, r3
 801919e:	ea01 0402 	and.w	r4, r1, r2
 80191a2:	4304      	orrs	r4, r0
 80191a4:	d01a      	beq.n	80191dc <floor+0x8c>
 80191a6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8019228 <floor+0xd8>
 80191aa:	ee30 0b07 	vadd.f64	d0, d0, d7
 80191ae:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80191b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191b6:	ddeb      	ble.n	8019190 <floor+0x40>
 80191b8:	2900      	cmp	r1, #0
 80191ba:	bfbe      	ittt	lt
 80191bc:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80191c0:	fa40 f303 	asrlt.w	r3, r0, r3
 80191c4:	18c9      	addlt	r1, r1, r3
 80191c6:	ea21 0102 	bic.w	r1, r1, r2
 80191ca:	2000      	movs	r0, #0
 80191cc:	e7e0      	b.n	8019190 <floor+0x40>
 80191ce:	2b33      	cmp	r3, #51	; 0x33
 80191d0:	dd05      	ble.n	80191de <floor+0x8e>
 80191d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80191d6:	d101      	bne.n	80191dc <floor+0x8c>
 80191d8:	ee30 0b00 	vadd.f64	d0, d0, d0
 80191dc:	bd30      	pop	{r4, r5, pc}
 80191de:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80191e2:	f04f 32ff 	mov.w	r2, #4294967295
 80191e6:	40e2      	lsrs	r2, r4
 80191e8:	4202      	tst	r2, r0
 80191ea:	d0f7      	beq.n	80191dc <floor+0x8c>
 80191ec:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8019228 <floor+0xd8>
 80191f0:	ee30 0b07 	vadd.f64	d0, d0, d7
 80191f4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80191f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191fc:	ddc8      	ble.n	8019190 <floor+0x40>
 80191fe:	2900      	cmp	r1, #0
 8019200:	da02      	bge.n	8019208 <floor+0xb8>
 8019202:	2b14      	cmp	r3, #20
 8019204:	d103      	bne.n	801920e <floor+0xbe>
 8019206:	3101      	adds	r1, #1
 8019208:	ea20 0002 	bic.w	r0, r0, r2
 801920c:	e7c0      	b.n	8019190 <floor+0x40>
 801920e:	2401      	movs	r4, #1
 8019210:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8019214:	fa04 f303 	lsl.w	r3, r4, r3
 8019218:	4418      	add	r0, r3
 801921a:	42a8      	cmp	r0, r5
 801921c:	bf38      	it	cc
 801921e:	1909      	addcc	r1, r1, r4
 8019220:	e7f2      	b.n	8019208 <floor+0xb8>
 8019222:	2000      	movs	r0, #0
 8019224:	4601      	mov	r1, r0
 8019226:	e7b3      	b.n	8019190 <floor+0x40>
 8019228:	8800759c 	.word	0x8800759c
 801922c:	7e37e43c 	.word	0x7e37e43c
 8019230:	bff00000 	.word	0xbff00000
 8019234:	000fffff 	.word	0x000fffff

08019238 <scalbn>:
 8019238:	b082      	sub	sp, #8
 801923a:	ed8d 0b00 	vstr	d0, [sp]
 801923e:	9b01      	ldr	r3, [sp, #4]
 8019240:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8019244:	b9a2      	cbnz	r2, 8019270 <scalbn+0x38>
 8019246:	9a00      	ldr	r2, [sp, #0]
 8019248:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801924c:	4313      	orrs	r3, r2
 801924e:	d03a      	beq.n	80192c6 <scalbn+0x8e>
 8019250:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8019328 <scalbn+0xf0>
 8019254:	4b40      	ldr	r3, [pc, #256]	; (8019358 <scalbn+0x120>)
 8019256:	ee20 7b07 	vmul.f64	d7, d0, d7
 801925a:	4298      	cmp	r0, r3
 801925c:	ed8d 7b00 	vstr	d7, [sp]
 8019260:	da11      	bge.n	8019286 <scalbn+0x4e>
 8019262:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8019330 <scalbn+0xf8>
 8019266:	ed9d 6b00 	vldr	d6, [sp]
 801926a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801926e:	e007      	b.n	8019280 <scalbn+0x48>
 8019270:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8019274:	428a      	cmp	r2, r1
 8019276:	d10a      	bne.n	801928e <scalbn+0x56>
 8019278:	ed9d 7b00 	vldr	d7, [sp]
 801927c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8019280:	ed8d 7b00 	vstr	d7, [sp]
 8019284:	e01f      	b.n	80192c6 <scalbn+0x8e>
 8019286:	9b01      	ldr	r3, [sp, #4]
 8019288:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801928c:	3a36      	subs	r2, #54	; 0x36
 801928e:	4402      	add	r2, r0
 8019290:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8019294:	428a      	cmp	r2, r1
 8019296:	dd0a      	ble.n	80192ae <scalbn+0x76>
 8019298:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8019338 <scalbn+0x100>
 801929c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8019340 <scalbn+0x108>
 80192a0:	eeb0 6b47 	vmov.f64	d6, d7
 80192a4:	9b01      	ldr	r3, [sp, #4]
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	fe27 7b05 	vselge.f64	d7, d7, d5
 80192ac:	e7dd      	b.n	801926a <scalbn+0x32>
 80192ae:	2a00      	cmp	r2, #0
 80192b0:	dd0d      	ble.n	80192ce <scalbn+0x96>
 80192b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80192b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80192ba:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80192be:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80192c2:	e9cd 0100 	strd	r0, r1, [sp]
 80192c6:	ed9d 0b00 	vldr	d0, [sp]
 80192ca:	b002      	add	sp, #8
 80192cc:	4770      	bx	lr
 80192ce:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80192d2:	da18      	bge.n	8019306 <scalbn+0xce>
 80192d4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80192d8:	4298      	cmp	r0, r3
 80192da:	9b01      	ldr	r3, [sp, #4]
 80192dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80192e0:	dd09      	ble.n	80192f6 <scalbn+0xbe>
 80192e2:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8019338 <scalbn+0x100>
 80192e6:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8019340 <scalbn+0x108>
 80192ea:	eeb0 6b47 	vmov.f64	d6, d7
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	fe07 7b05 	vseleq.f64	d7, d7, d5
 80192f4:	e7b9      	b.n	801926a <scalbn+0x32>
 80192f6:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8019330 <scalbn+0xf8>
 80192fa:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8019348 <scalbn+0x110>
 80192fe:	eeb0 6b47 	vmov.f64	d6, d7
 8019302:	2b00      	cmp	r3, #0
 8019304:	e7f4      	b.n	80192f0 <scalbn+0xb8>
 8019306:	e9dd 0100 	ldrd	r0, r1, [sp]
 801930a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801930e:	3236      	adds	r2, #54	; 0x36
 8019310:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019314:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8019318:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8019350 <scalbn+0x118>
 801931c:	ec41 0b17 	vmov	d7, r0, r1
 8019320:	e7a3      	b.n	801926a <scalbn+0x32>
 8019322:	bf00      	nop
 8019324:	f3af 8000 	nop.w
 8019328:	00000000 	.word	0x00000000
 801932c:	43500000 	.word	0x43500000
 8019330:	c2f8f359 	.word	0xc2f8f359
 8019334:	01a56e1f 	.word	0x01a56e1f
 8019338:	8800759c 	.word	0x8800759c
 801933c:	7e37e43c 	.word	0x7e37e43c
 8019340:	8800759c 	.word	0x8800759c
 8019344:	fe37e43c 	.word	0xfe37e43c
 8019348:	c2f8f359 	.word	0xc2f8f359
 801934c:	81a56e1f 	.word	0x81a56e1f
 8019350:	00000000 	.word	0x00000000
 8019354:	3c900000 	.word	0x3c900000
 8019358:	ffff3cb0 	.word	0xffff3cb0

0801935c <_init>:
 801935c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801935e:	bf00      	nop
 8019360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019362:	bc08      	pop	{r3}
 8019364:	469e      	mov	lr, r3
 8019366:	4770      	bx	lr

08019368 <_fini>:
 8019368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801936a:	bf00      	nop
 801936c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801936e:	bc08      	pop	{r3}
 8019370:	469e      	mov	lr, r3
 8019372:	4770      	bx	lr
